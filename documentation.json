{
    "pipes": [
        {
            "name": "ColorStatusActivePipe",
            "id": "pipe-ColorStatusActivePipe-9069755b8ff3c0fc9a7b3aa91783199bf4ab5c476d620d0c45a7e2a3771b0be5ca22d96b264f92611f8afa0b5326241f3069993e1b0cc3ccbee87eb46e2b3750",
            "file": "src/app/shared/pipe/color-status-active.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "colorStatusActive",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'colorStatusActive',\r\n    standalone: true\r\n})\r\nexport class ColorStatusActivePipe implements PipeTransform {\r\n\r\n  transform({ active }: any, prefix: string = ''): any {\r\n    const color = active === true ? 'success' : active === false ? 'warning' : 'default';\r\n    return prefix + color;\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "DiffDatePipe",
            "id": "pipe-DiffDatePipe-58c2ca101d7d357bb6cd81e73105fc5da56a18955f3d25b1c4370791b11fe3907696a8ba132c532fa54e9d452c994fa1ba265d2304fa299af0c71418188a67be",
            "file": "src/app/shared/pipe/diff-date.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "referenceDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "new Date()"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "referenceDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "new Date()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "diffDate",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { parseISO, intlFormatDistance } from 'date-fns';\r\n@Pipe({\r\n  name: 'diffDate',\r\n  standalone: true,\r\n})\r\nexport class DiffDatePipe implements PipeTransform {\r\n  transform(value: string, referenceDate: Date = new Date()): any {\r\n    const date = parseISO(value);\r\n    return intlFormatDistance(date, referenceDate);\r\n  }\r\n}\r\n"
        },
        {
            "name": "EnableQuotationPipe",
            "id": "pipe-EnableQuotationPipe-7bff69ae190fd959e7d1af41a9534c7123ad2d0434d3c3ca62669b5df7fb8b35bbacce2baee5c984665107bb87f6dfd47ab82d99eb800bc568378a4b931c215c",
            "file": "src/app/shared/pipe/enable-quotation.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "enable",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "enable",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "enableQuotation",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'enableQuotation',\r\n    standalone: true\r\n})\r\nexport class EnableQuotationPipe implements PipeTransform {\r\n\r\n    transform(enable: any, args: any[]): boolean {\r\n        const [authUser, quotation] = args;\r\n        if (authUser.id != quotation.seller_id && authUser.id != quotation.project_manager_id && quotation.last_quotation_workflow?.status == 'cotizando') {\r\n            enable = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n}\r\n"
        },
        {
            "name": "ExecuteFunctionListPipe",
            "id": "pipe-ExecuteFunctionListPipe-f827fd740516043068c25bd4f0c29fef371393520e34b20319b8cf6f68d7eb80e0d32209c837f84e64c8079bc860d1671bf48d64617ca59d325fae8dd1389d6e",
            "file": "src/app/shared/components/item-list-template/execute-function-list.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "[, ]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "[, ]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "executeFunctionList",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'executeFunctionList',\r\n  standalone: true\r\n})\r\nexport class ExecuteFunctionListPipe implements PipeTransform {\r\n\r\n  transform(data: any, [item, index]: [item: any, index: number]): any {\r\n    if(data instanceof Function) return data(item, index);\r\n    return data;\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "ExecuteFunctionPipe",
            "id": "pipe-ExecuteFunctionPipe-03effac107e67bd082fd775553242fdd0ef4e2fe03ab91ec411e1045305b5430532bde2ea842b9d153210f898b29b8fef61f10888139c75f4d5740514a2c5503",
            "file": "src/app/shared/pipe/execute-function.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "fn",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parameter",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parameter",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "executeFunction",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'executeFunction',\r\n  standalone: true\r\n})\r\nexport class ExecuteFunctionPipe implements PipeTransform {\r\n\r\n  transform(fn: Function, parameter: any): any {\r\n    return fn(parameter);\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "FirstLetterNamePipe",
            "id": "pipe-FirstLetterNamePipe-7d1cc8d76166078578d1d216a59ba554b4beffa8322528a40bea69720f2763b27c36e260302fdba91a8d75b85c162ed7b30f4189a5a2e57f89cb8e70331956ca",
            "file": "src/app/shared/pipe/first-letter-name.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        },
                        {
                            "name": "numberLetter",
                            "type": "\"1\" | \"2\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "numberLetter",
                            "type": "\"1\" | \"2\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "firstLetterName",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'firstLetterName',\r\n  standalone: true,\r\n})\r\nexport class FirstLetterNamePipe implements PipeTransform {\r\n\r\n  transform(value: string = '', numberLetter: 1 | 2 = 2): unknown {\r\n    let keysName = '';\r\n    const array = value.split(' ');\r\n    if(array.length > 1) {\r\n      if (numberLetter > 0) keysName += array[0].substring(0, 1);\r\n      if (numberLetter > 1) keysName += array[1].substring(0, 1);\r\n    } else {\r\n      if (numberLetter > 0) keysName += array[0].substring(0, 1);\r\n      if (numberLetter > 1) keysName += array[0].substring(1, 2);\r\n    }\r\n    return keysName.toUpperCase();\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "FirstLetterUppercasePipe",
            "id": "pipe-FirstLetterUppercasePipe-24d46721d624a34b9487468e28a205e720407ad70225764bb2a1400d4bcaf6af96842590330b99fd48d4a975515dc82c85952d79c54eb02baa7a2a48ebb9704c",
            "file": "src/app/shared/pipe/first-letter-uppercase.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "firstLetterUppercase",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'firstLetterUppercase',\r\n  standalone: true\r\n})\r\nexport class FirstLetterUppercasePipe implements PipeTransform {\r\n\r\n  transform(value: string | null): string | null {\r\n    if(value) return value.charAt(0).toUpperCase() + value.slice(1);\r\n    return value;\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "GeneratePathUrlPipe",
            "id": "pipe-GeneratePathUrlPipe-4f729c6b609e18d385c9dc99a419cc717a51a0c7ee88e840753ed3296ad961c64f01dc9dd067e6521eef304aedb5d229309c6bc5487b951e82f43f6d21fc2cb0",
            "file": "src/app/shared/pipe/generate-path-url.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "cleanPath",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "valueConcat",
                            "type": "string | undefined | null | boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "valueConcat",
                            "type": "string | undefined | null | boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "generatePathUrl",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'generatePathUrl',\r\n  standalone: true\r\n})\r\nexport class GeneratePathUrlPipe implements PipeTransform {\r\n\r\n  transform(prefix: string, valueConcat: string | undefined | null | boolean): string {\r\n    const path = this.cleanPath(prefix);\r\n    return valueConcat ? `${path}/${valueConcat}` : path;\r\n  }\r\n\r\n  private cleanPath(path: string) {\r\n    return path.endsWith('/') ? path.slice(0, -1) : path;\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "GetDocumentTypePipe",
            "id": "pipe-GetDocumentTypePipe-21c533b8de34f59f3fa872b8bf4563cfa599ce25b0b80ae69ec94fa82604d005c91b16da005adf420697a2b367f598b730b24ad127c85a2caec85991faa5d000",
            "file": "src/app/shared/pipe/get-document-type.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "document_number",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "document_number",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "getDocumentType",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'getDocumentType',\r\n    standalone: true\r\n})\r\nexport class GetDocumentTypePipe implements PipeTransform {\r\n\r\n  transform(document_number: string, args?: any): string {\r\n    if(document_number.length == 8){\r\n      return 'DNI'\r\n    } else if(document_number.length == 11){\r\n      return 'RUC'\r\n    } else {\r\n      return 'Número de documento'\r\n    }\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "GetItemFromLocalDataPipe",
            "id": "pipe-GetItemFromLocalDataPipe-55b113b5b1d70e24ee2d33cc876318b5aecdba1db5e5430bee26e2e205dd3968306202ee8651d248245a99a7294f26919438fb46701e1bc702c618fa12f26217",
            "file": "src/app/shared/pipe/get-item-from-local-data.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "databaseStorage",
                    "defaultValue": "inject(DatabaseStorageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "id",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nameModuleDatabase",
                            "type": "NameModuleDatabase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T | null | undefined>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nameModuleDatabase",
                            "type": "NameModuleDatabase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "getItemFromLocalData",
            "sourceCode": "import { Pipe, PipeTransform, inject } from '@angular/core';\r\nimport { DatabaseStorageService, NameModuleDatabase } from '@service/database-storage.service';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Pipe({\r\n  name: 'getItemFromLocalData',\r\n  standalone: true\r\n})\r\nexport class GetItemFromLocalDataPipe implements PipeTransform {\r\n\r\n  private databaseStorage = inject(DatabaseStorageService);\r\n\r\n  transform<T = any>(id: number | null, nameModuleDatabase: NameModuleDatabase): Observable<T | null | undefined> {\r\n    return new Observable((subscriber) => {\r\n      if(!id) {\r\n        subscriber.next(null);\r\n        subscriber.complete();\r\n      } else {\r\n        this.databaseStorage.getOne<T>(nameModuleDatabase, id).then(item => {\r\n          subscriber.next(item);\r\n          subscriber.complete();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "GetKeyItemPipe",
            "id": "pipe-GetKeyItemPipe-a5617c842ebfd4bc7898d5d3328d481be1e3175dd091249c766d47c47ffa5f100f903044ca06a554dcb3ae72321a1967d70e0ec647712e053f60b90789903e1a",
            "file": "src/app/shared/pipe/get-key-item.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "item",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string | ",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "getKeyItem",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'getKeyItem',\r\n    standalone: true,\r\n})\r\nexport class GetKeyItemPipe implements PipeTransform {\r\n\r\n    transform(item: { [key: string]: any }, key: string | false): any {\r\n        if (!item) return '';\r\n        if (!key) return '';\r\n        const keys = key.split('.') ?? [];\r\n        if (!keys.length) return '';\r\n        try {\r\n            if (keys.length == 6) return item[keys[0]][keys[1]][keys[2]][keys[3]][keys[4]][keys[5]] ?? ''\r\n            if (keys.length == 5) return item[keys[0]][keys[1]][keys[2]][keys[3]][keys[4]] ?? ''\r\n            if (keys.length == 4) return item[keys[0]][keys[1]][keys[2]][keys[3]] ?? ''\r\n            if (keys.length == 3) return item[keys[0]][keys[1]][keys[2]] ?? ''\r\n            if (keys.length == 2) return item[keys[0]][keys[1]] ?? ''\r\n            if (keys.length == 1) return item[keys[0]] ?? ''\r\n        } catch (error) {\r\n            return '';\r\n        }\r\n        return '';\r\n    }\r\n\r\n}\r\n"
        },
        {
            "name": "GetMixedValuePipe",
            "id": "pipe-GetMixedValuePipe-478f49fac031a415765b32eba41f8b2a09bdcce95d958e9f3af34f69c22f6fdb627e27e6295b473fa55d7cea007738e0b51e70179d4ec3d6e7d061d4d73aa530",
            "file": "src/app/shared/pipe/get-mixed-value.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parameter",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parameter",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "getMixedValue",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'getMixedValue',\r\n  standalone: true\r\n})\r\nexport class GetMixedValuePipe implements PipeTransform {\r\n\r\n  transform(value: any, parameter: any): any {\r\n    if(typeof value === 'function') {\r\n      return value(parameter);\r\n    } else {\r\n      return value;\r\n    }\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "GetNameMonthPipe",
            "id": "pipe-GetNameMonthPipe-5bfbef92a6f2996e72db391a3ce6992e64a276ff854c49e2f34fdc296515f114a19fc36db86054709fc3a5d04dd22d64728302a7a5d8f49afc7a01757b6e7644",
            "file": "src/app/shared/pipe/get-name-month.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "month",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "getNameMonth",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'getNameMonth',\r\n  standalone: true\r\n})\r\nexport class GetNameMonthPipe implements PipeTransform {\r\n\r\n  transform(month: number | string): string {\r\n    return month == 1 ? 'Enero' : month == 2 ? 'Febrero' : month == 3 ? 'Marzo' : month == 4 ? 'Abril' : month == 5 ? 'Mayo' : month == 6 ? 'Junio' : month == 7 ? 'Julio' : month == 8 ? 'Agosto' : month == 9 ? 'Septiembre' : month == 10 ? 'Octubre' : month == 11 ? 'Noviembre' : month == 12 ? 'Diciembre' : 'xx';;\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "GetUserByIdPipe",
            "id": "pipe-GetUserByIdPipe-c8b79666b8f1c97c3fc5ba071b28d22f7866701ea59a0b547b0481df1e59a95427437c470276cd0b61600163b8d0216782ed3a3cdbf03e47eee4b3feb201b593",
            "file": "src/app/shared/pipe/get-user-by-id.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "databaseStorage",
                    "defaultValue": "inject(DatabaseStorageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "id",
                            "type": "number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<User | null | undefined>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "getUserById",
            "sourceCode": "import { Pipe, PipeTransform, inject } from '@angular/core';\r\nimport { User } from '@interface/user';\r\nimport { DatabaseStorageService, NameModuleDatabase } from '@service/database-storage.service';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Pipe({\r\n  name: 'getUserById',\r\n  standalone: true\r\n})\r\nexport class GetUserByIdPipe implements PipeTransform {\r\n\r\n  private databaseStorage = inject(DatabaseStorageService);\r\n\r\n  async transform(id: number | null | undefined): Promise<User | null | undefined> {\r\n    if(!id) return null;\r\n    return await this.databaseStorage.getOne<User>(NameModuleDatabase.Users, id);\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "HiddenOptionButtonRowPipe",
            "id": "pipe-HiddenOptionButtonRowPipe-9f4b19248995dcad4724dea2b6909dea1df30ab98a59a0eb22cf5f7695f05b5dd00249052809ad56e52f924c880c7ecd57f1a9510cfbf33b8a6c4783c2438193",
            "file": "src/app/shared/pipe/hidden-option-button-row.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "idOption",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "idsHidden",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "idOption",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "idsHidden",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "hiddenOptionButtonRow",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'hiddenOptionButtonRow',\r\n  standalone: true\r\n})\r\nexport class HiddenOptionButtonRowPipe implements PipeTransform {\r\n\r\n  transform(idOption: string | number, idsHidden: unknown[]): boolean {\r\n    if(!idOption || !idsHidden || !(idsHidden instanceof Array) || !idsHidden.length) return false;\r\n    return idsHidden.includes(idOption);\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "ImageMimeTypeFilePipe",
            "id": "pipe-ImageMimeTypeFilePipe-08d917c70902d3c97b9c6e034e51b55b5a7f9f1e9f33e0ef22793048f86080d9d9d58988c05e5c10881229f95033f324104acbe3205d01d714ce4b0d9b671361",
            "file": "src/app/shared/pipe/image-mime-type-file.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "nameFile",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nameFile",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "imageMimeTypeFile",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'imageMimeTypeFile',\r\n    standalone: true,\r\n})\r\nexport class ImageMimeTypeFilePipe implements PipeTransform {\r\n    transform(nameFile: string | null): string {\r\n        if (!nameFile) return '';\r\n        const extension_file: string | undefined = nameFile.split('.').pop();\r\n        if (!extension_file) return '';\r\n        if (\r\n            /(png|jpg|jpeg|webp)/.test(extension_file) &&\r\n            /(http|https)/.test(nameFile)\r\n        ) {\r\n            return nameFile;\r\n        } if (/(png|jpg|jpeg|webp)/.test(extension_file)) {\r\n            return '/assets/svg-icons/image-file.svg';\r\n        } else if (/(docx?)/.test(extension_file)) {\r\n            return '/assets/svg-icons/microsoft-word.svg';\r\n        } else if (/(xlsx?|csv)/.test(extension_file)) {\r\n            return '/assets/svg-icons/microsoft-excel.svg';\r\n        } else if (/(pptx?)/.test(extension_file)) {\r\n            return '/assets/svg-icons/microsoft-powerpoint.svg';\r\n        } else if (/(pdf)/.test(extension_file)) {\r\n            return '/assets/svg-icons/pdf.png';\r\n        } else if (/(txt)/.test(extension_file)) {\r\n            return '/assets/svg-icons/document.svg';\r\n        } else if (/(mpp)/.test(extension_file)) {\r\n            return '/assets/svg-icons/microsoft-excel.svg';\r\n        }\r\n        return '';\r\n    }\r\n}\r\n"
        },
        {
            "name": "IndexListPipe",
            "id": "pipe-IndexListPipe-75eeb334ca3e2ce665ee5fac3bcec4c00831687201c22ccee7caee7c0a0ab5d3cf6ed3dda7eafd83d5fb832d2365097c3c260ed7da070e5ca2117072f019fa12",
            "file": "src/app/shared/pipe/index-list.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "[number, number]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "[number, number]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "indexList",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'indexList',\r\n  standalone: true,\r\n})\r\nexport class IndexListPipe implements PipeTransform {\r\n\r\n  transform(index: number, [pageIndex,PageSize]: [number, number]): unknown {\r\n    return pageIndex * PageSize + (index + 1);\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "ListFormatPipe",
            "id": "pipe-ListFormatPipe-a02d633b44e519cb029e5d34c5ded4417165ff12a914a5b227f9d3edc2b758a1ed5037dd455eed7f010a9dc5e57d3d2ce3091253d4f8ffbc8f5af085a002ebbf",
            "file": "src/app/shared/pipe/list-format.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "values",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ListFormatOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ListFormatOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "listFormat",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\ninterface ListFormatOptions {\r\n  lang?: string;\r\n  type?: 'conjunction' | 'disjunction' | 'unit';\r\n  style?: 'long' | 'short' | 'narrow';\r\n}\r\n\r\n@Pipe({\r\n  name: 'listFormat',\r\n  standalone: true\r\n})\r\nexport class ListFormatPipe implements PipeTransform {\r\n\r\n  transform(values: string[], options?:ListFormatOptions): string {\r\n    if(!(values instanceof Array)) return '';\r\n    else if (values.length && (values[0] as any) instanceof Object) return '';\r\n    const { lang = 'es-ES', type = 'conjunction', style = 'long' } = options ?? {};\r\n    return (new Intl.ListFormat(lang, { style, type}).format(values)) ?? '';\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "NameLevelUserPipe",
            "id": "pipe-NameLevelUserPipe-7151fc22d519acbe06c9091d78f28ac35a6950718e0a3e2bc36b9b4eb4774d051ded057360bb354212590b27aa27ae5fdc04c36eb1e489e17fa794ef7fc30aed",
            "file": "src/app/shared/pipe/name-level-user.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "nameLevelUser",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { User, UserlevelEnum } from '@interface/user';\r\n\r\n@Pipe({\r\n  name: 'nameLevelUser',\r\n  standalone: true\r\n})\r\nexport class NameLevelUserPipe implements PipeTransform {\r\n\r\n  transform(user: User): string {\r\n    const values = Object.entries(UserlevelEnum);\r\n    const nameLevel = values.find(value => {\r\n      return value[1] == user.level\r\n    })\r\n    return nameLevel ? nameLevel[0] : '';\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "NameMimeTypeFilePipe",
            "id": "pipe-NameMimeTypeFilePipe-d157d0a118403b28172e34671b627c0d92301f7c6521b7c27fe1b167daba5bf431886d5646df92133088c026c214039715cce43d2ad544bfc3e4fb6d44800a36",
            "file": "src/app/shared/pipe/name-mime-type-file.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "nameMimeTypeFile",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'nameMimeTypeFile',\r\n  standalone: true,\r\n})\r\nexport class NameMimeTypeFilePipe implements PipeTransform {\r\n\r\n  transform(value: string | null | undefined, ...args: unknown[]): unknown {\r\n    let name = '--';\r\n    if(value) {\r\n        const extension_file: string | undefined = value.split('.').pop();\r\n        if (!extension_file) return name;\r\n        if (/(docx?)/.test(extension_file)) {\r\n          name = 'word';\r\n        } else if (/(csv)/.test(extension_file)) {\r\n          name = 'csv';\r\n        } else if (/(xlsx?)/.test(extension_file)) {\r\n          name = 'excel';\r\n        } else if (/(pptx?)/.test(extension_file)) {\r\n          name = 'powerpoint';\r\n        } else if (/(png|jpg|jpeg|webp)/.test(extension_file)) {\r\n          name = 'imagen';\r\n        } else if (/(pdf)/.test(extension_file)) {\r\n          name = 'pdf';\r\n        } else if (/(txt)/.test(extension_file)) {\r\n          name = 'text';\r\n        } else if (/(mp4|avi)/.test(extension_file)) {\r\n          name = 'video';\r\n        } else if (/(mp3)/.test(extension_file)) {\r\n          name = 'audio';\r\n        } else if (/(mpp)/.test(extension_file)) {\r\n          name = 'ms project';\r\n        }\r\n    }\r\n    return name;\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "ParseDatePipe",
            "id": "pipe-ParseDatePipe-aa95d7f02f2779ee1182a20be83eb64bff6aa79a55c19d4ef011804b41eb7d3409651e12a8dbe71823714428fc0a0ed2819cf868e97e8e008f8d6fe7220372c2",
            "file": "src/app/shared/pipe/parse-string-date.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date | null",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "parseDate",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { parseISO } from 'date-fns';\r\n\r\n@Pipe({\r\n  name: 'parseDate',\r\n  standalone: true\r\n})\r\nexport class ParseDatePipe implements PipeTransform {\r\n\r\n  transform(value: string | null): Date | null {\r\n    if(!value) return null;\r\n    return parseISO(value);\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "PathFilesServerPipe",
            "id": "pipe-PathFilesServerPipe-856d82a02b289fbf9ec462f231699a3d871677c644a57e32f73fcbdb2687a63de5768b33b077a0c3de40aba29bb4a68a66cb842457be5636f7370b047aa43cd8",
            "file": "src/app/shared/pipe/path-files-server.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "pathFilesServer",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Pipe({\r\n  name: 'pathFilesServer',\r\n  standalone: true\r\n})\r\nexport class PathFilesServerPipe implements PipeTransform {\r\n\r\n  transform(value: unknown): string {\r\n    if(value) {\r\n      return environment.URL_FILES_SERVER + value;\r\n    } else {\r\n      return 'assets/images/no-image.webp';\r\n    }\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "PublicPathServerPipe",
            "id": "pipe-PublicPathServerPipe-8132f3e64e481a82f99d91943cf4c90c0d03822c883d4264ea9a5f2503dafe67c7d0c081dcad92841a4f991b196e9a0b87d7a4caf0f2f4e563ba94976432441d",
            "file": "src/app/shared/pipe/public-path-server.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "publicPathServer",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Pipe({\r\n    name: 'publicPathServer',\r\n    standalone: true\r\n})\r\nexport class PublicPathServerPipe implements PipeTransform {\r\n\r\n  transform(value: string): string {\r\n    if(value.startsWith('/')) return environment.API_URL + value;\r\n    else return environment.API_URL + '/' + value;\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "RenameTitleColumnListPipe",
            "id": "pipe-RenameTitleColumnListPipe-2a60b33e1473072f5dd512d88592c2c73289d69827686c4e84052f4077057495ef5b978a6700b65fa1b7dfb68eb8e800fcc24fb2eab0e3bdc843450234eb7cd7",
            "file": "src/app/shared/components/item-list-template/rename-title-column-list.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "renameTitleColumnList",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'renameTitleColumnList',\r\n  standalone: true\r\n})\r\nexport class RenameTitleColumnListPipe implements PipeTransform {\r\n\r\n  transform(title:string): any {\r\n    return title.trim().replaceAll(/[\\s\\/\\\\°\\-\\.]+/g, '_').toLowerCase();\r\n  }\r\n\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "Account",
            "id": "interface-Account-98b438ca988fe6a2fd5ff636f17c95c9e749a9f92d2710847031c31380ee469698202c0d62949e4f617e340eff790b73bc3537df603d6adc260f1557c0004e1a",
            "file": "src/app/shared/interfaces/account.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Bank } from \"./bank\";\r\nimport { BaseModel, CoinEnum } from \"./baseModel\";\r\n\r\nexport interface Account extends BaseModel {\r\n    bank_id: number;\r\n    name: string;\r\n    number: string;\r\n    description: string;\r\n    coin: CoinEnum;\r\n\r\n    bank?: Bank;\r\n}\r\n",
            "properties": [
                {
                    "name": "bank",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Bank",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "bank_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "coin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CoinEnum",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "ActionButton",
            "id": "interface-ActionButton-75a719ba2c59e83e75c0e546e67e91ecd288a8eaae523955cca2535e665d2b945fef6327af9bd30cfdda606a531003ff10652cb2b8d6d62e22e9d189f1037fca",
            "file": "src/app/shared/interfaces/itemDetail.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TypeValueKeyItem } from \"@component/item-list-template/item-list-template.component\";\r\nimport { FetchErrorResponse } from \"./fetch\";\r\nimport { EventEmitter, TemplateRef, WritableSignal } from \"@angular/core\";\r\n\r\nexport interface ItemDetailConfiguration<T = any> {\r\n    title: string;\r\n\r\n    subtitle?: ((item: T) => string | number | null | undefined) | false;\r\n\r\n    itemId?: string;\r\n\r\n    server: {\r\n        url: string;\r\n        queryParams?: { [key: string]: any };\r\n    }\r\n\r\n    loading?: boolean;\r\n\r\n    groups: ItemDetailGroup<T>[];\r\n\r\n    dataItem?: WritableSignal<T | null>;\r\n\r\n    parseItemFn?: (item: T) => (T | Promise<T>);\r\n    afterSetItemFn?: (item: T) => void;\r\n    afterDeleteItemFn?: (item: T) => void;\r\n    afterRestoreItemFn?: (item: T) => void;\r\n\r\n    editButton?: {\r\n        text?: string;\r\n        routerLink?: RouterLinkItem<T>\r\n    } | false;\r\n\r\n    deleteButton?: boolean;\r\n    restoreButton?: boolean;\r\n    backButton?: boolean;\r\n\r\n    actionButtons?: ActionButton<T, ActionButtonType>[];\r\n\r\n    ignoreShowError?: boolean;\r\n    interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n    httpError?: FetchErrorResponse;\r\n\r\n    hiddeHeader?: boolean;\r\n\r\n    updateItemEvent?: EventEmitter<boolean>;\r\n}\r\n\r\nexport interface ItemDetailGroup<T> {\r\n    icon?: string,\r\n    title?: string,\r\n    details: ItemDetail<T>[]\r\n    template?: {\r\n        ref: TemplateRef<any>,\r\n        position?: 'before' | 'after',\r\n    },\r\n    actions?: ActionButton<T>[]\r\n}\r\n\r\nexport interface ItemDetail<T> {\r\n    clickEvent?: (item: T) => void;\r\n    cssClass?: ((item: T) => string) | string;\r\n    dateFormat?: string;\r\n    displayValueFn: (item: T) => string | number | null | undefined | string[];\r\n    key?: string;\r\n    title: string;\r\n    numberFormat?: string;\r\n    routerLink?: RouterLinkItem<T>\r\n    tooltip?: ((item: T) => string) | string;\r\n    type?: TypeValueKeyItem | 'image' | 'image-server' | 'private-image-server' | 'html';\r\n}\r\n\r\nexport interface ActionButton<T, Type = 'clickEvent'> {\r\n    id: number | string;\r\n    type?: Type;\r\n    style: StyleButton;\r\n    icon?: string;\r\n    text?: string;\r\n    title?: string;\r\n    clickEvent: (item: T) => void;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\nexport type ActionButtonType = 'clickEvent' | 'update' | 'delete' | 'restore';\r\n\r\nexport interface RouterLinkItem<T> {\r\n    url: ((item: T) => string) | string;\r\n    outlet?: 'route-lateral' | 'principal';\r\n    queryParams?: { [key: string]: any },\r\n    state?: ((item: T) => (string | {[key: string]: any} | any[] | number | null)) | string | {[key: string]: any} | any[] | number | null;\r\n}\r\n",
            "properties": [
                {
                    "name": "clickEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StyleButton",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Type",
                    "optional": true,
                    "description": "",
                    "line": 74
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ActionButton",
            "id": "interface-ActionButton-edc9a2c085d669b062640c6d2a97876fe56bb34f5ae23612a12a67b2af6f44bb5d3316d9f28e50d8c8d522c0e6ce8fc3245f639ec16593bc1c325c3c460a4296-1",
            "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule, DatePipe, Location, NgOptimizedImage } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, ViewChild, Input, ContentChild, TemplateRef, ElementRef, Renderer2, ViewEncapsulation, signal, WritableSignal, computed, inject, Inject, Optional, InjectionToken, EventEmitter, RendererStyleFlags2 } from '@angular/core';\r\nimport { MatCheckboxChange, MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSort, MatSortModule } from '@angular/material/sort';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from 'src/app/shared/utilities/queryParams';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { IndexListPipe } from '@pipe/index-list.pipe';\r\nimport { SpinnerDefaultComponent } from '@component/spinner-default/spinner-default.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { debounceTime } from 'rxjs';\r\nimport { DiffDatePipe } from '@pipe/diff-date.pipe';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { HiddenOptionButtonRowPipe } from '@pipe/hidden-option-button-row.pipe';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { GetUserByIdPipe } from '@pipe/get-user-by-id.pipe';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ListFormatPipe } from '@pipe/list-format.pipe';\r\nimport { LoadImagePrivateDirective } from '@directive/load-image-private.directive';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MatPseudoCheckboxModule } from '@angular/material/core';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { EventGlobalSearch, NAME_EVENT_GLOBAL_SEARCH } from 'src/app/sidenav/sidenav/sidenav.component';\r\nimport { ExecuteFunctionListPipe } from './execute-function-list.pipe';\r\nimport { FormInput, dateRangeFormInput, switchFormInput } from '@component/item-form-template/item-form-template.component';\r\nimport { RenameTitleColumnListPipe } from './rename-title-column-list.pipe';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DateFnsAdapter } from '@angular/material-date-fns-adapter';\r\nimport { MyDateAdapter } from '@utility/myDateAdapter';\r\nimport { MY_DATE_FORMATS } from '@utility/myDateFormat';\r\n\r\nexport const DATA_TYPE_LIST = new InjectionToken<'array' | 'paginator'>('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST');\r\n\r\nexport interface ItemListConfiguration<T = any> {\r\n  readonly dataType?: 'array' | 'paginator';\r\n  readonly keyGetItemsPaginator?: string;\r\n  readonly keyGetTotalItemsPaginator?: string;\r\n\r\n  readonly disableFiltersInQueryParams?: boolean;\r\n\r\n  title: string | null;\r\n\r\n  parseDataFn?: (data: T[]) => T[] | Promise<T[]>;\r\n  data?: WritableSignal<T[]>;\r\n  updateListEvent?: EventEmitter<void>;\r\n\r\n  defaultOrder?: {\r\n    key: string,\r\n    order: 'ASC' | 'DESC'\r\n  };\r\n\r\n  backButton?: boolean;\r\n\r\n  updateButton?: boolean;\r\n\r\n  server: {\r\n    readonly url: string,\r\n    queryParams?: { [key: string]: any } | string;\r\n  }\r\n\r\n  createButton?: {\r\n    text?: string,\r\n    routerLink: RouterLinkCreateButton\r\n  } | false;\r\n\r\n  filters?: FormInput[] | false;\r\n\r\n  rows?: {\r\n    selectable?: {\r\n      actions: SelectableActionButton<T>[];\r\n    };\r\n    index?: false | ({ title: string });\r\n    cssClass?: string | ((item: T) => string);\r\n    actions?: ActionButton<T>[];\r\n    options?: ActionButton<T>[] | false;\r\n  },\r\n\r\n  columns: WritableSignal<ListColumn<T>[]>;\r\n}\r\n\r\nexport interface RouterLinkCreateButton {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any;\r\n}\r\nexport interface RouterLinkItem<T> {\r\n  url: ((item: T, index: number) => string) | string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: ((item: T, index: number) => (string | { [key: string]: any } | any[] | number | null)) | string | { [key: string]: any } | any[] | number | null;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\ndeclare type ActionButtonActionsType = 'clickEvent' | 'routerLink';\r\ninterface ActionButton<T> {\r\n  type: 'clickEvent' | 'routerLink';\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((item: T, index: number) => boolean);\r\n  disabled?: boolean | ((item: T, index: number) => boolean);\r\n  cssClass?: string | ((item: T, index: number) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((item: T, index: number) => ({ [key: string]: any }));\r\n  fn?: (item: T, index: number, fns: {\r\n    deleteItemFn: (id: number | string) => Promise<void>,\r\n    restoreItemFn: (id: number | string) => Promise<void>,\r\n    updateChangesItemFn: (index: number, item: T) => void,\r\n  }) => void;\r\n  routerLink?: RouterLinkItem<T>;\r\n}\r\ninterface ClickEventActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'fn'>> & ActionButton<T>, 'type' | 'routerLink'> { }\r\nexport const clickEventActionButton = <T = any>(config: ClickEventActionButton<T>): ActionButton<T> => ({ type: 'clickEvent', ...config });\r\ninterface RouterLinkActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'routerLink'>> & ActionButton<T>, 'type' | 'clickEvent'> { }\r\nexport const routerLinkActionButton = <T = any>(config: RouterLinkActionButton<T>): ActionButton<T> => ({ type: 'routerLink', ...config });\r\ninterface SelectableActionButton<T> {\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((selectedItems: T[]) => boolean);\r\n  disabled?: boolean | ((selectedItems: T[]) => boolean);\r\n  cssClass?: string | ((selectedItems: T[]) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((selectedItems: T[]) => ({ [key: string]: any }));\r\n  fn: (selectedItems: T[]) => void;\r\n}\r\nexport const selectableActionButton = <T = any>(config: SelectableActionButton<T>): SelectableActionButton<T> => ({ ...config });\r\n\r\nexport interface ListItemExtended {\r\n  __selected__?: boolean;\r\n  __loading_status__?: boolean;\r\n}\r\n\r\nexport type TypeValueKeyItem = 'text' | 'diff-date' | 'date' | 'number' | 'email' | 'phone' | 'user' | 'uppercase' | 'lowercase' | 'titlecase' | 'first-letter-uppercase' | 'list-format' | 'currency';\r\n\r\nexport interface ListColumn<T> {\r\n  /**\r\n   * @description\r\n   * Agrega clases css al contenedor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   */\r\n  align?: 'left' | 'center' | 'right';\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor adicional de la celda de la columna\r\n   * @example\r\n   * clickEventAdditionalValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventAdditionalValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor de la celda de la columna\r\n   * @example\r\n   * clickEventValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css a la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClass: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClass?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor adicional de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayAdditionalValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo fecha (type: 'date')\r\n   * @example\r\n   * ...\r\n   * dateFormat: 'yyyy-MM-dd'\r\n   * ...\r\n   * dateFormat: 'dd/MM/yyyy' // Por defecto\r\n   * ...\r\n   */\r\n  dateFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor adicional a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.name\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayAdditionalValueFn?: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayValueFn: (item) => item.name\r\n   * ...\r\n   * displayValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * If you want to display a value in the column that is not in the item, you can use this function\r\n   * @example\r\n   * ...\r\n   * gridColumn: '1fr'\r\n   * ...\r\n   * gridColumn: '200px'\r\n   * ...\r\n   * gridColumn: 'max-content'\r\n   * ...\r\n   * gridColumn: 'fit-content(200px)'\r\n   * ...\r\n   */\r\n  gridColumn?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones > Columnas\r\n   * @example\r\n   * ...\r\n   * hidden: true\r\n   * ...\r\n   * hidden: false // Por defecto\r\n   * ...\r\n   */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo número (type: 'number')\r\n   * @example\r\n   * ...\r\n   * numberFormat: '2.2-2'\r\n   * ...\r\n   * numberFormat: '0.2-2' // Por defecto\r\n   * ...\r\n   */\r\n  numberFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor adicional de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkAdditionalValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Sortable column espicif key in object configuration\r\n   * @example\r\n   * sort: { key: 'name' }\r\n   */\r\n  sort?: { key: string };\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display additional value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: { color: 'green' }\r\n   * ...\r\n   * @param item\r\n   * @returns string | number | null | undefined | string[] | number[]\r\n   */\r\n  cssStyleDisplayAdditionalValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayValue: { color: 'green' }\r\n   * ...\r\n   */\r\n  cssStyleDisplayValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Title column\r\n   * @example\r\n   * title: 'Nombre'\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * @description\r\n   * To display a tooltip in the column on hover\r\n   * @example\r\n   * tooltip: 'Ver detalle'\r\n   */\r\n  tooltip?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * For show type value in cell\r\n   * @example\r\n   * ...\r\n   * type: 'number',\r\n   * displayValueFn: (item) => item.price, // output: 2,000.00\r\n   * ...\r\n   * type: 'date',\r\n   * displayValueFn: (item) => item.created_at, // output 12/12/2020\r\n   * ...\r\n   */\r\n  type?: TypeValueKeyItem | 'image' | 'html';\r\n\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface SimpleListColumn<T> extends Omit<ListColumn<T>, 'type' | 'displayAdditionalValueFn' | 'displayValueFn' | 'dateFormat' | 'numberFormat' | 'image'> { }\r\ninterface SimpleListColumn2<T> extends Omit<SimpleListColumn<T>, 'cssStyleDisplayAdditionalValue' | 'routerLinkAdditionalValue' | 'cssClassDisplayAdditionalValue' | 'clickEventAdditionalValue'> { }\r\ninterface ListFormatListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string[];\r\n  displayValueFn: (item: T, index: number) => string[];\r\n}\r\n\r\ninterface NumberListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => number | null | undefined;\r\n  numberFormat?: string;\r\n}\r\n\r\ninterface StringListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => string | number | null | undefined;\r\n}\r\n\r\ninterface DateListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined;\r\n  dateFormat?: string;\r\n}\r\n\r\ninterface ImageListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface HtmlListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n}\r\n\r\nexport const numberColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'number', ...config });\r\n\r\nexport const listFormatColumn = <T = any>(config: ListFormatListColumn<T>): ListColumn<T> => ({ type: 'list-format', ...config });\r\n\r\nexport const dateColumn = <T = any>(config: DateListColumn<T>): ListColumn<T> => ({ type: 'date', ...config });\r\n\r\nexport const diffDateColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'diff-date', ...config });\r\n\r\nexport const htmlColumn = <T = any>(config: HtmlListColumn<T>): ListColumn<T> => ({ type: 'html', ...config });\r\n\r\nexport const textColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'text', ...config });\r\n\r\nexport const uppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'uppercase', ...config });\r\n\r\nexport const lowercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'lowercase', ...config });\r\n\r\nexport const titlecaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'titlecase', ...config });\r\n\r\nexport const firstLetterUppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'first-letter-uppercase', ...config });\r\n\r\nexport const phoneColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'phone', ...config });\r\n\r\nexport const emailColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'email', ...config });\r\n\r\nexport const userColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'user', ...config });\r\n\r\nexport const imageColumn = <T = any>(config: ImageListColumn<T>): ListColumn<T> => ({ type: 'image', ...config });\r\n\r\n\r\nexport const itemNameAndDescriptionColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  title: 'Nombre',\r\n  gridColumn: '1fr',\r\n  sort: { key: 'name' },\r\n  routerLinkValue: { url: (item: any) => `../detail/${item.id}` },\r\n  displayValueFn: (item: any) => item.name,\r\n  displayAdditionalValueFn: (item: any) => item.description,\r\n  ...config,\r\n});\r\nexport const itemStatusColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'cssClassDisplayValue' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'first-letter-uppercase',\r\n  title: 'Estado',\r\n  sort: { key: 'status' },\r\n  align: 'center',\r\n  displayValueFn: (item: any) => item.status,\r\n  cssClassDisplayValue: (item: any) => `status-chip ${item.status}`,\r\n  ...config,\r\n});\r\nexport const itemCreatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Creado',\r\n  sort: { key: 'created_at' },\r\n  displayValueFn: (item: any) => item.created_at,\r\n  ...config,\r\n});\r\nexport const itemUpdatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Actualizado',\r\n  sort: { key: 'updated_at' },\r\n  hidden: true,\r\n  displayValueFn: (item: any) => item.updated_at,\r\n  ...config,\r\n});\r\nexport const simpleListColumns = (): ListColumn<any>[] => ([\r\n  itemNameAndDescriptionColumn(),\r\n  itemUpdatedAtColumn(),\r\n  itemCreatedAtColumn(),\r\n  itemStatusColumn(),\r\n]);\r\n\r\n\r\nexport const defaultListFilterInputs = (): FormInput[] => [\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de creación',\r\n    formControlNameFrom: 'created_at_from',\r\n    formControlNameTo: 'created_at_to',\r\n  }),\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de actualización',\r\n    formControlNameFrom: 'updated_at_from',\r\n    formControlNameTo: 'updated_at_to',\r\n  }),\r\n  switchFormInput({\r\n    textLabel: 'Registros inactivos',\r\n    formControlName: 'inactive',\r\n  }),\r\n];\r\n\r\nexport const deleteItemActionButton = () => clickEventActionButton({\r\n  icon: 'delete',\r\n  text: 'Eliminar',\r\n  fn: async ({ id }, _, { deleteItemFn }) => deleteItemFn(id),\r\n  hidden: (item) => item.deleted_at,\r\n});\r\n\r\nexport const restoreItemActionButton = () => clickEventActionButton({\r\n  icon: 'restore',\r\n  text: 'Restaurar',\r\n  fn: async ({ id }, _, { restoreItemFn }) => restoreItemFn(id),\r\n  hidden: (item) => !item.deleted_at,\r\n})\r\n\r\nexport const viewItemActionButton = () => routerLinkActionButton({\r\n  icon: 'visibility',\r\n  text: 'Ver',\r\n  routerLink: { url: (item) => `../view/${item.id}` },\r\n});\r\n\r\nexport const editItemActionButton = () => routerLinkActionButton({\r\n  icon: 'edit',\r\n  text: 'Editar',\r\n  routerLink: { url: (item) => `../edit/${item.id}` },\r\n})\r\n\r\n@Component({\r\n  selector: 'app-item-list-template',\r\n  standalone: true,\r\n  templateUrl: './item-list-template.component.html',\r\n  styleUrl: './item-list-template.component.css',\r\n  imports: [\r\n    CommonModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatSortModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatTooltipModule,\r\n    MatPseudoCheckboxModule,\r\n    IndexListPipe,\r\n    GetKeyItemPipe,\r\n    RouterLink,\r\n    DiffDatePipe,\r\n    HiddenOptionButtonRowPipe,\r\n    NgOptimizedImage,\r\n    ScrollingModule,\r\n    GetUserByIdPipe,\r\n    PathFilesServerPipe,\r\n    ListFormatPipe,\r\n    LoadImagePrivateDirective,\r\n    FirstLetterUppercasePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n    ExecuteFunctionListPipe,\r\n    RenameTitleColumnListPipe,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    FirstLetterUppercasePipe,\r\n    GetKeyItemPipe,\r\n    RenameTitleColumnListPipe,\r\n    BrowserAnimationsModule,\r\n    DateFnsAdapter,\r\n  ],\r\n})\r\nexport class ItemListTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemListConfiguration;\r\n\r\n  // @ContentChild('headers') headers!: TemplateRef<any>;\r\n  @ContentChild('rowList') rowList!: TemplateRef<any>;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  @ViewChild('divListItems', { static: true }) private divList!: ElementRef;\r\n\r\n  private _dataTypeList: 'array' | 'paginator' = 'array';\r\n  private _keyForGetItems: string;\r\n  private _keyForGetTotalItems: string;\r\n\r\n  private fetch = inject(FetchService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  private renderer = inject(Renderer2);\r\n  private eventsService = inject(EventsService);\r\n  public location = inject(Location);\r\n\r\n  // private datePipe = inject(DatePipe);\r\n  public firstLetterUppercasePipe = inject(FirstLetterUppercasePipe);\r\n  public getKeyItemPipe = inject(GetKeyItemPipe);\r\n  public renameTitleColumnListPipe = inject(RenameTitleColumnListPipe);\r\n\r\n  public lengthData = computed(() => this.data().length)\r\n\r\n  public searchCtrl: FormControl = new FormControl('');\r\n  public formFilters: FormGroup<any> | null = null;\r\n\r\n  public loading = signal(true);\r\n  public font: WritableSignal<'small' | 'medium' | 'large'> = signal('medium');\r\n  public headerListStyle: WritableSignal<'simple' | 'color'> = signal('simple');\r\n\r\n  private abortController = new AbortController();\r\n\r\n  private unsubscribe$: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(DATA_TYPE_LIST) _dataTypeList: 'array' | 'paginator',\r\n    @Optional() @Inject(KEY_GET_ITEMS_PAGINATOR_LIST) _keyForGetItems: string,\r\n    @Optional() @Inject(KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST) _keyForGetTotalItems: string\r\n  ) {\r\n    this._dataTypeList = _dataTypeList ?? 'paginator';\r\n    this._keyForGetItems = _keyForGetItems || 'data';\r\n    this._keyForGetTotalItems = _keyForGetTotalItems || 'total';\r\n  }\r\n\r\n  get data(): WritableSignal<any[]> {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  get defaultOrder(): string {\r\n    return this.configuration.defaultOrder ? `${this.configuration.defaultOrder?.key}|${this.configuration.defaultOrder?.order}` : 'id|DESC';\r\n  }\r\n\r\n  get dataTypeList(): 'array' | 'paginator' {\r\n    return this.configuration.dataType ?? this._dataTypeList;\r\n  }\r\n\r\n  get keyForGetItems(): string {\r\n    return this.configuration.keyGetItemsPaginator ?? this._keyForGetItems;\r\n  }\r\n\r\n  get keyForGetTotalItems(): string {\r\n    return this.configuration.keyGetTotalItemsPaginator ?? this._keyForGetTotalItems;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.configuration.data = signal([]);\r\n    this.configuration.updateListEvent = new EventEmitter();\r\n    if (this.configuration.rows?.options != false && !this.configuration.rows?.options?.length) {\r\n      this.configuration.rows = {\r\n        ...(this.configuration.rows ?? {}),\r\n        options: [\r\n          viewItemActionButton(),\r\n          editItemActionButton(),\r\n          deleteItemActionButton(),\r\n          restoreItemActionButton(),\r\n        ]\r\n      };\r\n    }\r\n    this.generateFormControlsFromFilterInputs();\r\n    this.generateColumnsCss();\r\n\r\n    this.eventsService\r\n      .eventsFiltered<EventGlobalSearch>([NAME_EVENT_GLOBAL_SEARCH])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(({ data }: any) => {\r\n        const type = data.type;\r\n        if (type == 'enter') this.searchCtrl.setValue(data.value);\r\n      })\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.paginator.pageIndex = 0;\r\n    this.paginator.pageSize = 20;\r\n\r\n    this.verifyQueryParams();\r\n\r\n    this.activatedRoute.queryParams.subscribe(() => this.callGetData());\r\n\r\n    this.sort.sortChange.subscribe(({ active, direction }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (this.defaultOrder == `${active}|${direction}` || !active || !direction) queryParams['order'] = null;\r\n      else queryParams['order'] = `${active}|${direction}`;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.searchCtrl.valueChanges.pipe(debounceTime(250)).subscribe((value: string) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (value) queryParams['search'] = value;\r\n      else queryParams['search'] = null;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.paginator.page.subscribe(({ pageIndex, pageSize }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (pageIndex == 0 || (queryParams['page'] ?? null) == pageIndex + 1) queryParams['page'] = null;\r\n      else queryParams['page'] = pageIndex + 1;\r\n      if (pageSize == 20 || (queryParams['per_page'] ?? null) == pageSize) queryParams['per_page'] = null;\r\n      else queryParams['per_page'] = pageSize;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.eventsService\r\n      .eventsFiltered([\r\n        `${this.configuration.server.url}_created`,\r\n        `${this.configuration.server.url}_updated`\r\n      ])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(() => this.callGetData());\r\n\r\n    // this.configuration.updateListEvent!.subscribe(() => this.callGetData({}));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n    if (this.abortController) this.abortController.abort();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private async generateColumnsCss(): Promise<void> {\r\n    const grid_cols: string[] = [];\r\n    const grid_areas: string[] = []\r\n    if (this.configuration.rows?.selectable) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('selected');\r\n    }\r\n    if (this.configuration.rows?.index != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('index');\r\n    }\r\n    for await (const column of this.configuration.columns()) {\r\n      if (!column.hidden) {\r\n        grid_cols.push(column.gridColumn ?? 'auto');\r\n        grid_areas.push(this.renameTitleColumnListPipe.transform(column.title));\r\n      }\r\n    }\r\n    if (this.configuration.rows?.actions) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('actions');\r\n    }\r\n    if (this.configuration.rows?.options != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('options');\r\n    }\r\n    this.renderer.setStyle(this.divList.nativeElement, 'grid-template-columns', grid_cols.join(' '));\r\n    this.renderer.setStyle(this.divList.nativeElement, '--items-list-grid-template-areas', `\"${grid_areas.join(' ')}\"`, RendererStyleFlags2.DashCase);\r\n    grid_areas.forEach((area, index) => this.renderer.setStyle(this.divList.nativeElement, `--items-list-grid-area-${index + 1}`, area, RendererStyleFlags2.DashCase));\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private getQueryParams(): { [key: string]: any } {\r\n    return !this.configuration.disableFiltersInQueryParams ? JSON.parse(JSON.stringify(this.activatedRoute.snapshot.queryParams)) : {\r\n      ...this.formFilters?.value ?? {},\r\n      page: this.paginator.pageIndex + 1,\r\n      per_page: this.paginator.pageSize,\r\n      order: this.sort.active ? `${this.sort.active}|${this.sort.direction}` : null,\r\n      search: this.searchCtrl.value ? this.searchCtrl.value : null,\r\n    }\r\n  }\r\n\r\n  private navigateOrCallGetData(params: any): void {\r\n    if (this.configuration.disableFiltersInQueryParams) this.callGetData(params);\r\n    else this.router.navigate([], { queryParams: params });\r\n  }\r\n\r\n  private verifyQueryParams(): void {\r\n    const queryParams = {} as any;\r\n    const { page, per_page, order, search, ...filters } = queryParams;\r\n    this.paginator.pageIndex = Number(page ?? 1) - 1;\r\n    this.paginator.pageSize = Number(per_page) ?? 20;\r\n    this.sort.active = order?.split('|')[0] ?? '';\r\n    this.sort.direction = order?.split('|')[1] == 'asc' ? 'asc' : 'desc';\r\n    this.sort.sortChange.emit();\r\n    this.searchCtrl.setValue(search ?? null, { emitEvent: false });\r\n  }\r\n\r\n  public callGetData(queryParams: any = {}): void {\r\n    const params = objectToURLSearchParams(queryParams);\r\n    if (!params.has('page')) params.set('page', String(this.paginator.pageIndex + 1));\r\n    if (!params.has('per_page')) params.set('per_page', String(this.paginator.pageSize));\r\n    if (!params.has('order')) params.set('order', this.defaultOrder);\r\n    this.getData(params);\r\n  }\r\n\r\n  private async getData(searchParams: URLSearchParams = new URLSearchParams()): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const serverUrl = this.configuration.server.url;\r\n    let queryParams = this.configuration.server.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const url = `${serverUrl}?${searchParams.toString()}&${queryParams ?? ''}`;\r\n    const config = { signal: this.abortController.signal };\r\n    try {\r\n      let items = [];\r\n      let totalItems = 0;\r\n      if (this.dataTypeList == 'array') {\r\n        items = await this.fetch.get<any[]>(url, config);\r\n        totalItems = items.length;\r\n      } else {\r\n        const paginatorData = await this.fetch.get<PaginatorData<any>>(url, config);\r\n        items = this.getKeyItemPipe.transform(paginatorData, this.keyForGetItems);\r\n        totalItems = this.getKeyItemPipe.transform(paginatorData, this.keyForGetTotalItems);\r\n      }\r\n      const { parseDataFn } = this.configuration;\r\n      const parseData = await parseDataFn?.(items) ?? items;\r\n      this.paginator.length = totalItems;\r\n      this.data.set(parseData);\r\n      this.loading.set(false);\r\n      this.checkSelectedItems();\r\n    } catch (err: any) {\r\n      if (err.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n  }\r\n\r\n  public hiddenToggleColumn($event: MatCheckboxChange, index: number): void {\r\n    this.configuration.columns.update((columns) => {\r\n      columns[index]['hidden'] = !$event.checked\r\n      return columns;\r\n    })\r\n    this.generateColumnsCss();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public navigateCreateView(): void {\r\n    this.router.navigate(['../create'], { relativeTo: this.activatedRoute });\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public allSelectedItems = signal(false);\r\n  public someSelectedItems = signal(false);\r\n  public selectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__));\r\n  public lengthSelectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__).length);\r\n\r\n  public selectedItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.toSpliced(index, 1, { ...data[index], __selected__: status }));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public selectedAllItems(status: boolean): void {\r\n    this.data.update((data) => data.map((e) => ({ ...e, __selected__: status })));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public someSelected(): boolean {\r\n    return this.data().length > 0 && this.data().some((e: ListItemExtended) => e.__selected__) && !this.allSelectedItems();\r\n  }\r\n\r\n  private checkSelectedItems(): void {\r\n    this.allSelectedItems.set(this.data().length > 0 && this.data().every((e: ListItemExtended) => e.__selected__));\r\n    this.someSelectedItems.set(this.someSelected());\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private generateFormControlsFromFilterInputs(): void {\r\n    if (this.configuration.filters == false) return;\r\n    if (!this.configuration.filters?.length) this.configuration.filters = defaultListFilterInputs();\r\n    const formFilters = new FormGroup({});\r\n    this.configuration.filters?.forEach((filter) => {\r\n      if (filter.text) {\r\n        formFilters.setControl(filter.text.formControlName, new FormControl(filter.text.defaultValue));\r\n      } else if (filter.textarea) {\r\n        formFilters.setControl(filter.textarea.formControlName, new FormControl(filter.textarea.defaultValue));\r\n      } else if (filter.select) {\r\n        formFilters.setControl(filter.select.formControlName, new FormControl(filter.select.defaultValue));\r\n      } else if (filter.number) {\r\n        formFilters.setControl(filter.number.formControlName, new FormControl(filter.number.defaultValue));\r\n      } else if (filter.date) {\r\n        formFilters.setControl(filter.date.formControlName, new FormControl(filter.date.defaultValue));\r\n      } else if (filter.dateRange) {\r\n        formFilters.setControl(filter.dateRange.formControlNameFrom, new FormControl(filter.dateRange.defaultValueFrom));\r\n        formFilters.setControl(filter.dateRange.formControlNameTo, new FormControl(filter.dateRange.defaultValueTo));\r\n      } else if (filter.autocompleteLocal) {\r\n        formFilters.setControl(filter.autocompleteLocal.formControlName, new FormControl(filter.autocompleteLocal.defaultValue));\r\n      } else if (filter.autocompleteServer) {\r\n        formFilters.setControl(filter.autocompleteServer.formControlName, new FormControl(filter.autocompleteServer.defaultValue));\r\n      } else if (filter.checkbox) {\r\n        formFilters.setControl(filter.checkbox.formControlName, new FormControl(filter.checkbox.defaultValue));\r\n      } else if (filter.switch) {\r\n        formFilters.setControl(filter.switch.formControlName, new FormControl(filter.switch.defaultValue));\r\n      }\r\n    });\r\n    this.formFilters = formFilters;\r\n  }\r\n\r\n  public getControlFormFilter(name: string): FormControl {\r\n    return this.formFilters!.get(name) as FormControl;\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private updateLoadingStatusItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.map((item: ListItemExtended, i) => {\r\n      if (i == index) item.__loading_status__ = status;\r\n      return item;\r\n    }));\r\n  }\r\n\r\n  public deleteItem = async (id: number | string) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}`;\r\n    try {\r\n      await this.fetch.delete(url);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public restoreItem = async (id: string | number) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}/restore`;\r\n    const config = { afterAlert: { description: 'Restaurando ítem de la lista' } }\r\n    try {\r\n      await this.fetch.put(url, config);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public updateChangesItem = (index: number, item: any) => {\r\n    this.configuration.data!.update(items => items.toSpliced(index, 1, item));\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "cssClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "cssStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | ",
                    "optional": true,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | ",
                    "optional": true,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "fn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | ",
                    "optional": true,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "routerLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouterLinkItem<T>",
                    "optional": true,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StyleButton",
                    "optional": true,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"clickEvent\" | \"routerLink\"",
                    "optional": false,
                    "description": "",
                    "line": 113
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ActionButton-1"
        },
        {
            "name": "AlertConfiguration",
            "id": "interface-AlertConfiguration-ca749fd6ff34a9f62ac7fd499f99a79801bba7e8d26119fea85a16fbbe6e9c87d8f4f5e60598995a6ae74d4cab54b14d95647d2470ded586adfc91514bf6249e",
            "file": "src/app/shared/components/alert-template/alert-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nexport interface AlertConfiguration {\r\n  title?: string;\r\n  description: string;\r\n  icon?: string;\r\n  showCloseButton?: boolean;\r\n  style?: 'error' | 'primary' | 'tertiary';\r\n  actionButton?: {\r\n      icon?: string;\r\n      text: string;\r\n      fn: () => void\r\n  };\r\n}\r\n\r\n@Component({\r\n  selector: 'app-alert-template',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './alert-template.component.html',\r\n  styleUrls: ['./alert-template.component.scss']\r\n})\r\nexport class AlertTemplateComponent {\r\n  @Input({required: true}) configuration!: AlertConfiguration;\r\n  @Output() close: EventEmitter<boolean> = new EventEmitter();\r\n}\r\n",
            "properties": [
                {
                    "name": "actionButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "showCloseButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"error\" | \"primary\" | \"tertiary\"",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AmountsByClient",
            "id": "interface-AmountsByClient-7782fc6a648c46af5191a222a67f35f31f92ffc515ff9507fbda9a471086479a86cc7884d1280e1c2c84a49b6df424abee0032dd85fd8054d4a805b486d295c4",
            "file": "src/app/modules/organization/clients/client-documents/pages/client-document-payment-create/client-document-payment-create.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Signal, WritableSignal, inject, signal } from '@angular/core';\r\nimport { ItemFormConfiguration, ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\nimport { ClientDocumentPaymentFormComponent } from '../../components/client-document-payment-form/client-document-payment-form.component';\r\nimport { clientFormGroup } from '../../../helpers';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { toSignal } from '@angular/core/rxjs-interop';\r\nimport { from } from 'rxjs';\r\n\r\nexport interface AmountsByClient {\r\n    recaudation_amount: number;\r\n    detraction_amount: number;\r\n    retention_amount: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-client-document-payment-create',\r\n    standalone: true,\r\n    imports: [ItemFormTemplateComponent, ClientDocumentPaymentFormComponent],\r\n    templateUrl: './client-document-payment-create.component.html',\r\n    styleUrl: './client-document-payment-create.component.scss'\r\n})\r\nexport class ClientDocumentPaymentCreateComponent {\r\n    private fetch = inject(FetchService);\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    public amountsByClient = toSignal(from(this.fetch.get<AmountsByClient>(`client-payment/client/${this.activatedRoute.snapshot.parent?.paramMap.get('id')}`)))\r\n    public configuration: ItemFormConfiguration = {\r\n        type: 'create',\r\n        titleModule: 'cliente',\r\n        formGroup: clientFormGroup(),\r\n        server: { url: 'client' },\r\n    };\r\n}\r\n",
            "properties": [
                {
                    "name": "detraction_amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "recaudation_amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "retention_amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AutocompleteConfigurationExt",
            "id": "interface-AutocompleteConfigurationExt-c318b4a215c8ef742cae4789ee423f79c07102763a82acdca3a73e70fce6b013cf18d23c85dd12f649226b77bd037e42298d7e0f64fce4e298d57932521aba8a",
            "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { FetchService, RequestInitFetch, ToastForFetch } from '@service/fetch.service';\r\nimport { EventsService } from '@service/events.service';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { SpinnerDefaultComponent } from '../spinner-default/spinner-default.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { InputFileConfiguration, SelectFileComponent } from '../select-file/select-file.component';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { ErrorTemplateComponent } from '../error-template/error-template.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { ExecuteFunctionPipe } from '@pipe/execute-function.pipe';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { InputAutocompleteConfiguration, InputAutocompleteLocalConfiguration, InputAutocompleteServerConfiguration, InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectConfiguration, InputSelectLocalConfiguration, InputSelectServerConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { ConfirmDialogData } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\n\r\nexport interface ItemFormConfiguration<Item = any, Data = any> {\r\n  title?: string;\r\n  titleModule: string;\r\n\r\n  subtitle?: ((item: Item) => string | number | null | undefined) | false;\r\n\r\n  formGroup: FormGroup;\r\n  type: 'create' | 'update';\r\n\r\n  loading?: boolean;\r\n  hiddeFields?: boolean;\r\n  fields?: FormInput[];\r\n\r\n  dataItem?: WritableSignal<Item | null>,\r\n\r\n  server: {\r\n      url: string;\r\n      queryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      updateUrl?: string;\r\n      updateQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      createUrl?: string;\r\n      createQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      itemUrl?: string;\r\n      itemQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      fetch?: {\r\n        confirmDialog?: ConfirmDialogData,\r\n        toast?: ToastForFetch,\r\n      }\r\n  }\r\n\r\n  parseDataItemBeforeSendFormFn?: (data: Data) => (Data | Promise<Data>);\r\n  afterSaveFormFn?: (data: Item) => void;\r\n\r\n  itemId?: string | number\r\n  parseItemBeforePatchFormFn?: (item: Item) => (Item | Promise<Item>);\r\n\r\n  ignoreShowError?: boolean;\r\n  interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n  httpError?: FetchErrorResponse;\r\n\r\n  disableAutoBackLocation?: boolean;\r\n\r\n  saveButton?: {\r\n      text: string;\r\n      icon?: string;\r\n      iconPosition?: 'left' | 'right';\r\n  };\r\n  \r\n  cancelButton?: {\r\n      iconPosition?: 'left' | 'right';\r\n      text: string;\r\n      icon?: string;\r\n  } | false;\r\n}\r\n\r\nexport declare type InputType = 'select' | 'select-local' | 'select-server' | 'date' | 'date-range' | 'text' | 'number' | 'textarea' | 'checkbox' | 'switch' | 'autocomplete' | 'autocomplete-local' | 'autocomplete-server';\r\n\r\nexport interface FormInput {\r\n\r\n  type: InputType | 'file';\r\n\r\n  text?: TextFormInput;\r\n\r\n  number?: NumberFormInput;\r\n\r\n  textarea?: TextareaFormInput;\r\n  \r\n  date?: DateFormInput;\r\n  \r\n  dateRange?: DateRangeFormInput;\r\n  \r\n  switch?: SwitchFormInput;\r\n  \r\n  checkbox?: CheckboxFormInput;\r\n\r\n  select?: SelectConfigurationExt;\r\n\r\n  selectLocal?: SelectLocalConfigurationExt;\r\n  \r\n  selectServer?: SelectServerConfigurationExt;\r\n\r\n  autocomplete?: AutocompleteConfigurationExt;\r\n\r\n  autocompleteServer?: AutocompleteServerConfigurationExt;\r\n\r\n  autocompleteLocal?: AutocompleteLocalConfigurationExt;\r\n\r\n  file?: FileFormInput;\r\n}\r\n\r\nexport interface TextFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface NumberFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface TextareaFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  rows?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SelectFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | boolean | null;\r\n  options: { text: string, value: any }[];\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateRangeFormInput<T = any> {\r\n  formControlNameFrom: string;\r\n  formControlNameTo: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValueFrom?: Date | string | number | null;\r\n  defaultValueTo?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SwitchFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface CheckboxFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectConfigurationExt<T = any> extends InputSelectConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectLocalConfigurationExt<T = any> extends InputSelectLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectServerConfigurationExt<T = any> extends InputSelectServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteConfigurationExt<T = any> extends InputAutocompleteConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteLocalConfigurationExt<T = any> extends InputAutocompleteLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteServerConfigurationExt<T = any> extends InputAutocompleteServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface FileFormInput<T = any> extends InputFileConfiguration {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: any;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport const textFormInput = (configuration: TextFormInput): FormInput => ({\r\n  type: 'text',\r\n  text: configuration\r\n});\r\n\r\nexport const numberFormInput = (configuration: NumberFormInput): FormInput => ({\r\n  type: 'number',\r\n  number: configuration\r\n});\r\n\r\nexport const textareaFormInput = (configuration: TextareaFormInput): FormInput => ({\r\n  type: 'textarea',\r\n  textarea: configuration\r\n});\r\n\r\nexport const selectFormInput = (configuration: SelectConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectLocalFormInput = (configuration: SelectLocalConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectServerFormInput = (configuration: SelectServerConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const dateFormInput = (configuration: DateFormInput): FormInput => ({\r\n  type: 'date',\r\n  date: configuration\r\n});\r\n\r\nexport const dateRangeFormInput = (configuration: DateRangeFormInput): FormInput => ({\r\n  type: 'date-range',\r\n  dateRange: configuration\r\n});\r\n\r\nexport const switchFormInput = (configuration: SwitchFormInput): FormInput => ({\r\n  type: 'switch',\r\n  switch: configuration\r\n});\r\n\r\nexport const checkboxFormInput = (configuration: CheckboxFormInput): FormInput => ({\r\n  type: 'checkbox',\r\n  checkbox: configuration\r\n});\r\n\r\nexport const autocompleteFormInput = (configuration: AutocompleteConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocomplete: configuration\r\n});\r\n\r\nexport const autocompleteLocalFormInput = (configuration: AutocompleteLocalConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocompleteLocal: configuration\r\n});\r\n\r\nexport const autocompleteServerFormInput = (configuration: AutocompleteServerConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-server',\r\n  autocompleteServer: configuration\r\n});\r\n\r\nexport const fileFormInput = (configuration: FileFormInput): FormInput => ({\r\n  type: 'file',\r\n  file: configuration\r\n});\r\n\r\n\r\n@Component({\r\n  selector: 'app-item-form-template',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ScrollingModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    SelectFileComponent,\r\n    PathFilesServerPipe,\r\n    ScrollingModule,\r\n    ErrorTemplateComponent,\r\n    GetKeyItemPipe,\r\n    ExecuteFunctionPipe,\r\n    GetMixedValuePipe,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n  ],\r\n  templateUrl: './item-form-template.component.html',\r\n  styleUrls: ['./item-form-template.component.css']\r\n})\r\nexport class ItemFormTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemFormConfiguration;\r\n\r\n  private fetch = inject(FetchService);\r\n  private events = inject(EventsService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  public location = inject(Location);\r\n\r\n  private abortController = new AbortController();\r\n\r\n  ngOnInit() {\r\n    if (this.configuration.type == 'update') {\r\n      this.setItemId();\r\n      if (this.configuration.dataItem && this.configuration.dataItem()) {\r\n        this.configuration.loading = false;\r\n      } else {\r\n        this.configuration.dataItem = signal(null);\r\n        this.getItem();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private setItemId() {\r\n    if (!this.configuration.itemId) {\r\n      if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n        this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getControl(name: string): FormControl {\r\n    return this.configuration.formGroup.get(name) as FormControl;\r\n  }\r\n\r\n  public async submitForm() {\r\n    try {\r\n      const form = this.configuration.formGroup;\r\n      form.markAllAsTouched();\r\n      if (form.invalid || this.configuration.loading) return;\r\n      this.configuration.loading = true;\r\n\r\n      let data = form.getRawValue();\r\n      const { parseDataItemBeforeSendFormFn } = this.configuration;\r\n      data = await parseDataItemBeforeSendFormFn?.(data) ?? data;\r\n\r\n      const requestInit: RequestInitFetch = { };\r\n      if(this.configuration.server.fetch?.confirmDialog) {\r\n        requestInit.confirmDialog = this.configuration.server.fetch.confirmDialog;\r\n      }\r\n      if(this.configuration.server.fetch?.toast) {\r\n        requestInit.toast = this.configuration.server.fetch.toast;\r\n      }\r\n\r\n      let response = null;\r\n      if (this.configuration.type === 'create') {\r\n        response = await this.fetch.post(this.configuration.server.url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_created`, response);\r\n      } else {\r\n        const url = this.configuration.server.updateUrl ?? `${this.configuration.server.url}/${this.configuration.dataItem!()?.id}`;\r\n        response = await this.fetch.put(url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_updated`, response);\r\n      }\r\n\r\n      const { afterSaveFormFn } = this.configuration;\r\n      if (afterSaveFormFn) afterSaveFormFn(response);\r\n\r\n      if (!this.configuration.disableAutoBackLocation) this.location.back();\r\n    } catch { }\r\n    this.configuration.loading = false;\r\n  }\r\n\r\n  public async getItem() {\r\n    this.configuration.dataItem = signal(null)\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { itemId, server } = this.configuration;\r\n      let queryParams:any = server.itemQueryParams ?? {};\r\n      if (queryParams instanceof Object) {\r\n        queryParams = objectToURLSearchParams(queryParams);\r\n        queryParams = queryParams.toString();\r\n      }\r\n      const url = `${server.itemUrl ?? server.url}/${itemId}?${queryParams ? queryParams : ''}`;\r\n      const requestInit: RequestInitFetch = { signal: this.abortController.signal };\r\n      let item: any = await this.fetch.get(url, requestInit);\r\n      const { parseItemBeforePatchFormFn } = this.configuration;\r\n      item = await parseItemBeforePatchFormFn?.(item) ?? item;\r\n      this.configuration.formGroup.patchValue(item);\r\n      this.configuration.dataItem.set(item);\r\n      this.configuration.hiddeFields = false;\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "cssClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 214
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number | null",
                    "optional": true,
                    "description": "",
                    "line": 213
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 212
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "InputAutocompleteConfiguration"
            ]
        },
        {
            "name": "AutocompleteLocalConfigurationExt",
            "id": "interface-AutocompleteLocalConfigurationExt-c318b4a215c8ef742cae4789ee423f79c07102763a82acdca3a73e70fce6b013cf18d23c85dd12f649226b77bd037e42298d7e0f64fce4e298d57932521aba8a",
            "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { FetchService, RequestInitFetch, ToastForFetch } from '@service/fetch.service';\r\nimport { EventsService } from '@service/events.service';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { SpinnerDefaultComponent } from '../spinner-default/spinner-default.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { InputFileConfiguration, SelectFileComponent } from '../select-file/select-file.component';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { ErrorTemplateComponent } from '../error-template/error-template.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { ExecuteFunctionPipe } from '@pipe/execute-function.pipe';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { InputAutocompleteConfiguration, InputAutocompleteLocalConfiguration, InputAutocompleteServerConfiguration, InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectConfiguration, InputSelectLocalConfiguration, InputSelectServerConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { ConfirmDialogData } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\n\r\nexport interface ItemFormConfiguration<Item = any, Data = any> {\r\n  title?: string;\r\n  titleModule: string;\r\n\r\n  subtitle?: ((item: Item) => string | number | null | undefined) | false;\r\n\r\n  formGroup: FormGroup;\r\n  type: 'create' | 'update';\r\n\r\n  loading?: boolean;\r\n  hiddeFields?: boolean;\r\n  fields?: FormInput[];\r\n\r\n  dataItem?: WritableSignal<Item | null>,\r\n\r\n  server: {\r\n      url: string;\r\n      queryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      updateUrl?: string;\r\n      updateQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      createUrl?: string;\r\n      createQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      itemUrl?: string;\r\n      itemQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      fetch?: {\r\n        confirmDialog?: ConfirmDialogData,\r\n        toast?: ToastForFetch,\r\n      }\r\n  }\r\n\r\n  parseDataItemBeforeSendFormFn?: (data: Data) => (Data | Promise<Data>);\r\n  afterSaveFormFn?: (data: Item) => void;\r\n\r\n  itemId?: string | number\r\n  parseItemBeforePatchFormFn?: (item: Item) => (Item | Promise<Item>);\r\n\r\n  ignoreShowError?: boolean;\r\n  interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n  httpError?: FetchErrorResponse;\r\n\r\n  disableAutoBackLocation?: boolean;\r\n\r\n  saveButton?: {\r\n      text: string;\r\n      icon?: string;\r\n      iconPosition?: 'left' | 'right';\r\n  };\r\n  \r\n  cancelButton?: {\r\n      iconPosition?: 'left' | 'right';\r\n      text: string;\r\n      icon?: string;\r\n  } | false;\r\n}\r\n\r\nexport declare type InputType = 'select' | 'select-local' | 'select-server' | 'date' | 'date-range' | 'text' | 'number' | 'textarea' | 'checkbox' | 'switch' | 'autocomplete' | 'autocomplete-local' | 'autocomplete-server';\r\n\r\nexport interface FormInput {\r\n\r\n  type: InputType | 'file';\r\n\r\n  text?: TextFormInput;\r\n\r\n  number?: NumberFormInput;\r\n\r\n  textarea?: TextareaFormInput;\r\n  \r\n  date?: DateFormInput;\r\n  \r\n  dateRange?: DateRangeFormInput;\r\n  \r\n  switch?: SwitchFormInput;\r\n  \r\n  checkbox?: CheckboxFormInput;\r\n\r\n  select?: SelectConfigurationExt;\r\n\r\n  selectLocal?: SelectLocalConfigurationExt;\r\n  \r\n  selectServer?: SelectServerConfigurationExt;\r\n\r\n  autocomplete?: AutocompleteConfigurationExt;\r\n\r\n  autocompleteServer?: AutocompleteServerConfigurationExt;\r\n\r\n  autocompleteLocal?: AutocompleteLocalConfigurationExt;\r\n\r\n  file?: FileFormInput;\r\n}\r\n\r\nexport interface TextFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface NumberFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface TextareaFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  rows?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SelectFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | boolean | null;\r\n  options: { text: string, value: any }[];\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateRangeFormInput<T = any> {\r\n  formControlNameFrom: string;\r\n  formControlNameTo: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValueFrom?: Date | string | number | null;\r\n  defaultValueTo?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SwitchFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface CheckboxFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectConfigurationExt<T = any> extends InputSelectConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectLocalConfigurationExt<T = any> extends InputSelectLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectServerConfigurationExt<T = any> extends InputSelectServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteConfigurationExt<T = any> extends InputAutocompleteConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteLocalConfigurationExt<T = any> extends InputAutocompleteLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteServerConfigurationExt<T = any> extends InputAutocompleteServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface FileFormInput<T = any> extends InputFileConfiguration {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: any;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport const textFormInput = (configuration: TextFormInput): FormInput => ({\r\n  type: 'text',\r\n  text: configuration\r\n});\r\n\r\nexport const numberFormInput = (configuration: NumberFormInput): FormInput => ({\r\n  type: 'number',\r\n  number: configuration\r\n});\r\n\r\nexport const textareaFormInput = (configuration: TextareaFormInput): FormInput => ({\r\n  type: 'textarea',\r\n  textarea: configuration\r\n});\r\n\r\nexport const selectFormInput = (configuration: SelectConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectLocalFormInput = (configuration: SelectLocalConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectServerFormInput = (configuration: SelectServerConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const dateFormInput = (configuration: DateFormInput): FormInput => ({\r\n  type: 'date',\r\n  date: configuration\r\n});\r\n\r\nexport const dateRangeFormInput = (configuration: DateRangeFormInput): FormInput => ({\r\n  type: 'date-range',\r\n  dateRange: configuration\r\n});\r\n\r\nexport const switchFormInput = (configuration: SwitchFormInput): FormInput => ({\r\n  type: 'switch',\r\n  switch: configuration\r\n});\r\n\r\nexport const checkboxFormInput = (configuration: CheckboxFormInput): FormInput => ({\r\n  type: 'checkbox',\r\n  checkbox: configuration\r\n});\r\n\r\nexport const autocompleteFormInput = (configuration: AutocompleteConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocomplete: configuration\r\n});\r\n\r\nexport const autocompleteLocalFormInput = (configuration: AutocompleteLocalConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocompleteLocal: configuration\r\n});\r\n\r\nexport const autocompleteServerFormInput = (configuration: AutocompleteServerConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-server',\r\n  autocompleteServer: configuration\r\n});\r\n\r\nexport const fileFormInput = (configuration: FileFormInput): FormInput => ({\r\n  type: 'file',\r\n  file: configuration\r\n});\r\n\r\n\r\n@Component({\r\n  selector: 'app-item-form-template',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ScrollingModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    SelectFileComponent,\r\n    PathFilesServerPipe,\r\n    ScrollingModule,\r\n    ErrorTemplateComponent,\r\n    GetKeyItemPipe,\r\n    ExecuteFunctionPipe,\r\n    GetMixedValuePipe,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n  ],\r\n  templateUrl: './item-form-template.component.html',\r\n  styleUrls: ['./item-form-template.component.css']\r\n})\r\nexport class ItemFormTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemFormConfiguration;\r\n\r\n  private fetch = inject(FetchService);\r\n  private events = inject(EventsService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  public location = inject(Location);\r\n\r\n  private abortController = new AbortController();\r\n\r\n  ngOnInit() {\r\n    if (this.configuration.type == 'update') {\r\n      this.setItemId();\r\n      if (this.configuration.dataItem && this.configuration.dataItem()) {\r\n        this.configuration.loading = false;\r\n      } else {\r\n        this.configuration.dataItem = signal(null);\r\n        this.getItem();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private setItemId() {\r\n    if (!this.configuration.itemId) {\r\n      if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n        this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getControl(name: string): FormControl {\r\n    return this.configuration.formGroup.get(name) as FormControl;\r\n  }\r\n\r\n  public async submitForm() {\r\n    try {\r\n      const form = this.configuration.formGroup;\r\n      form.markAllAsTouched();\r\n      if (form.invalid || this.configuration.loading) return;\r\n      this.configuration.loading = true;\r\n\r\n      let data = form.getRawValue();\r\n      const { parseDataItemBeforeSendFormFn } = this.configuration;\r\n      data = await parseDataItemBeforeSendFormFn?.(data) ?? data;\r\n\r\n      const requestInit: RequestInitFetch = { };\r\n      if(this.configuration.server.fetch?.confirmDialog) {\r\n        requestInit.confirmDialog = this.configuration.server.fetch.confirmDialog;\r\n      }\r\n      if(this.configuration.server.fetch?.toast) {\r\n        requestInit.toast = this.configuration.server.fetch.toast;\r\n      }\r\n\r\n      let response = null;\r\n      if (this.configuration.type === 'create') {\r\n        response = await this.fetch.post(this.configuration.server.url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_created`, response);\r\n      } else {\r\n        const url = this.configuration.server.updateUrl ?? `${this.configuration.server.url}/${this.configuration.dataItem!()?.id}`;\r\n        response = await this.fetch.put(url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_updated`, response);\r\n      }\r\n\r\n      const { afterSaveFormFn } = this.configuration;\r\n      if (afterSaveFormFn) afterSaveFormFn(response);\r\n\r\n      if (!this.configuration.disableAutoBackLocation) this.location.back();\r\n    } catch { }\r\n    this.configuration.loading = false;\r\n  }\r\n\r\n  public async getItem() {\r\n    this.configuration.dataItem = signal(null)\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { itemId, server } = this.configuration;\r\n      let queryParams:any = server.itemQueryParams ?? {};\r\n      if (queryParams instanceof Object) {\r\n        queryParams = objectToURLSearchParams(queryParams);\r\n        queryParams = queryParams.toString();\r\n      }\r\n      const url = `${server.itemUrl ?? server.url}/${itemId}?${queryParams ? queryParams : ''}`;\r\n      const requestInit: RequestInitFetch = { signal: this.abortController.signal };\r\n      let item: any = await this.fetch.get(url, requestInit);\r\n      const { parseItemBeforePatchFormFn } = this.configuration;\r\n      item = await parseItemBeforePatchFormFn?.(item) ?? item;\r\n      this.configuration.formGroup.patchValue(item);\r\n      this.configuration.dataItem.set(item);\r\n      this.configuration.hiddeFields = false;\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "cssClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 220
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number | null",
                    "optional": true,
                    "description": "",
                    "line": 219
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 218
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "InputAutocompleteLocalConfiguration"
            ]
        },
        {
            "name": "AutocompleteServerConfigurationExt",
            "id": "interface-AutocompleteServerConfigurationExt-c318b4a215c8ef742cae4789ee423f79c07102763a82acdca3a73e70fce6b013cf18d23c85dd12f649226b77bd037e42298d7e0f64fce4e298d57932521aba8a",
            "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { FetchService, RequestInitFetch, ToastForFetch } from '@service/fetch.service';\r\nimport { EventsService } from '@service/events.service';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { SpinnerDefaultComponent } from '../spinner-default/spinner-default.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { InputFileConfiguration, SelectFileComponent } from '../select-file/select-file.component';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { ErrorTemplateComponent } from '../error-template/error-template.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { ExecuteFunctionPipe } from '@pipe/execute-function.pipe';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { InputAutocompleteConfiguration, InputAutocompleteLocalConfiguration, InputAutocompleteServerConfiguration, InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectConfiguration, InputSelectLocalConfiguration, InputSelectServerConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { ConfirmDialogData } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\n\r\nexport interface ItemFormConfiguration<Item = any, Data = any> {\r\n  title?: string;\r\n  titleModule: string;\r\n\r\n  subtitle?: ((item: Item) => string | number | null | undefined) | false;\r\n\r\n  formGroup: FormGroup;\r\n  type: 'create' | 'update';\r\n\r\n  loading?: boolean;\r\n  hiddeFields?: boolean;\r\n  fields?: FormInput[];\r\n\r\n  dataItem?: WritableSignal<Item | null>,\r\n\r\n  server: {\r\n      url: string;\r\n      queryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      updateUrl?: string;\r\n      updateQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      createUrl?: string;\r\n      createQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      itemUrl?: string;\r\n      itemQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      fetch?: {\r\n        confirmDialog?: ConfirmDialogData,\r\n        toast?: ToastForFetch,\r\n      }\r\n  }\r\n\r\n  parseDataItemBeforeSendFormFn?: (data: Data) => (Data | Promise<Data>);\r\n  afterSaveFormFn?: (data: Item) => void;\r\n\r\n  itemId?: string | number\r\n  parseItemBeforePatchFormFn?: (item: Item) => (Item | Promise<Item>);\r\n\r\n  ignoreShowError?: boolean;\r\n  interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n  httpError?: FetchErrorResponse;\r\n\r\n  disableAutoBackLocation?: boolean;\r\n\r\n  saveButton?: {\r\n      text: string;\r\n      icon?: string;\r\n      iconPosition?: 'left' | 'right';\r\n  };\r\n  \r\n  cancelButton?: {\r\n      iconPosition?: 'left' | 'right';\r\n      text: string;\r\n      icon?: string;\r\n  } | false;\r\n}\r\n\r\nexport declare type InputType = 'select' | 'select-local' | 'select-server' | 'date' | 'date-range' | 'text' | 'number' | 'textarea' | 'checkbox' | 'switch' | 'autocomplete' | 'autocomplete-local' | 'autocomplete-server';\r\n\r\nexport interface FormInput {\r\n\r\n  type: InputType | 'file';\r\n\r\n  text?: TextFormInput;\r\n\r\n  number?: NumberFormInput;\r\n\r\n  textarea?: TextareaFormInput;\r\n  \r\n  date?: DateFormInput;\r\n  \r\n  dateRange?: DateRangeFormInput;\r\n  \r\n  switch?: SwitchFormInput;\r\n  \r\n  checkbox?: CheckboxFormInput;\r\n\r\n  select?: SelectConfigurationExt;\r\n\r\n  selectLocal?: SelectLocalConfigurationExt;\r\n  \r\n  selectServer?: SelectServerConfigurationExt;\r\n\r\n  autocomplete?: AutocompleteConfigurationExt;\r\n\r\n  autocompleteServer?: AutocompleteServerConfigurationExt;\r\n\r\n  autocompleteLocal?: AutocompleteLocalConfigurationExt;\r\n\r\n  file?: FileFormInput;\r\n}\r\n\r\nexport interface TextFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface NumberFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface TextareaFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  rows?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SelectFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | boolean | null;\r\n  options: { text: string, value: any }[];\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateRangeFormInput<T = any> {\r\n  formControlNameFrom: string;\r\n  formControlNameTo: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValueFrom?: Date | string | number | null;\r\n  defaultValueTo?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SwitchFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface CheckboxFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectConfigurationExt<T = any> extends InputSelectConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectLocalConfigurationExt<T = any> extends InputSelectLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectServerConfigurationExt<T = any> extends InputSelectServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteConfigurationExt<T = any> extends InputAutocompleteConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteLocalConfigurationExt<T = any> extends InputAutocompleteLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteServerConfigurationExt<T = any> extends InputAutocompleteServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface FileFormInput<T = any> extends InputFileConfiguration {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: any;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport const textFormInput = (configuration: TextFormInput): FormInput => ({\r\n  type: 'text',\r\n  text: configuration\r\n});\r\n\r\nexport const numberFormInput = (configuration: NumberFormInput): FormInput => ({\r\n  type: 'number',\r\n  number: configuration\r\n});\r\n\r\nexport const textareaFormInput = (configuration: TextareaFormInput): FormInput => ({\r\n  type: 'textarea',\r\n  textarea: configuration\r\n});\r\n\r\nexport const selectFormInput = (configuration: SelectConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectLocalFormInput = (configuration: SelectLocalConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectServerFormInput = (configuration: SelectServerConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const dateFormInput = (configuration: DateFormInput): FormInput => ({\r\n  type: 'date',\r\n  date: configuration\r\n});\r\n\r\nexport const dateRangeFormInput = (configuration: DateRangeFormInput): FormInput => ({\r\n  type: 'date-range',\r\n  dateRange: configuration\r\n});\r\n\r\nexport const switchFormInput = (configuration: SwitchFormInput): FormInput => ({\r\n  type: 'switch',\r\n  switch: configuration\r\n});\r\n\r\nexport const checkboxFormInput = (configuration: CheckboxFormInput): FormInput => ({\r\n  type: 'checkbox',\r\n  checkbox: configuration\r\n});\r\n\r\nexport const autocompleteFormInput = (configuration: AutocompleteConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocomplete: configuration\r\n});\r\n\r\nexport const autocompleteLocalFormInput = (configuration: AutocompleteLocalConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocompleteLocal: configuration\r\n});\r\n\r\nexport const autocompleteServerFormInput = (configuration: AutocompleteServerConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-server',\r\n  autocompleteServer: configuration\r\n});\r\n\r\nexport const fileFormInput = (configuration: FileFormInput): FormInput => ({\r\n  type: 'file',\r\n  file: configuration\r\n});\r\n\r\n\r\n@Component({\r\n  selector: 'app-item-form-template',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ScrollingModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    SelectFileComponent,\r\n    PathFilesServerPipe,\r\n    ScrollingModule,\r\n    ErrorTemplateComponent,\r\n    GetKeyItemPipe,\r\n    ExecuteFunctionPipe,\r\n    GetMixedValuePipe,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n  ],\r\n  templateUrl: './item-form-template.component.html',\r\n  styleUrls: ['./item-form-template.component.css']\r\n})\r\nexport class ItemFormTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemFormConfiguration;\r\n\r\n  private fetch = inject(FetchService);\r\n  private events = inject(EventsService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  public location = inject(Location);\r\n\r\n  private abortController = new AbortController();\r\n\r\n  ngOnInit() {\r\n    if (this.configuration.type == 'update') {\r\n      this.setItemId();\r\n      if (this.configuration.dataItem && this.configuration.dataItem()) {\r\n        this.configuration.loading = false;\r\n      } else {\r\n        this.configuration.dataItem = signal(null);\r\n        this.getItem();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private setItemId() {\r\n    if (!this.configuration.itemId) {\r\n      if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n        this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getControl(name: string): FormControl {\r\n    return this.configuration.formGroup.get(name) as FormControl;\r\n  }\r\n\r\n  public async submitForm() {\r\n    try {\r\n      const form = this.configuration.formGroup;\r\n      form.markAllAsTouched();\r\n      if (form.invalid || this.configuration.loading) return;\r\n      this.configuration.loading = true;\r\n\r\n      let data = form.getRawValue();\r\n      const { parseDataItemBeforeSendFormFn } = this.configuration;\r\n      data = await parseDataItemBeforeSendFormFn?.(data) ?? data;\r\n\r\n      const requestInit: RequestInitFetch = { };\r\n      if(this.configuration.server.fetch?.confirmDialog) {\r\n        requestInit.confirmDialog = this.configuration.server.fetch.confirmDialog;\r\n      }\r\n      if(this.configuration.server.fetch?.toast) {\r\n        requestInit.toast = this.configuration.server.fetch.toast;\r\n      }\r\n\r\n      let response = null;\r\n      if (this.configuration.type === 'create') {\r\n        response = await this.fetch.post(this.configuration.server.url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_created`, response);\r\n      } else {\r\n        const url = this.configuration.server.updateUrl ?? `${this.configuration.server.url}/${this.configuration.dataItem!()?.id}`;\r\n        response = await this.fetch.put(url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_updated`, response);\r\n      }\r\n\r\n      const { afterSaveFormFn } = this.configuration;\r\n      if (afterSaveFormFn) afterSaveFormFn(response);\r\n\r\n      if (!this.configuration.disableAutoBackLocation) this.location.back();\r\n    } catch { }\r\n    this.configuration.loading = false;\r\n  }\r\n\r\n  public async getItem() {\r\n    this.configuration.dataItem = signal(null)\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { itemId, server } = this.configuration;\r\n      let queryParams:any = server.itemQueryParams ?? {};\r\n      if (queryParams instanceof Object) {\r\n        queryParams = objectToURLSearchParams(queryParams);\r\n        queryParams = queryParams.toString();\r\n      }\r\n      const url = `${server.itemUrl ?? server.url}/${itemId}?${queryParams ? queryParams : ''}`;\r\n      const requestInit: RequestInitFetch = { signal: this.abortController.signal };\r\n      let item: any = await this.fetch.get(url, requestInit);\r\n      const { parseItemBeforePatchFormFn } = this.configuration;\r\n      item = await parseItemBeforePatchFormFn?.(item) ?? item;\r\n      this.configuration.formGroup.patchValue(item);\r\n      this.configuration.dataItem.set(item);\r\n      this.configuration.hiddeFields = false;\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "cssClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 226
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number | null",
                    "optional": true,
                    "description": "",
                    "line": 225
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 224
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "InputAutocompleteServerConfiguration"
            ]
        },
        {
            "name": "Bank",
            "id": "interface-Bank-b12e78c6872518dc8a71b58005fca6a2dd91e0877464654a6b1fc131de5ac67071fbac189b1bfc4761f62c336c190d02f0fde7bb7b97b03ff0db4834f78a1d7e",
            "file": "src/app/shared/interfaces/bank.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel } from \"./baseModel\";\r\n\r\nexport interface Bank extends BaseModel {\r\n  name: string;\r\n  code: string;\r\n  image: string;\r\n  description: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "BaseModel",
            "id": "interface-BaseModel-539c417078a88588acbfa3a6d2b95a01845872f60216d29bda99159b464dd6556f90ce7d00835b9255ad78e3d34a73c10bf81c9ee2b32289c96320737bd355ea",
            "file": "src/app/shared/interfaces/baseModel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { User, UserRoleEnum } from \"./user\";\r\n\r\nexport interface BaseModel {\r\n  id: number;\r\n\r\n  created_at: string;\r\n  updated_at: string | null;\r\n  deleted_at: string | null;\r\n  create_user_id: number | null;\r\n  update_user_id: number | null;\r\n  delete_user_id: number | null;\r\n  restore_user_id: number | null;\r\n\r\n  update_user?: User;\r\n  create_user?: User;\r\n  delete_user?: User;\r\n  restore_user?: User;\r\n\r\n  status: StatusModel;\r\n}\r\n\r\nexport enum DocumentTypeEnum {\r\n  DNI = 'dni',\r\n  RUC = 'ruc',\r\n  CARNET_EXTRANJERIA = 'carnet de extranjeria',\r\n  PASAPORTE = 'pasaporte',\r\n  OTRO = 'otro',\r\n}\r\nexport enum CoinEnum {\r\n  SOLES = 'soles',\r\n  DOLARES = 'dólares',\r\n}\r\n\r\nexport const DOCUMENT_TYPES = Object.values(DocumentTypeEnum);\r\nexport const USER_ROLES = Object.values(UserRoleEnum);\r\nexport const COIN = Object.values(CoinEnum);\r\n\r\nexport enum StatusModel {\r\n  Activo = 'activo',\r\n  Inactivo = 'inactivo',\r\n  Pediente = 'pendiente',\r\n  Aprobado = 'aprobado',\r\n  Enviado = 'enviado',\r\n  Entregado = 'entregado',\r\n  Recibido = 'recibido',\r\n  Pagado = 'pagado',\r\n  Facturado = 'facturado',\r\n  Vigente = 'vigente',\r\n  Habilitado = 'habilitado',\r\n\r\n  Anulado = 'anulado',\r\n  Rechazado = 'rechazado',\r\n  Expirado = 'expirado',\r\n  Finalizado = 'finalizado',\r\n  Abierto = 'abierto',\r\n  Cerrado = 'cerrado',\r\n  Revisado = 'revisado',\r\n  Eliminado = 'eliminado',\r\n\r\n  PendientePago = 'pendiente de pago',\r\n  PendienteFacturación = 'pendiente de facturación',\r\n  PendienteEntrega = 'pendiente de entrega',\r\n  PendienteRevision = 'pendiente de revisión',\r\n  PendienteAprobacion = 'pendiente de aprobación',\r\n  PendienteEnvio = 'pendiente de envío',\r\n  PendienteRecibo = 'pendiente de recibo',\r\n  PendienteCierre = 'pendiente de cierre',\r\n  PendienteFinalizacion = 'pendiente de finalización',\r\n  PendienteAnulación = 'pendiente de anulación',\r\n  PendienteRechazo = 'pendiente de rechazo',\r\n\r\n  Generada= 'generada',\r\n  PendienteAceptar= 'pendiente aceptar',\r\n  Aceptada= 'aceptada',\r\n  Observada= 'observada',\r\n  Rechazada= 'rechazada',\r\n  Pagada = 'pagada',\r\n  Anulada= 'anulada',\r\n  PorAnular= 'por anular',\r\n  Aplicada= 'aplicada',\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "create_user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "create_user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "created_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "delete_user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "delete_user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "deleted_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "restore_user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "restore_user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StatusModel",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "update_user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "update_user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "updated_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Box",
            "id": "interface-Box-1c6045fb41e865a52eaf8db66b8ad4c0d72a97b49cfe10edee6ae73690b0336133758e1842ffbbc6f9e2163ec7155722e33311e2d631cd6bfe542181c77dc3d7",
            "file": "src/app/shared/interfaces/box.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Account } from \"./account\";\r\nimport { BaseModel, CoinEnum } from \"./baseModel\";\r\nimport { BoxOpening } from \"./boxOpening\";\r\n\r\nexport interface Box extends BaseModel{\r\n    id: number;\r\n    type: BoxTypeEnum;\r\n    name: string;\r\n    description: string;\r\n    coin: CoinEnum;\r\n    amount: number;\r\n    code: string;\r\n\r\n    box_openings?: BoxOpening[];\r\n    last_box_opening?: BoxOpening;\r\n    last_box_opening_active?: BoxOpening;\r\n\r\n    account_id: number;\r\n\r\n    account?: Account;\r\n}\r\n\r\nexport enum BoxTypeEnum {\r\n    FISICA = 'fisica',\r\n    VIRTUAL = 'virtual',\r\n}\r\n",
            "properties": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Account",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "account_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "box_openings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoxOpening[]",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "coin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CoinEnum",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "last_box_opening",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoxOpening",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "last_box_opening_active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoxOpening",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoxTypeEnum",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "BoxMovement",
            "id": "interface-BoxMovement-40f2a56c24134576354ed5e60c0d7b829a06f8a57282d6d5b2afa3e6fc8af67818141fc48eecb12c2f6b52aa2fc6b7f44da4e496ec82ecd3243f1110e1f5b119",
            "file": "src/app/shared/interfaces/boxMovement.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Bank } from \"./bank\";\r\nimport { BaseModel, CoinEnum } from \"./baseModel\";\r\nimport { BoxOpening } from \"./boxOpening\";\r\nimport { ComprobantTypeEnum } from \"./clientBillingOption\";\r\nimport { User } from \"./user\";\r\n\r\nexport interface BoxMovement extends BaseModel {\r\n    id: number;\r\n    type: BoxMovementTypeEnum;\r\n    concept: string;\r\n    link_file: string;\r\n    amount: number;\r\n    payment_type: PaymentTypeEnum;\r\n    payment_date: string;\r\n    code: string;\r\n    operation_code: string;\r\n    coin: CoinEnum;\r\n    observation: string;\r\n    voucher_type: ComprobantTypeEnum;\r\n    voucher_file: string;\r\n    invoice_number: string;\r\n\r\n    bank_id: number;\r\n    box_opening_id: number;\r\n    user_id: number;\r\n\r\n    bank?: Bank;\r\n    box_opening?: BoxOpening;\r\n    user?: User;\r\n}\r\n\r\nexport enum BoxMovementTypeEnum {\r\n    INGRESO = 'ingreso',\r\n    EGRESO = 'egreso',\r\n    MOVIMIENTO_ENTRE_CAJAS = 'movimiento entre cajas',\r\n}\r\n\r\nexport enum PaymentTypeEnum {\r\n    TRANSFERENCIA = 'transferencia',\r\n    DEPOSITO = 'depósito',\r\n    EFECTIVO = 'efectivo',\r\n    CHEQUE = 'cheque',\r\n}\r\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "bank",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Bank",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "bank_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "box_opening",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoxOpening",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "box_opening_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "coin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CoinEnum",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "concept",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "invoice_number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "link_file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "observation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "operation_code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "payment_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "payment_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaymentTypeEnum",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoxMovementTypeEnum",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "voucher_file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "voucher_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComprobantTypeEnum",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "BoxOpening",
            "id": "interface-BoxOpening-ee023bf49207535cacd8bd2e98ecf91e34afccc3d103e52ba7477196cfa18b5c4babab3f421eeb6d51f1df522c0112ddf720738424b5e22dd6c32625c4e3300b",
            "file": "src/app/shared/interfaces/boxOpening.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel } from \"./baseModel\";\r\nimport { Box } from \"./box\";\r\nimport { User } from \"./user\";\r\n\r\nexport interface BoxOpening extends Omit<BaseModel,'status'>{\r\n    id: number;\r\n    open_user_id: number;\r\n    close_user_id: number;\r\n    working_user_ids: string;\r\n    date_open: string;\r\n    date_close: string;\r\n    amount_init: number;\r\n    amount_exit: number;\r\n    code: string;\r\n    status: string;\r\n\r\n    box_id: number;\r\n\r\n    open_user?: User;\r\n    close_user?: User;\r\n\r\n    box?: Box;\r\n}\r\n",
            "properties": [
                {
                    "name": "amount_exit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "amount_init",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "box",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Box",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "box_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "close_user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "close_user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "date_close",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "date_open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "open_user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "open_user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "working_user_ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "Omit"
            ]
        },
        {
            "name": "ButtonAddInputAutocomplete",
            "id": "interface-ButtonAddInputAutocomplete-bd14b6266fa4cf3ac6d1c8ba2983660e710be52a4a04554bf38570c6a3d8a191246f43a725132d4ede61012ec5736f74f6ee8c6537f174970a9ec098ba910dd0",
            "file": "src/app/shared/components/input-autocomplete-template/input-autocomplete-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NgStyle } from '@angular/common';\r\nimport { Component, ElementRef, Input, Renderer2, ViewChild, WritableSignal, inject, signal } from '@angular/core';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { RouterLink } from '@angular/router';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { DatabaseStorageService, NameModuleDatabase } from \"@service/database-storage.service\";\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { debounceTime, tap } from 'rxjs/operators';\r\n\r\nexport interface InputAutocompleteConfiguration<T = any> {\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  cssClassOption?: string | ((item: T) => string);\r\n  cssStyleOption?: ({ [key: string]: any }) | ((item: T) => ({ [key: string]: any }));\r\n  disableOptionFn?: (item: T) => boolean;\r\n  conditionFilterFn?: (item: T, value: string) => boolean;\r\n  displayValueFn?: (item: T) => string | number | { [key: string]: any };\r\n  displayTextFn?: (item: T) => string | number;\r\n  parseDataFn?: (data: T[]) => (T[] | Promise<T[]>);\r\n  data?: T[];\r\n  addButton?: RouterLinkInputAutocomplete;\r\n}\r\n\r\nexport interface InputAutocompleteServerConfiguration<T = any> extends InputAutocompleteConfiguration<T> {\r\n  server: {\r\n    url: string;\r\n    searchKey?: string;\r\n    queryParams?: string | { [key: string]: any };\r\n  }\r\n}\r\n\r\nexport interface InputAutocompleteLocalConfiguration<T = any> extends InputAutocompleteConfiguration<T> {\r\n  local: {\r\n    readonly nameModuleDatabase: NameModuleDatabase;\r\n  }\r\n}\r\n\r\nexport interface ButtonAddInputAutocomplete {\r\n  label?: string;\r\n  routerLink: string;\r\n  function?: () => void;\r\n  outlet: 'route-lateral' | 'principal';\r\n}\r\n\r\ninterface RouterLinkInputAutocomplete {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any\r\n}\r\n@Component({\r\n  selector: 'app-input-autocomplete-template',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    NgStyle,\r\n    MatFormFieldModule,\r\n    MatAutocompleteModule,\r\n    MatInputModule,\r\n    GetMixedValuePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    RouterLink,\r\n  ],\r\n  templateUrl: './input-autocomplete-template.component.html',\r\n  styleUrl: './input-autocomplete-template.component.scss'\r\n})\r\nexport class InputAutocompleteTemplateComponent {\r\n  @Input({ required: true }) configuration!: InputAutocompleteConfiguration | InputAutocompleteLocalConfiguration | InputAutocompleteServerConfiguration;\r\n  @Input({ required: true }) idControl!: FormControl;\r\n  @Input() autocompleteControl: FormControl = new FormControl();\r\n\r\n  @ViewChild('inputHtml', { static: true })\r\n  inputHtml!: ElementRef<HTMLInputElement>;\r\n\r\n  private databaseStorage = inject(DatabaseStorageService);\r\n  private fetch = inject(FetchService);\r\n  private renderer = inject(Renderer2);\r\n\r\n  public filterData: WritableSignal<any[]> = signal([]);\r\n  public loading: WritableSignal<boolean> = signal(false);\r\n  public init: WritableSignal<boolean> = signal(false);\r\n  private abortController = new AbortController();\r\n\r\n  get conditionFilterFn(): (item: any, value: string) => boolean {\r\n    return this.configuration.conditionFilterFn ?? ((item, value) => (item.name ?? '').trim().toLowerCase().includes(value.trim().toLowerCase()));\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if((this.configuration as InputAutocompleteLocalConfiguration).local) {\r\n      if(this.idControl.value) {\r\n        this.findLocalItem(this.idControl.value);\r\n      };\r\n    }\r\n    this.autocompleteControl.valueChanges.pipe(tap(() => this.loading.set(true)), debounceTime(250))\r\n      .subscribe((data: (string | { [key: string]: any })) => {\r\n        this.init.set(true);\r\n        if (data instanceof Object) {\r\n          const value = this.configuration.displayValueFn ? this.configuration.displayValueFn(data) : data['id'];\r\n          this.idControl.setValue(value, { emitEvent: false });\r\n          this.renderer.setAttribute(this.inputHtml.nativeElement, 'readonly', 'readonly');\r\n        } else if (data !== null && data !== undefined) {\r\n          if (this.idControl.value) this.idControl.setValue(null, { emitEvent: false });\r\n          if (this.configuration.data) this.getItemsFromData(data);\r\n          else if ((this.configuration as InputAutocompleteLocalConfiguration).local) this.getItemsLocal(data);\r\n          else if ((this.configuration as InputAutocompleteServerConfiguration).server) this.getItemsServer(data);\r\n        }\r\n      });\r\n  }\r\n\r\n  private async findLocalItem(value: number | string): Promise<void> {\r\n    const data = await this.databaseStorage.getData<any>((this.configuration as InputAutocompleteLocalConfiguration).local!.nameModuleDatabase);\r\n    const item = data.find((item) => {\r\n      const id = this.configuration.displayValueFn ? this.configuration.displayValueFn(data) : item['id']\r\n      return id == value\r\n    });\r\n    this.autocompleteControl.setValue(item);\r\n  }\r\n\r\n  private async getItemsFromData(value: string): Promise<void> {\r\n    let data = this.configuration.data!;\r\n    const { parseDataFn } = this.configuration;\r\n    if (parseDataFn) data = await parseDataFn(data);\r\n    this.filterData.set(data.filter((item) => this.conditionFilterFn(item, value)));\r\n    this.loading.set(false);\r\n  }\r\n\r\n  private async getItemsLocal(value: string): Promise<void> {\r\n    const { nameModuleDatabase } = (this.configuration as InputAutocompleteLocalConfiguration).local!;\r\n    let data = await this.databaseStorage.getData(nameModuleDatabase);\r\n    const { parseDataFn } = this.configuration;\r\n    if (parseDataFn) data = await parseDataFn(data);\r\n    this.filterData.set(data.filter((item) => this.conditionFilterFn(item, value)));\r\n    this.loading.set(false);\r\n  }\r\n\r\n  private async getItemsServer(value: string): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const { url, searchKey } = (this.configuration as InputAutocompleteServerConfiguration).server!;\r\n    let queryParams = (this.configuration as InputAutocompleteServerConfiguration).server!.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    try {\r\n      const endpoint = `${url}?${searchKey ?? 'search'}=${value}&${queryParams ? queryParams : ''}`;\r\n      const response = await this.fetch.get<PaginatorData<any> | any[]>(endpoint, { signal: this.abortController.signal });\r\n      let data = response instanceof Array ? response : response.data;\r\n      const { parseDataFn } = this.configuration;\r\n      if (parseDataFn) data = await parseDataFn(data);\r\n      this.filterData.set(data);\r\n      this.loading.set(false);\r\n    } catch (error: any) {\r\n      if (error.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n    this.loading.set(false);\r\n  }\r\n\r\n  public displayFn = (value: any) => {\r\n    return value instanceof Object ? value.name : ''\r\n  }\r\n\r\n  public clearInput() {\r\n    this.autocompleteControl.setValue(null);\r\n    this.idControl.setValue(null, { emitEvent: false });\r\n    this.renderer.removeAttribute(this.inputHtml.nativeElement, 'readonly');\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "outlet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"route-lateral\" | \"principal\"",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "routerLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ButtonAddInputSelect",
            "id": "interface-ButtonAddInputSelect-a6a025df6f336f909585f40229d9e1c6d8fb29cebafc17fe57f9be8414f01bedfbd1cec507ce5f4b8d32c2bc5ac228dee7e31f3dc872472283335dffd7e59bf0",
            "file": "src/app/shared/components/input-select-template/input-select-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { DatabaseStorageService } from '@service/database-storage.service';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\n\r\nimport { NameModuleDatabase } from \"@service/database-storage.service\";\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { RouterLink } from '@angular/router';\r\nimport { NgStyle } from '@angular/common';\r\n\r\nexport interface InputSelectConfiguration<T = any> {\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  cssClassOption?: string | ((item: T) => string);\r\n  cssStyleOption?: ({ [key: string]: any }) | ((item: T) => ({ [key: string]: any }));\r\n  disableOptionFn?: (item: T) => boolean;\r\n  displayValueFn?: (item: T) => string | number | { [key: string]: any };\r\n  displayTextFn?: (item: T) => string | number;\r\n  parseDataFn?: (data: T[]) => (T[] | Promise<T[]>);\r\n  data?: T[];\r\n  addButton?: ButtonAddInputSelect;\r\n}\r\n\r\nexport interface InputSelectServerConfiguration<T = any> extends InputSelectConfiguration<T> {\r\n  server: {\r\n    url: string;\r\n    queryParams?: string | { [key: string]: any };\r\n  }\r\n}\r\n\r\nexport interface InputSelectLocalConfiguration<T = any> extends InputSelectConfiguration<T> {\r\n  local: {\r\n    nameModuleDatabase: NameModuleDatabase;\r\n  }\r\n}\r\n\r\ninterface ButtonAddInputSelect {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any\r\n}\r\n@Component({\r\n  selector: 'app-input-select-template',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    NgStyle,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    GetMixedValuePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    RouterLink,\r\n  ],\r\n  templateUrl: './input-select-template.component.html',\r\n  styleUrl: './input-select-template.component.scss'\r\n})\r\nexport class InputSelectTemplateComponent {\r\n  @Input({ required: true }) public configuration!: InputSelectServerConfiguration | InputSelectConfiguration | InputSelectLocalConfiguration;\r\n  @Input({ required: true }) public control!: FormControl;\r\n  private fetch = inject(FetchService);\r\n  private databaseStorage = inject(DatabaseStorageService);\r\n  private abortController = new AbortController();\r\n  public loading:WritableSignal<boolean> = signal(false);\r\n\r\n  ngOnInit(): void {\r\n    if (!this.configuration.data) {\r\n      this.configuration.data = [];\r\n      this.getData();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  get data() {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  private getData() {\r\n    if ((this.configuration as InputSelectServerConfiguration).server) {\r\n      this.getItemsServer();\r\n    } else if ((this.configuration as InputSelectLocalConfiguration).local) {\r\n      this.getItemsLocal();\r\n    }\r\n  }\r\n\r\n  private async getItemsServer(): Promise<void> {\r\n    const { url } = (this.configuration as InputSelectServerConfiguration).server!;\r\n    let queryParams = (this.configuration as InputSelectServerConfiguration).server!.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const endpoint = `${url}?${queryParams ? queryParams : ''}`;\r\n    const response = await this.fetch.get<PaginatorData<any> | any[]>(endpoint, { signal: this.abortController.signal });\r\n    const data = response instanceof Array ? response : response.data\r\n    const { parseDataFn } = this.configuration;\r\n    this.configuration.data = parseDataFn ? await parseDataFn(data) : data;\r\n  }\r\n\r\n  private async getItemsLocal(): Promise<void> {\r\n    const response = await this.databaseStorage.getData((this.configuration as InputSelectLocalConfiguration).local!.nameModuleDatabase);\r\n    const { parseDataFn } = this.configuration;\r\n    this.configuration.data = parseDataFn ? await parseDataFn(response) : response;\r\n  }\r\n  \r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "outlet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"route-lateral\" | \"principal\"",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CheckboxFormInput",
            "id": "interface-CheckboxFormInput-c318b4a215c8ef742cae4789ee423f79c07102763a82acdca3a73e70fce6b013cf18d23c85dd12f649226b77bd037e42298d7e0f64fce4e298d57932521aba8a",
            "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { FetchService, RequestInitFetch, ToastForFetch } from '@service/fetch.service';\r\nimport { EventsService } from '@service/events.service';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { SpinnerDefaultComponent } from '../spinner-default/spinner-default.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { InputFileConfiguration, SelectFileComponent } from '../select-file/select-file.component';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { ErrorTemplateComponent } from '../error-template/error-template.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { ExecuteFunctionPipe } from '@pipe/execute-function.pipe';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { InputAutocompleteConfiguration, InputAutocompleteLocalConfiguration, InputAutocompleteServerConfiguration, InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectConfiguration, InputSelectLocalConfiguration, InputSelectServerConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { ConfirmDialogData } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\n\r\nexport interface ItemFormConfiguration<Item = any, Data = any> {\r\n  title?: string;\r\n  titleModule: string;\r\n\r\n  subtitle?: ((item: Item) => string | number | null | undefined) | false;\r\n\r\n  formGroup: FormGroup;\r\n  type: 'create' | 'update';\r\n\r\n  loading?: boolean;\r\n  hiddeFields?: boolean;\r\n  fields?: FormInput[];\r\n\r\n  dataItem?: WritableSignal<Item | null>,\r\n\r\n  server: {\r\n      url: string;\r\n      queryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      updateUrl?: string;\r\n      updateQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      createUrl?: string;\r\n      createQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      itemUrl?: string;\r\n      itemQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      fetch?: {\r\n        confirmDialog?: ConfirmDialogData,\r\n        toast?: ToastForFetch,\r\n      }\r\n  }\r\n\r\n  parseDataItemBeforeSendFormFn?: (data: Data) => (Data | Promise<Data>);\r\n  afterSaveFormFn?: (data: Item) => void;\r\n\r\n  itemId?: string | number\r\n  parseItemBeforePatchFormFn?: (item: Item) => (Item | Promise<Item>);\r\n\r\n  ignoreShowError?: boolean;\r\n  interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n  httpError?: FetchErrorResponse;\r\n\r\n  disableAutoBackLocation?: boolean;\r\n\r\n  saveButton?: {\r\n      text: string;\r\n      icon?: string;\r\n      iconPosition?: 'left' | 'right';\r\n  };\r\n  \r\n  cancelButton?: {\r\n      iconPosition?: 'left' | 'right';\r\n      text: string;\r\n      icon?: string;\r\n  } | false;\r\n}\r\n\r\nexport declare type InputType = 'select' | 'select-local' | 'select-server' | 'date' | 'date-range' | 'text' | 'number' | 'textarea' | 'checkbox' | 'switch' | 'autocomplete' | 'autocomplete-local' | 'autocomplete-server';\r\n\r\nexport interface FormInput {\r\n\r\n  type: InputType | 'file';\r\n\r\n  text?: TextFormInput;\r\n\r\n  number?: NumberFormInput;\r\n\r\n  textarea?: TextareaFormInput;\r\n  \r\n  date?: DateFormInput;\r\n  \r\n  dateRange?: DateRangeFormInput;\r\n  \r\n  switch?: SwitchFormInput;\r\n  \r\n  checkbox?: CheckboxFormInput;\r\n\r\n  select?: SelectConfigurationExt;\r\n\r\n  selectLocal?: SelectLocalConfigurationExt;\r\n  \r\n  selectServer?: SelectServerConfigurationExt;\r\n\r\n  autocomplete?: AutocompleteConfigurationExt;\r\n\r\n  autocompleteServer?: AutocompleteServerConfigurationExt;\r\n\r\n  autocompleteLocal?: AutocompleteLocalConfigurationExt;\r\n\r\n  file?: FileFormInput;\r\n}\r\n\r\nexport interface TextFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface NumberFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface TextareaFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  rows?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SelectFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | boolean | null;\r\n  options: { text: string, value: any }[];\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateRangeFormInput<T = any> {\r\n  formControlNameFrom: string;\r\n  formControlNameTo: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValueFrom?: Date | string | number | null;\r\n  defaultValueTo?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SwitchFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface CheckboxFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectConfigurationExt<T = any> extends InputSelectConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectLocalConfigurationExt<T = any> extends InputSelectLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectServerConfigurationExt<T = any> extends InputSelectServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteConfigurationExt<T = any> extends InputAutocompleteConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteLocalConfigurationExt<T = any> extends InputAutocompleteLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteServerConfigurationExt<T = any> extends InputAutocompleteServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface FileFormInput<T = any> extends InputFileConfiguration {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: any;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport const textFormInput = (configuration: TextFormInput): FormInput => ({\r\n  type: 'text',\r\n  text: configuration\r\n});\r\n\r\nexport const numberFormInput = (configuration: NumberFormInput): FormInput => ({\r\n  type: 'number',\r\n  number: configuration\r\n});\r\n\r\nexport const textareaFormInput = (configuration: TextareaFormInput): FormInput => ({\r\n  type: 'textarea',\r\n  textarea: configuration\r\n});\r\n\r\nexport const selectFormInput = (configuration: SelectConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectLocalFormInput = (configuration: SelectLocalConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectServerFormInput = (configuration: SelectServerConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const dateFormInput = (configuration: DateFormInput): FormInput => ({\r\n  type: 'date',\r\n  date: configuration\r\n});\r\n\r\nexport const dateRangeFormInput = (configuration: DateRangeFormInput): FormInput => ({\r\n  type: 'date-range',\r\n  dateRange: configuration\r\n});\r\n\r\nexport const switchFormInput = (configuration: SwitchFormInput): FormInput => ({\r\n  type: 'switch',\r\n  switch: configuration\r\n});\r\n\r\nexport const checkboxFormInput = (configuration: CheckboxFormInput): FormInput => ({\r\n  type: 'checkbox',\r\n  checkbox: configuration\r\n});\r\n\r\nexport const autocompleteFormInput = (configuration: AutocompleteConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocomplete: configuration\r\n});\r\n\r\nexport const autocompleteLocalFormInput = (configuration: AutocompleteLocalConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocompleteLocal: configuration\r\n});\r\n\r\nexport const autocompleteServerFormInput = (configuration: AutocompleteServerConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-server',\r\n  autocompleteServer: configuration\r\n});\r\n\r\nexport const fileFormInput = (configuration: FileFormInput): FormInput => ({\r\n  type: 'file',\r\n  file: configuration\r\n});\r\n\r\n\r\n@Component({\r\n  selector: 'app-item-form-template',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ScrollingModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    SelectFileComponent,\r\n    PathFilesServerPipe,\r\n    ScrollingModule,\r\n    ErrorTemplateComponent,\r\n    GetKeyItemPipe,\r\n    ExecuteFunctionPipe,\r\n    GetMixedValuePipe,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n  ],\r\n  templateUrl: './item-form-template.component.html',\r\n  styleUrls: ['./item-form-template.component.css']\r\n})\r\nexport class ItemFormTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemFormConfiguration;\r\n\r\n  private fetch = inject(FetchService);\r\n  private events = inject(EventsService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  public location = inject(Location);\r\n\r\n  private abortController = new AbortController();\r\n\r\n  ngOnInit() {\r\n    if (this.configuration.type == 'update') {\r\n      this.setItemId();\r\n      if (this.configuration.dataItem && this.configuration.dataItem()) {\r\n        this.configuration.loading = false;\r\n      } else {\r\n        this.configuration.dataItem = signal(null);\r\n        this.getItem();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private setItemId() {\r\n    if (!this.configuration.itemId) {\r\n      if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n        this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getControl(name: string): FormControl {\r\n    return this.configuration.formGroup.get(name) as FormControl;\r\n  }\r\n\r\n  public async submitForm() {\r\n    try {\r\n      const form = this.configuration.formGroup;\r\n      form.markAllAsTouched();\r\n      if (form.invalid || this.configuration.loading) return;\r\n      this.configuration.loading = true;\r\n\r\n      let data = form.getRawValue();\r\n      const { parseDataItemBeforeSendFormFn } = this.configuration;\r\n      data = await parseDataItemBeforeSendFormFn?.(data) ?? data;\r\n\r\n      const requestInit: RequestInitFetch = { };\r\n      if(this.configuration.server.fetch?.confirmDialog) {\r\n        requestInit.confirmDialog = this.configuration.server.fetch.confirmDialog;\r\n      }\r\n      if(this.configuration.server.fetch?.toast) {\r\n        requestInit.toast = this.configuration.server.fetch.toast;\r\n      }\r\n\r\n      let response = null;\r\n      if (this.configuration.type === 'create') {\r\n        response = await this.fetch.post(this.configuration.server.url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_created`, response);\r\n      } else {\r\n        const url = this.configuration.server.updateUrl ?? `${this.configuration.server.url}/${this.configuration.dataItem!()?.id}`;\r\n        response = await this.fetch.put(url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_updated`, response);\r\n      }\r\n\r\n      const { afterSaveFormFn } = this.configuration;\r\n      if (afterSaveFormFn) afterSaveFormFn(response);\r\n\r\n      if (!this.configuration.disableAutoBackLocation) this.location.back();\r\n    } catch { }\r\n    this.configuration.loading = false;\r\n  }\r\n\r\n  public async getItem() {\r\n    this.configuration.dataItem = signal(null)\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { itemId, server } = this.configuration;\r\n      let queryParams:any = server.itemQueryParams ?? {};\r\n      if (queryParams instanceof Object) {\r\n        queryParams = objectToURLSearchParams(queryParams);\r\n        queryParams = queryParams.toString();\r\n      }\r\n      const url = `${server.itemUrl ?? server.url}/${itemId}?${queryParams ? queryParams : ''}`;\r\n      const requestInit: RequestInitFetch = { signal: this.abortController.signal };\r\n      let item: any = await this.fetch.get(url, requestInit);\r\n      const { parseItemBeforePatchFormFn } = this.configuration;\r\n      item = await parseItemBeforePatchFormFn?.(item) ?? item;\r\n      this.configuration.formGroup.patchValue(item);\r\n      this.configuration.dataItem.set(item);\r\n      this.configuration.hiddeFields = false;\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "cssClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 190
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 189
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 187
                },
                {
                    "name": "textLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 188
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ClickEventActionButton",
            "id": "interface-ClickEventActionButton-edc9a2c085d669b062640c6d2a97876fe56bb34f5ae23612a12a67b2af6f44bb5d3316d9f28e50d8c8d522c0e6ce8fc3245f639ec16593bc1c325c3c460a4296",
            "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule, DatePipe, Location, NgOptimizedImage } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, ViewChild, Input, ContentChild, TemplateRef, ElementRef, Renderer2, ViewEncapsulation, signal, WritableSignal, computed, inject, Inject, Optional, InjectionToken, EventEmitter, RendererStyleFlags2 } from '@angular/core';\r\nimport { MatCheckboxChange, MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSort, MatSortModule } from '@angular/material/sort';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from 'src/app/shared/utilities/queryParams';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { IndexListPipe } from '@pipe/index-list.pipe';\r\nimport { SpinnerDefaultComponent } from '@component/spinner-default/spinner-default.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { debounceTime } from 'rxjs';\r\nimport { DiffDatePipe } from '@pipe/diff-date.pipe';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { HiddenOptionButtonRowPipe } from '@pipe/hidden-option-button-row.pipe';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { GetUserByIdPipe } from '@pipe/get-user-by-id.pipe';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ListFormatPipe } from '@pipe/list-format.pipe';\r\nimport { LoadImagePrivateDirective } from '@directive/load-image-private.directive';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MatPseudoCheckboxModule } from '@angular/material/core';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { EventGlobalSearch, NAME_EVENT_GLOBAL_SEARCH } from 'src/app/sidenav/sidenav/sidenav.component';\r\nimport { ExecuteFunctionListPipe } from './execute-function-list.pipe';\r\nimport { FormInput, dateRangeFormInput, switchFormInput } from '@component/item-form-template/item-form-template.component';\r\nimport { RenameTitleColumnListPipe } from './rename-title-column-list.pipe';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DateFnsAdapter } from '@angular/material-date-fns-adapter';\r\nimport { MyDateAdapter } from '@utility/myDateAdapter';\r\nimport { MY_DATE_FORMATS } from '@utility/myDateFormat';\r\n\r\nexport const DATA_TYPE_LIST = new InjectionToken<'array' | 'paginator'>('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST');\r\n\r\nexport interface ItemListConfiguration<T = any> {\r\n  readonly dataType?: 'array' | 'paginator';\r\n  readonly keyGetItemsPaginator?: string;\r\n  readonly keyGetTotalItemsPaginator?: string;\r\n\r\n  readonly disableFiltersInQueryParams?: boolean;\r\n\r\n  title: string | null;\r\n\r\n  parseDataFn?: (data: T[]) => T[] | Promise<T[]>;\r\n  data?: WritableSignal<T[]>;\r\n  updateListEvent?: EventEmitter<void>;\r\n\r\n  defaultOrder?: {\r\n    key: string,\r\n    order: 'ASC' | 'DESC'\r\n  };\r\n\r\n  backButton?: boolean;\r\n\r\n  updateButton?: boolean;\r\n\r\n  server: {\r\n    readonly url: string,\r\n    queryParams?: { [key: string]: any } | string;\r\n  }\r\n\r\n  createButton?: {\r\n    text?: string,\r\n    routerLink: RouterLinkCreateButton\r\n  } | false;\r\n\r\n  filters?: FormInput[] | false;\r\n\r\n  rows?: {\r\n    selectable?: {\r\n      actions: SelectableActionButton<T>[];\r\n    };\r\n    index?: false | ({ title: string });\r\n    cssClass?: string | ((item: T) => string);\r\n    actions?: ActionButton<T>[];\r\n    options?: ActionButton<T>[] | false;\r\n  },\r\n\r\n  columns: WritableSignal<ListColumn<T>[]>;\r\n}\r\n\r\nexport interface RouterLinkCreateButton {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any;\r\n}\r\nexport interface RouterLinkItem<T> {\r\n  url: ((item: T, index: number) => string) | string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: ((item: T, index: number) => (string | { [key: string]: any } | any[] | number | null)) | string | { [key: string]: any } | any[] | number | null;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\ndeclare type ActionButtonActionsType = 'clickEvent' | 'routerLink';\r\ninterface ActionButton<T> {\r\n  type: 'clickEvent' | 'routerLink';\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((item: T, index: number) => boolean);\r\n  disabled?: boolean | ((item: T, index: number) => boolean);\r\n  cssClass?: string | ((item: T, index: number) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((item: T, index: number) => ({ [key: string]: any }));\r\n  fn?: (item: T, index: number, fns: {\r\n    deleteItemFn: (id: number | string) => Promise<void>,\r\n    restoreItemFn: (id: number | string) => Promise<void>,\r\n    updateChangesItemFn: (index: number, item: T) => void,\r\n  }) => void;\r\n  routerLink?: RouterLinkItem<T>;\r\n}\r\ninterface ClickEventActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'fn'>> & ActionButton<T>, 'type' | 'routerLink'> { }\r\nexport const clickEventActionButton = <T = any>(config: ClickEventActionButton<T>): ActionButton<T> => ({ type: 'clickEvent', ...config });\r\ninterface RouterLinkActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'routerLink'>> & ActionButton<T>, 'type' | 'clickEvent'> { }\r\nexport const routerLinkActionButton = <T = any>(config: RouterLinkActionButton<T>): ActionButton<T> => ({ type: 'routerLink', ...config });\r\ninterface SelectableActionButton<T> {\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((selectedItems: T[]) => boolean);\r\n  disabled?: boolean | ((selectedItems: T[]) => boolean);\r\n  cssClass?: string | ((selectedItems: T[]) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((selectedItems: T[]) => ({ [key: string]: any }));\r\n  fn: (selectedItems: T[]) => void;\r\n}\r\nexport const selectableActionButton = <T = any>(config: SelectableActionButton<T>): SelectableActionButton<T> => ({ ...config });\r\n\r\nexport interface ListItemExtended {\r\n  __selected__?: boolean;\r\n  __loading_status__?: boolean;\r\n}\r\n\r\nexport type TypeValueKeyItem = 'text' | 'diff-date' | 'date' | 'number' | 'email' | 'phone' | 'user' | 'uppercase' | 'lowercase' | 'titlecase' | 'first-letter-uppercase' | 'list-format' | 'currency';\r\n\r\nexport interface ListColumn<T> {\r\n  /**\r\n   * @description\r\n   * Agrega clases css al contenedor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   */\r\n  align?: 'left' | 'center' | 'right';\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor adicional de la celda de la columna\r\n   * @example\r\n   * clickEventAdditionalValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventAdditionalValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor de la celda de la columna\r\n   * @example\r\n   * clickEventValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css a la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClass: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClass?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor adicional de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayAdditionalValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo fecha (type: 'date')\r\n   * @example\r\n   * ...\r\n   * dateFormat: 'yyyy-MM-dd'\r\n   * ...\r\n   * dateFormat: 'dd/MM/yyyy' // Por defecto\r\n   * ...\r\n   */\r\n  dateFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor adicional a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.name\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayAdditionalValueFn?: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayValueFn: (item) => item.name\r\n   * ...\r\n   * displayValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * If you want to display a value in the column that is not in the item, you can use this function\r\n   * @example\r\n   * ...\r\n   * gridColumn: '1fr'\r\n   * ...\r\n   * gridColumn: '200px'\r\n   * ...\r\n   * gridColumn: 'max-content'\r\n   * ...\r\n   * gridColumn: 'fit-content(200px)'\r\n   * ...\r\n   */\r\n  gridColumn?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones > Columnas\r\n   * @example\r\n   * ...\r\n   * hidden: true\r\n   * ...\r\n   * hidden: false // Por defecto\r\n   * ...\r\n   */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo número (type: 'number')\r\n   * @example\r\n   * ...\r\n   * numberFormat: '2.2-2'\r\n   * ...\r\n   * numberFormat: '0.2-2' // Por defecto\r\n   * ...\r\n   */\r\n  numberFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor adicional de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkAdditionalValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Sortable column espicif key in object configuration\r\n   * @example\r\n   * sort: { key: 'name' }\r\n   */\r\n  sort?: { key: string };\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display additional value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: { color: 'green' }\r\n   * ...\r\n   * @param item\r\n   * @returns string | number | null | undefined | string[] | number[]\r\n   */\r\n  cssStyleDisplayAdditionalValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayValue: { color: 'green' }\r\n   * ...\r\n   */\r\n  cssStyleDisplayValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Title column\r\n   * @example\r\n   * title: 'Nombre'\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * @description\r\n   * To display a tooltip in the column on hover\r\n   * @example\r\n   * tooltip: 'Ver detalle'\r\n   */\r\n  tooltip?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * For show type value in cell\r\n   * @example\r\n   * ...\r\n   * type: 'number',\r\n   * displayValueFn: (item) => item.price, // output: 2,000.00\r\n   * ...\r\n   * type: 'date',\r\n   * displayValueFn: (item) => item.created_at, // output 12/12/2020\r\n   * ...\r\n   */\r\n  type?: TypeValueKeyItem | 'image' | 'html';\r\n\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface SimpleListColumn<T> extends Omit<ListColumn<T>, 'type' | 'displayAdditionalValueFn' | 'displayValueFn' | 'dateFormat' | 'numberFormat' | 'image'> { }\r\ninterface SimpleListColumn2<T> extends Omit<SimpleListColumn<T>, 'cssStyleDisplayAdditionalValue' | 'routerLinkAdditionalValue' | 'cssClassDisplayAdditionalValue' | 'clickEventAdditionalValue'> { }\r\ninterface ListFormatListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string[];\r\n  displayValueFn: (item: T, index: number) => string[];\r\n}\r\n\r\ninterface NumberListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => number | null | undefined;\r\n  numberFormat?: string;\r\n}\r\n\r\ninterface StringListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => string | number | null | undefined;\r\n}\r\n\r\ninterface DateListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined;\r\n  dateFormat?: string;\r\n}\r\n\r\ninterface ImageListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface HtmlListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n}\r\n\r\nexport const numberColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'number', ...config });\r\n\r\nexport const listFormatColumn = <T = any>(config: ListFormatListColumn<T>): ListColumn<T> => ({ type: 'list-format', ...config });\r\n\r\nexport const dateColumn = <T = any>(config: DateListColumn<T>): ListColumn<T> => ({ type: 'date', ...config });\r\n\r\nexport const diffDateColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'diff-date', ...config });\r\n\r\nexport const htmlColumn = <T = any>(config: HtmlListColumn<T>): ListColumn<T> => ({ type: 'html', ...config });\r\n\r\nexport const textColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'text', ...config });\r\n\r\nexport const uppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'uppercase', ...config });\r\n\r\nexport const lowercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'lowercase', ...config });\r\n\r\nexport const titlecaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'titlecase', ...config });\r\n\r\nexport const firstLetterUppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'first-letter-uppercase', ...config });\r\n\r\nexport const phoneColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'phone', ...config });\r\n\r\nexport const emailColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'email', ...config });\r\n\r\nexport const userColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'user', ...config });\r\n\r\nexport const imageColumn = <T = any>(config: ImageListColumn<T>): ListColumn<T> => ({ type: 'image', ...config });\r\n\r\n\r\nexport const itemNameAndDescriptionColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  title: 'Nombre',\r\n  gridColumn: '1fr',\r\n  sort: { key: 'name' },\r\n  routerLinkValue: { url: (item: any) => `../detail/${item.id}` },\r\n  displayValueFn: (item: any) => item.name,\r\n  displayAdditionalValueFn: (item: any) => item.description,\r\n  ...config,\r\n});\r\nexport const itemStatusColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'cssClassDisplayValue' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'first-letter-uppercase',\r\n  title: 'Estado',\r\n  sort: { key: 'status' },\r\n  align: 'center',\r\n  displayValueFn: (item: any) => item.status,\r\n  cssClassDisplayValue: (item: any) => `status-chip ${item.status}`,\r\n  ...config,\r\n});\r\nexport const itemCreatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Creado',\r\n  sort: { key: 'created_at' },\r\n  displayValueFn: (item: any) => item.created_at,\r\n  ...config,\r\n});\r\nexport const itemUpdatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Actualizado',\r\n  sort: { key: 'updated_at' },\r\n  hidden: true,\r\n  displayValueFn: (item: any) => item.updated_at,\r\n  ...config,\r\n});\r\nexport const simpleListColumns = (): ListColumn<any>[] => ([\r\n  itemNameAndDescriptionColumn(),\r\n  itemUpdatedAtColumn(),\r\n  itemCreatedAtColumn(),\r\n  itemStatusColumn(),\r\n]);\r\n\r\n\r\nexport const defaultListFilterInputs = (): FormInput[] => [\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de creación',\r\n    formControlNameFrom: 'created_at_from',\r\n    formControlNameTo: 'created_at_to',\r\n  }),\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de actualización',\r\n    formControlNameFrom: 'updated_at_from',\r\n    formControlNameTo: 'updated_at_to',\r\n  }),\r\n  switchFormInput({\r\n    textLabel: 'Registros inactivos',\r\n    formControlName: 'inactive',\r\n  }),\r\n];\r\n\r\nexport const deleteItemActionButton = () => clickEventActionButton({\r\n  icon: 'delete',\r\n  text: 'Eliminar',\r\n  fn: async ({ id }, _, { deleteItemFn }) => deleteItemFn(id),\r\n  hidden: (item) => item.deleted_at,\r\n});\r\n\r\nexport const restoreItemActionButton = () => clickEventActionButton({\r\n  icon: 'restore',\r\n  text: 'Restaurar',\r\n  fn: async ({ id }, _, { restoreItemFn }) => restoreItemFn(id),\r\n  hidden: (item) => !item.deleted_at,\r\n})\r\n\r\nexport const viewItemActionButton = () => routerLinkActionButton({\r\n  icon: 'visibility',\r\n  text: 'Ver',\r\n  routerLink: { url: (item) => `../view/${item.id}` },\r\n});\r\n\r\nexport const editItemActionButton = () => routerLinkActionButton({\r\n  icon: 'edit',\r\n  text: 'Editar',\r\n  routerLink: { url: (item) => `../edit/${item.id}` },\r\n})\r\n\r\n@Component({\r\n  selector: 'app-item-list-template',\r\n  standalone: true,\r\n  templateUrl: './item-list-template.component.html',\r\n  styleUrl: './item-list-template.component.css',\r\n  imports: [\r\n    CommonModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatSortModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatTooltipModule,\r\n    MatPseudoCheckboxModule,\r\n    IndexListPipe,\r\n    GetKeyItemPipe,\r\n    RouterLink,\r\n    DiffDatePipe,\r\n    HiddenOptionButtonRowPipe,\r\n    NgOptimizedImage,\r\n    ScrollingModule,\r\n    GetUserByIdPipe,\r\n    PathFilesServerPipe,\r\n    ListFormatPipe,\r\n    LoadImagePrivateDirective,\r\n    FirstLetterUppercasePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n    ExecuteFunctionListPipe,\r\n    RenameTitleColumnListPipe,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    FirstLetterUppercasePipe,\r\n    GetKeyItemPipe,\r\n    RenameTitleColumnListPipe,\r\n    BrowserAnimationsModule,\r\n    DateFnsAdapter,\r\n  ],\r\n})\r\nexport class ItemListTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemListConfiguration;\r\n\r\n  // @ContentChild('headers') headers!: TemplateRef<any>;\r\n  @ContentChild('rowList') rowList!: TemplateRef<any>;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  @ViewChild('divListItems', { static: true }) private divList!: ElementRef;\r\n\r\n  private _dataTypeList: 'array' | 'paginator' = 'array';\r\n  private _keyForGetItems: string;\r\n  private _keyForGetTotalItems: string;\r\n\r\n  private fetch = inject(FetchService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  private renderer = inject(Renderer2);\r\n  private eventsService = inject(EventsService);\r\n  public location = inject(Location);\r\n\r\n  // private datePipe = inject(DatePipe);\r\n  public firstLetterUppercasePipe = inject(FirstLetterUppercasePipe);\r\n  public getKeyItemPipe = inject(GetKeyItemPipe);\r\n  public renameTitleColumnListPipe = inject(RenameTitleColumnListPipe);\r\n\r\n  public lengthData = computed(() => this.data().length)\r\n\r\n  public searchCtrl: FormControl = new FormControl('');\r\n  public formFilters: FormGroup<any> | null = null;\r\n\r\n  public loading = signal(true);\r\n  public font: WritableSignal<'small' | 'medium' | 'large'> = signal('medium');\r\n  public headerListStyle: WritableSignal<'simple' | 'color'> = signal('simple');\r\n\r\n  private abortController = new AbortController();\r\n\r\n  private unsubscribe$: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(DATA_TYPE_LIST) _dataTypeList: 'array' | 'paginator',\r\n    @Optional() @Inject(KEY_GET_ITEMS_PAGINATOR_LIST) _keyForGetItems: string,\r\n    @Optional() @Inject(KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST) _keyForGetTotalItems: string\r\n  ) {\r\n    this._dataTypeList = _dataTypeList ?? 'paginator';\r\n    this._keyForGetItems = _keyForGetItems || 'data';\r\n    this._keyForGetTotalItems = _keyForGetTotalItems || 'total';\r\n  }\r\n\r\n  get data(): WritableSignal<any[]> {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  get defaultOrder(): string {\r\n    return this.configuration.defaultOrder ? `${this.configuration.defaultOrder?.key}|${this.configuration.defaultOrder?.order}` : 'id|DESC';\r\n  }\r\n\r\n  get dataTypeList(): 'array' | 'paginator' {\r\n    return this.configuration.dataType ?? this._dataTypeList;\r\n  }\r\n\r\n  get keyForGetItems(): string {\r\n    return this.configuration.keyGetItemsPaginator ?? this._keyForGetItems;\r\n  }\r\n\r\n  get keyForGetTotalItems(): string {\r\n    return this.configuration.keyGetTotalItemsPaginator ?? this._keyForGetTotalItems;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.configuration.data = signal([]);\r\n    this.configuration.updateListEvent = new EventEmitter();\r\n    if (this.configuration.rows?.options != false && !this.configuration.rows?.options?.length) {\r\n      this.configuration.rows = {\r\n        ...(this.configuration.rows ?? {}),\r\n        options: [\r\n          viewItemActionButton(),\r\n          editItemActionButton(),\r\n          deleteItemActionButton(),\r\n          restoreItemActionButton(),\r\n        ]\r\n      };\r\n    }\r\n    this.generateFormControlsFromFilterInputs();\r\n    this.generateColumnsCss();\r\n\r\n    this.eventsService\r\n      .eventsFiltered<EventGlobalSearch>([NAME_EVENT_GLOBAL_SEARCH])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(({ data }: any) => {\r\n        const type = data.type;\r\n        if (type == 'enter') this.searchCtrl.setValue(data.value);\r\n      })\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.paginator.pageIndex = 0;\r\n    this.paginator.pageSize = 20;\r\n\r\n    this.verifyQueryParams();\r\n\r\n    this.activatedRoute.queryParams.subscribe(() => this.callGetData());\r\n\r\n    this.sort.sortChange.subscribe(({ active, direction }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (this.defaultOrder == `${active}|${direction}` || !active || !direction) queryParams['order'] = null;\r\n      else queryParams['order'] = `${active}|${direction}`;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.searchCtrl.valueChanges.pipe(debounceTime(250)).subscribe((value: string) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (value) queryParams['search'] = value;\r\n      else queryParams['search'] = null;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.paginator.page.subscribe(({ pageIndex, pageSize }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (pageIndex == 0 || (queryParams['page'] ?? null) == pageIndex + 1) queryParams['page'] = null;\r\n      else queryParams['page'] = pageIndex + 1;\r\n      if (pageSize == 20 || (queryParams['per_page'] ?? null) == pageSize) queryParams['per_page'] = null;\r\n      else queryParams['per_page'] = pageSize;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.eventsService\r\n      .eventsFiltered([\r\n        `${this.configuration.server.url}_created`,\r\n        `${this.configuration.server.url}_updated`\r\n      ])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(() => this.callGetData());\r\n\r\n    // this.configuration.updateListEvent!.subscribe(() => this.callGetData({}));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n    if (this.abortController) this.abortController.abort();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private async generateColumnsCss(): Promise<void> {\r\n    const grid_cols: string[] = [];\r\n    const grid_areas: string[] = []\r\n    if (this.configuration.rows?.selectable) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('selected');\r\n    }\r\n    if (this.configuration.rows?.index != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('index');\r\n    }\r\n    for await (const column of this.configuration.columns()) {\r\n      if (!column.hidden) {\r\n        grid_cols.push(column.gridColumn ?? 'auto');\r\n        grid_areas.push(this.renameTitleColumnListPipe.transform(column.title));\r\n      }\r\n    }\r\n    if (this.configuration.rows?.actions) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('actions');\r\n    }\r\n    if (this.configuration.rows?.options != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('options');\r\n    }\r\n    this.renderer.setStyle(this.divList.nativeElement, 'grid-template-columns', grid_cols.join(' '));\r\n    this.renderer.setStyle(this.divList.nativeElement, '--items-list-grid-template-areas', `\"${grid_areas.join(' ')}\"`, RendererStyleFlags2.DashCase);\r\n    grid_areas.forEach((area, index) => this.renderer.setStyle(this.divList.nativeElement, `--items-list-grid-area-${index + 1}`, area, RendererStyleFlags2.DashCase));\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private getQueryParams(): { [key: string]: any } {\r\n    return !this.configuration.disableFiltersInQueryParams ? JSON.parse(JSON.stringify(this.activatedRoute.snapshot.queryParams)) : {\r\n      ...this.formFilters?.value ?? {},\r\n      page: this.paginator.pageIndex + 1,\r\n      per_page: this.paginator.pageSize,\r\n      order: this.sort.active ? `${this.sort.active}|${this.sort.direction}` : null,\r\n      search: this.searchCtrl.value ? this.searchCtrl.value : null,\r\n    }\r\n  }\r\n\r\n  private navigateOrCallGetData(params: any): void {\r\n    if (this.configuration.disableFiltersInQueryParams) this.callGetData(params);\r\n    else this.router.navigate([], { queryParams: params });\r\n  }\r\n\r\n  private verifyQueryParams(): void {\r\n    const queryParams = {} as any;\r\n    const { page, per_page, order, search, ...filters } = queryParams;\r\n    this.paginator.pageIndex = Number(page ?? 1) - 1;\r\n    this.paginator.pageSize = Number(per_page) ?? 20;\r\n    this.sort.active = order?.split('|')[0] ?? '';\r\n    this.sort.direction = order?.split('|')[1] == 'asc' ? 'asc' : 'desc';\r\n    this.sort.sortChange.emit();\r\n    this.searchCtrl.setValue(search ?? null, { emitEvent: false });\r\n  }\r\n\r\n  public callGetData(queryParams: any = {}): void {\r\n    const params = objectToURLSearchParams(queryParams);\r\n    if (!params.has('page')) params.set('page', String(this.paginator.pageIndex + 1));\r\n    if (!params.has('per_page')) params.set('per_page', String(this.paginator.pageSize));\r\n    if (!params.has('order')) params.set('order', this.defaultOrder);\r\n    this.getData(params);\r\n  }\r\n\r\n  private async getData(searchParams: URLSearchParams = new URLSearchParams()): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const serverUrl = this.configuration.server.url;\r\n    let queryParams = this.configuration.server.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const url = `${serverUrl}?${searchParams.toString()}&${queryParams ?? ''}`;\r\n    const config = { signal: this.abortController.signal };\r\n    try {\r\n      let items = [];\r\n      let totalItems = 0;\r\n      if (this.dataTypeList == 'array') {\r\n        items = await this.fetch.get<any[]>(url, config);\r\n        totalItems = items.length;\r\n      } else {\r\n        const paginatorData = await this.fetch.get<PaginatorData<any>>(url, config);\r\n        items = this.getKeyItemPipe.transform(paginatorData, this.keyForGetItems);\r\n        totalItems = this.getKeyItemPipe.transform(paginatorData, this.keyForGetTotalItems);\r\n      }\r\n      const { parseDataFn } = this.configuration;\r\n      const parseData = await parseDataFn?.(items) ?? items;\r\n      this.paginator.length = totalItems;\r\n      this.data.set(parseData);\r\n      this.loading.set(false);\r\n      this.checkSelectedItems();\r\n    } catch (err: any) {\r\n      if (err.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n  }\r\n\r\n  public hiddenToggleColumn($event: MatCheckboxChange, index: number): void {\r\n    this.configuration.columns.update((columns) => {\r\n      columns[index]['hidden'] = !$event.checked\r\n      return columns;\r\n    })\r\n    this.generateColumnsCss();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public navigateCreateView(): void {\r\n    this.router.navigate(['../create'], { relativeTo: this.activatedRoute });\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public allSelectedItems = signal(false);\r\n  public someSelectedItems = signal(false);\r\n  public selectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__));\r\n  public lengthSelectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__).length);\r\n\r\n  public selectedItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.toSpliced(index, 1, { ...data[index], __selected__: status }));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public selectedAllItems(status: boolean): void {\r\n    this.data.update((data) => data.map((e) => ({ ...e, __selected__: status })));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public someSelected(): boolean {\r\n    return this.data().length > 0 && this.data().some((e: ListItemExtended) => e.__selected__) && !this.allSelectedItems();\r\n  }\r\n\r\n  private checkSelectedItems(): void {\r\n    this.allSelectedItems.set(this.data().length > 0 && this.data().every((e: ListItemExtended) => e.__selected__));\r\n    this.someSelectedItems.set(this.someSelected());\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private generateFormControlsFromFilterInputs(): void {\r\n    if (this.configuration.filters == false) return;\r\n    if (!this.configuration.filters?.length) this.configuration.filters = defaultListFilterInputs();\r\n    const formFilters = new FormGroup({});\r\n    this.configuration.filters?.forEach((filter) => {\r\n      if (filter.text) {\r\n        formFilters.setControl(filter.text.formControlName, new FormControl(filter.text.defaultValue));\r\n      } else if (filter.textarea) {\r\n        formFilters.setControl(filter.textarea.formControlName, new FormControl(filter.textarea.defaultValue));\r\n      } else if (filter.select) {\r\n        formFilters.setControl(filter.select.formControlName, new FormControl(filter.select.defaultValue));\r\n      } else if (filter.number) {\r\n        formFilters.setControl(filter.number.formControlName, new FormControl(filter.number.defaultValue));\r\n      } else if (filter.date) {\r\n        formFilters.setControl(filter.date.formControlName, new FormControl(filter.date.defaultValue));\r\n      } else if (filter.dateRange) {\r\n        formFilters.setControl(filter.dateRange.formControlNameFrom, new FormControl(filter.dateRange.defaultValueFrom));\r\n        formFilters.setControl(filter.dateRange.formControlNameTo, new FormControl(filter.dateRange.defaultValueTo));\r\n      } else if (filter.autocompleteLocal) {\r\n        formFilters.setControl(filter.autocompleteLocal.formControlName, new FormControl(filter.autocompleteLocal.defaultValue));\r\n      } else if (filter.autocompleteServer) {\r\n        formFilters.setControl(filter.autocompleteServer.formControlName, new FormControl(filter.autocompleteServer.defaultValue));\r\n      } else if (filter.checkbox) {\r\n        formFilters.setControl(filter.checkbox.formControlName, new FormControl(filter.checkbox.defaultValue));\r\n      } else if (filter.switch) {\r\n        formFilters.setControl(filter.switch.formControlName, new FormControl(filter.switch.defaultValue));\r\n      }\r\n    });\r\n    this.formFilters = formFilters;\r\n  }\r\n\r\n  public getControlFormFilter(name: string): FormControl {\r\n    return this.formFilters!.get(name) as FormControl;\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private updateLoadingStatusItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.map((item: ListItemExtended, i) => {\r\n      if (i == index) item.__loading_status__ = status;\r\n      return item;\r\n    }));\r\n  }\r\n\r\n  public deleteItem = async (id: number | string) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}`;\r\n    try {\r\n      await this.fetch.delete(url);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public restoreItem = async (id: string | number) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}/restore`;\r\n    const config = { afterAlert: { description: 'Restaurando ítem de la lista' } }\r\n    try {\r\n      await this.fetch.put(url, config);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public updateChangesItem = (index: number, item: any) => {\r\n    this.configuration.data!.update(items => items.toSpliced(index, 1, item));\r\n  }\r\n\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "Omit"
            ]
        },
        {
            "name": "Client",
            "id": "interface-Client-120cadcf6a329491c126f984ce2b480fd3e6cb3d993010ebc91b176a8a46b3c2d31d4a04c6d1ca8b6ff49e9b70b9691de98dded38079d67de494ceeccd6133d6",
            "file": "src/app/shared/interfaces/client.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel, DocumentTypeEnum } from \"./baseModel\";\r\nimport { ClientAccount } from \"./clientAccount\";\r\nimport { ClientBillingOption } from \"./clientBillingOption\";\r\nimport { ClientBusinessUnit } from \"./clientBusinessUnit\";\r\n\r\nexport interface Client extends BaseModel {\r\n  document_type: DocumentTypeEnum;\r\n  document_number: string;\r\n  name: string;\r\n  address: string;\r\n  phone: string;\r\n  cellphone: string;\r\n  avatar: string;\r\n  birth_date: string;\r\n  gender: string;\r\n  civil_status: string;\r\n  description: string;\r\n  email: string;\r\n\r\n  user_limit: number;\r\n  storage_limit: number;\r\n  storage_usage_size: number;\r\n  storage_number_files: number;\r\n  client_business_units?: ClientBusinessUnit[];\r\n  client_accounts?: ClientAccount[];\r\n  client_billing_option?: ClientBillingOption\r\n}\r\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "birth_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "cellphone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "civil_status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "client_accounts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClientAccount[]",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "client_billing_option",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClientBillingOption",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "client_business_units",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClientBusinessUnit[]",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "document_number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "document_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DocumentTypeEnum",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "storage_limit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "storage_number_files",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "storage_usage_size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "user_limit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "ClientAccount",
            "id": "interface-ClientAccount-437ff3968a76bb9f809ffea7258a76fb4d14027c115ed1fbd7ee5b38946939a7d0f92fcc2f76c939324360086b9589d0259b63c5d856d2dc8e4a0f8c4cf24619",
            "file": "src/app/shared/interfaces/clientAccount.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel, CoinEnum } from \"./baseModel\";\r\nimport { Client } from \"./client\";\r\n\r\nexport interface ClientAccount extends BaseModel {\r\n    client_id: number;\r\n    name: string;\r\n    type: ClientAccountTypeEnum;\r\n    coin: CoinEnum;\r\n    total: any;\r\n\r\n    client?: Client;\r\n}\r\n\r\n\r\nexport enum ClientAccountTypeEnum {\r\n    Recaudacion = 'recaudación',\r\n    Detraccion = 'detracción',\r\n    Retención = 'retención',\r\n}\r\n",
            "properties": [
                {
                    "name": "client",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Client",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "client_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "coin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CoinEnum",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClientAccountTypeEnum",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "ClientBillingOption",
            "id": "interface-ClientBillingOption-94582999ff0266d2e8412454986bac1e9a8167b0df4e3d7b7794db5b2595afe8d013474eb4e8a3ad336b5c1d9eb60ff87b35d3dd0cef524d8f04a1f53e2d57e2",
            "file": "src/app/shared/interfaces/clientBillingOption.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel } from \"./baseModel\";\r\n\r\nexport interface ClientBillingOption extends BaseModel {\r\n    client_id: number;\r\n    comprobant_type: ComprobantTypeEnum;\r\n    group_notes_single_voucher: boolean;\r\n    detraction: boolean;\r\n    detraction_percent: number;\r\n    retention: boolean;\r\n    retention_percent: number;\r\n}\r\n\r\nexport enum ComprobantTypeEnum {\r\n    Factura = 'factura',\r\n    Boleta = 'boleta',\r\n}\r\n\r\nexport const COMPROBANT_TYPES = Object.values(ComprobantTypeEnum);\r\n",
            "properties": [
                {
                    "name": "client_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "comprobant_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComprobantTypeEnum",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "detraction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "detraction_percent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "group_notes_single_voucher",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "retention",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "retention_percent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "ClientBusinessUnit",
            "id": "interface-ClientBusinessUnit-e520f565fc74f2e28c690c2cd1993accadea310afd9543643b6d9e37ba01cc274b78e0440c85ffaacd4e1d843b61cda29bc251168353814c724872b6978fca43",
            "file": "src/app/shared/interfaces/clientBusinessUnit.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel } from \"./baseModel\";\r\n\r\nexport interface ClientBusinessUnit extends BaseModel {\r\n    client_id: number;\r\n    name: string;\r\n    description: string;\r\n}",
            "properties": [
                {
                    "name": "client_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "ClientContact",
            "id": "interface-ClientContact-d4ba71987a82acdee80b7f2ae0c34a06d88a657a368966c8440fa45e15e011b8159effdc59ca6b5be02cf94ba09b44f62307962fd3c9f80fcbd7b5fd3e667f99",
            "file": "src/app/shared/interfaces/clientContact.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel } from \"./baseModel\";\r\nimport { Client } from \"./client\";\r\n\r\nexport interface ClientContact extends BaseModel {\r\n    client_id: number;\r\n    document_type: string;\r\n    document_number: string;\r\n    name: string;\r\n    paternal_name: string;\r\n    maternal_name: string;\r\n    email: string;\r\n    address: string;\r\n    phone: string;\r\n    cellphone: string;\r\n    principal: boolean;\r\n\r\n    client?: Client;\r\n}\r\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "cellphone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "client",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Client",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "client_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "document_number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "document_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "maternal_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "paternal_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "principal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "ClientPayment",
            "id": "interface-ClientPayment-6ef489d7187ef43a211b07e5bb0c173c139e38a3f8baac867d536b28ee6a7bdf880c343cdaafa7a4e7d0ce102b1c285371abb7ac620f90eb61e9264e0ba237de",
            "file": "src/app/shared/interfaces/clientPayment.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel, CoinEnum } from \"./baseModel\";\r\nimport { BoxMovement } from \"./boxMovement\";\r\nimport { Client } from \"./client\";\r\nimport { ClientAccount } from \"./clientAccount\";\r\n\r\nexport interface ClientPayment extends BaseModel {\r\n    client_id: number;\r\n    client_account_id: number;\r\n    box_movement_id: number;\r\n    amount: number;\r\n    amount_used: number;\r\n\r\n    client?: Client;\r\n    client_account?: ClientAccount;\r\n    box_movement?: BoxMovement;\r\n}\r\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "amount_used",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "box_movement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoxMovement",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "box_movement_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "client",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Client",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "client_account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClientAccount",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "client_account_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "client_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "ConfigurationDatepickerTemplate",
            "id": "interface-ConfigurationDatepickerTemplate-49db8917b0b702c781ceb5e73571efae1f36c1d23237047205c43cc08ad8af3e8f5af8d098518dce9c99ee4d4d2a25690cc9b8f47db0c9454d3453ec4f3b0d0b",
            "file": "src/app/shared/components/datepicker-template/datepicker-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ReactiveFormsModule,\r\n  ValidationErrors,\r\n  Validator,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\r\nimport { DateFnsAdapter } from '@angular/material-date-fns-adapter';\r\nimport { DatePipe, NgIf } from '@angular/common';\r\nimport { MyDateAdapter } from '@utility/myDateAdapter';\r\nimport { MY_DATE_FORMATS } from '@utility/myDateFormat';\r\n\r\nexport interface ConfigurationDatepickerTemplate {\r\n  label: string;\r\n  placeholder?: string;\r\n  min?: Date | null | undefined;\r\n  max?: Date | null | undefined;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-datepicker-template',\r\n  standalone: true,\r\n  imports: [\r\n    NgIf,\r\n    DatePipe,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n  templateUrl: './datepicker-template.component.html',\r\n  styleUrls: ['./datepicker-template.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    {\r\n      provide: DateAdapter,\r\n      useClass: MyDateAdapter,\r\n      deps: [DateFnsAdapter],\r\n    },\r\n    {\r\n      provide: MAT_DATE_FORMATS,\r\n      useValue: MY_DATE_FORMATS,\r\n    },\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: DatepickerTemplateComponent,\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: DatepickerTemplateComponent,\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class DatepickerTemplateComponent implements ControlValueAccessor, Validator {\r\n  @Input({ required: true }) configuration!: ConfigurationDatepickerTemplate;\r\n\r\n  private onChangefn!: Function;\r\n  private onTouchedfn!: Function;\r\n  public formCtrl = new FormControl();\r\n  private required = false;\r\n\r\n  ngAfterViewInit() {\r\n    this.formCtrl.valueChanges.subscribe((value) => {\r\n      this.onChangefn(value);\r\n    });\r\n  }\r\n\r\n  writeValue(value: any): void {\r\n    this.formCtrl.setValue(value);\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChangefn = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouchedfn = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    isDisabled\r\n      ? this.formCtrl.disable({ emitEvent: false })\r\n      : this.formCtrl.enable({ emitEvent: false });\r\n  }\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (control.hasValidator(Validators.required) != this.required) this.setRequiredCtrl(control.hasValidator(Validators.required));\r\n    return null;\r\n  }\r\n\r\n  private setRequiredCtrl(required: boolean) {\r\n    if (required) this.formCtrl.setValidators([Validators.required]);\r\n    else this.formCtrl.setValidators([]);\r\n    this.formCtrl.updateValueAndValidity({ emitEvent: false });\r\n  }\r\n\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null | undefined",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null | undefined",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Configurations",
            "id": "interface-Configurations-2f302511ed238682e73e5343ca6681f54de8f9584c54453e0dd71c1f613394e87ba81db5f602f73d610e14514a1392270395ca91d8bdf6671839cc955e10ebb5",
            "file": "src/app/sidenav/profile-menu/profile-menu.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, ViewChild, ViewEncapsulation, WritableSignal, inject, signal } from '@angular/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { User } from '@interface/user';\r\nimport { MatMenuModule, MatMenuTrigger } from '@angular/material/menu';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { FirstLetterNamePipe } from '@pipe/first-letter-name.pipe';\r\nimport { AuthService } from '@service/auth.service';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { NameLevelUserPipe } from '@pipe/name-level-user.pipe';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\n\r\ninterface Configurations {\r\n  theme: 'light' | 'dark';\r\n  color: string;\r\n}\r\n\r\nconst THEME_COLORS = [\r\n  // 'theme-color-yellow',\r\n  // 'theme-color-red',\r\n  'theme-color-orange',\r\n  'theme-color-blue',\r\n  'theme-color-green',\r\n  'theme-color-purple',\r\n  'theme-color-cyan',\r\n  'theme-color-pink',\r\n]\r\n\r\n@Component({\r\n  selector: 'app-profile-menu',\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    MatMenuModule,\r\n    MatSlideToggleModule,\r\n    PathFilesServerPipe,\r\n    FirstLetterNamePipe,\r\n    NameLevelUserPipe,\r\n    FirstLetterUppercasePipe,\r\n  ],\r\n  templateUrl: './profile-menu.component.html',\r\n  styleUrls: ['./profile-menu.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ProfileMenuComponent {\r\n  @ViewChild(MatMenuTrigger) private menuTrigger!: MatMenuTrigger;\r\n  @Input({ required: true }) public user!: User;\r\n  \r\n  private authService = inject(AuthService);\r\n  public configuration: WritableSignal<Configurations> = signal<Configurations>({\r\n    color: 'theme-color-blue',\r\n    theme: 'light'\r\n  });\r\n  public themeColors = THEME_COLORS;\r\n\r\n  constructor() {\r\n    this.getConfigurations();\r\n  }\r\n\r\n  public getConfigurations(): void {\r\n    const configuration = localStorage.getItem('configuration');\r\n    if (configuration) {\r\n      const parsedConfiguration = JSON.parse(configuration);\r\n      const theme = parsedConfiguration.theme == 'light' ? 'light' : 'dark';\r\n      const color = this.themeColors.includes(parsedConfiguration.color) ? parsedConfiguration.color : 'theme-color-blue';\r\n      this.setTheme(theme);\r\n      this.setColor(color);\r\n    } else {\r\n      const {theme, color} = this.configuration();\r\n      this.setTheme(theme);\r\n      this.setColor(color);\r\n    }\r\n  }\r\n\r\n  public setTheme(theme: 'light' | 'dark'): void {\r\n    this.configuration.update((config: Configurations) => ({...config, theme}));\r\n    document.documentElement.classList.remove('light', 'dark');\r\n    document.documentElement.classList.add(theme);\r\n    localStorage.setItem('configuration', JSON.stringify(this.configuration()))\r\n  }\r\n\r\n  public setColor(color: string): void {\r\n    this.configuration.update((config: Configurations) => ({...config, color}));\r\n    document.documentElement.classList.remove(...this.themeColors);\r\n    document.documentElement.classList.add(color);\r\n    localStorage.setItem('configuration', JSON.stringify(this.configuration()))\r\n  }\r\n\r\n  public closeMenu(): void {\r\n    this.menuTrigger.closeMenu();\r\n  }\r\n\r\n  public logout(): void {\r\n    this.authService.logout();\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"light\" | \"dark\"",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ConfirmDialogData",
            "id": "interface-ConfirmDialogData-c337c449dc6209fc65eb6036e06f512b2e1370dcf0a040dc410d49cee826f209e149a473e90c4a3893b61788c278f39e61626a2c48e87f2f97fc86a49a7c50ca",
            "file": "src/app/shared/components/confirm-dialog-template/confirm-dialog-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport { Component, Inject, TemplateRef } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\r\n\r\nexport interface ConfirmDialogData {\r\n  title: string;\r\n  description: string;\r\n  icon?: string;\r\n  templateRef?: TemplateRef<any>;\r\n  confirmButton?: {\r\n    text?: string;\r\n    cssClass?: string;\r\n    disabled?: boolean;\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-confirm-dialog-template',\r\n  standalone: true,\r\n  imports: [MatDialogModule, NgTemplateOutlet],\r\n  templateUrl: './confirm-dialog-template.component.html',\r\n  styleUrls: ['./confirm-dialog-template.component.scss']\r\n})\r\nexport class ConfirmDialogTemplateComponent {\r\n  constructor(@Inject(MAT_DIALOG_DATA) public data: ConfirmDialogData) {}\r\n}",
            "properties": [
                {
                    "name": "confirmButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Contract",
            "id": "interface-Contract-6afabbd1ed83165e47d6f0300f582307861722c378ac82bddb7d8f3b616e5ce0554caf78e480282f1cbc3bd1b00b3bb1473b5134aea5e66abba950b1aad9e361",
            "file": "src/app/shared/interfaces/contract.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel } from \"./baseModel\";\r\nimport { Client } from \"./client\";\r\nimport { ClientBusinessUnit } from \"./clientBusinessUnit\";\r\nimport { ContractDocumentItem } from \"./contractDocumentItem\";\r\nimport { ContractVehicle } from \"./contractVehicle\";\r\nimport { Plan } from \"./plan\";\r\n\r\nexport interface Contract extends BaseModel {\r\n    client_id: number;\r\n    client_business_unit_id: number;\r\n    plan_id: number;\r\n    code: string;\r\n    installation_date: string;\r\n    start_date: string;\r\n    end_date: string;\r\n    period: string;\r\n    proration_days: number;\r\n\r\n    quantity: number;\r\n    buy_price: number;\r\n    sale_price: number;\r\n    installation_price: number;\r\n    total_installation_price: number;\r\n    discount: number;\r\n    total: number;\r\n    recurrent_type: RecurrentTypeEnum;\r\n\r\n    description: string;\r\n    sale_user_id: number;\r\n    client_responsible_document_type: string;\r\n    client_responsible_document_number: string;\r\n    client_responsible_role: string;\r\n    client_responsible_name: string;\r\n    client_responsible_paternal_name: string;\r\n    client_responsible_maternal_name: string;\r\n    client_responsible_phone: string;\r\n    client_responsible_email: string;\r\n    link_file: string;\r\n\r\n    client?: Client;\r\n    client_business_unit?: ClientBusinessUnit;\r\n    plan?: Plan;\r\n    contract_vehicles?: ContractVehicle[];\r\n    last_contract_document_item?: ContractDocumentItem;\r\n}\r\n\r\nexport enum RecurrentTypeEnum {\r\n    MENSUAL = 'mensual',\r\n    TRIMESTRAL = 'trimestral',\r\n    SEMESTRAL = 'semestral',\r\n    ANUAL = 'anual',\r\n}\r\n\r\nexport const RECURRENT_TYPE_VALUES = Object.values(RecurrentTypeEnum);\r\n",
            "properties": [
                {
                    "name": "buy_price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "client",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Client",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "client_business_unit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClientBusinessUnit",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "client_business_unit_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "client_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "client_responsible_document_number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "client_responsible_document_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "client_responsible_email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "client_responsible_maternal_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "client_responsible_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "client_responsible_paternal_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "client_responsible_phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "client_responsible_role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "contract_vehicles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContractVehicle[]",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "discount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "end_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "installation_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "installation_price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "last_contract_document_item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContractDocumentItem",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "link_file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "period",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "plan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Plan",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "plan_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "proration_days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "recurrent_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RecurrentTypeEnum",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "sale_price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "sale_user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "start_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "total_installation_price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "ContractDocumentItem",
            "id": "interface-ContractDocumentItem-e1f2a8f1165f18bf5490fdb91721e616a9c3455f4c063c346b0aae9421dc72af1877360b7cb986cb76580dfa2b0fff79ddca8328ee53644ef2bb997ab849903a",
            "file": "src/app/shared/interfaces/contractDocumentItem.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel } from \"./baseModel\";\r\nimport { Contract } from \"./contract\";\r\nimport { DocumentItem } from \"./documentItem\";\r\nimport { Plan } from \"./plan\";\r\n\r\nexport interface ContractDocumentItem extends BaseModel {\r\n    contract_id: number;\r\n    document_item_id: number;\r\n    plan_id: number;\r\n    start_period: number;\r\n    end_period: number;\r\n    price: number;\r\n    quantity: number;\r\n\r\n    contract?: Contract;\r\n    document_item?: DocumentItem;\r\n    plan?: Plan;\r\n}\r\n",
            "properties": [
                {
                    "name": "contract",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Contract",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "contract_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "document_item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DocumentItem",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "document_item_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "end_period",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "plan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Plan",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "plan_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "start_period",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "ContractResolution",
            "id": "interface-ContractResolution-7ea64610a1e6e8454c1296dac5fe2a0d1194fa5d3c91bfc3dc251398e1c1d246cc004e4811463e6366f67486bbef28829e16d002209a3ed15ee1cdc96b337e8e",
            "file": "src/app/shared/interfaces/contractResolution.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel } from \"./baseModel\";\r\nimport { User } from \"./user\";\r\n\r\nexport interface ContractResolution extends BaseModel {\r\n    contract_id: number;\r\n    type: ContractResolutionTypeEnum;\r\n    resolution_entity: ContractResolutionEntityEnum;\r\n    reason: string;\r\n    mutual_agreement: string;\r\n    discharge_from_other_party: string;\r\n    final_agreement: string;\r\n    responsible_user_id: number;\r\n    client_responsible_document_type: string;\r\n    client_responsible_document_number: string;\r\n    client_responsible_role: string;\r\n    client_responsible_name: string;\r\n    client_responsible_phone: string;\r\n    client_responsible_email: string;\r\n    link_file: string;\r\n\r\n    responsible_user?:  User;\r\n}\r\n\r\nexport enum ContractResolutionTypeEnum {\r\n    Unilateral = 'unilateral',\r\n    MutuoAcuerdo = 'mutuo acuerdo',\r\n}\r\n\r\nexport const CONTRACT_RESOLUTION_TYPE_VALUES = Object.values(ContractResolutionTypeEnum);\r\n\r\nexport enum ContractResolutionEntityEnum {\r\n    Empresa = 'empresa',\r\n    Cliente = 'cliente',\r\n}\r\n\r\nexport const CONTRACT_RESOLUTION_ENTITY_VALUES = Object.values(ContractResolutionEntityEnum);",
            "properties": [
                {
                    "name": "client_responsible_document_number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "client_responsible_document_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "client_responsible_email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "client_responsible_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "client_responsible_phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "client_responsible_role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "contract_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "discharge_from_other_party",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "final_agreement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "link_file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "mutual_agreement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "reason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "resolution_entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContractResolutionEntityEnum",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "responsible_user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "responsible_user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContractResolutionTypeEnum",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "ContractVehicle",
            "id": "interface-ContractVehicle-43d61840a3b296ea70cb2a2bdc360df5efb3147e9427fddd4a37eec1bf1f4446fb62d6b596987598aa8d48ef5c6173e3415ba7d98ca7d29adeddabc2b0e98dd0",
            "file": "src/app/shared/interfaces/contractVehicle.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel } from \"./baseModel\";\r\nimport { Contract } from \"./contract\";\r\nimport { Vehicle } from \"./vehicle\";\r\n\r\nexport interface ContractVehicle extends BaseModel {\r\n    contract_id: number;\r\n    vehicle_id: number;\r\n\r\n    vehicle?: Vehicle;\r\n    contract?: Contract;\r\n}",
            "properties": [
                {
                    "name": "contract",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Contract",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "contract_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "vehicle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Vehicle",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "vehicle_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "DataDNI",
            "id": "interface-DataDNI-57e21dc3a4de99cb9583a6a25624df912d51575b4c315d2e77ec559b7cf222ef75519170e88759a1677ebdc844dd563d0426c594f56003948002b584e1adeeb9",
            "file": "src/app/shared/interfaces/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel, DocumentTypeEnum } from \"./baseModel\";\r\n\r\nexport interface User extends BaseModel {\r\n    id: number;\r\n    document_number: string;\r\n    document_type: DocumentTypeEnum;\r\n    name: string;\r\n    email: string;\r\n    role: UserRoleEnum;\r\n    code: string;\r\n    address: string;\r\n    phone: string;\r\n    cellphone: string;\r\n    birth_date: string;\r\n    image?: string\r\n    email_verified_at?: string;\r\n\r\n    level: UserlevelEnum;\r\n\r\n}\r\n\r\nexport interface DataRUC {\r\n    document_type_id: number;\r\n    direccion: string;\r\n    direccion_completa: string;\r\n    ruc: string;\r\n    nombre_o_razon_social: string;\r\n    estado: string;\r\n    condicion: string;\r\n    departamento: string;\r\n    provincia: string;\r\n    distrito: string;\r\n    ubigeo_sunat: string;\r\n    ubigeo: [string, string, string],\r\n    es_agente_de_retencion: 'SI' | 'NO',\r\n    representantes_legales: RepresentanteLegal[]\r\n\r\n}\r\n\r\nexport enum UserRoleEnum {\r\n    PM = 'pm',\r\n    KAM = 'kam',\r\n    MASTER = 'master',\r\n    COMPRAS = 'compras',\r\n    ALMACEN = 'almacén',\r\n    TESORERÍA = 'tesorería',\r\n    CONTABILIDAD = 'contabilidad',\r\n    ADMINISTRACIÓN = 'administración',\r\n    GESTIÓN = 'gestión',\r\n}\r\n\r\nexport enum UserlevelEnum {\r\n    Master = 1,\r\n    Full = 2,\r\n    Standar = 3,\r\n    Basic = 4,\r\n}\r\n\r\nexport interface RepresentanteLegal {\r\n    tipodoc: string;\r\n    numdoc: string;\r\n    nombre: string;\r\n    cargo: string;\r\n    desde: string;\r\n}\r\n\r\n\r\nexport interface DataDNI {\r\n    dni: string;\r\n    nombres: string;\r\n    apellidoPaterno: string;\r\n    apellidoMaterno: string;\r\n    codVerifica: string;\r\n    document_type_id: number;\r\n\r\n}\r\n\r\nexport interface UserToken {\r\n    id: number;\r\n    name: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n    last_used_at: string;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "apellidoMaterno",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "apellidoPaterno",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "codVerifica",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "dni",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "document_type_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "nombres",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DataPerson",
            "id": "interface-DataPerson-cb08a06fb4f9cbf52aee1a27de59a82adcd669c4c2e047ff3a9df61b746ad83c93a0950ad1552d8c5971eef52936fa9187e516922c488fb08ddfd90966175c10",
            "file": "src/app/shared/helpers/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, inject } from \"@angular/core\"\r\nimport { DocumentType, DocumentTypeName } from \"@interface/documentType\";\r\nimport { Taxe, TaxeName } from \"@interface/taxe\";\r\nimport { DataDNI, DataRUC } from \"@interface/user\";\r\nimport { FetchService } from \"@service/fetch.service\";\r\n\r\nexport const getTaxe = (taxes: Taxe[], taxeName: TaxeName) => {\r\n    const taxe = taxes.find(item => item.name.toUpperCase() == taxeName.toUpperCase());\r\n    return taxe;\r\n}\r\n\r\n\r\nexport const getDocumentType = (documentTypes: DocumentType[], documentTypeName: DocumentTypeName) => {\r\n    const documentType = documentTypes.find(item => item.name.toUpperCase() == documentTypeName.toUpperCase());\r\n    return documentType;\r\n}\r\n\r\n\r\ninterface DataPerson {\r\n    document_type: 'DNI' | 'RUC';\r\n    document_number: string;\r\n    full_name: string;\r\n\r\n    name?: string;\r\n    mother_last_name?: string;\r\n    father_last_name?: string;\r\n    verifier_code?: string;\r\n\r\n    business_name?: string;\r\n    address?: string;\r\n    full_address?: string;\r\n    retaining_agent?: 'SI' | 'NO';\r\n    sunat_condition?: string;\r\n    legal_representatives?: any[];\r\n}\r\n\r\nexport const getDataPersonFormDocumentNumber = async (fetch: FetchService, documentNumber: string, abortController: AbortController = new AbortController()): Promise<DataPerson | undefined> => {\r\n    let type = '';\r\n    if (documentNumber.length == 8) type = 'dni';\r\n    else if (documentNumber.length == 11) type = 'ruc';\r\n    else return undefined;\r\n\r\n    const data = await fetch.get<any>(`${type}/${documentNumber}`, {\r\n        signal: abortController.signal,\r\n        toast: {\r\n            loading: `Buscando ${type.toUpperCase()}...`,\r\n            success: `${type.toUpperCase()} encontrado`,\r\n            error: `No se encontró el ${type.toUpperCase()}`,\r\n        }\r\n    });\r\n    if ((data as DataDNI).nombres) return {\r\n        document_type: 'DNI',\r\n        document_number: documentNumber,\r\n        full_name: `${data.nombres} ${data.apellidoPaterno} ${data.apellidoMaterno}`,\r\n        name: data.nombres,\r\n        mother_last_name: data.apellidoMaterno,\r\n        father_last_name: data.apellidoPaterno,\r\n        verifier_code: data.codVerifica,\r\n    }\r\n    else if ((data as DataRUC).nombre_o_razon_social) return {\r\n        document_type: 'RUC',\r\n        document_number: documentNumber,\r\n        full_name: data.nombre_o_razon_social,\r\n        business_name: data.nombre_o_razon_social,\r\n        address: data.direccion,\r\n        full_address: data.direccion_completa,\r\n        retaining_agent: data.es_agente_de_retencion,\r\n        sunat_condition: data.estado,\r\n        legal_representatives: data.representantes_legales ?? [],\r\n    }\r\n    else return undefined;\r\n}",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "business_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "document_number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "document_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"DNI\" | \"RUC\"",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "father_last_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "full_address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "full_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "legal_representatives",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "mother_last_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "retaining_agent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"SI\" | \"NO\"",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "sunat_condition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "verifier_code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DataRUC",
            "id": "interface-DataRUC-57e21dc3a4de99cb9583a6a25624df912d51575b4c315d2e77ec559b7cf222ef75519170e88759a1677ebdc844dd563d0426c594f56003948002b584e1adeeb9",
            "file": "src/app/shared/interfaces/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel, DocumentTypeEnum } from \"./baseModel\";\r\n\r\nexport interface User extends BaseModel {\r\n    id: number;\r\n    document_number: string;\r\n    document_type: DocumentTypeEnum;\r\n    name: string;\r\n    email: string;\r\n    role: UserRoleEnum;\r\n    code: string;\r\n    address: string;\r\n    phone: string;\r\n    cellphone: string;\r\n    birth_date: string;\r\n    image?: string\r\n    email_verified_at?: string;\r\n\r\n    level: UserlevelEnum;\r\n\r\n}\r\n\r\nexport interface DataRUC {\r\n    document_type_id: number;\r\n    direccion: string;\r\n    direccion_completa: string;\r\n    ruc: string;\r\n    nombre_o_razon_social: string;\r\n    estado: string;\r\n    condicion: string;\r\n    departamento: string;\r\n    provincia: string;\r\n    distrito: string;\r\n    ubigeo_sunat: string;\r\n    ubigeo: [string, string, string],\r\n    es_agente_de_retencion: 'SI' | 'NO',\r\n    representantes_legales: RepresentanteLegal[]\r\n\r\n}\r\n\r\nexport enum UserRoleEnum {\r\n    PM = 'pm',\r\n    KAM = 'kam',\r\n    MASTER = 'master',\r\n    COMPRAS = 'compras',\r\n    ALMACEN = 'almacén',\r\n    TESORERÍA = 'tesorería',\r\n    CONTABILIDAD = 'contabilidad',\r\n    ADMINISTRACIÓN = 'administración',\r\n    GESTIÓN = 'gestión',\r\n}\r\n\r\nexport enum UserlevelEnum {\r\n    Master = 1,\r\n    Full = 2,\r\n    Standar = 3,\r\n    Basic = 4,\r\n}\r\n\r\nexport interface RepresentanteLegal {\r\n    tipodoc: string;\r\n    numdoc: string;\r\n    nombre: string;\r\n    cargo: string;\r\n    desde: string;\r\n}\r\n\r\n\r\nexport interface DataDNI {\r\n    dni: string;\r\n    nombres: string;\r\n    apellidoPaterno: string;\r\n    apellidoMaterno: string;\r\n    codVerifica: string;\r\n    document_type_id: number;\r\n\r\n}\r\n\r\nexport interface UserToken {\r\n    id: number;\r\n    name: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n    last_used_at: string;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "condicion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "departamento",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "direccion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "direccion_completa",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "distrito",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "document_type_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "es_agente_de_retencion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"SI\" | \"NO\"",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "estado",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "nombre_o_razon_social",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "provincia",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "representantes_legales",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RepresentanteLegal[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "ruc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "ubigeo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[string, string, string]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "ubigeo_sunat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DataSnackbar",
            "id": "interface-DataSnackbar-ee4bf4b1dee7ab3cae791dde76c0b93fc70d320f9ca94ad7589515d833d74eddd5177423b8a24d64eadaea501c9011e3a5061fa43bca91d18e7e279e60c56ce1",
            "file": "src/app/shared/components/snackbar-template/snackbar-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, WritableSignal, inject, signal } from '@angular/core';\r\nimport { MatSnackBarModule, MatSnackBarRef, MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\r\nimport { ToastDataPromise, ToastDataSimple } from '@interface/toast';\r\n\r\ninterface DataSnackbar {\r\n  simple?: ToastDataSimple;\r\n  promise?: ToastDataPromise;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-snackbar-template',\r\n  templateUrl: './snackbar-template.component.html',\r\n  styleUrls: ['./snackbar-template.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, MatSnackBarModule]\r\n})\r\nexport class SnackbarTemplateComponent {\r\n  public snackBarRef = inject(MatSnackBarRef);\r\n  public dialogData: DataSnackbar = inject(MAT_SNACK_BAR_DATA);\r\n\r\n  public message: WritableSignal<string> = signal('');\r\n  public icon: WritableSignal<string|null> = signal(null);\r\n  public loading: WritableSignal<boolean> = signal(false);\r\n\r\n  ngOnInit(): void {\r\n    if(this.dialogData.simple) {\r\n      this.message.set(this.dialogData.simple.message);\r\n      this.icon.set(this.dialogData.simple.icon ?? null);\r\n    } else if(this.dialogData.promise) {\r\n      this.executePromise(this.dialogData.promise)\r\n    }\r\n  }\r\n\r\n  private async executePromise(configuration: ToastDataPromise) {\r\n    const {promise, success, loading} = configuration;\r\n    this.message.set(loading instanceof Object ? loading.message : loading);\r\n    this.icon.set(loading instanceof Object ? loading.icon : 'rotate_right');\r\n    try {\r\n      this.loading.set(true);\r\n      const data = await promise;\r\n\r\n      let message = 'Completado';\r\n      let icon = 'done';\r\n\r\n      if(success instanceof Function) {\r\n        message = await success(data, this.snackBarRef, this.message());\r\n      } else if (success instanceof Object) {\r\n        message = success.message;\r\n        icon = success.icon;\r\n      } else {\r\n        message = success;\r\n      }\r\n\r\n      this.message.set(message);\r\n      this.icon.set(icon);\r\n\r\n      this.loading.set(false);\r\n\r\n      setTimeout(() => this.snackBarRef.dismiss(), 10000);\r\n\r\n    } catch(exception) {\r\n\r\n      const { error } = configuration;\r\n      let message = 'Completado';\r\n      let icon = 'error';\r\n\r\n      if(error instanceof Function) {\r\n        message = await error(exception, this.snackBarRef, this.message());\r\n      } else if (error instanceof Object) {\r\n        message = error.message;\r\n        icon = error.icon;\r\n      } else {\r\n        message = error;\r\n      }\r\n\r\n      this.message.set(message);\r\n      this.icon.set(icon);\r\n\r\n      this.loading.set(false);\r\n\r\n      setTimeout(() => this.snackBarRef.dismiss(), 10000);\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "promise",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ToastDataPromise",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "simple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ToastDataSimple",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DateFormInput",
            "id": "interface-DateFormInput-c318b4a215c8ef742cae4789ee423f79c07102763a82acdca3a73e70fce6b013cf18d23c85dd12f649226b77bd037e42298d7e0f64fce4e298d57932521aba8a",
            "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { FetchService, RequestInitFetch, ToastForFetch } from '@service/fetch.service';\r\nimport { EventsService } from '@service/events.service';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { SpinnerDefaultComponent } from '../spinner-default/spinner-default.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { InputFileConfiguration, SelectFileComponent } from '../select-file/select-file.component';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { ErrorTemplateComponent } from '../error-template/error-template.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { ExecuteFunctionPipe } from '@pipe/execute-function.pipe';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { InputAutocompleteConfiguration, InputAutocompleteLocalConfiguration, InputAutocompleteServerConfiguration, InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectConfiguration, InputSelectLocalConfiguration, InputSelectServerConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { ConfirmDialogData } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\n\r\nexport interface ItemFormConfiguration<Item = any, Data = any> {\r\n  title?: string;\r\n  titleModule: string;\r\n\r\n  subtitle?: ((item: Item) => string | number | null | undefined) | false;\r\n\r\n  formGroup: FormGroup;\r\n  type: 'create' | 'update';\r\n\r\n  loading?: boolean;\r\n  hiddeFields?: boolean;\r\n  fields?: FormInput[];\r\n\r\n  dataItem?: WritableSignal<Item | null>,\r\n\r\n  server: {\r\n      url: string;\r\n      queryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      updateUrl?: string;\r\n      updateQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      createUrl?: string;\r\n      createQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      itemUrl?: string;\r\n      itemQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      fetch?: {\r\n        confirmDialog?: ConfirmDialogData,\r\n        toast?: ToastForFetch,\r\n      }\r\n  }\r\n\r\n  parseDataItemBeforeSendFormFn?: (data: Data) => (Data | Promise<Data>);\r\n  afterSaveFormFn?: (data: Item) => void;\r\n\r\n  itemId?: string | number\r\n  parseItemBeforePatchFormFn?: (item: Item) => (Item | Promise<Item>);\r\n\r\n  ignoreShowError?: boolean;\r\n  interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n  httpError?: FetchErrorResponse;\r\n\r\n  disableAutoBackLocation?: boolean;\r\n\r\n  saveButton?: {\r\n      text: string;\r\n      icon?: string;\r\n      iconPosition?: 'left' | 'right';\r\n  };\r\n  \r\n  cancelButton?: {\r\n      iconPosition?: 'left' | 'right';\r\n      text: string;\r\n      icon?: string;\r\n  } | false;\r\n}\r\n\r\nexport declare type InputType = 'select' | 'select-local' | 'select-server' | 'date' | 'date-range' | 'text' | 'number' | 'textarea' | 'checkbox' | 'switch' | 'autocomplete' | 'autocomplete-local' | 'autocomplete-server';\r\n\r\nexport interface FormInput {\r\n\r\n  type: InputType | 'file';\r\n\r\n  text?: TextFormInput;\r\n\r\n  number?: NumberFormInput;\r\n\r\n  textarea?: TextareaFormInput;\r\n  \r\n  date?: DateFormInput;\r\n  \r\n  dateRange?: DateRangeFormInput;\r\n  \r\n  switch?: SwitchFormInput;\r\n  \r\n  checkbox?: CheckboxFormInput;\r\n\r\n  select?: SelectConfigurationExt;\r\n\r\n  selectLocal?: SelectLocalConfigurationExt;\r\n  \r\n  selectServer?: SelectServerConfigurationExt;\r\n\r\n  autocomplete?: AutocompleteConfigurationExt;\r\n\r\n  autocompleteServer?: AutocompleteServerConfigurationExt;\r\n\r\n  autocompleteLocal?: AutocompleteLocalConfigurationExt;\r\n\r\n  file?: FileFormInput;\r\n}\r\n\r\nexport interface TextFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface NumberFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface TextareaFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  rows?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SelectFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | boolean | null;\r\n  options: { text: string, value: any }[];\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateRangeFormInput<T = any> {\r\n  formControlNameFrom: string;\r\n  formControlNameTo: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValueFrom?: Date | string | number | null;\r\n  defaultValueTo?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SwitchFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface CheckboxFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectConfigurationExt<T = any> extends InputSelectConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectLocalConfigurationExt<T = any> extends InputSelectLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectServerConfigurationExt<T = any> extends InputSelectServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteConfigurationExt<T = any> extends InputAutocompleteConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteLocalConfigurationExt<T = any> extends InputAutocompleteLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteServerConfigurationExt<T = any> extends InputAutocompleteServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface FileFormInput<T = any> extends InputFileConfiguration {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: any;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport const textFormInput = (configuration: TextFormInput): FormInput => ({\r\n  type: 'text',\r\n  text: configuration\r\n});\r\n\r\nexport const numberFormInput = (configuration: NumberFormInput): FormInput => ({\r\n  type: 'number',\r\n  number: configuration\r\n});\r\n\r\nexport const textareaFormInput = (configuration: TextareaFormInput): FormInput => ({\r\n  type: 'textarea',\r\n  textarea: configuration\r\n});\r\n\r\nexport const selectFormInput = (configuration: SelectConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectLocalFormInput = (configuration: SelectLocalConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectServerFormInput = (configuration: SelectServerConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const dateFormInput = (configuration: DateFormInput): FormInput => ({\r\n  type: 'date',\r\n  date: configuration\r\n});\r\n\r\nexport const dateRangeFormInput = (configuration: DateRangeFormInput): FormInput => ({\r\n  type: 'date-range',\r\n  dateRange: configuration\r\n});\r\n\r\nexport const switchFormInput = (configuration: SwitchFormInput): FormInput => ({\r\n  type: 'switch',\r\n  switch: configuration\r\n});\r\n\r\nexport const checkboxFormInput = (configuration: CheckboxFormInput): FormInput => ({\r\n  type: 'checkbox',\r\n  checkbox: configuration\r\n});\r\n\r\nexport const autocompleteFormInput = (configuration: AutocompleteConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocomplete: configuration\r\n});\r\n\r\nexport const autocompleteLocalFormInput = (configuration: AutocompleteLocalConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocompleteLocal: configuration\r\n});\r\n\r\nexport const autocompleteServerFormInput = (configuration: AutocompleteServerConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-server',\r\n  autocompleteServer: configuration\r\n});\r\n\r\nexport const fileFormInput = (configuration: FileFormInput): FormInput => ({\r\n  type: 'file',\r\n  file: configuration\r\n});\r\n\r\n\r\n@Component({\r\n  selector: 'app-item-form-template',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ScrollingModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    SelectFileComponent,\r\n    PathFilesServerPipe,\r\n    ScrollingModule,\r\n    ErrorTemplateComponent,\r\n    GetKeyItemPipe,\r\n    ExecuteFunctionPipe,\r\n    GetMixedValuePipe,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n  ],\r\n  templateUrl: './item-form-template.component.html',\r\n  styleUrls: ['./item-form-template.component.css']\r\n})\r\nexport class ItemFormTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemFormConfiguration;\r\n\r\n  private fetch = inject(FetchService);\r\n  private events = inject(EventsService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  public location = inject(Location);\r\n\r\n  private abortController = new AbortController();\r\n\r\n  ngOnInit() {\r\n    if (this.configuration.type == 'update') {\r\n      this.setItemId();\r\n      if (this.configuration.dataItem && this.configuration.dataItem()) {\r\n        this.configuration.loading = false;\r\n      } else {\r\n        this.configuration.dataItem = signal(null);\r\n        this.getItem();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private setItemId() {\r\n    if (!this.configuration.itemId) {\r\n      if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n        this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getControl(name: string): FormControl {\r\n    return this.configuration.formGroup.get(name) as FormControl;\r\n  }\r\n\r\n  public async submitForm() {\r\n    try {\r\n      const form = this.configuration.formGroup;\r\n      form.markAllAsTouched();\r\n      if (form.invalid || this.configuration.loading) return;\r\n      this.configuration.loading = true;\r\n\r\n      let data = form.getRawValue();\r\n      const { parseDataItemBeforeSendFormFn } = this.configuration;\r\n      data = await parseDataItemBeforeSendFormFn?.(data) ?? data;\r\n\r\n      const requestInit: RequestInitFetch = { };\r\n      if(this.configuration.server.fetch?.confirmDialog) {\r\n        requestInit.confirmDialog = this.configuration.server.fetch.confirmDialog;\r\n      }\r\n      if(this.configuration.server.fetch?.toast) {\r\n        requestInit.toast = this.configuration.server.fetch.toast;\r\n      }\r\n\r\n      let response = null;\r\n      if (this.configuration.type === 'create') {\r\n        response = await this.fetch.post(this.configuration.server.url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_created`, response);\r\n      } else {\r\n        const url = this.configuration.server.updateUrl ?? `${this.configuration.server.url}/${this.configuration.dataItem!()?.id}`;\r\n        response = await this.fetch.put(url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_updated`, response);\r\n      }\r\n\r\n      const { afterSaveFormFn } = this.configuration;\r\n      if (afterSaveFormFn) afterSaveFormFn(response);\r\n\r\n      if (!this.configuration.disableAutoBackLocation) this.location.back();\r\n    } catch { }\r\n    this.configuration.loading = false;\r\n  }\r\n\r\n  public async getItem() {\r\n    this.configuration.dataItem = signal(null)\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { itemId, server } = this.configuration;\r\n      let queryParams:any = server.itemQueryParams ?? {};\r\n      if (queryParams instanceof Object) {\r\n        queryParams = objectToURLSearchParams(queryParams);\r\n        queryParams = queryParams.toString();\r\n      }\r\n      const url = `${server.itemUrl ?? server.url}/${itemId}?${queryParams ? queryParams : ''}`;\r\n      const requestInit: RequestInitFetch = { signal: this.abortController.signal };\r\n      let item: any = await this.fetch.get(url, requestInit);\r\n      const { parseItemBeforePatchFormFn } = this.configuration;\r\n      item = await parseItemBeforePatchFormFn?.(item) ?? item;\r\n      this.configuration.formGroup.patchValue(item);\r\n      this.configuration.dataItem.set(item);\r\n      this.configuration.hiddeFields = false;\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "cssClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 164
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | string | number | null",
                    "optional": true,
                    "description": "",
                    "line": 161
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 158
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 163
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 162
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 160
                },
                {
                    "name": "textLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 159
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DateListColumn",
            "id": "interface-DateListColumn-edc9a2c085d669b062640c6d2a97876fe56bb34f5ae23612a12a67b2af6f44bb5d3316d9f28e50d8c8d522c0e6ce8fc3245f639ec16593bc1c325c3c460a4296",
            "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule, DatePipe, Location, NgOptimizedImage } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, ViewChild, Input, ContentChild, TemplateRef, ElementRef, Renderer2, ViewEncapsulation, signal, WritableSignal, computed, inject, Inject, Optional, InjectionToken, EventEmitter, RendererStyleFlags2 } from '@angular/core';\r\nimport { MatCheckboxChange, MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSort, MatSortModule } from '@angular/material/sort';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from 'src/app/shared/utilities/queryParams';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { IndexListPipe } from '@pipe/index-list.pipe';\r\nimport { SpinnerDefaultComponent } from '@component/spinner-default/spinner-default.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { debounceTime } from 'rxjs';\r\nimport { DiffDatePipe } from '@pipe/diff-date.pipe';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { HiddenOptionButtonRowPipe } from '@pipe/hidden-option-button-row.pipe';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { GetUserByIdPipe } from '@pipe/get-user-by-id.pipe';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ListFormatPipe } from '@pipe/list-format.pipe';\r\nimport { LoadImagePrivateDirective } from '@directive/load-image-private.directive';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MatPseudoCheckboxModule } from '@angular/material/core';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { EventGlobalSearch, NAME_EVENT_GLOBAL_SEARCH } from 'src/app/sidenav/sidenav/sidenav.component';\r\nimport { ExecuteFunctionListPipe } from './execute-function-list.pipe';\r\nimport { FormInput, dateRangeFormInput, switchFormInput } from '@component/item-form-template/item-form-template.component';\r\nimport { RenameTitleColumnListPipe } from './rename-title-column-list.pipe';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DateFnsAdapter } from '@angular/material-date-fns-adapter';\r\nimport { MyDateAdapter } from '@utility/myDateAdapter';\r\nimport { MY_DATE_FORMATS } from '@utility/myDateFormat';\r\n\r\nexport const DATA_TYPE_LIST = new InjectionToken<'array' | 'paginator'>('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST');\r\n\r\nexport interface ItemListConfiguration<T = any> {\r\n  readonly dataType?: 'array' | 'paginator';\r\n  readonly keyGetItemsPaginator?: string;\r\n  readonly keyGetTotalItemsPaginator?: string;\r\n\r\n  readonly disableFiltersInQueryParams?: boolean;\r\n\r\n  title: string | null;\r\n\r\n  parseDataFn?: (data: T[]) => T[] | Promise<T[]>;\r\n  data?: WritableSignal<T[]>;\r\n  updateListEvent?: EventEmitter<void>;\r\n\r\n  defaultOrder?: {\r\n    key: string,\r\n    order: 'ASC' | 'DESC'\r\n  };\r\n\r\n  backButton?: boolean;\r\n\r\n  updateButton?: boolean;\r\n\r\n  server: {\r\n    readonly url: string,\r\n    queryParams?: { [key: string]: any } | string;\r\n  }\r\n\r\n  createButton?: {\r\n    text?: string,\r\n    routerLink: RouterLinkCreateButton\r\n  } | false;\r\n\r\n  filters?: FormInput[] | false;\r\n\r\n  rows?: {\r\n    selectable?: {\r\n      actions: SelectableActionButton<T>[];\r\n    };\r\n    index?: false | ({ title: string });\r\n    cssClass?: string | ((item: T) => string);\r\n    actions?: ActionButton<T>[];\r\n    options?: ActionButton<T>[] | false;\r\n  },\r\n\r\n  columns: WritableSignal<ListColumn<T>[]>;\r\n}\r\n\r\nexport interface RouterLinkCreateButton {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any;\r\n}\r\nexport interface RouterLinkItem<T> {\r\n  url: ((item: T, index: number) => string) | string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: ((item: T, index: number) => (string | { [key: string]: any } | any[] | number | null)) | string | { [key: string]: any } | any[] | number | null;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\ndeclare type ActionButtonActionsType = 'clickEvent' | 'routerLink';\r\ninterface ActionButton<T> {\r\n  type: 'clickEvent' | 'routerLink';\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((item: T, index: number) => boolean);\r\n  disabled?: boolean | ((item: T, index: number) => boolean);\r\n  cssClass?: string | ((item: T, index: number) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((item: T, index: number) => ({ [key: string]: any }));\r\n  fn?: (item: T, index: number, fns: {\r\n    deleteItemFn: (id: number | string) => Promise<void>,\r\n    restoreItemFn: (id: number | string) => Promise<void>,\r\n    updateChangesItemFn: (index: number, item: T) => void,\r\n  }) => void;\r\n  routerLink?: RouterLinkItem<T>;\r\n}\r\ninterface ClickEventActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'fn'>> & ActionButton<T>, 'type' | 'routerLink'> { }\r\nexport const clickEventActionButton = <T = any>(config: ClickEventActionButton<T>): ActionButton<T> => ({ type: 'clickEvent', ...config });\r\ninterface RouterLinkActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'routerLink'>> & ActionButton<T>, 'type' | 'clickEvent'> { }\r\nexport const routerLinkActionButton = <T = any>(config: RouterLinkActionButton<T>): ActionButton<T> => ({ type: 'routerLink', ...config });\r\ninterface SelectableActionButton<T> {\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((selectedItems: T[]) => boolean);\r\n  disabled?: boolean | ((selectedItems: T[]) => boolean);\r\n  cssClass?: string | ((selectedItems: T[]) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((selectedItems: T[]) => ({ [key: string]: any }));\r\n  fn: (selectedItems: T[]) => void;\r\n}\r\nexport const selectableActionButton = <T = any>(config: SelectableActionButton<T>): SelectableActionButton<T> => ({ ...config });\r\n\r\nexport interface ListItemExtended {\r\n  __selected__?: boolean;\r\n  __loading_status__?: boolean;\r\n}\r\n\r\nexport type TypeValueKeyItem = 'text' | 'diff-date' | 'date' | 'number' | 'email' | 'phone' | 'user' | 'uppercase' | 'lowercase' | 'titlecase' | 'first-letter-uppercase' | 'list-format' | 'currency';\r\n\r\nexport interface ListColumn<T> {\r\n  /**\r\n   * @description\r\n   * Agrega clases css al contenedor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   */\r\n  align?: 'left' | 'center' | 'right';\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor adicional de la celda de la columna\r\n   * @example\r\n   * clickEventAdditionalValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventAdditionalValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor de la celda de la columna\r\n   * @example\r\n   * clickEventValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css a la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClass: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClass?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor adicional de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayAdditionalValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo fecha (type: 'date')\r\n   * @example\r\n   * ...\r\n   * dateFormat: 'yyyy-MM-dd'\r\n   * ...\r\n   * dateFormat: 'dd/MM/yyyy' // Por defecto\r\n   * ...\r\n   */\r\n  dateFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor adicional a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.name\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayAdditionalValueFn?: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayValueFn: (item) => item.name\r\n   * ...\r\n   * displayValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * If you want to display a value in the column that is not in the item, you can use this function\r\n   * @example\r\n   * ...\r\n   * gridColumn: '1fr'\r\n   * ...\r\n   * gridColumn: '200px'\r\n   * ...\r\n   * gridColumn: 'max-content'\r\n   * ...\r\n   * gridColumn: 'fit-content(200px)'\r\n   * ...\r\n   */\r\n  gridColumn?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones > Columnas\r\n   * @example\r\n   * ...\r\n   * hidden: true\r\n   * ...\r\n   * hidden: false // Por defecto\r\n   * ...\r\n   */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo número (type: 'number')\r\n   * @example\r\n   * ...\r\n   * numberFormat: '2.2-2'\r\n   * ...\r\n   * numberFormat: '0.2-2' // Por defecto\r\n   * ...\r\n   */\r\n  numberFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor adicional de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkAdditionalValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Sortable column espicif key in object configuration\r\n   * @example\r\n   * sort: { key: 'name' }\r\n   */\r\n  sort?: { key: string };\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display additional value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: { color: 'green' }\r\n   * ...\r\n   * @param item\r\n   * @returns string | number | null | undefined | string[] | number[]\r\n   */\r\n  cssStyleDisplayAdditionalValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayValue: { color: 'green' }\r\n   * ...\r\n   */\r\n  cssStyleDisplayValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Title column\r\n   * @example\r\n   * title: 'Nombre'\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * @description\r\n   * To display a tooltip in the column on hover\r\n   * @example\r\n   * tooltip: 'Ver detalle'\r\n   */\r\n  tooltip?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * For show type value in cell\r\n   * @example\r\n   * ...\r\n   * type: 'number',\r\n   * displayValueFn: (item) => item.price, // output: 2,000.00\r\n   * ...\r\n   * type: 'date',\r\n   * displayValueFn: (item) => item.created_at, // output 12/12/2020\r\n   * ...\r\n   */\r\n  type?: TypeValueKeyItem | 'image' | 'html';\r\n\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface SimpleListColumn<T> extends Omit<ListColumn<T>, 'type' | 'displayAdditionalValueFn' | 'displayValueFn' | 'dateFormat' | 'numberFormat' | 'image'> { }\r\ninterface SimpleListColumn2<T> extends Omit<SimpleListColumn<T>, 'cssStyleDisplayAdditionalValue' | 'routerLinkAdditionalValue' | 'cssClassDisplayAdditionalValue' | 'clickEventAdditionalValue'> { }\r\ninterface ListFormatListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string[];\r\n  displayValueFn: (item: T, index: number) => string[];\r\n}\r\n\r\ninterface NumberListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => number | null | undefined;\r\n  numberFormat?: string;\r\n}\r\n\r\ninterface StringListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => string | number | null | undefined;\r\n}\r\n\r\ninterface DateListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined;\r\n  dateFormat?: string;\r\n}\r\n\r\ninterface ImageListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface HtmlListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n}\r\n\r\nexport const numberColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'number', ...config });\r\n\r\nexport const listFormatColumn = <T = any>(config: ListFormatListColumn<T>): ListColumn<T> => ({ type: 'list-format', ...config });\r\n\r\nexport const dateColumn = <T = any>(config: DateListColumn<T>): ListColumn<T> => ({ type: 'date', ...config });\r\n\r\nexport const diffDateColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'diff-date', ...config });\r\n\r\nexport const htmlColumn = <T = any>(config: HtmlListColumn<T>): ListColumn<T> => ({ type: 'html', ...config });\r\n\r\nexport const textColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'text', ...config });\r\n\r\nexport const uppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'uppercase', ...config });\r\n\r\nexport const lowercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'lowercase', ...config });\r\n\r\nexport const titlecaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'titlecase', ...config });\r\n\r\nexport const firstLetterUppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'first-letter-uppercase', ...config });\r\n\r\nexport const phoneColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'phone', ...config });\r\n\r\nexport const emailColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'email', ...config });\r\n\r\nexport const userColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'user', ...config });\r\n\r\nexport const imageColumn = <T = any>(config: ImageListColumn<T>): ListColumn<T> => ({ type: 'image', ...config });\r\n\r\n\r\nexport const itemNameAndDescriptionColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  title: 'Nombre',\r\n  gridColumn: '1fr',\r\n  sort: { key: 'name' },\r\n  routerLinkValue: { url: (item: any) => `../detail/${item.id}` },\r\n  displayValueFn: (item: any) => item.name,\r\n  displayAdditionalValueFn: (item: any) => item.description,\r\n  ...config,\r\n});\r\nexport const itemStatusColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'cssClassDisplayValue' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'first-letter-uppercase',\r\n  title: 'Estado',\r\n  sort: { key: 'status' },\r\n  align: 'center',\r\n  displayValueFn: (item: any) => item.status,\r\n  cssClassDisplayValue: (item: any) => `status-chip ${item.status}`,\r\n  ...config,\r\n});\r\nexport const itemCreatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Creado',\r\n  sort: { key: 'created_at' },\r\n  displayValueFn: (item: any) => item.created_at,\r\n  ...config,\r\n});\r\nexport const itemUpdatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Actualizado',\r\n  sort: { key: 'updated_at' },\r\n  hidden: true,\r\n  displayValueFn: (item: any) => item.updated_at,\r\n  ...config,\r\n});\r\nexport const simpleListColumns = (): ListColumn<any>[] => ([\r\n  itemNameAndDescriptionColumn(),\r\n  itemUpdatedAtColumn(),\r\n  itemCreatedAtColumn(),\r\n  itemStatusColumn(),\r\n]);\r\n\r\n\r\nexport const defaultListFilterInputs = (): FormInput[] => [\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de creación',\r\n    formControlNameFrom: 'created_at_from',\r\n    formControlNameTo: 'created_at_to',\r\n  }),\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de actualización',\r\n    formControlNameFrom: 'updated_at_from',\r\n    formControlNameTo: 'updated_at_to',\r\n  }),\r\n  switchFormInput({\r\n    textLabel: 'Registros inactivos',\r\n    formControlName: 'inactive',\r\n  }),\r\n];\r\n\r\nexport const deleteItemActionButton = () => clickEventActionButton({\r\n  icon: 'delete',\r\n  text: 'Eliminar',\r\n  fn: async ({ id }, _, { deleteItemFn }) => deleteItemFn(id),\r\n  hidden: (item) => item.deleted_at,\r\n});\r\n\r\nexport const restoreItemActionButton = () => clickEventActionButton({\r\n  icon: 'restore',\r\n  text: 'Restaurar',\r\n  fn: async ({ id }, _, { restoreItemFn }) => restoreItemFn(id),\r\n  hidden: (item) => !item.deleted_at,\r\n})\r\n\r\nexport const viewItemActionButton = () => routerLinkActionButton({\r\n  icon: 'visibility',\r\n  text: 'Ver',\r\n  routerLink: { url: (item) => `../view/${item.id}` },\r\n});\r\n\r\nexport const editItemActionButton = () => routerLinkActionButton({\r\n  icon: 'edit',\r\n  text: 'Editar',\r\n  routerLink: { url: (item) => `../edit/${item.id}` },\r\n})\r\n\r\n@Component({\r\n  selector: 'app-item-list-template',\r\n  standalone: true,\r\n  templateUrl: './item-list-template.component.html',\r\n  styleUrl: './item-list-template.component.css',\r\n  imports: [\r\n    CommonModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatSortModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatTooltipModule,\r\n    MatPseudoCheckboxModule,\r\n    IndexListPipe,\r\n    GetKeyItemPipe,\r\n    RouterLink,\r\n    DiffDatePipe,\r\n    HiddenOptionButtonRowPipe,\r\n    NgOptimizedImage,\r\n    ScrollingModule,\r\n    GetUserByIdPipe,\r\n    PathFilesServerPipe,\r\n    ListFormatPipe,\r\n    LoadImagePrivateDirective,\r\n    FirstLetterUppercasePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n    ExecuteFunctionListPipe,\r\n    RenameTitleColumnListPipe,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    FirstLetterUppercasePipe,\r\n    GetKeyItemPipe,\r\n    RenameTitleColumnListPipe,\r\n    BrowserAnimationsModule,\r\n    DateFnsAdapter,\r\n  ],\r\n})\r\nexport class ItemListTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemListConfiguration;\r\n\r\n  // @ContentChild('headers') headers!: TemplateRef<any>;\r\n  @ContentChild('rowList') rowList!: TemplateRef<any>;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  @ViewChild('divListItems', { static: true }) private divList!: ElementRef;\r\n\r\n  private _dataTypeList: 'array' | 'paginator' = 'array';\r\n  private _keyForGetItems: string;\r\n  private _keyForGetTotalItems: string;\r\n\r\n  private fetch = inject(FetchService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  private renderer = inject(Renderer2);\r\n  private eventsService = inject(EventsService);\r\n  public location = inject(Location);\r\n\r\n  // private datePipe = inject(DatePipe);\r\n  public firstLetterUppercasePipe = inject(FirstLetterUppercasePipe);\r\n  public getKeyItemPipe = inject(GetKeyItemPipe);\r\n  public renameTitleColumnListPipe = inject(RenameTitleColumnListPipe);\r\n\r\n  public lengthData = computed(() => this.data().length)\r\n\r\n  public searchCtrl: FormControl = new FormControl('');\r\n  public formFilters: FormGroup<any> | null = null;\r\n\r\n  public loading = signal(true);\r\n  public font: WritableSignal<'small' | 'medium' | 'large'> = signal('medium');\r\n  public headerListStyle: WritableSignal<'simple' | 'color'> = signal('simple');\r\n\r\n  private abortController = new AbortController();\r\n\r\n  private unsubscribe$: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(DATA_TYPE_LIST) _dataTypeList: 'array' | 'paginator',\r\n    @Optional() @Inject(KEY_GET_ITEMS_PAGINATOR_LIST) _keyForGetItems: string,\r\n    @Optional() @Inject(KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST) _keyForGetTotalItems: string\r\n  ) {\r\n    this._dataTypeList = _dataTypeList ?? 'paginator';\r\n    this._keyForGetItems = _keyForGetItems || 'data';\r\n    this._keyForGetTotalItems = _keyForGetTotalItems || 'total';\r\n  }\r\n\r\n  get data(): WritableSignal<any[]> {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  get defaultOrder(): string {\r\n    return this.configuration.defaultOrder ? `${this.configuration.defaultOrder?.key}|${this.configuration.defaultOrder?.order}` : 'id|DESC';\r\n  }\r\n\r\n  get dataTypeList(): 'array' | 'paginator' {\r\n    return this.configuration.dataType ?? this._dataTypeList;\r\n  }\r\n\r\n  get keyForGetItems(): string {\r\n    return this.configuration.keyGetItemsPaginator ?? this._keyForGetItems;\r\n  }\r\n\r\n  get keyForGetTotalItems(): string {\r\n    return this.configuration.keyGetTotalItemsPaginator ?? this._keyForGetTotalItems;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.configuration.data = signal([]);\r\n    this.configuration.updateListEvent = new EventEmitter();\r\n    if (this.configuration.rows?.options != false && !this.configuration.rows?.options?.length) {\r\n      this.configuration.rows = {\r\n        ...(this.configuration.rows ?? {}),\r\n        options: [\r\n          viewItemActionButton(),\r\n          editItemActionButton(),\r\n          deleteItemActionButton(),\r\n          restoreItemActionButton(),\r\n        ]\r\n      };\r\n    }\r\n    this.generateFormControlsFromFilterInputs();\r\n    this.generateColumnsCss();\r\n\r\n    this.eventsService\r\n      .eventsFiltered<EventGlobalSearch>([NAME_EVENT_GLOBAL_SEARCH])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(({ data }: any) => {\r\n        const type = data.type;\r\n        if (type == 'enter') this.searchCtrl.setValue(data.value);\r\n      })\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.paginator.pageIndex = 0;\r\n    this.paginator.pageSize = 20;\r\n\r\n    this.verifyQueryParams();\r\n\r\n    this.activatedRoute.queryParams.subscribe(() => this.callGetData());\r\n\r\n    this.sort.sortChange.subscribe(({ active, direction }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (this.defaultOrder == `${active}|${direction}` || !active || !direction) queryParams['order'] = null;\r\n      else queryParams['order'] = `${active}|${direction}`;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.searchCtrl.valueChanges.pipe(debounceTime(250)).subscribe((value: string) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (value) queryParams['search'] = value;\r\n      else queryParams['search'] = null;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.paginator.page.subscribe(({ pageIndex, pageSize }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (pageIndex == 0 || (queryParams['page'] ?? null) == pageIndex + 1) queryParams['page'] = null;\r\n      else queryParams['page'] = pageIndex + 1;\r\n      if (pageSize == 20 || (queryParams['per_page'] ?? null) == pageSize) queryParams['per_page'] = null;\r\n      else queryParams['per_page'] = pageSize;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.eventsService\r\n      .eventsFiltered([\r\n        `${this.configuration.server.url}_created`,\r\n        `${this.configuration.server.url}_updated`\r\n      ])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(() => this.callGetData());\r\n\r\n    // this.configuration.updateListEvent!.subscribe(() => this.callGetData({}));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n    if (this.abortController) this.abortController.abort();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private async generateColumnsCss(): Promise<void> {\r\n    const grid_cols: string[] = [];\r\n    const grid_areas: string[] = []\r\n    if (this.configuration.rows?.selectable) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('selected');\r\n    }\r\n    if (this.configuration.rows?.index != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('index');\r\n    }\r\n    for await (const column of this.configuration.columns()) {\r\n      if (!column.hidden) {\r\n        grid_cols.push(column.gridColumn ?? 'auto');\r\n        grid_areas.push(this.renameTitleColumnListPipe.transform(column.title));\r\n      }\r\n    }\r\n    if (this.configuration.rows?.actions) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('actions');\r\n    }\r\n    if (this.configuration.rows?.options != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('options');\r\n    }\r\n    this.renderer.setStyle(this.divList.nativeElement, 'grid-template-columns', grid_cols.join(' '));\r\n    this.renderer.setStyle(this.divList.nativeElement, '--items-list-grid-template-areas', `\"${grid_areas.join(' ')}\"`, RendererStyleFlags2.DashCase);\r\n    grid_areas.forEach((area, index) => this.renderer.setStyle(this.divList.nativeElement, `--items-list-grid-area-${index + 1}`, area, RendererStyleFlags2.DashCase));\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private getQueryParams(): { [key: string]: any } {\r\n    return !this.configuration.disableFiltersInQueryParams ? JSON.parse(JSON.stringify(this.activatedRoute.snapshot.queryParams)) : {\r\n      ...this.formFilters?.value ?? {},\r\n      page: this.paginator.pageIndex + 1,\r\n      per_page: this.paginator.pageSize,\r\n      order: this.sort.active ? `${this.sort.active}|${this.sort.direction}` : null,\r\n      search: this.searchCtrl.value ? this.searchCtrl.value : null,\r\n    }\r\n  }\r\n\r\n  private navigateOrCallGetData(params: any): void {\r\n    if (this.configuration.disableFiltersInQueryParams) this.callGetData(params);\r\n    else this.router.navigate([], { queryParams: params });\r\n  }\r\n\r\n  private verifyQueryParams(): void {\r\n    const queryParams = {} as any;\r\n    const { page, per_page, order, search, ...filters } = queryParams;\r\n    this.paginator.pageIndex = Number(page ?? 1) - 1;\r\n    this.paginator.pageSize = Number(per_page) ?? 20;\r\n    this.sort.active = order?.split('|')[0] ?? '';\r\n    this.sort.direction = order?.split('|')[1] == 'asc' ? 'asc' : 'desc';\r\n    this.sort.sortChange.emit();\r\n    this.searchCtrl.setValue(search ?? null, { emitEvent: false });\r\n  }\r\n\r\n  public callGetData(queryParams: any = {}): void {\r\n    const params = objectToURLSearchParams(queryParams);\r\n    if (!params.has('page')) params.set('page', String(this.paginator.pageIndex + 1));\r\n    if (!params.has('per_page')) params.set('per_page', String(this.paginator.pageSize));\r\n    if (!params.has('order')) params.set('order', this.defaultOrder);\r\n    this.getData(params);\r\n  }\r\n\r\n  private async getData(searchParams: URLSearchParams = new URLSearchParams()): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const serverUrl = this.configuration.server.url;\r\n    let queryParams = this.configuration.server.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const url = `${serverUrl}?${searchParams.toString()}&${queryParams ?? ''}`;\r\n    const config = { signal: this.abortController.signal };\r\n    try {\r\n      let items = [];\r\n      let totalItems = 0;\r\n      if (this.dataTypeList == 'array') {\r\n        items = await this.fetch.get<any[]>(url, config);\r\n        totalItems = items.length;\r\n      } else {\r\n        const paginatorData = await this.fetch.get<PaginatorData<any>>(url, config);\r\n        items = this.getKeyItemPipe.transform(paginatorData, this.keyForGetItems);\r\n        totalItems = this.getKeyItemPipe.transform(paginatorData, this.keyForGetTotalItems);\r\n      }\r\n      const { parseDataFn } = this.configuration;\r\n      const parseData = await parseDataFn?.(items) ?? items;\r\n      this.paginator.length = totalItems;\r\n      this.data.set(parseData);\r\n      this.loading.set(false);\r\n      this.checkSelectedItems();\r\n    } catch (err: any) {\r\n      if (err.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n  }\r\n\r\n  public hiddenToggleColumn($event: MatCheckboxChange, index: number): void {\r\n    this.configuration.columns.update((columns) => {\r\n      columns[index]['hidden'] = !$event.checked\r\n      return columns;\r\n    })\r\n    this.generateColumnsCss();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public navigateCreateView(): void {\r\n    this.router.navigate(['../create'], { relativeTo: this.activatedRoute });\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public allSelectedItems = signal(false);\r\n  public someSelectedItems = signal(false);\r\n  public selectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__));\r\n  public lengthSelectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__).length);\r\n\r\n  public selectedItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.toSpliced(index, 1, { ...data[index], __selected__: status }));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public selectedAllItems(status: boolean): void {\r\n    this.data.update((data) => data.map((e) => ({ ...e, __selected__: status })));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public someSelected(): boolean {\r\n    return this.data().length > 0 && this.data().some((e: ListItemExtended) => e.__selected__) && !this.allSelectedItems();\r\n  }\r\n\r\n  private checkSelectedItems(): void {\r\n    this.allSelectedItems.set(this.data().length > 0 && this.data().every((e: ListItemExtended) => e.__selected__));\r\n    this.someSelectedItems.set(this.someSelected());\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private generateFormControlsFromFilterInputs(): void {\r\n    if (this.configuration.filters == false) return;\r\n    if (!this.configuration.filters?.length) this.configuration.filters = defaultListFilterInputs();\r\n    const formFilters = new FormGroup({});\r\n    this.configuration.filters?.forEach((filter) => {\r\n      if (filter.text) {\r\n        formFilters.setControl(filter.text.formControlName, new FormControl(filter.text.defaultValue));\r\n      } else if (filter.textarea) {\r\n        formFilters.setControl(filter.textarea.formControlName, new FormControl(filter.textarea.defaultValue));\r\n      } else if (filter.select) {\r\n        formFilters.setControl(filter.select.formControlName, new FormControl(filter.select.defaultValue));\r\n      } else if (filter.number) {\r\n        formFilters.setControl(filter.number.formControlName, new FormControl(filter.number.defaultValue));\r\n      } else if (filter.date) {\r\n        formFilters.setControl(filter.date.formControlName, new FormControl(filter.date.defaultValue));\r\n      } else if (filter.dateRange) {\r\n        formFilters.setControl(filter.dateRange.formControlNameFrom, new FormControl(filter.dateRange.defaultValueFrom));\r\n        formFilters.setControl(filter.dateRange.formControlNameTo, new FormControl(filter.dateRange.defaultValueTo));\r\n      } else if (filter.autocompleteLocal) {\r\n        formFilters.setControl(filter.autocompleteLocal.formControlName, new FormControl(filter.autocompleteLocal.defaultValue));\r\n      } else if (filter.autocompleteServer) {\r\n        formFilters.setControl(filter.autocompleteServer.formControlName, new FormControl(filter.autocompleteServer.defaultValue));\r\n      } else if (filter.checkbox) {\r\n        formFilters.setControl(filter.checkbox.formControlName, new FormControl(filter.checkbox.defaultValue));\r\n      } else if (filter.switch) {\r\n        formFilters.setControl(filter.switch.formControlName, new FormControl(filter.switch.defaultValue));\r\n      }\r\n    });\r\n    this.formFilters = formFilters;\r\n  }\r\n\r\n  public getControlFormFilter(name: string): FormControl {\r\n    return this.formFilters!.get(name) as FormControl;\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private updateLoadingStatusItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.map((item: ListItemExtended, i) => {\r\n      if (i == index) item.__loading_status__ = status;\r\n      return item;\r\n    }));\r\n  }\r\n\r\n  public deleteItem = async (id: number | string) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}`;\r\n    try {\r\n      await this.fetch.delete(url);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public restoreItem = async (id: string | number) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}/restore`;\r\n    const config = { afterAlert: { description: 'Restaurando ítem de la lista' } }\r\n    try {\r\n      await this.fetch.put(url, config);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public updateChangesItem = (index: number, item: any) => {\r\n    this.configuration.data!.update(items => items.toSpliced(index, 1, item));\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "dateFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 434
                },
                {
                    "name": "displayAdditionalValueFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 432
                },
                {
                    "name": "displayValueFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 433
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "SimpleListColumn"
            ]
        },
        {
            "name": "DateRangeFormInput",
            "id": "interface-DateRangeFormInput-c318b4a215c8ef742cae4789ee423f79c07102763a82acdca3a73e70fce6b013cf18d23c85dd12f649226b77bd037e42298d7e0f64fce4e298d57932521aba8a",
            "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { FetchService, RequestInitFetch, ToastForFetch } from '@service/fetch.service';\r\nimport { EventsService } from '@service/events.service';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { SpinnerDefaultComponent } from '../spinner-default/spinner-default.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { InputFileConfiguration, SelectFileComponent } from '../select-file/select-file.component';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { ErrorTemplateComponent } from '../error-template/error-template.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { ExecuteFunctionPipe } from '@pipe/execute-function.pipe';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { InputAutocompleteConfiguration, InputAutocompleteLocalConfiguration, InputAutocompleteServerConfiguration, InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectConfiguration, InputSelectLocalConfiguration, InputSelectServerConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { ConfirmDialogData } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\n\r\nexport interface ItemFormConfiguration<Item = any, Data = any> {\r\n  title?: string;\r\n  titleModule: string;\r\n\r\n  subtitle?: ((item: Item) => string | number | null | undefined) | false;\r\n\r\n  formGroup: FormGroup;\r\n  type: 'create' | 'update';\r\n\r\n  loading?: boolean;\r\n  hiddeFields?: boolean;\r\n  fields?: FormInput[];\r\n\r\n  dataItem?: WritableSignal<Item | null>,\r\n\r\n  server: {\r\n      url: string;\r\n      queryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      updateUrl?: string;\r\n      updateQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      createUrl?: string;\r\n      createQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      itemUrl?: string;\r\n      itemQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      fetch?: {\r\n        confirmDialog?: ConfirmDialogData,\r\n        toast?: ToastForFetch,\r\n      }\r\n  }\r\n\r\n  parseDataItemBeforeSendFormFn?: (data: Data) => (Data | Promise<Data>);\r\n  afterSaveFormFn?: (data: Item) => void;\r\n\r\n  itemId?: string | number\r\n  parseItemBeforePatchFormFn?: (item: Item) => (Item | Promise<Item>);\r\n\r\n  ignoreShowError?: boolean;\r\n  interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n  httpError?: FetchErrorResponse;\r\n\r\n  disableAutoBackLocation?: boolean;\r\n\r\n  saveButton?: {\r\n      text: string;\r\n      icon?: string;\r\n      iconPosition?: 'left' | 'right';\r\n  };\r\n  \r\n  cancelButton?: {\r\n      iconPosition?: 'left' | 'right';\r\n      text: string;\r\n      icon?: string;\r\n  } | false;\r\n}\r\n\r\nexport declare type InputType = 'select' | 'select-local' | 'select-server' | 'date' | 'date-range' | 'text' | 'number' | 'textarea' | 'checkbox' | 'switch' | 'autocomplete' | 'autocomplete-local' | 'autocomplete-server';\r\n\r\nexport interface FormInput {\r\n\r\n  type: InputType | 'file';\r\n\r\n  text?: TextFormInput;\r\n\r\n  number?: NumberFormInput;\r\n\r\n  textarea?: TextareaFormInput;\r\n  \r\n  date?: DateFormInput;\r\n  \r\n  dateRange?: DateRangeFormInput;\r\n  \r\n  switch?: SwitchFormInput;\r\n  \r\n  checkbox?: CheckboxFormInput;\r\n\r\n  select?: SelectConfigurationExt;\r\n\r\n  selectLocal?: SelectLocalConfigurationExt;\r\n  \r\n  selectServer?: SelectServerConfigurationExt;\r\n\r\n  autocomplete?: AutocompleteConfigurationExt;\r\n\r\n  autocompleteServer?: AutocompleteServerConfigurationExt;\r\n\r\n  autocompleteLocal?: AutocompleteLocalConfigurationExt;\r\n\r\n  file?: FileFormInput;\r\n}\r\n\r\nexport interface TextFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface NumberFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface TextareaFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  rows?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SelectFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | boolean | null;\r\n  options: { text: string, value: any }[];\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateRangeFormInput<T = any> {\r\n  formControlNameFrom: string;\r\n  formControlNameTo: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValueFrom?: Date | string | number | null;\r\n  defaultValueTo?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SwitchFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface CheckboxFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectConfigurationExt<T = any> extends InputSelectConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectLocalConfigurationExt<T = any> extends InputSelectLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectServerConfigurationExt<T = any> extends InputSelectServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteConfigurationExt<T = any> extends InputAutocompleteConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteLocalConfigurationExt<T = any> extends InputAutocompleteLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteServerConfigurationExt<T = any> extends InputAutocompleteServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface FileFormInput<T = any> extends InputFileConfiguration {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: any;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport const textFormInput = (configuration: TextFormInput): FormInput => ({\r\n  type: 'text',\r\n  text: configuration\r\n});\r\n\r\nexport const numberFormInput = (configuration: NumberFormInput): FormInput => ({\r\n  type: 'number',\r\n  number: configuration\r\n});\r\n\r\nexport const textareaFormInput = (configuration: TextareaFormInput): FormInput => ({\r\n  type: 'textarea',\r\n  textarea: configuration\r\n});\r\n\r\nexport const selectFormInput = (configuration: SelectConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectLocalFormInput = (configuration: SelectLocalConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectServerFormInput = (configuration: SelectServerConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const dateFormInput = (configuration: DateFormInput): FormInput => ({\r\n  type: 'date',\r\n  date: configuration\r\n});\r\n\r\nexport const dateRangeFormInput = (configuration: DateRangeFormInput): FormInput => ({\r\n  type: 'date-range',\r\n  dateRange: configuration\r\n});\r\n\r\nexport const switchFormInput = (configuration: SwitchFormInput): FormInput => ({\r\n  type: 'switch',\r\n  switch: configuration\r\n});\r\n\r\nexport const checkboxFormInput = (configuration: CheckboxFormInput): FormInput => ({\r\n  type: 'checkbox',\r\n  checkbox: configuration\r\n});\r\n\r\nexport const autocompleteFormInput = (configuration: AutocompleteConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocomplete: configuration\r\n});\r\n\r\nexport const autocompleteLocalFormInput = (configuration: AutocompleteLocalConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocompleteLocal: configuration\r\n});\r\n\r\nexport const autocompleteServerFormInput = (configuration: AutocompleteServerConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-server',\r\n  autocompleteServer: configuration\r\n});\r\n\r\nexport const fileFormInput = (configuration: FileFormInput): FormInput => ({\r\n  type: 'file',\r\n  file: configuration\r\n});\r\n\r\n\r\n@Component({\r\n  selector: 'app-item-form-template',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ScrollingModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    SelectFileComponent,\r\n    PathFilesServerPipe,\r\n    ScrollingModule,\r\n    ErrorTemplateComponent,\r\n    GetKeyItemPipe,\r\n    ExecuteFunctionPipe,\r\n    GetMixedValuePipe,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n  ],\r\n  templateUrl: './item-form-template.component.html',\r\n  styleUrls: ['./item-form-template.component.css']\r\n})\r\nexport class ItemFormTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemFormConfiguration;\r\n\r\n  private fetch = inject(FetchService);\r\n  private events = inject(EventsService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  public location = inject(Location);\r\n\r\n  private abortController = new AbortController();\r\n\r\n  ngOnInit() {\r\n    if (this.configuration.type == 'update') {\r\n      this.setItemId();\r\n      if (this.configuration.dataItem && this.configuration.dataItem()) {\r\n        this.configuration.loading = false;\r\n      } else {\r\n        this.configuration.dataItem = signal(null);\r\n        this.getItem();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private setItemId() {\r\n    if (!this.configuration.itemId) {\r\n      if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n        this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getControl(name: string): FormControl {\r\n    return this.configuration.formGroup.get(name) as FormControl;\r\n  }\r\n\r\n  public async submitForm() {\r\n    try {\r\n      const form = this.configuration.formGroup;\r\n      form.markAllAsTouched();\r\n      if (form.invalid || this.configuration.loading) return;\r\n      this.configuration.loading = true;\r\n\r\n      let data = form.getRawValue();\r\n      const { parseDataItemBeforeSendFormFn } = this.configuration;\r\n      data = await parseDataItemBeforeSendFormFn?.(data) ?? data;\r\n\r\n      const requestInit: RequestInitFetch = { };\r\n      if(this.configuration.server.fetch?.confirmDialog) {\r\n        requestInit.confirmDialog = this.configuration.server.fetch.confirmDialog;\r\n      }\r\n      if(this.configuration.server.fetch?.toast) {\r\n        requestInit.toast = this.configuration.server.fetch.toast;\r\n      }\r\n\r\n      let response = null;\r\n      if (this.configuration.type === 'create') {\r\n        response = await this.fetch.post(this.configuration.server.url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_created`, response);\r\n      } else {\r\n        const url = this.configuration.server.updateUrl ?? `${this.configuration.server.url}/${this.configuration.dataItem!()?.id}`;\r\n        response = await this.fetch.put(url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_updated`, response);\r\n      }\r\n\r\n      const { afterSaveFormFn } = this.configuration;\r\n      if (afterSaveFormFn) afterSaveFormFn(response);\r\n\r\n      if (!this.configuration.disableAutoBackLocation) this.location.back();\r\n    } catch { }\r\n    this.configuration.loading = false;\r\n  }\r\n\r\n  public async getItem() {\r\n    this.configuration.dataItem = signal(null)\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { itemId, server } = this.configuration;\r\n      let queryParams:any = server.itemQueryParams ?? {};\r\n      if (queryParams instanceof Object) {\r\n        queryParams = objectToURLSearchParams(queryParams);\r\n        queryParams = queryParams.toString();\r\n      }\r\n      const url = `${server.itemUrl ?? server.url}/${itemId}?${queryParams ? queryParams : ''}`;\r\n      const requestInit: RequestInitFetch = { signal: this.abortController.signal };\r\n      let item: any = await this.fetch.get(url, requestInit);\r\n      const { parseItemBeforePatchFormFn } = this.configuration;\r\n      item = await parseItemBeforePatchFormFn?.(item) ?? item;\r\n      this.configuration.formGroup.patchValue(item);\r\n      this.configuration.dataItem.set(item);\r\n      this.configuration.hiddeFields = false;\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "cssClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 176
                },
                {
                    "name": "defaultValueFrom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | string | number | null",
                    "optional": true,
                    "description": "",
                    "line": 172
                },
                {
                    "name": "defaultValueTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | string | number | null",
                    "optional": true,
                    "description": "",
                    "line": 173
                },
                {
                    "name": "formControlNameFrom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 168
                },
                {
                    "name": "formControlNameTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 169
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 175
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 174
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 171
                },
                {
                    "name": "textLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 170
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Document",
            "id": "interface-Document-44883ad3dade1cc27137d019c3938cfb5e66a69778442005d9d002bcb96b3ecf54c330a249add3ca741d59f27b50aa6e3fded73bba927ba0c12831bb7382179e",
            "file": "src/app/shared/interfaces/document.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel } from \"./baseModel\";\r\nimport { Client } from \"./client\";\r\nimport { DocumentItem } from \"./documentItem\";\r\n\r\nexport interface Document extends BaseModel {\r\n    additional_information: null;\r\n    applied: number;\r\n    caja_id: null;\r\n    cdr: any;\r\n    client_business_unit_id: number;\r\n    client_id: number;\r\n    correlative: number;\r\n    credit_days: any;\r\n    currency_type_id: string;\r\n    detraction_account: string;\r\n    detraction_pay_constancy: string;\r\n    detraction_percent: string;\r\n    detraction_type_id: string;\r\n    discounts: string;\r\n    document_type_id: string;\r\n    establishment_id: number;\r\n    establishment: null;\r\n    exchange_rate_sale: string;\r\n    expiration_date: string;\r\n    external_id: string;\r\n    fees_number: number;\r\n    filename: null;\r\n    group_id: string;\r\n    has_cdr: number;\r\n    has_pdf: number;\r\n    has_xml: number;\r\n    hash: null;\r\n    igv: string;\r\n    is_anulate_simple: number;\r\n    is_detraction: number;\r\n    is_fees: number;\r\n    is_perception: number;\r\n    is_retention: number;\r\n    issue_date: string | null;\r\n    legends: null;\r\n    low_reason: string;\r\n    operation_type_id: string;\r\n    pay_constancy_detraction: string;\r\n    payment_method_type_id: string;\r\n    pdf: any;\r\n    perception_percent: string;\r\n    purchase_order: string;\r\n    qr: null;\r\n    registration_date: string;\r\n    restore_user_id: null;\r\n    retention_percent: string;\r\n    serie: string;\r\n    soap_type_id: string;\r\n    state_type_id: string;\r\n    status_paid: number;\r\n    sunat_information: null;\r\n    total_aplicado_nc: number;\r\n    total_applied_nc: number;\r\n    total_base_isc: number;\r\n    total_detraction: number;\r\n    total_discount: number;\r\n    total_exonerated: number;\r\n    total_free: number;\r\n    total_isc: number;\r\n    total_paid: number;\r\n    total_pending: number;\r\n    total_perception: number;\r\n    total_retention: number;\r\n    total_taxes: number;\r\n    total_unaffected: number;\r\n    total_value: number;\r\n    total: number;\r\n    ubl_version: string;\r\n    warehouse_id: number;    \r\n    xml: any;\r\n\r\n    client?: Client;\r\n    document_items: DocumentItem[];\r\n}",
            "properties": [
                {
                    "name": "additional_information",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "applied",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "caja_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "cdr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "client",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Client",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "client_business_unit_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "client_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "correlative",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "credit_days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "currency_type_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "detraction_account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "detraction_pay_constancy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "detraction_percent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "detraction_type_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "discounts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "document_items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DocumentItem[]",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "document_type_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "establishment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "establishment_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "exchange_rate_sale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "expiration_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "external_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "fees_number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "filename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "group_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "has_cdr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "has_pdf",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "has_xml",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "hash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "igv",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "is_anulate_simple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "is_detraction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "is_fees",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "is_perception",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "is_retention",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "issue_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "legends",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "low_reason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "operation_type_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "pay_constancy_detraction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "payment_method_type_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "pdf",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "perception_percent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "purchase_order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "qr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "registration_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "restore_user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "retention_percent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "serie",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "soap_type_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "state_type_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "status_paid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "sunat_information",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "total_aplicado_nc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "total_applied_nc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "total_base_isc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "total_detraction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "total_discount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "total_exonerated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "total_free",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "total_isc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "total_paid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "total_pending",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "total_perception",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "total_retention",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "total_taxes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "total_unaffected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "total_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "ubl_version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "warehouse_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "xml",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 75
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "DocumentItem",
            "id": "interface-DocumentItem-beb35d06c667c3809a9e2e051263bd7aeb93b195f3c5f589626fbbe629fbbca1c7744010ab099982797c697a390c9a837fc7446c2aa62f86b3f911ca0705191f",
            "file": "src/app/shared/interfaces/documentItem.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel } from \"./baseModel\";\r\n\r\nexport interface DocumentItem extends BaseModel {\r\n    affectation_igv_type_id: null;\r\n    attributes: null;\r\n    description: string;\r\n    discounts: null;\r\n    document_id: number;\r\n    item: null;\r\n    item_id: null;\r\n    percentage_igv: string;\r\n    precio_compra: string;\r\n    quantity: number;\r\n    total: string;\r\n    total_discount: string;\r\n    total_taxes: string;\r\n    total_value: string;\r\n    unit_price: string;\r\n    unit_type_id: string;\r\n    update_user_id: null;\r\n    updated_at: null;\r\n}",
            "properties": [
                {
                    "name": "affectation_igv_type_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "discounts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "document_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "item_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "percentage_igv",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "precio_compra",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "total_discount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "total_taxes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "total_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "unit_price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "unit_type_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "update_user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "updated_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "DocumentType",
            "id": "interface-DocumentType-67f883798b1d2e4a986a3b0bd8a353cf26ef6915e45125bec56906b6bd32a0df68a4b5cf38150a1d7389519b1bfd512229a1b3e83db8148b55cb8ab620e9dbcc",
            "file": "src/app/shared/interfaces/documentType.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DocumentType {\r\n  id: number;\r\n  name: DocumentTypeName;\r\n  description:string;\r\n  active: boolean;\r\n}\r\n\r\nexport enum DocumentTypeName {\r\n  Ruc = 'RUC',\r\n  Dni = 'DNI',\r\n  CE = 'CARNE DE EXTRANJERÍA',\r\n  Otro = 'OTRO',\r\n}\r\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DocumentTypeName",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DrawerLink",
            "id": "interface-DrawerLink-7b7d7406e4ca54a91a69a44a6709b5e6b8533eb224cf7b866f08f738251a1d944b0134c9537cf7b101ae50ae91846bd7cfc869237594e5c292b99a91e3d33b6b",
            "file": "src/app/sidenav/sidenav/sidenav.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ElementRef, HostListener, Renderer2, Signal, ViewChild, ViewEncapsulation, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { AuthService } from '@service/auth.service';\r\nimport { User, UserRoleEnum } from '@interface/user';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { FirstLetterNamePipe } from '@pipe/first-letter-name.pipe';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { ProfileMenuComponent } from '../profile-menu/profile-menu.component';\r\nimport { AppsMenuComponent } from '../apps-menu/apps-menu.component';\r\nimport { SettingsMenuComponent } from '../settings-menu/settings-menu.component';\r\nimport { NotificationsMenuComponent } from '../notifications-menu/notifications-menu.component';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { DatabaseStorageService, NameModuleDatabase } from '@service/database-storage.service';\r\n\r\ninterface GroupDrawerLink {\r\n    label?: string;\r\n    links: DrawerLink[];\r\n    roles?: UserRoleEnum[];\r\n}\r\n\r\ninterface DrawerLink {\r\n    label: string;\r\n    icon: string;\r\n    route: string;\r\n    exact?: boolean;\r\n    queryParams?: { [key: string]: string | number | boolean };\r\n    roles?: UserRoleEnum[];\r\n    group_open?: boolean;\r\n}\r\n\r\nexport interface EventGlobalSearch {\r\n    type: 'enter' | 'change';\r\n    value: string;\r\n}\r\n\r\nexport const NAME_EVENT_GLOBAL_SEARCH = 'global_search';\r\n\r\nexport declare type LateralPanelType = 'maximum' | 'minimum';\r\n\r\n@Component({\r\n    selector: 'app-sidenav',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n\r\n        RouterOutlet,\r\n        RouterLink,\r\n        RouterLinkActive,\r\n        ReactiveFormsModule,\r\n\r\n        MatMenuModule,\r\n        MatSelectModule,\r\n        MatTooltipModule,\r\n        MatAutocompleteModule,\r\n\r\n        PathFilesServerPipe,\r\n        FirstLetterNamePipe,\r\n\r\n        ProfileMenuComponent,\r\n        AppsMenuComponent,\r\n        SettingsMenuComponent,\r\n        NotificationsMenuComponent,\r\n    ],\r\n    templateUrl: './sidenav.component.html',\r\n    styleUrls: ['./sidenav.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class SidenavComponent {\r\n    private authService = inject(AuthService);\r\n    private renderer2 = inject(Renderer2);\r\n    private eventService = inject(EventsService);\r\n    public location = inject(Location);\r\n    public databaseStorageService = inject(DatabaseStorageService);\r\n\r\n    public user: Signal<User | null> = this.authService.user;\r\n    public sidenavDrawerMode: WritableSignal<'over' | 'push' | 'side'> = signal('side');\r\n    public showDrawer: WritableSignal<boolean> = signal(false);\r\n    public groupDrawerLinks: WritableSignal<GroupDrawerLink[]> = signal([]);\r\n\r\n    public lateralPanelType: WritableSignal<LateralPanelType> = signal('minimum');\r\n    public showLateralPanel: WritableSignal<boolean> = signal(false);\r\n\r\n    @ViewChild('inputSearch') inputSearch!: ElementRef<HTMLInputElement>;\r\n    public searchCtrl: FormControl = new FormControl('');\r\n    public optionsSearchCtrl: FormControl = new FormControl('');\r\n    public speakingMicrophone: WritableSignal<boolean> = signal(false);\r\n\r\n    @HostListener('window:keydown.esc', ['$event'])\r\n    keyEvent(event: KeyboardEvent) {\r\n        console.log();\r\n\r\n        if ((event.target as HTMLElement).nodeName.toUpperCase() !== 'INPUT' && this.showLateralPanel()) {\r\n            this.location.back();\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getValidatedLinks(DRAWER_LINKS, this.user()!.role);\r\n        this.watchSearchCtrl();\r\n        this.loadConfigurations();\r\n    }\r\n\r\n    private async getValidatedLinks(links: GroupDrawerLink[], role: UserRoleEnum): Promise<void> {\r\n        const linksFiltered: GroupDrawerLink[] = [];\r\n        for await (const link of links) {\r\n            if (link.roles && !link.roles.includes(role)) continue;\r\n            if (link.links.length) link.links = await this.filteredLinks(link.links, role);\r\n            linksFiltered.push(link);\r\n        }\r\n        this.groupDrawerLinks.set(linksFiltered);\r\n    }\r\n\r\n    public async filteredLinks(links: DrawerLink[], role: UserRoleEnum): Promise<DrawerLink[]> {\r\n        const parseLinks = [];\r\n        for await (const link of links) {\r\n            if (link.roles && !link.roles.includes(role)) continue;\r\n            parseLinks.push(link);\r\n        }\r\n        return parseLinks;\r\n    }\r\n\r\n    public setShowLateralPanel(status: boolean, data: any = null) {\r\n        this.showLateralPanel.set(status);\r\n        if (status) {\r\n            if ((data.lateralPanelType ?? null) == 'maximum') {\r\n                this.lateralPanelType.set('maximum');\r\n            } else {\r\n                this.lateralPanelType.set('minimum');\r\n            }\r\n        }\r\n    }\r\n\r\n    private getAccessMicrophone(): Promise<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            navigator.mediaDevices.getUserMedia({ audio: true })\r\n                .then(() => resolve(true))\r\n                .catch(() => resolve(false));\r\n        });\r\n    }\r\n\r\n    public async requestAccessMicrophone(): Promise<void> {\r\n        if (this.speakingMicrophone()) return;\r\n        const permission = await this.getAccessMicrophone();\r\n\r\n        if (permission) {\r\n\r\n            if (!('webkitSpeechRecognition' in window)) return;\r\n\r\n            const recognition = new ((window as any).SpeechRecognition || (window as any).webkitSpeechRecognition)();\r\n            recognition.lang = 'es-ES';\r\n\r\n            this.speakingMicrophone.set(true);\r\n\r\n            recognition.onresult = (event: any) => {\r\n                const transcript = event.results[0][0].transcript;\r\n                this.searchCtrl.setValue(transcript || this.searchCtrl.value);\r\n                this.speakingMicrophone.set(false);\r\n                this.renderer2.selectRootElement(this.inputSearch.nativeElement).focus();\r\n            };\r\n\r\n            recognition.onend = () => {\r\n                this.speakingMicrophone.set(false);\r\n                this.renderer2.selectRootElement(this.inputSearch.nativeElement).focus();\r\n            }\r\n\r\n            recognition.start();\r\n        } else {\r\n            this.speakingMicrophone.set(false);\r\n        }\r\n    }\r\n\r\n    private watchSearchCtrl(): void {\r\n        this.searchCtrl.valueChanges.subscribe((value) => {\r\n            this.eventService.emitEvent<EventGlobalSearch>(NAME_EVENT_GLOBAL_SEARCH, { type: 'change', value });\r\n        });\r\n    }\r\n\r\n    public enterSearch(): void {\r\n        this.eventService.emitEvent<EventGlobalSearch>(NAME_EVENT_GLOBAL_SEARCH, { type: 'enter', value: this.searchCtrl.value });\r\n    }\r\n\r\n\r\n    private async loadConfigurations() {\r\n        await Promise.allSettled([\r\n            this.databaseStorageService.getData(NameModuleDatabase.Users),\r\n            this.databaseStorageService.getData(NameModuleDatabase.Banks),\r\n            // this.databaseStorageService.getData(NameModuleDatabase.Taxes),\r\n            // this.databaseStorageService.getData(NameModuleDatabase.DocumentTypes),\r\n            this.databaseStorageService.getData(NameModuleDatabase.Plans),\r\n            this.databaseStorageService.getData(NameModuleDatabase.VehicleTypes),\r\n        ])\r\n    }\r\n\r\n}\r\n\r\n\r\nconst DRAWER_LINKS: GroupDrawerLink[] = [\r\n    {\r\n        label: 'Organización',\r\n        links: [\r\n            {\r\n                label: 'Clientes',\r\n                icon: 'supervised_user_circle',\r\n                route: '/organization/client',\r\n            },\r\n            {\r\n                label: 'Usuarios',\r\n                icon: 'person',\r\n                route: '/organization/user',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Administración',\r\n        links: [\r\n            {\r\n                label: 'Cuentas',\r\n                icon: 'account_balance_wallet',\r\n                route: '/administration/account',\r\n            },\r\n            {\r\n                label: 'Cajas',\r\n                icon: 'service_toolbox',\r\n                route: '/administration/box',\r\n            },\r\n            {\r\n                label: 'Movimientos de caja',\r\n                icon: 'timeline',\r\n                route: '/administration/box-movement',\r\n            },\r\n            {\r\n                label: 'Facturación',\r\n                icon: 'draft',\r\n                route: '/administration/document',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Tracking',\r\n        links: [\r\n            {\r\n                label: 'Contratos',\r\n                icon: 'account_balance_wallet',\r\n                route: '/tracking/contract',\r\n            },\r\n            {\r\n                label: 'Vehículos',\r\n                icon: 'electric_rickshaw',\r\n                route: '/tracking/vehicle',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Configuration',\r\n        links: [\r\n            {\r\n                label: 'Bancos',\r\n                icon: 'account_balance',\r\n                route: '/configuration/bank',\r\n            },\r\n            {\r\n                label: 'Planes',\r\n                icon: 'planner_banner_ad_pt',\r\n                route: '/configuration/plan',\r\n            },\r\n            {\r\n                label: 'Tipo de vehículos',\r\n                icon: 'airport_shuttle',\r\n                route: '/configuration/vehicle-type',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Opciones de la APP',\r\n        links: [\r\n            {\r\n                label: 'Settings',\r\n                route: '/settings',\r\n                icon: 'settings',\r\n            },\r\n        ]\r\n    },\r\n];\r\n\r\n\r\n// this.breakpointObserver\r\n//       .observe([\r\n//         '(min-width: 640px) and (max-width: 1024px)',\r\n//         '(max-width: 640px)',\r\n//       ])\r\n//       .subscribe(({ breakpoints }) => {\r\n//         if (breakpoints['(min-width: 640px) and (max-width: 1024px)']) {\r\n//           this.mode = 'push';\r\n//           this.backdrop = true;\r\n//         } else if (breakpoints['(max-width: 640px)']) {\r\n//           this.mode = 'over';\r\n//           this.backdrop = true;\r\n//         } else {\r\n//           this.mode = 'side';\r\n//           this.backdrop = false;\r\n//         }\r\n//       });\r\n\r\n\r\n\r\n// links: Link[] = [\r\n//   {\r\n//       name: 'Inicio',\r\n//       icon: 'home',\r\n//       url: '/',\r\n//       exact: true,\r\n//   },\r\n//   {\r\n//       name: 'Stakeholders',\r\n//       icon: 'handshake',\r\n//       url: '/organization',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Leads',\r\n//               icon: 'supervised_user_circle',\r\n//               url: '/leads',\r\n//           },\r\n//           {\r\n//               name: 'Clientes',\r\n//               icon: 'groups',\r\n//               url: '/client',\r\n//           },\r\n//           {\r\n//               name: 'Proveedores',\r\n//               icon: 'diversity_3',\r\n//               url: '/provider',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Colaboradores',\r\n//       icon: 'lan',\r\n//       url: '/organization',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Usuarios',\r\n//               icon: 'person_add',\r\n//               url: '/user',\r\n//           },\r\n//           {\r\n//               name: 'Recursos humanos',\r\n//               icon: 'admin_panel_settings',\r\n//               url: '/human-resource',\r\n//           },\r\n//           // {\r\n//           //     name: 'Vendedores',\r\n//           //     icon: 'communication',\r\n//           //     url: '/seller',\r\n//           // },\r\n//           // {\r\n//           //     name: 'Jefes de proyectos',\r\n//           //     icon: 'supervisor_account',\r\n//           //     url: '/project-manager',\r\n//           // },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Cotizaciones',\r\n//       icon: 'monetization_on',\r\n//       url: '/quotation',\r\n//       childs: [\r\n//           {\r\n//               name: 'Cotizaciones',\r\n//               icon: 'monetization_on',\r\n//               url: '/quotation/recents'\r\n//           },\r\n//           {\r\n//               name: 'Costos unitarios',\r\n//               icon: 'call_split',\r\n//               url: '/quotation/unit-cost',\r\n//           },\r\n//           // {\r\n//           //     name: 'Materiales',\r\n//           //     icon: 'construction',\r\n//           //     url: '/material',\r\n//           // },\r\n//           {\r\n//               name: 'Mano de obra',\r\n//               icon: 'handshake',\r\n//               url: '/quotation/workforce',\r\n//           },\r\n//           {\r\n//               name: 'Equipos y herramientas',\r\n//               icon: 'inbox_customize',\r\n//               url: '/quotation/equipment-tool',\r\n//           },\r\n//           {\r\n//               name: 'Subcontratos',\r\n//               icon: 'add_business',\r\n//               url: '/quotation/subcontract',\r\n//           },\r\n//           {\r\n//               name: 'Categorias de costos',\r\n//               icon: 'gesture',\r\n//               url: '/quotation/unit-cost-category',\r\n//           }\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Productos',\r\n//       icon: 'widgets',\r\n//       url: '/product',\r\n//       childs: [\r\n//           {\r\n//               name: 'Lista de productos',\r\n//               icon: 'widgets',\r\n//               url: '/product',\r\n//           },\r\n//           {\r\n//               name: 'Categorias',\r\n//               icon: 'category',\r\n//               url: '/product/category',\r\n//           },\r\n//           {\r\n//               name: 'Marcas',\r\n//               icon: 'label_important',\r\n//               url: '/product/brand',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Configuraciones',\r\n//       icon: 'settings',\r\n//       url: '/configuration',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Tipos de documento',\r\n//               url: '/configuration/document-type',\r\n//               icon: 'dock',\r\n//           },\r\n//           {\r\n//               name: 'Áreas de la empresa',\r\n//               url: '/configuration/company-area',\r\n//               icon: 'apartment',\r\n//           },\r\n//           {\r\n//               name: 'Sector de stakeholders',\r\n//               url: '/configuration/business-sector',\r\n//               icon: 'corporate_fare',\r\n//           },\r\n//           {\r\n//               name: 'Bancos',\r\n//               url: '/configuration/bank',\r\n//               icon: 'account_balance',\r\n//           },\r\n//           {\r\n//               name: 'Cargos',\r\n//               url: '/configuration/position',\r\n//               icon: 'whatshot',\r\n//           },\r\n//           {\r\n//               name: 'Unidad de medida',\r\n//               url: '/configuration/measurement-unit',\r\n//               icon: 'stacked_bar_chart',\r\n//           },\r\n//           {\r\n//               name: 'Impuestos',\r\n//               url: '/configuration/taxe',\r\n//               icon: 'monitoring',\r\n//           },\r\n//           {\r\n//               name: 'Cuentas bancarias',\r\n//               url: '/configuration/account',\r\n//               icon: 'payments',\r\n//           },\r\n//           {\r\n//               name: 'Direcciones',\r\n//               url: '/configuration/address',\r\n//               icon: 'dns',\r\n//           },\r\n//           {\r\n//               name: 'Tipo de trabajador',\r\n//               url: '/configuration/worker-type',\r\n//               icon: 'engineering',\r\n//           },\r\n//           {\r\n//               name: 'Régimen laboral',\r\n//               url: '/configuration/laboral-regimen',\r\n//               icon: 'azm',\r\n//           },\r\n//           {\r\n//               name: 'Tipo de contrato',\r\n//               url: '/configuration/contract-type',\r\n//               icon: 'badge',\r\n//           },\r\n//           {\r\n//               name: 'Régimen de salud',\r\n//               url: '/configuration/health-regimen',\r\n//               icon: 'security',\r\n//           },\r\n//           {\r\n//               name: 'Régimen pensionario',\r\n//               url: '/configuration/pension-scheme',\r\n//               icon: 'receipt',\r\n//           },\r\n//           {\r\n//               name: 'Niveles de educación',\r\n//               url: '/configuration/education-level',\r\n//               icon: 'moving_ministry',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Configuración de calendario',\r\n//       icon: 'edit_calendar',\r\n//       url: '/calendar-configuration',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Calendarios',\r\n//               url: '/calendar/list',\r\n//               icon: 'calendar_month',\r\n//           },\r\n//           {\r\n//               name: 'Días feriados',\r\n//               url: '/holiday',\r\n//               icon: 'today',\r\n//           },\r\n//           {\r\n//               name: 'Configuraciones',\r\n//               icon: 'calendar_apps_script',\r\n//               url: '/calendar-configuration/list',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Control de cajas',\r\n//       icon: 'point_of_sale',\r\n//       url: '/box',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Caja',\r\n//               url: '/box/list',\r\n//               icon: 'flowsheet',\r\n//           },\r\n//           {\r\n//               name: 'Movimientos de caja',\r\n//               url: '/box/box-movement',\r\n//               icon: 'right_click',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Capital de trabajo',\r\n//       icon: 'store',\r\n//       url: '/working-capital-box',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Caja',\r\n//               url: '/working-capital-box/list',\r\n//               icon: 'flowsheet',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Caja de rendición',\r\n//       icon: 'point_of_sale',\r\n//       url: '/surrender-box',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Caja de rendición',\r\n//               url: '/surrender-box/list',\r\n//               icon: 'flowsheet',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Inversiones',\r\n//       icon: 'connect_without_contact',\r\n//       url: '/investor',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Inversionistas',\r\n//               url: '/investor/list',\r\n//               icon: 'recent_patient',\r\n//           },\r\n//           {\r\n//               name: 'Inversiones',\r\n//               url: '/investor/investment',\r\n//               icon: 'insights',\r\n//           },\r\n//           {\r\n//               name: 'Retiro de inversiones',\r\n//               url: '/investor/investment-withdrawal',\r\n//               icon: 'real_estate_agent',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Socios',\r\n//       icon: 'supervisor_account',\r\n//       url: '/partner',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Lista de socios',\r\n//               url: '/partner/list',\r\n//               icon: 'supervised_user_circle',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Requerimientos',\r\n//       icon: 'view_timeline',\r\n//       url: '/requirement',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Requerimientos',\r\n//               url: '/requirement/list',\r\n//               icon: 'last_page',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Registro de actas',\r\n//       icon: 'meeting_room',\r\n//       url: '/record-meeting',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Registro de actas',\r\n//               url: '/record-meeting/list',\r\n//               icon: 'auto_videocam',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Costos',\r\n//       icon: 'price_check',\r\n//       url: '/cost-center',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Centro de costos',\r\n//               url: '/cost-center/panel',\r\n//               icon: 'stacked_bar_chart',\r\n//           },\r\n//           {\r\n//               name: 'Tipo de centro de costos',\r\n//               url: '/cost-center/cost-center-type',\r\n//               icon: 'arrow_and_edge',\r\n//           },\r\n//           {\r\n//               name: 'Lista de gastos',\r\n//               url: '/cost-center/expense-list-general',\r\n//               icon: 'receipt_long',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Proyectos',\r\n//       icon: 'memory',\r\n//       url: '/project',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Lista de proyectos',\r\n//               url: '/project/list',\r\n//               icon: 'electric_bolt',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Compras',\r\n//       icon: 'sell',\r\n//       url: '/purchase-order',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Orden de compra',\r\n//               url: '/purchase-order/list',\r\n//               icon: 'file_open',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Ajustes',\r\n//       icon: 'build',\r\n//       url: '/settings',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Perfil',\r\n//               url: '/settings/profile',\r\n//               icon: 'account_box',\r\n//           },\r\n//           {\r\n//               name: 'Aplicación',\r\n//               url: '/settings/application',\r\n//               icon: 'settings_applications',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Notificaciones',\r\n//       icon: 'notifications',\r\n//       url: '/settings/profile/notifications/list',\r\n//       open: true,\r\n//   },\r\n// ];\r\n",
            "properties": [
                {
                    "name": "exact",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "group_open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserRoleEnum[]",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "EventGlobalSearch",
            "id": "interface-EventGlobalSearch-7b7d7406e4ca54a91a69a44a6709b5e6b8533eb224cf7b866f08f738251a1d944b0134c9537cf7b101ae50ae91846bd7cfc869237594e5c292b99a91e3d33b6b",
            "file": "src/app/sidenav/sidenav/sidenav.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ElementRef, HostListener, Renderer2, Signal, ViewChild, ViewEncapsulation, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { AuthService } from '@service/auth.service';\r\nimport { User, UserRoleEnum } from '@interface/user';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { FirstLetterNamePipe } from '@pipe/first-letter-name.pipe';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { ProfileMenuComponent } from '../profile-menu/profile-menu.component';\r\nimport { AppsMenuComponent } from '../apps-menu/apps-menu.component';\r\nimport { SettingsMenuComponent } from '../settings-menu/settings-menu.component';\r\nimport { NotificationsMenuComponent } from '../notifications-menu/notifications-menu.component';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { DatabaseStorageService, NameModuleDatabase } from '@service/database-storage.service';\r\n\r\ninterface GroupDrawerLink {\r\n    label?: string;\r\n    links: DrawerLink[];\r\n    roles?: UserRoleEnum[];\r\n}\r\n\r\ninterface DrawerLink {\r\n    label: string;\r\n    icon: string;\r\n    route: string;\r\n    exact?: boolean;\r\n    queryParams?: { [key: string]: string | number | boolean };\r\n    roles?: UserRoleEnum[];\r\n    group_open?: boolean;\r\n}\r\n\r\nexport interface EventGlobalSearch {\r\n    type: 'enter' | 'change';\r\n    value: string;\r\n}\r\n\r\nexport const NAME_EVENT_GLOBAL_SEARCH = 'global_search';\r\n\r\nexport declare type LateralPanelType = 'maximum' | 'minimum';\r\n\r\n@Component({\r\n    selector: 'app-sidenav',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n\r\n        RouterOutlet,\r\n        RouterLink,\r\n        RouterLinkActive,\r\n        ReactiveFormsModule,\r\n\r\n        MatMenuModule,\r\n        MatSelectModule,\r\n        MatTooltipModule,\r\n        MatAutocompleteModule,\r\n\r\n        PathFilesServerPipe,\r\n        FirstLetterNamePipe,\r\n\r\n        ProfileMenuComponent,\r\n        AppsMenuComponent,\r\n        SettingsMenuComponent,\r\n        NotificationsMenuComponent,\r\n    ],\r\n    templateUrl: './sidenav.component.html',\r\n    styleUrls: ['./sidenav.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class SidenavComponent {\r\n    private authService = inject(AuthService);\r\n    private renderer2 = inject(Renderer2);\r\n    private eventService = inject(EventsService);\r\n    public location = inject(Location);\r\n    public databaseStorageService = inject(DatabaseStorageService);\r\n\r\n    public user: Signal<User | null> = this.authService.user;\r\n    public sidenavDrawerMode: WritableSignal<'over' | 'push' | 'side'> = signal('side');\r\n    public showDrawer: WritableSignal<boolean> = signal(false);\r\n    public groupDrawerLinks: WritableSignal<GroupDrawerLink[]> = signal([]);\r\n\r\n    public lateralPanelType: WritableSignal<LateralPanelType> = signal('minimum');\r\n    public showLateralPanel: WritableSignal<boolean> = signal(false);\r\n\r\n    @ViewChild('inputSearch') inputSearch!: ElementRef<HTMLInputElement>;\r\n    public searchCtrl: FormControl = new FormControl('');\r\n    public optionsSearchCtrl: FormControl = new FormControl('');\r\n    public speakingMicrophone: WritableSignal<boolean> = signal(false);\r\n\r\n    @HostListener('window:keydown.esc', ['$event'])\r\n    keyEvent(event: KeyboardEvent) {\r\n        console.log();\r\n\r\n        if ((event.target as HTMLElement).nodeName.toUpperCase() !== 'INPUT' && this.showLateralPanel()) {\r\n            this.location.back();\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getValidatedLinks(DRAWER_LINKS, this.user()!.role);\r\n        this.watchSearchCtrl();\r\n        this.loadConfigurations();\r\n    }\r\n\r\n    private async getValidatedLinks(links: GroupDrawerLink[], role: UserRoleEnum): Promise<void> {\r\n        const linksFiltered: GroupDrawerLink[] = [];\r\n        for await (const link of links) {\r\n            if (link.roles && !link.roles.includes(role)) continue;\r\n            if (link.links.length) link.links = await this.filteredLinks(link.links, role);\r\n            linksFiltered.push(link);\r\n        }\r\n        this.groupDrawerLinks.set(linksFiltered);\r\n    }\r\n\r\n    public async filteredLinks(links: DrawerLink[], role: UserRoleEnum): Promise<DrawerLink[]> {\r\n        const parseLinks = [];\r\n        for await (const link of links) {\r\n            if (link.roles && !link.roles.includes(role)) continue;\r\n            parseLinks.push(link);\r\n        }\r\n        return parseLinks;\r\n    }\r\n\r\n    public setShowLateralPanel(status: boolean, data: any = null) {\r\n        this.showLateralPanel.set(status);\r\n        if (status) {\r\n            if ((data.lateralPanelType ?? null) == 'maximum') {\r\n                this.lateralPanelType.set('maximum');\r\n            } else {\r\n                this.lateralPanelType.set('minimum');\r\n            }\r\n        }\r\n    }\r\n\r\n    private getAccessMicrophone(): Promise<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            navigator.mediaDevices.getUserMedia({ audio: true })\r\n                .then(() => resolve(true))\r\n                .catch(() => resolve(false));\r\n        });\r\n    }\r\n\r\n    public async requestAccessMicrophone(): Promise<void> {\r\n        if (this.speakingMicrophone()) return;\r\n        const permission = await this.getAccessMicrophone();\r\n\r\n        if (permission) {\r\n\r\n            if (!('webkitSpeechRecognition' in window)) return;\r\n\r\n            const recognition = new ((window as any).SpeechRecognition || (window as any).webkitSpeechRecognition)();\r\n            recognition.lang = 'es-ES';\r\n\r\n            this.speakingMicrophone.set(true);\r\n\r\n            recognition.onresult = (event: any) => {\r\n                const transcript = event.results[0][0].transcript;\r\n                this.searchCtrl.setValue(transcript || this.searchCtrl.value);\r\n                this.speakingMicrophone.set(false);\r\n                this.renderer2.selectRootElement(this.inputSearch.nativeElement).focus();\r\n            };\r\n\r\n            recognition.onend = () => {\r\n                this.speakingMicrophone.set(false);\r\n                this.renderer2.selectRootElement(this.inputSearch.nativeElement).focus();\r\n            }\r\n\r\n            recognition.start();\r\n        } else {\r\n            this.speakingMicrophone.set(false);\r\n        }\r\n    }\r\n\r\n    private watchSearchCtrl(): void {\r\n        this.searchCtrl.valueChanges.subscribe((value) => {\r\n            this.eventService.emitEvent<EventGlobalSearch>(NAME_EVENT_GLOBAL_SEARCH, { type: 'change', value });\r\n        });\r\n    }\r\n\r\n    public enterSearch(): void {\r\n        this.eventService.emitEvent<EventGlobalSearch>(NAME_EVENT_GLOBAL_SEARCH, { type: 'enter', value: this.searchCtrl.value });\r\n    }\r\n\r\n\r\n    private async loadConfigurations() {\r\n        await Promise.allSettled([\r\n            this.databaseStorageService.getData(NameModuleDatabase.Users),\r\n            this.databaseStorageService.getData(NameModuleDatabase.Banks),\r\n            // this.databaseStorageService.getData(NameModuleDatabase.Taxes),\r\n            // this.databaseStorageService.getData(NameModuleDatabase.DocumentTypes),\r\n            this.databaseStorageService.getData(NameModuleDatabase.Plans),\r\n            this.databaseStorageService.getData(NameModuleDatabase.VehicleTypes),\r\n        ])\r\n    }\r\n\r\n}\r\n\r\n\r\nconst DRAWER_LINKS: GroupDrawerLink[] = [\r\n    {\r\n        label: 'Organización',\r\n        links: [\r\n            {\r\n                label: 'Clientes',\r\n                icon: 'supervised_user_circle',\r\n                route: '/organization/client',\r\n            },\r\n            {\r\n                label: 'Usuarios',\r\n                icon: 'person',\r\n                route: '/organization/user',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Administración',\r\n        links: [\r\n            {\r\n                label: 'Cuentas',\r\n                icon: 'account_balance_wallet',\r\n                route: '/administration/account',\r\n            },\r\n            {\r\n                label: 'Cajas',\r\n                icon: 'service_toolbox',\r\n                route: '/administration/box',\r\n            },\r\n            {\r\n                label: 'Movimientos de caja',\r\n                icon: 'timeline',\r\n                route: '/administration/box-movement',\r\n            },\r\n            {\r\n                label: 'Facturación',\r\n                icon: 'draft',\r\n                route: '/administration/document',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Tracking',\r\n        links: [\r\n            {\r\n                label: 'Contratos',\r\n                icon: 'account_balance_wallet',\r\n                route: '/tracking/contract',\r\n            },\r\n            {\r\n                label: 'Vehículos',\r\n                icon: 'electric_rickshaw',\r\n                route: '/tracking/vehicle',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Configuration',\r\n        links: [\r\n            {\r\n                label: 'Bancos',\r\n                icon: 'account_balance',\r\n                route: '/configuration/bank',\r\n            },\r\n            {\r\n                label: 'Planes',\r\n                icon: 'planner_banner_ad_pt',\r\n                route: '/configuration/plan',\r\n            },\r\n            {\r\n                label: 'Tipo de vehículos',\r\n                icon: 'airport_shuttle',\r\n                route: '/configuration/vehicle-type',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Opciones de la APP',\r\n        links: [\r\n            {\r\n                label: 'Settings',\r\n                route: '/settings',\r\n                icon: 'settings',\r\n            },\r\n        ]\r\n    },\r\n];\r\n\r\n\r\n// this.breakpointObserver\r\n//       .observe([\r\n//         '(min-width: 640px) and (max-width: 1024px)',\r\n//         '(max-width: 640px)',\r\n//       ])\r\n//       .subscribe(({ breakpoints }) => {\r\n//         if (breakpoints['(min-width: 640px) and (max-width: 1024px)']) {\r\n//           this.mode = 'push';\r\n//           this.backdrop = true;\r\n//         } else if (breakpoints['(max-width: 640px)']) {\r\n//           this.mode = 'over';\r\n//           this.backdrop = true;\r\n//         } else {\r\n//           this.mode = 'side';\r\n//           this.backdrop = false;\r\n//         }\r\n//       });\r\n\r\n\r\n\r\n// links: Link[] = [\r\n//   {\r\n//       name: 'Inicio',\r\n//       icon: 'home',\r\n//       url: '/',\r\n//       exact: true,\r\n//   },\r\n//   {\r\n//       name: 'Stakeholders',\r\n//       icon: 'handshake',\r\n//       url: '/organization',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Leads',\r\n//               icon: 'supervised_user_circle',\r\n//               url: '/leads',\r\n//           },\r\n//           {\r\n//               name: 'Clientes',\r\n//               icon: 'groups',\r\n//               url: '/client',\r\n//           },\r\n//           {\r\n//               name: 'Proveedores',\r\n//               icon: 'diversity_3',\r\n//               url: '/provider',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Colaboradores',\r\n//       icon: 'lan',\r\n//       url: '/organization',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Usuarios',\r\n//               icon: 'person_add',\r\n//               url: '/user',\r\n//           },\r\n//           {\r\n//               name: 'Recursos humanos',\r\n//               icon: 'admin_panel_settings',\r\n//               url: '/human-resource',\r\n//           },\r\n//           // {\r\n//           //     name: 'Vendedores',\r\n//           //     icon: 'communication',\r\n//           //     url: '/seller',\r\n//           // },\r\n//           // {\r\n//           //     name: 'Jefes de proyectos',\r\n//           //     icon: 'supervisor_account',\r\n//           //     url: '/project-manager',\r\n//           // },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Cotizaciones',\r\n//       icon: 'monetization_on',\r\n//       url: '/quotation',\r\n//       childs: [\r\n//           {\r\n//               name: 'Cotizaciones',\r\n//               icon: 'monetization_on',\r\n//               url: '/quotation/recents'\r\n//           },\r\n//           {\r\n//               name: 'Costos unitarios',\r\n//               icon: 'call_split',\r\n//               url: '/quotation/unit-cost',\r\n//           },\r\n//           // {\r\n//           //     name: 'Materiales',\r\n//           //     icon: 'construction',\r\n//           //     url: '/material',\r\n//           // },\r\n//           {\r\n//               name: 'Mano de obra',\r\n//               icon: 'handshake',\r\n//               url: '/quotation/workforce',\r\n//           },\r\n//           {\r\n//               name: 'Equipos y herramientas',\r\n//               icon: 'inbox_customize',\r\n//               url: '/quotation/equipment-tool',\r\n//           },\r\n//           {\r\n//               name: 'Subcontratos',\r\n//               icon: 'add_business',\r\n//               url: '/quotation/subcontract',\r\n//           },\r\n//           {\r\n//               name: 'Categorias de costos',\r\n//               icon: 'gesture',\r\n//               url: '/quotation/unit-cost-category',\r\n//           }\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Productos',\r\n//       icon: 'widgets',\r\n//       url: '/product',\r\n//       childs: [\r\n//           {\r\n//               name: 'Lista de productos',\r\n//               icon: 'widgets',\r\n//               url: '/product',\r\n//           },\r\n//           {\r\n//               name: 'Categorias',\r\n//               icon: 'category',\r\n//               url: '/product/category',\r\n//           },\r\n//           {\r\n//               name: 'Marcas',\r\n//               icon: 'label_important',\r\n//               url: '/product/brand',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Configuraciones',\r\n//       icon: 'settings',\r\n//       url: '/configuration',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Tipos de documento',\r\n//               url: '/configuration/document-type',\r\n//               icon: 'dock',\r\n//           },\r\n//           {\r\n//               name: 'Áreas de la empresa',\r\n//               url: '/configuration/company-area',\r\n//               icon: 'apartment',\r\n//           },\r\n//           {\r\n//               name: 'Sector de stakeholders',\r\n//               url: '/configuration/business-sector',\r\n//               icon: 'corporate_fare',\r\n//           },\r\n//           {\r\n//               name: 'Bancos',\r\n//               url: '/configuration/bank',\r\n//               icon: 'account_balance',\r\n//           },\r\n//           {\r\n//               name: 'Cargos',\r\n//               url: '/configuration/position',\r\n//               icon: 'whatshot',\r\n//           },\r\n//           {\r\n//               name: 'Unidad de medida',\r\n//               url: '/configuration/measurement-unit',\r\n//               icon: 'stacked_bar_chart',\r\n//           },\r\n//           {\r\n//               name: 'Impuestos',\r\n//               url: '/configuration/taxe',\r\n//               icon: 'monitoring',\r\n//           },\r\n//           {\r\n//               name: 'Cuentas bancarias',\r\n//               url: '/configuration/account',\r\n//               icon: 'payments',\r\n//           },\r\n//           {\r\n//               name: 'Direcciones',\r\n//               url: '/configuration/address',\r\n//               icon: 'dns',\r\n//           },\r\n//           {\r\n//               name: 'Tipo de trabajador',\r\n//               url: '/configuration/worker-type',\r\n//               icon: 'engineering',\r\n//           },\r\n//           {\r\n//               name: 'Régimen laboral',\r\n//               url: '/configuration/laboral-regimen',\r\n//               icon: 'azm',\r\n//           },\r\n//           {\r\n//               name: 'Tipo de contrato',\r\n//               url: '/configuration/contract-type',\r\n//               icon: 'badge',\r\n//           },\r\n//           {\r\n//               name: 'Régimen de salud',\r\n//               url: '/configuration/health-regimen',\r\n//               icon: 'security',\r\n//           },\r\n//           {\r\n//               name: 'Régimen pensionario',\r\n//               url: '/configuration/pension-scheme',\r\n//               icon: 'receipt',\r\n//           },\r\n//           {\r\n//               name: 'Niveles de educación',\r\n//               url: '/configuration/education-level',\r\n//               icon: 'moving_ministry',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Configuración de calendario',\r\n//       icon: 'edit_calendar',\r\n//       url: '/calendar-configuration',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Calendarios',\r\n//               url: '/calendar/list',\r\n//               icon: 'calendar_month',\r\n//           },\r\n//           {\r\n//               name: 'Días feriados',\r\n//               url: '/holiday',\r\n//               icon: 'today',\r\n//           },\r\n//           {\r\n//               name: 'Configuraciones',\r\n//               icon: 'calendar_apps_script',\r\n//               url: '/calendar-configuration/list',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Control de cajas',\r\n//       icon: 'point_of_sale',\r\n//       url: '/box',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Caja',\r\n//               url: '/box/list',\r\n//               icon: 'flowsheet',\r\n//           },\r\n//           {\r\n//               name: 'Movimientos de caja',\r\n//               url: '/box/box-movement',\r\n//               icon: 'right_click',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Capital de trabajo',\r\n//       icon: 'store',\r\n//       url: '/working-capital-box',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Caja',\r\n//               url: '/working-capital-box/list',\r\n//               icon: 'flowsheet',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Caja de rendición',\r\n//       icon: 'point_of_sale',\r\n//       url: '/surrender-box',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Caja de rendición',\r\n//               url: '/surrender-box/list',\r\n//               icon: 'flowsheet',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Inversiones',\r\n//       icon: 'connect_without_contact',\r\n//       url: '/investor',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Inversionistas',\r\n//               url: '/investor/list',\r\n//               icon: 'recent_patient',\r\n//           },\r\n//           {\r\n//               name: 'Inversiones',\r\n//               url: '/investor/investment',\r\n//               icon: 'insights',\r\n//           },\r\n//           {\r\n//               name: 'Retiro de inversiones',\r\n//               url: '/investor/investment-withdrawal',\r\n//               icon: 'real_estate_agent',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Socios',\r\n//       icon: 'supervisor_account',\r\n//       url: '/partner',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Lista de socios',\r\n//               url: '/partner/list',\r\n//               icon: 'supervised_user_circle',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Requerimientos',\r\n//       icon: 'view_timeline',\r\n//       url: '/requirement',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Requerimientos',\r\n//               url: '/requirement/list',\r\n//               icon: 'last_page',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Registro de actas',\r\n//       icon: 'meeting_room',\r\n//       url: '/record-meeting',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Registro de actas',\r\n//               url: '/record-meeting/list',\r\n//               icon: 'auto_videocam',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Costos',\r\n//       icon: 'price_check',\r\n//       url: '/cost-center',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Centro de costos',\r\n//               url: '/cost-center/panel',\r\n//               icon: 'stacked_bar_chart',\r\n//           },\r\n//           {\r\n//               name: 'Tipo de centro de costos',\r\n//               url: '/cost-center/cost-center-type',\r\n//               icon: 'arrow_and_edge',\r\n//           },\r\n//           {\r\n//               name: 'Lista de gastos',\r\n//               url: '/cost-center/expense-list-general',\r\n//               icon: 'receipt_long',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Proyectos',\r\n//       icon: 'memory',\r\n//       url: '/project',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Lista de proyectos',\r\n//               url: '/project/list',\r\n//               icon: 'electric_bolt',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Compras',\r\n//       icon: 'sell',\r\n//       url: '/purchase-order',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Orden de compra',\r\n//               url: '/purchase-order/list',\r\n//               icon: 'file_open',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Ajustes',\r\n//       icon: 'build',\r\n//       url: '/settings',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Perfil',\r\n//               url: '/settings/profile',\r\n//               icon: 'account_box',\r\n//           },\r\n//           {\r\n//               name: 'Aplicación',\r\n//               url: '/settings/application',\r\n//               icon: 'settings_applications',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Notificaciones',\r\n//       icon: 'notifications',\r\n//       url: '/settings/profile/notifications/list',\r\n//       open: true,\r\n//   },\r\n// ];\r\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"enter\" | \"change\"",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ExtDocument",
            "id": "interface-ExtDocument-29607d68b58f8b7480781a50e6226f4ef14f8fb31d6cdba0c57593702deb7d88b3679dc98a3614e8c70464b9a90a93012a79f660602108bbf9786560fc39e0e0",
            "file": "src/app/modules/administration/documents/pages/document-list-page/document-list-page.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, TemplateRef, ViewChild, inject, signal } from '@angular/core';\r\nimport { ItemListTemplateComponent, ListColumn, ListItemExtended, dateColumn, itemCreatedAtColumn, itemStatusColumn, numberColumn, viewItemActionButton } from '@component/item-list-template/item-list-template.component';\r\nimport { Document } from '@interface/document';\r\nimport { ItemListConfiguration, clickEventActionButton, textColumn } from '@component/item-list-template/item-list-template.component';\r\nimport { FetchService, RequestInitFetch } from '@service/fetch.service';\r\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { ConfirmDialogData, ConfirmDialogTemplateComponent } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { addDays, format, parseISO } from 'date-fns';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { StatusModel } from '@interface/baseModel';\r\n\r\ninterface ExtDocument extends Document, ListItemExtended { }\r\n\r\n@Component({\r\n  selector: 'app-document-list-page',\r\n  standalone: true,\r\n  imports: [\r\n    ItemListTemplateComponent,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatSlideToggleModule,\r\n  ],\r\n  templateUrl: './document-list-page.component.html',\r\n  styleUrl: './document-list-page.component.scss',\r\n})\r\nexport class DocumentListPageComponent {\r\n  @ViewChild('anulateFormTemplate', { static: true }) anulateFormTemplate!: TemplateRef<any>;\r\n  @ViewChild('emitFormTemplate', { static: true }) emitFormTemplate!: TemplateRef<any>;\r\n  private router = inject(Router);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private fetch = inject(FetchService);\r\n  private matDialog = inject(MatDialog);\r\n  public commentCtrl = new FormControl('', [Validators.required]);\r\n  public emitForm = new FormGroup({\r\n    expire_date: new FormControl('', [Validators.required]),\r\n    comment: new FormControl('', [Validators.required]),\r\n    credit: new FormControl(false, [Validators.required]),\r\n  });\r\n  public minDate = addDays(new Date(), 1);\r\n\r\n  public configuration: ItemListConfiguration<ExtDocument> = {\r\n    title: 'Documentos',\r\n    server: {\r\n      url: 'document',\r\n      queryParams: {\r\n        relations: this.router.url.includes('/organization/client/view') ? 'documentItems' : 'client,documentItems',\r\n        client_id: this.router.url.includes('/organization/client/view') ? this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id') : null,\r\n        contract_id: this.router.url.includes('/tracking/contract/view') ? this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id') : null,\r\n      },\r\n    },\r\n    rows: {\r\n      options: [\r\n        viewItemActionButton(),\r\n        clickEventActionButton({\r\n          icon: 'post_add',\r\n          text: 'Detalles',\r\n          fn: (item) => {\r\n            this.router.navigate([{ outlets: { 'route-lateral': `administration/document/detail/${item.id}` } }]);\r\n          },\r\n        }),\r\n        clickEventActionButton({\r\n          icon: 'send',\r\n          text: 'Emitir',\r\n          hidden: (item) => item.status !== StatusModel.Generada,\r\n          fn: async (item, index, { updateChangesItemFn }) => {\r\n            if (item.expiration_date) {\r\n              const expireDate = parseISO(item.expiration_date);\r\n              this.expireDateCtrl.setValue(this.minDate > expireDate ? this.minDate : expireDate);\r\n            };\r\n            const response = await this.emitDocument(item);\r\n            if (response) updateChangesItemFn(index, { ...item, ...response });\r\n          },\r\n        }),\r\n        clickEventActionButton({\r\n          text: 'Anular',\r\n          icon: 'scan_delete',\r\n          hidden: (item) => {\r\n            return item.status !== StatusModel.Aceptada;\r\n          },\r\n          fn: async (item, index, { updateChangesItemFn }) => {\r\n            const response = await this.cancelDocument(item);\r\n            if (response) updateChangesItemFn(index, { ...item, ...response });\r\n          },\r\n        }),\r\n        clickEventActionButton({\r\n          text: 'Nota de crédito',\r\n          icon: 'scan_delete',\r\n          hidden: (item) => {\r\n            return item.status !== StatusModel.Aceptada;\r\n          },\r\n          fn: async (item, index, { updateChangesItemFn }) => {\r\n            const response = await this.anulateWithNote(item, 'crédito');\r\n            if (response) updateChangesItemFn(index, { ...item, ...response });\r\n          },\r\n        }),\r\n        clickEventActionButton({\r\n          text: 'Nota de débito',\r\n          icon: 'scan_delete',\r\n          hidden: (item) => {\r\n            return item.status !== StatusModel.Aceptada;\r\n          },\r\n          fn: async (item, index, { updateChangesItemFn }) => {\r\n            const response = await this.anulateWithNote(item, 'crédito');\r\n            if (response) updateChangesItemFn(index, { ...item, ...response });\r\n          }\r\n        }),\r\n        clickEventActionButton({\r\n          text: 'Descargar PDF',\r\n          icon: 'cloud_download',\r\n          hidden: (item) => {\r\n            return item.status !== StatusModel.Aceptada;\r\n          },\r\n          fn: (item) => console.log('Descargar PDF'),\r\n        }),\r\n        clickEventActionButton({\r\n          text: 'Descargar XML',\r\n          icon: 'cloud_download',\r\n          hidden: (item) => {\r\n            return item.status !== StatusModel.Aceptada;\r\n          },\r\n          fn: (item) => this.downloadFile(item, 'xml'),\r\n        }),\r\n        clickEventActionButton({\r\n          text: 'Descargar CDR',\r\n          icon: 'cloud_download',\r\n          hidden: (item) => {\r\n            return item.status !== StatusModel.Aceptada;\r\n          },\r\n          fn: (item) => this.downloadFile(item, 'cdr'),\r\n        }),\r\n      ]\r\n    },\r\n    columns: signal(this.generateColumns()),\r\n  }\r\n\r\n  private generateColumns(): ListColumn<Document>[] {\r\n    let columns = [\r\n      textColumn<Document>({\r\n        title: 'Código/Descripción',\r\n        displayValueFn: (item) => item.serie ? `${item.serie}-${item.correlative}` : '--',\r\n        displayAdditionalValueFn: (item) => item.document_items?.map((item) => item.description).join(', '),\r\n      }),\r\n      textColumn<Document>({\r\n        title: 'Cliente',\r\n        displayValueFn: (item) => item.client?.name,\r\n        gridColumn: 'fit-content(200px)',\r\n      }),\r\n      textColumn<Document>({\r\n        title: 'Emitido',\r\n        displayValueFn: (item) => item.issue_date ? format(parseISO(item.issue_date), 'dd/MM/yyyy') : '--',\r\n      }),\r\n      numberColumn<Document>({\r\n        title: 'Sub total',\r\n        displayValueFn: (item) => item.total_value,\r\n      }),\r\n      numberColumn<Document>({\r\n        title: 'Igv',\r\n        displayValueFn: (item) => item.total_taxes,\r\n      }),\r\n      numberColumn<Document>({\r\n        title: 'Total',\r\n        displayValueFn: (item) => item.total,\r\n      }),\r\n      itemCreatedAtColumn(),\r\n      itemStatusColumn(),\r\n    ];\r\n    if(this.router.url.includes('/organization/client/view')) columns.splice(1, 1);\r\n    return columns;\r\n  }\r\n\r\n  get expireDateCtrl(): FormControl { return this.emitForm.get('expire_date')! as FormControl; }\r\n  get creditCtrl(): FormControl { return this.emitForm.get('credit')! as FormControl; }\r\n\r\n  private confirmDialog(data: ConfirmDialogData): Promise<boolean> {\r\n    return new Promise((resolve) => {\r\n      const dialogRef = this.matDialog.open(ConfirmDialogTemplateComponent, { data });\r\n      dialogRef.afterClosed().subscribe((result) => resolve(result));\r\n    });\r\n  }\r\n\r\n  private async emitDocument(item: Document): Promise<Document | null> {\r\n    this.commentCtrl.reset('');\r\n    const dialogData: ConfirmDialogData = {\r\n      icon: 'info',\r\n      title: '¿Está seguro de emitir documento?',\r\n      description: '',\r\n      templateRef: this.emitFormTemplate,\r\n      confirmButton: { disabled: true },\r\n    };\r\n    const subscribe = this.emitForm.valueChanges.subscribe(() => dialogData.confirmButton!.disabled = this.emitForm.invalid);\r\n    const confirm = await this.confirmDialog(dialogData);\r\n    subscribe.unsubscribe();\r\n    if (!confirm) return null;\r\n    const url = `document/send-to-sunat/${item.id}`;\r\n    const body = this.emitForm.value;\r\n    const request: RequestInitFetch = {\r\n      confirmDialog: false,\r\n      toast: {\r\n        loading: 'Enviando a SUNAT...',\r\n        success: 'Documento enviado a SUNAT',\r\n        error: (error) => error.error ?? 'Error al enviar a SUNAT',\r\n      }\r\n    };\r\n    return await this.fetch.put<Document>(url, body, request);\r\n  }\r\n\r\n  private async cancelDocument(item: Document): Promise<Document | null> {\r\n    this.commentCtrl.reset('');\r\n    const dialogData: ConfirmDialogData = {\r\n      icon: 'error',\r\n      title: '¿Está seguro de anular documento?',\r\n      description: '',\r\n      templateRef: this.anulateFormTemplate,\r\n      confirmButton: { disabled: true },\r\n    };\r\n    const subscribe = this.commentCtrl.valueChanges.subscribe(() => dialogData.confirmButton!.disabled = this.commentCtrl.invalid);\r\n    const confirm = await this.confirmDialog(dialogData);\r\n    subscribe.unsubscribe();\r\n    if (!confirm) return null;\r\n    const url = 'cancel-document-send';\r\n    const body = {\r\n      low_reason: this.commentCtrl.value,\r\n      document_id: item.id,\r\n    };\r\n    const request: RequestInitFetch = {\r\n      confirmDialog: false,\r\n      toast: {\r\n        loading: 'Anulando documento...',\r\n        success: 'Documento anulado',\r\n        error: (error) => 'Error al anular documento',\r\n      }\r\n    };\r\n    return await this.fetch.post<Document>(url, body, request);\r\n  }\r\n\r\n  private async anulateWithNote(item: Document, type: 'débito' | 'crédito'): Promise<Document | null> {\r\n    this.commentCtrl.reset('');\r\n    const dialogData: ConfirmDialogData = {\r\n      icon: 'error',\r\n      title: `¿Está seguro de anular documento con nota de ${type}?`,\r\n      description: `Se generará una nota de ${type}`,\r\n      templateRef: this.anulateFormTemplate,\r\n      confirmButton: {\r\n        text: `Anular con nota de ${type}`,\r\n        disabled: true,\r\n      },\r\n    };\r\n    const subscribe = this.commentCtrl.valueChanges.subscribe(() => dialogData.confirmButton!.disabled = this.commentCtrl.invalid);\r\n    const confirm = await this.confirmDialog(dialogData);\r\n    subscribe.unsubscribe();\r\n    if (!confirm) return null;\r\n    const url = `${type == 'crédito' ? 'credit' : 'debit'}-note`;\r\n    const request: RequestInitFetch = {\r\n      confirmDialog: false,\r\n      toast: {\r\n        loading: 'Anulando documento...',\r\n        success: 'Documento anulado',\r\n        error: (error) => 'Error al anular documento',\r\n      }\r\n    };\r\n    const body = {\r\n      document_id: item.id,\r\n      low_reason: this.commentCtrl.value,\r\n    };\r\n    return await this.fetch.post<Document>(url, body, request);\r\n  }\r\n\r\n  private async downloadFile(item: Document, type: 'xml' | 'cdr'): Promise<void> {\r\n    const url = `document/${item.id}/download/${type}`;\r\n    const request: RequestInitFetch = {\r\n      confirmDialog: {\r\n        icon: 'cloud_download',\r\n        title: `¿Está seguro de descargar ${type.toUpperCase()}?`,\r\n        description: `Se descargará el ${type.toUpperCase()} del documento`,\r\n        confirmButton: { text: `Descargar ${type.toUpperCase()}` },\r\n\r\n      },\r\n      toast: {\r\n        loading: `Descargando ${type.toUpperCase()}...`,\r\n        success: `${type.toUpperCase()} descargado`,\r\n        error: () => `Error al descargar ${type.toUpperCase()}`,\r\n      }\r\n    };\r\n    const blob: Blob = await this.fetch.blob(url, request);\r\n    const URL = window.URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = URL;\r\n    a.download = `${type.toUpperCase()}-${item.serie}-${item.correlative}.${type == 'xml' ? 'xml' : 'zip'}`;\r\n    a.click();\r\n    window.URL.revokeObjectURL(URL);\r\n\r\n  }\r\n\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "Document",
                "ListItemExtended"
            ]
        },
        {
            "name": "FetchErrorResponse",
            "id": "interface-FetchErrorResponse-c8c31ba306edb43ac5fd50a1ef27d518338efadccedc7def42edd8a4e57a5af3f69f1db37655f0fd8d27715415f1605a61c05f5db61aa4348bb60b43361f65bd",
            "file": "src/app/shared/interfaces/fetch.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ConfirmDialogData } from \"@component/confirm-dialog-template/confirm-dialog-template.component\";\r\n\r\nexport const NAME_TOKEN = 'access_token';\r\n\r\nexport enum FetchErrorType {\r\n    HTTP = 'HttpErrorResponse',\r\n    ABORT = 'AbortError',\r\n    FAILED_FETCH = 'FailedFetch',\r\n    UNKNOWN = 'UnknownError',\r\n\r\n    CONFIRMATION_DIALOG = 'ConfirmationDialogAborted',\r\n    TYPE_ERROR = 'TypeError',\r\n}\r\n\r\nexport interface RequestInitFetch extends RequestInit {\r\n    // example: {'Authorization': 'Bearer xyz........'}\r\n    headers?: { [Key: string]: string };\r\n\r\n    // ignore auth token\r\n    ignoreAuthorization?: boolean;\r\n\r\n    // ignore interception errors for actions globally\r\n    ignoreInterceptErrors?: boolean;\r\n\r\n    confirmDialog?: ConfirmDialogData;\r\n\r\n}\r\n\r\nexport interface FetchErrorResponse {\r\n    name?: FetchErrorType;\r\n    message?: string;\r\n    error?: any;\r\n    ok?: boolean;\r\n    status?: number;\r\n    statusText?: string;\r\n    url: string;\r\n    headers?: Headers;\r\n    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\r\n}\r\n\r\nexport const defaultMessageDialogCreateItem = () => ({\r\n    title: '¿Está seguro de guardar el registro?',\r\n    description: 'Asegúrese de haber llenado todos los datos del formulario correctamente',\r\n    icon: 'save',\r\n});\r\n\r\nexport const defaultMessageDialogUpdateItem = () => ({\r\n    title: '¿Está seguro de actualizar el registro?',\r\n    description: 'Asegúrese de haber modificado los datos del formulario correctamente',\r\n    icon: 'autorenew',\r\n});\r\n\r\nexport const defaultMessageDialogDeleteItem = () => ({\r\n    title: '¿Está seguro de eliminar el registro?',\r\n    description: 'El ítem se eliminará por completo, está acción es única y no se puede revertir',\r\n    icon: 'delete_forever',\r\n});\r\n\r\nexport const HTTP_ERROR_CODES = [\r\n    {\r\n        status: 400,\r\n        title: 'Solicitud Incorrecta',\r\n        description: 'La solicitud que el servidor recibió no se puede entender o procesar.',\r\n    },\r\n    {\r\n        status: 401,\r\n        title: 'No Autorizado',\r\n        description: 'El recurso solicitado requiere autenticación y no se ha proporcionado credenciales válidas.',\r\n        icon: 'security',\r\n    },\r\n    {\r\n        status: 403,\r\n        title: 'Prohibido',\r\n        description: 'No tiene permiso para acceder al recurso solicitado.',\r\n        icon: 'security',\r\n    },\r\n    {\r\n        status: 404,\r\n        title: 'No Encontrado',\r\n        description: 'El servidor no puede encontrar el recurso solicitado.',\r\n        icon: 'dangerous',\r\n    },\r\n    {\r\n        status: 405,\r\n        title: 'Método No Permitido',\r\n        description: 'El método utilizado en la solicitud no está permitido para el recurso solicitado.'\r\n    },\r\n    {\r\n        status: 408,\r\n        title: 'Tiempo de Espera Agotado',\r\n        description: 'El servidor ha esperado demasiado tiempo para recibir la solicitud del cliente.',\r\n\r\n    },\r\n    {\r\n        status: 422,\r\n        title: 'Entidad No Procesable',\r\n        description: 'La solicitud fue bien formada, pero no se pudo seguir debido a errores semánticos.'\r\n    },\r\n    {\r\n        status: 500,\r\n        title: 'Error Interno del Servidor',\r\n        description: 'El servidor ha encontrado una situación inesperada que le impide completar la solicitud.'\r\n    },\r\n    {\r\n        status: 501,\r\n        title: 'No Implementado',\r\n        description: 'El servidor no admite la funcionalidad necesaria para completar la solicitud.'\r\n    },\r\n    {\r\n        status: 502,\r\n        title: 'Puerta de Enlace Incorrecta',\r\n        description: 'El servidor de la puerta de enlace ha recibido una respuesta no válida del servidor de origen.'\r\n    },\r\n    {\r\n        status: 503,\r\n        title: 'Servicio No Disponible',\r\n        description: 'El servidor no puede responder a la solicitud en este momento debido a una sobrecarga o mantenimiento.'\r\n    },\r\n];",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Headers",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "method",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"GET\" | \"POST\" | \"PUT\" | \"DELETE\" | \"PATCH\"",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FetchErrorType",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "ok",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "statusText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FileFormInput",
            "id": "interface-FileFormInput-c318b4a215c8ef742cae4789ee423f79c07102763a82acdca3a73e70fce6b013cf18d23c85dd12f649226b77bd037e42298d7e0f64fce4e298d57932521aba8a",
            "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { FetchService, RequestInitFetch, ToastForFetch } from '@service/fetch.service';\r\nimport { EventsService } from '@service/events.service';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { SpinnerDefaultComponent } from '../spinner-default/spinner-default.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { InputFileConfiguration, SelectFileComponent } from '../select-file/select-file.component';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { ErrorTemplateComponent } from '../error-template/error-template.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { ExecuteFunctionPipe } from '@pipe/execute-function.pipe';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { InputAutocompleteConfiguration, InputAutocompleteLocalConfiguration, InputAutocompleteServerConfiguration, InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectConfiguration, InputSelectLocalConfiguration, InputSelectServerConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { ConfirmDialogData } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\n\r\nexport interface ItemFormConfiguration<Item = any, Data = any> {\r\n  title?: string;\r\n  titleModule: string;\r\n\r\n  subtitle?: ((item: Item) => string | number | null | undefined) | false;\r\n\r\n  formGroup: FormGroup;\r\n  type: 'create' | 'update';\r\n\r\n  loading?: boolean;\r\n  hiddeFields?: boolean;\r\n  fields?: FormInput[];\r\n\r\n  dataItem?: WritableSignal<Item | null>,\r\n\r\n  server: {\r\n      url: string;\r\n      queryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      updateUrl?: string;\r\n      updateQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      createUrl?: string;\r\n      createQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      itemUrl?: string;\r\n      itemQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      fetch?: {\r\n        confirmDialog?: ConfirmDialogData,\r\n        toast?: ToastForFetch,\r\n      }\r\n  }\r\n\r\n  parseDataItemBeforeSendFormFn?: (data: Data) => (Data | Promise<Data>);\r\n  afterSaveFormFn?: (data: Item) => void;\r\n\r\n  itemId?: string | number\r\n  parseItemBeforePatchFormFn?: (item: Item) => (Item | Promise<Item>);\r\n\r\n  ignoreShowError?: boolean;\r\n  interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n  httpError?: FetchErrorResponse;\r\n\r\n  disableAutoBackLocation?: boolean;\r\n\r\n  saveButton?: {\r\n      text: string;\r\n      icon?: string;\r\n      iconPosition?: 'left' | 'right';\r\n  };\r\n  \r\n  cancelButton?: {\r\n      iconPosition?: 'left' | 'right';\r\n      text: string;\r\n      icon?: string;\r\n  } | false;\r\n}\r\n\r\nexport declare type InputType = 'select' | 'select-local' | 'select-server' | 'date' | 'date-range' | 'text' | 'number' | 'textarea' | 'checkbox' | 'switch' | 'autocomplete' | 'autocomplete-local' | 'autocomplete-server';\r\n\r\nexport interface FormInput {\r\n\r\n  type: InputType | 'file';\r\n\r\n  text?: TextFormInput;\r\n\r\n  number?: NumberFormInput;\r\n\r\n  textarea?: TextareaFormInput;\r\n  \r\n  date?: DateFormInput;\r\n  \r\n  dateRange?: DateRangeFormInput;\r\n  \r\n  switch?: SwitchFormInput;\r\n  \r\n  checkbox?: CheckboxFormInput;\r\n\r\n  select?: SelectConfigurationExt;\r\n\r\n  selectLocal?: SelectLocalConfigurationExt;\r\n  \r\n  selectServer?: SelectServerConfigurationExt;\r\n\r\n  autocomplete?: AutocompleteConfigurationExt;\r\n\r\n  autocompleteServer?: AutocompleteServerConfigurationExt;\r\n\r\n  autocompleteLocal?: AutocompleteLocalConfigurationExt;\r\n\r\n  file?: FileFormInput;\r\n}\r\n\r\nexport interface TextFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface NumberFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface TextareaFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  rows?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SelectFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | boolean | null;\r\n  options: { text: string, value: any }[];\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateRangeFormInput<T = any> {\r\n  formControlNameFrom: string;\r\n  formControlNameTo: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValueFrom?: Date | string | number | null;\r\n  defaultValueTo?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SwitchFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface CheckboxFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectConfigurationExt<T = any> extends InputSelectConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectLocalConfigurationExt<T = any> extends InputSelectLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectServerConfigurationExt<T = any> extends InputSelectServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteConfigurationExt<T = any> extends InputAutocompleteConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteLocalConfigurationExt<T = any> extends InputAutocompleteLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteServerConfigurationExt<T = any> extends InputAutocompleteServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface FileFormInput<T = any> extends InputFileConfiguration {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: any;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport const textFormInput = (configuration: TextFormInput): FormInput => ({\r\n  type: 'text',\r\n  text: configuration\r\n});\r\n\r\nexport const numberFormInput = (configuration: NumberFormInput): FormInput => ({\r\n  type: 'number',\r\n  number: configuration\r\n});\r\n\r\nexport const textareaFormInput = (configuration: TextareaFormInput): FormInput => ({\r\n  type: 'textarea',\r\n  textarea: configuration\r\n});\r\n\r\nexport const selectFormInput = (configuration: SelectConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectLocalFormInput = (configuration: SelectLocalConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectServerFormInput = (configuration: SelectServerConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const dateFormInput = (configuration: DateFormInput): FormInput => ({\r\n  type: 'date',\r\n  date: configuration\r\n});\r\n\r\nexport const dateRangeFormInput = (configuration: DateRangeFormInput): FormInput => ({\r\n  type: 'date-range',\r\n  dateRange: configuration\r\n});\r\n\r\nexport const switchFormInput = (configuration: SwitchFormInput): FormInput => ({\r\n  type: 'switch',\r\n  switch: configuration\r\n});\r\n\r\nexport const checkboxFormInput = (configuration: CheckboxFormInput): FormInput => ({\r\n  type: 'checkbox',\r\n  checkbox: configuration\r\n});\r\n\r\nexport const autocompleteFormInput = (configuration: AutocompleteConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocomplete: configuration\r\n});\r\n\r\nexport const autocompleteLocalFormInput = (configuration: AutocompleteLocalConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocompleteLocal: configuration\r\n});\r\n\r\nexport const autocompleteServerFormInput = (configuration: AutocompleteServerConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-server',\r\n  autocompleteServer: configuration\r\n});\r\n\r\nexport const fileFormInput = (configuration: FileFormInput): FormInput => ({\r\n  type: 'file',\r\n  file: configuration\r\n});\r\n\r\n\r\n@Component({\r\n  selector: 'app-item-form-template',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ScrollingModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    SelectFileComponent,\r\n    PathFilesServerPipe,\r\n    ScrollingModule,\r\n    ErrorTemplateComponent,\r\n    GetKeyItemPipe,\r\n    ExecuteFunctionPipe,\r\n    GetMixedValuePipe,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n  ],\r\n  templateUrl: './item-form-template.component.html',\r\n  styleUrls: ['./item-form-template.component.css']\r\n})\r\nexport class ItemFormTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemFormConfiguration;\r\n\r\n  private fetch = inject(FetchService);\r\n  private events = inject(EventsService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  public location = inject(Location);\r\n\r\n  private abortController = new AbortController();\r\n\r\n  ngOnInit() {\r\n    if (this.configuration.type == 'update') {\r\n      this.setItemId();\r\n      if (this.configuration.dataItem && this.configuration.dataItem()) {\r\n        this.configuration.loading = false;\r\n      } else {\r\n        this.configuration.dataItem = signal(null);\r\n        this.getItem();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private setItemId() {\r\n    if (!this.configuration.itemId) {\r\n      if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n        this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getControl(name: string): FormControl {\r\n    return this.configuration.formGroup.get(name) as FormControl;\r\n  }\r\n\r\n  public async submitForm() {\r\n    try {\r\n      const form = this.configuration.formGroup;\r\n      form.markAllAsTouched();\r\n      if (form.invalid || this.configuration.loading) return;\r\n      this.configuration.loading = true;\r\n\r\n      let data = form.getRawValue();\r\n      const { parseDataItemBeforeSendFormFn } = this.configuration;\r\n      data = await parseDataItemBeforeSendFormFn?.(data) ?? data;\r\n\r\n      const requestInit: RequestInitFetch = { };\r\n      if(this.configuration.server.fetch?.confirmDialog) {\r\n        requestInit.confirmDialog = this.configuration.server.fetch.confirmDialog;\r\n      }\r\n      if(this.configuration.server.fetch?.toast) {\r\n        requestInit.toast = this.configuration.server.fetch.toast;\r\n      }\r\n\r\n      let response = null;\r\n      if (this.configuration.type === 'create') {\r\n        response = await this.fetch.post(this.configuration.server.url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_created`, response);\r\n      } else {\r\n        const url = this.configuration.server.updateUrl ?? `${this.configuration.server.url}/${this.configuration.dataItem!()?.id}`;\r\n        response = await this.fetch.put(url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_updated`, response);\r\n      }\r\n\r\n      const { afterSaveFormFn } = this.configuration;\r\n      if (afterSaveFormFn) afterSaveFormFn(response);\r\n\r\n      if (!this.configuration.disableAutoBackLocation) this.location.back();\r\n    } catch { }\r\n    this.configuration.loading = false;\r\n  }\r\n\r\n  public async getItem() {\r\n    this.configuration.dataItem = signal(null)\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { itemId, server } = this.configuration;\r\n      let queryParams:any = server.itemQueryParams ?? {};\r\n      if (queryParams instanceof Object) {\r\n        queryParams = objectToURLSearchParams(queryParams);\r\n        queryParams = queryParams.toString();\r\n      }\r\n      const url = `${server.itemUrl ?? server.url}/${itemId}?${queryParams ? queryParams : ''}`;\r\n      const requestInit: RequestInitFetch = { signal: this.abortController.signal };\r\n      let item: any = await this.fetch.get(url, requestInit);\r\n      const { parseItemBeforePatchFormFn } = this.configuration;\r\n      item = await parseItemBeforePatchFormFn?.(item) ?? item;\r\n      this.configuration.formGroup.patchValue(item);\r\n      this.configuration.dataItem.set(item);\r\n      this.configuration.hiddeFields = false;\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "cssClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 233
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 232
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 230
                },
                {
                    "name": "textLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 231
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "InputFileConfiguration"
            ]
        },
        {
            "name": "FormInput",
            "id": "interface-FormInput-c318b4a215c8ef742cae4789ee423f79c07102763a82acdca3a73e70fce6b013cf18d23c85dd12f649226b77bd037e42298d7e0f64fce4e298d57932521aba8a",
            "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { FetchService, RequestInitFetch, ToastForFetch } from '@service/fetch.service';\r\nimport { EventsService } from '@service/events.service';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { SpinnerDefaultComponent } from '../spinner-default/spinner-default.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { InputFileConfiguration, SelectFileComponent } from '../select-file/select-file.component';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { ErrorTemplateComponent } from '../error-template/error-template.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { ExecuteFunctionPipe } from '@pipe/execute-function.pipe';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { InputAutocompleteConfiguration, InputAutocompleteLocalConfiguration, InputAutocompleteServerConfiguration, InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectConfiguration, InputSelectLocalConfiguration, InputSelectServerConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { ConfirmDialogData } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\n\r\nexport interface ItemFormConfiguration<Item = any, Data = any> {\r\n  title?: string;\r\n  titleModule: string;\r\n\r\n  subtitle?: ((item: Item) => string | number | null | undefined) | false;\r\n\r\n  formGroup: FormGroup;\r\n  type: 'create' | 'update';\r\n\r\n  loading?: boolean;\r\n  hiddeFields?: boolean;\r\n  fields?: FormInput[];\r\n\r\n  dataItem?: WritableSignal<Item | null>,\r\n\r\n  server: {\r\n      url: string;\r\n      queryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      updateUrl?: string;\r\n      updateQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      createUrl?: string;\r\n      createQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      itemUrl?: string;\r\n      itemQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      fetch?: {\r\n        confirmDialog?: ConfirmDialogData,\r\n        toast?: ToastForFetch,\r\n      }\r\n  }\r\n\r\n  parseDataItemBeforeSendFormFn?: (data: Data) => (Data | Promise<Data>);\r\n  afterSaveFormFn?: (data: Item) => void;\r\n\r\n  itemId?: string | number\r\n  parseItemBeforePatchFormFn?: (item: Item) => (Item | Promise<Item>);\r\n\r\n  ignoreShowError?: boolean;\r\n  interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n  httpError?: FetchErrorResponse;\r\n\r\n  disableAutoBackLocation?: boolean;\r\n\r\n  saveButton?: {\r\n      text: string;\r\n      icon?: string;\r\n      iconPosition?: 'left' | 'right';\r\n  };\r\n  \r\n  cancelButton?: {\r\n      iconPosition?: 'left' | 'right';\r\n      text: string;\r\n      icon?: string;\r\n  } | false;\r\n}\r\n\r\nexport declare type InputType = 'select' | 'select-local' | 'select-server' | 'date' | 'date-range' | 'text' | 'number' | 'textarea' | 'checkbox' | 'switch' | 'autocomplete' | 'autocomplete-local' | 'autocomplete-server';\r\n\r\nexport interface FormInput {\r\n\r\n  type: InputType | 'file';\r\n\r\n  text?: TextFormInput;\r\n\r\n  number?: NumberFormInput;\r\n\r\n  textarea?: TextareaFormInput;\r\n  \r\n  date?: DateFormInput;\r\n  \r\n  dateRange?: DateRangeFormInput;\r\n  \r\n  switch?: SwitchFormInput;\r\n  \r\n  checkbox?: CheckboxFormInput;\r\n\r\n  select?: SelectConfigurationExt;\r\n\r\n  selectLocal?: SelectLocalConfigurationExt;\r\n  \r\n  selectServer?: SelectServerConfigurationExt;\r\n\r\n  autocomplete?: AutocompleteConfigurationExt;\r\n\r\n  autocompleteServer?: AutocompleteServerConfigurationExt;\r\n\r\n  autocompleteLocal?: AutocompleteLocalConfigurationExt;\r\n\r\n  file?: FileFormInput;\r\n}\r\n\r\nexport interface TextFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface NumberFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface TextareaFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  rows?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SelectFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | boolean | null;\r\n  options: { text: string, value: any }[];\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateRangeFormInput<T = any> {\r\n  formControlNameFrom: string;\r\n  formControlNameTo: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValueFrom?: Date | string | number | null;\r\n  defaultValueTo?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SwitchFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface CheckboxFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectConfigurationExt<T = any> extends InputSelectConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectLocalConfigurationExt<T = any> extends InputSelectLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectServerConfigurationExt<T = any> extends InputSelectServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteConfigurationExt<T = any> extends InputAutocompleteConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteLocalConfigurationExt<T = any> extends InputAutocompleteLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteServerConfigurationExt<T = any> extends InputAutocompleteServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface FileFormInput<T = any> extends InputFileConfiguration {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: any;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport const textFormInput = (configuration: TextFormInput): FormInput => ({\r\n  type: 'text',\r\n  text: configuration\r\n});\r\n\r\nexport const numberFormInput = (configuration: NumberFormInput): FormInput => ({\r\n  type: 'number',\r\n  number: configuration\r\n});\r\n\r\nexport const textareaFormInput = (configuration: TextareaFormInput): FormInput => ({\r\n  type: 'textarea',\r\n  textarea: configuration\r\n});\r\n\r\nexport const selectFormInput = (configuration: SelectConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectLocalFormInput = (configuration: SelectLocalConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectServerFormInput = (configuration: SelectServerConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const dateFormInput = (configuration: DateFormInput): FormInput => ({\r\n  type: 'date',\r\n  date: configuration\r\n});\r\n\r\nexport const dateRangeFormInput = (configuration: DateRangeFormInput): FormInput => ({\r\n  type: 'date-range',\r\n  dateRange: configuration\r\n});\r\n\r\nexport const switchFormInput = (configuration: SwitchFormInput): FormInput => ({\r\n  type: 'switch',\r\n  switch: configuration\r\n});\r\n\r\nexport const checkboxFormInput = (configuration: CheckboxFormInput): FormInput => ({\r\n  type: 'checkbox',\r\n  checkbox: configuration\r\n});\r\n\r\nexport const autocompleteFormInput = (configuration: AutocompleteConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocomplete: configuration\r\n});\r\n\r\nexport const autocompleteLocalFormInput = (configuration: AutocompleteLocalConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocompleteLocal: configuration\r\n});\r\n\r\nexport const autocompleteServerFormInput = (configuration: AutocompleteServerConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-server',\r\n  autocompleteServer: configuration\r\n});\r\n\r\nexport const fileFormInput = (configuration: FileFormInput): FormInput => ({\r\n  type: 'file',\r\n  file: configuration\r\n});\r\n\r\n\r\n@Component({\r\n  selector: 'app-item-form-template',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ScrollingModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    SelectFileComponent,\r\n    PathFilesServerPipe,\r\n    ScrollingModule,\r\n    ErrorTemplateComponent,\r\n    GetKeyItemPipe,\r\n    ExecuteFunctionPipe,\r\n    GetMixedValuePipe,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n  ],\r\n  templateUrl: './item-form-template.component.html',\r\n  styleUrls: ['./item-form-template.component.css']\r\n})\r\nexport class ItemFormTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemFormConfiguration;\r\n\r\n  private fetch = inject(FetchService);\r\n  private events = inject(EventsService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  public location = inject(Location);\r\n\r\n  private abortController = new AbortController();\r\n\r\n  ngOnInit() {\r\n    if (this.configuration.type == 'update') {\r\n      this.setItemId();\r\n      if (this.configuration.dataItem && this.configuration.dataItem()) {\r\n        this.configuration.loading = false;\r\n      } else {\r\n        this.configuration.dataItem = signal(null);\r\n        this.getItem();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private setItemId() {\r\n    if (!this.configuration.itemId) {\r\n      if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n        this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getControl(name: string): FormControl {\r\n    return this.configuration.formGroup.get(name) as FormControl;\r\n  }\r\n\r\n  public async submitForm() {\r\n    try {\r\n      const form = this.configuration.formGroup;\r\n      form.markAllAsTouched();\r\n      if (form.invalid || this.configuration.loading) return;\r\n      this.configuration.loading = true;\r\n\r\n      let data = form.getRawValue();\r\n      const { parseDataItemBeforeSendFormFn } = this.configuration;\r\n      data = await parseDataItemBeforeSendFormFn?.(data) ?? data;\r\n\r\n      const requestInit: RequestInitFetch = { };\r\n      if(this.configuration.server.fetch?.confirmDialog) {\r\n        requestInit.confirmDialog = this.configuration.server.fetch.confirmDialog;\r\n      }\r\n      if(this.configuration.server.fetch?.toast) {\r\n        requestInit.toast = this.configuration.server.fetch.toast;\r\n      }\r\n\r\n      let response = null;\r\n      if (this.configuration.type === 'create') {\r\n        response = await this.fetch.post(this.configuration.server.url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_created`, response);\r\n      } else {\r\n        const url = this.configuration.server.updateUrl ?? `${this.configuration.server.url}/${this.configuration.dataItem!()?.id}`;\r\n        response = await this.fetch.put(url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_updated`, response);\r\n      }\r\n\r\n      const { afterSaveFormFn } = this.configuration;\r\n      if (afterSaveFormFn) afterSaveFormFn(response);\r\n\r\n      if (!this.configuration.disableAutoBackLocation) this.location.back();\r\n    } catch { }\r\n    this.configuration.loading = false;\r\n  }\r\n\r\n  public async getItem() {\r\n    this.configuration.dataItem = signal(null)\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { itemId, server } = this.configuration;\r\n      let queryParams:any = server.itemQueryParams ?? {};\r\n      if (queryParams instanceof Object) {\r\n        queryParams = objectToURLSearchParams(queryParams);\r\n        queryParams = queryParams.toString();\r\n      }\r\n      const url = `${server.itemUrl ?? server.url}/${itemId}?${queryParams ? queryParams : ''}`;\r\n      const requestInit: RequestInitFetch = { signal: this.abortController.signal };\r\n      let item: any = await this.fetch.get(url, requestInit);\r\n      const { parseItemBeforePatchFormFn } = this.configuration;\r\n      item = await parseItemBeforePatchFormFn?.(item) ?? item;\r\n      this.configuration.formGroup.patchValue(item);\r\n      this.configuration.dataItem.set(item);\r\n      this.configuration.hiddeFields = false;\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "autocomplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AutocompleteConfigurationExt",
                    "optional": true,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "autocompleteLocal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AutocompleteLocalConfigurationExt",
                    "optional": true,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "autocompleteServer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AutocompleteServerConfigurationExt",
                    "optional": true,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "checkbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CheckboxFormInput",
                    "optional": true,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateFormInput",
                    "optional": true,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "dateRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateRangeFormInput",
                    "optional": true,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FileFormInput",
                    "optional": true,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NumberFormInput",
                    "optional": true,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "select",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectConfigurationExt",
                    "optional": true,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "selectLocal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectLocalConfigurationExt",
                    "optional": true,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "selectServer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectServerConfigurationExt",
                    "optional": true,
                    "description": "",
                    "line": 105
                },
                {
                    "name": "switch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SwitchFormInput",
                    "optional": true,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TextFormInput",
                    "optional": true,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "textarea",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TextareaFormInput",
                    "optional": true,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputType | \"file\"",
                    "optional": false,
                    "description": "",
                    "line": 85
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GroupDrawerLink",
            "id": "interface-GroupDrawerLink-7b7d7406e4ca54a91a69a44a6709b5e6b8533eb224cf7b866f08f738251a1d944b0134c9537cf7b101ae50ae91846bd7cfc869237594e5c292b99a91e3d33b6b",
            "file": "src/app/sidenav/sidenav/sidenav.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ElementRef, HostListener, Renderer2, Signal, ViewChild, ViewEncapsulation, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { AuthService } from '@service/auth.service';\r\nimport { User, UserRoleEnum } from '@interface/user';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { FirstLetterNamePipe } from '@pipe/first-letter-name.pipe';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { ProfileMenuComponent } from '../profile-menu/profile-menu.component';\r\nimport { AppsMenuComponent } from '../apps-menu/apps-menu.component';\r\nimport { SettingsMenuComponent } from '../settings-menu/settings-menu.component';\r\nimport { NotificationsMenuComponent } from '../notifications-menu/notifications-menu.component';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { DatabaseStorageService, NameModuleDatabase } from '@service/database-storage.service';\r\n\r\ninterface GroupDrawerLink {\r\n    label?: string;\r\n    links: DrawerLink[];\r\n    roles?: UserRoleEnum[];\r\n}\r\n\r\ninterface DrawerLink {\r\n    label: string;\r\n    icon: string;\r\n    route: string;\r\n    exact?: boolean;\r\n    queryParams?: { [key: string]: string | number | boolean };\r\n    roles?: UserRoleEnum[];\r\n    group_open?: boolean;\r\n}\r\n\r\nexport interface EventGlobalSearch {\r\n    type: 'enter' | 'change';\r\n    value: string;\r\n}\r\n\r\nexport const NAME_EVENT_GLOBAL_SEARCH = 'global_search';\r\n\r\nexport declare type LateralPanelType = 'maximum' | 'minimum';\r\n\r\n@Component({\r\n    selector: 'app-sidenav',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n\r\n        RouterOutlet,\r\n        RouterLink,\r\n        RouterLinkActive,\r\n        ReactiveFormsModule,\r\n\r\n        MatMenuModule,\r\n        MatSelectModule,\r\n        MatTooltipModule,\r\n        MatAutocompleteModule,\r\n\r\n        PathFilesServerPipe,\r\n        FirstLetterNamePipe,\r\n\r\n        ProfileMenuComponent,\r\n        AppsMenuComponent,\r\n        SettingsMenuComponent,\r\n        NotificationsMenuComponent,\r\n    ],\r\n    templateUrl: './sidenav.component.html',\r\n    styleUrls: ['./sidenav.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class SidenavComponent {\r\n    private authService = inject(AuthService);\r\n    private renderer2 = inject(Renderer2);\r\n    private eventService = inject(EventsService);\r\n    public location = inject(Location);\r\n    public databaseStorageService = inject(DatabaseStorageService);\r\n\r\n    public user: Signal<User | null> = this.authService.user;\r\n    public sidenavDrawerMode: WritableSignal<'over' | 'push' | 'side'> = signal('side');\r\n    public showDrawer: WritableSignal<boolean> = signal(false);\r\n    public groupDrawerLinks: WritableSignal<GroupDrawerLink[]> = signal([]);\r\n\r\n    public lateralPanelType: WritableSignal<LateralPanelType> = signal('minimum');\r\n    public showLateralPanel: WritableSignal<boolean> = signal(false);\r\n\r\n    @ViewChild('inputSearch') inputSearch!: ElementRef<HTMLInputElement>;\r\n    public searchCtrl: FormControl = new FormControl('');\r\n    public optionsSearchCtrl: FormControl = new FormControl('');\r\n    public speakingMicrophone: WritableSignal<boolean> = signal(false);\r\n\r\n    @HostListener('window:keydown.esc', ['$event'])\r\n    keyEvent(event: KeyboardEvent) {\r\n        console.log();\r\n\r\n        if ((event.target as HTMLElement).nodeName.toUpperCase() !== 'INPUT' && this.showLateralPanel()) {\r\n            this.location.back();\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getValidatedLinks(DRAWER_LINKS, this.user()!.role);\r\n        this.watchSearchCtrl();\r\n        this.loadConfigurations();\r\n    }\r\n\r\n    private async getValidatedLinks(links: GroupDrawerLink[], role: UserRoleEnum): Promise<void> {\r\n        const linksFiltered: GroupDrawerLink[] = [];\r\n        for await (const link of links) {\r\n            if (link.roles && !link.roles.includes(role)) continue;\r\n            if (link.links.length) link.links = await this.filteredLinks(link.links, role);\r\n            linksFiltered.push(link);\r\n        }\r\n        this.groupDrawerLinks.set(linksFiltered);\r\n    }\r\n\r\n    public async filteredLinks(links: DrawerLink[], role: UserRoleEnum): Promise<DrawerLink[]> {\r\n        const parseLinks = [];\r\n        for await (const link of links) {\r\n            if (link.roles && !link.roles.includes(role)) continue;\r\n            parseLinks.push(link);\r\n        }\r\n        return parseLinks;\r\n    }\r\n\r\n    public setShowLateralPanel(status: boolean, data: any = null) {\r\n        this.showLateralPanel.set(status);\r\n        if (status) {\r\n            if ((data.lateralPanelType ?? null) == 'maximum') {\r\n                this.lateralPanelType.set('maximum');\r\n            } else {\r\n                this.lateralPanelType.set('minimum');\r\n            }\r\n        }\r\n    }\r\n\r\n    private getAccessMicrophone(): Promise<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            navigator.mediaDevices.getUserMedia({ audio: true })\r\n                .then(() => resolve(true))\r\n                .catch(() => resolve(false));\r\n        });\r\n    }\r\n\r\n    public async requestAccessMicrophone(): Promise<void> {\r\n        if (this.speakingMicrophone()) return;\r\n        const permission = await this.getAccessMicrophone();\r\n\r\n        if (permission) {\r\n\r\n            if (!('webkitSpeechRecognition' in window)) return;\r\n\r\n            const recognition = new ((window as any).SpeechRecognition || (window as any).webkitSpeechRecognition)();\r\n            recognition.lang = 'es-ES';\r\n\r\n            this.speakingMicrophone.set(true);\r\n\r\n            recognition.onresult = (event: any) => {\r\n                const transcript = event.results[0][0].transcript;\r\n                this.searchCtrl.setValue(transcript || this.searchCtrl.value);\r\n                this.speakingMicrophone.set(false);\r\n                this.renderer2.selectRootElement(this.inputSearch.nativeElement).focus();\r\n            };\r\n\r\n            recognition.onend = () => {\r\n                this.speakingMicrophone.set(false);\r\n                this.renderer2.selectRootElement(this.inputSearch.nativeElement).focus();\r\n            }\r\n\r\n            recognition.start();\r\n        } else {\r\n            this.speakingMicrophone.set(false);\r\n        }\r\n    }\r\n\r\n    private watchSearchCtrl(): void {\r\n        this.searchCtrl.valueChanges.subscribe((value) => {\r\n            this.eventService.emitEvent<EventGlobalSearch>(NAME_EVENT_GLOBAL_SEARCH, { type: 'change', value });\r\n        });\r\n    }\r\n\r\n    public enterSearch(): void {\r\n        this.eventService.emitEvent<EventGlobalSearch>(NAME_EVENT_GLOBAL_SEARCH, { type: 'enter', value: this.searchCtrl.value });\r\n    }\r\n\r\n\r\n    private async loadConfigurations() {\r\n        await Promise.allSettled([\r\n            this.databaseStorageService.getData(NameModuleDatabase.Users),\r\n            this.databaseStorageService.getData(NameModuleDatabase.Banks),\r\n            // this.databaseStorageService.getData(NameModuleDatabase.Taxes),\r\n            // this.databaseStorageService.getData(NameModuleDatabase.DocumentTypes),\r\n            this.databaseStorageService.getData(NameModuleDatabase.Plans),\r\n            this.databaseStorageService.getData(NameModuleDatabase.VehicleTypes),\r\n        ])\r\n    }\r\n\r\n}\r\n\r\n\r\nconst DRAWER_LINKS: GroupDrawerLink[] = [\r\n    {\r\n        label: 'Organización',\r\n        links: [\r\n            {\r\n                label: 'Clientes',\r\n                icon: 'supervised_user_circle',\r\n                route: '/organization/client',\r\n            },\r\n            {\r\n                label: 'Usuarios',\r\n                icon: 'person',\r\n                route: '/organization/user',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Administración',\r\n        links: [\r\n            {\r\n                label: 'Cuentas',\r\n                icon: 'account_balance_wallet',\r\n                route: '/administration/account',\r\n            },\r\n            {\r\n                label: 'Cajas',\r\n                icon: 'service_toolbox',\r\n                route: '/administration/box',\r\n            },\r\n            {\r\n                label: 'Movimientos de caja',\r\n                icon: 'timeline',\r\n                route: '/administration/box-movement',\r\n            },\r\n            {\r\n                label: 'Facturación',\r\n                icon: 'draft',\r\n                route: '/administration/document',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Tracking',\r\n        links: [\r\n            {\r\n                label: 'Contratos',\r\n                icon: 'account_balance_wallet',\r\n                route: '/tracking/contract',\r\n            },\r\n            {\r\n                label: 'Vehículos',\r\n                icon: 'electric_rickshaw',\r\n                route: '/tracking/vehicle',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Configuration',\r\n        links: [\r\n            {\r\n                label: 'Bancos',\r\n                icon: 'account_balance',\r\n                route: '/configuration/bank',\r\n            },\r\n            {\r\n                label: 'Planes',\r\n                icon: 'planner_banner_ad_pt',\r\n                route: '/configuration/plan',\r\n            },\r\n            {\r\n                label: 'Tipo de vehículos',\r\n                icon: 'airport_shuttle',\r\n                route: '/configuration/vehicle-type',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Opciones de la APP',\r\n        links: [\r\n            {\r\n                label: 'Settings',\r\n                route: '/settings',\r\n                icon: 'settings',\r\n            },\r\n        ]\r\n    },\r\n];\r\n\r\n\r\n// this.breakpointObserver\r\n//       .observe([\r\n//         '(min-width: 640px) and (max-width: 1024px)',\r\n//         '(max-width: 640px)',\r\n//       ])\r\n//       .subscribe(({ breakpoints }) => {\r\n//         if (breakpoints['(min-width: 640px) and (max-width: 1024px)']) {\r\n//           this.mode = 'push';\r\n//           this.backdrop = true;\r\n//         } else if (breakpoints['(max-width: 640px)']) {\r\n//           this.mode = 'over';\r\n//           this.backdrop = true;\r\n//         } else {\r\n//           this.mode = 'side';\r\n//           this.backdrop = false;\r\n//         }\r\n//       });\r\n\r\n\r\n\r\n// links: Link[] = [\r\n//   {\r\n//       name: 'Inicio',\r\n//       icon: 'home',\r\n//       url: '/',\r\n//       exact: true,\r\n//   },\r\n//   {\r\n//       name: 'Stakeholders',\r\n//       icon: 'handshake',\r\n//       url: '/organization',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Leads',\r\n//               icon: 'supervised_user_circle',\r\n//               url: '/leads',\r\n//           },\r\n//           {\r\n//               name: 'Clientes',\r\n//               icon: 'groups',\r\n//               url: '/client',\r\n//           },\r\n//           {\r\n//               name: 'Proveedores',\r\n//               icon: 'diversity_3',\r\n//               url: '/provider',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Colaboradores',\r\n//       icon: 'lan',\r\n//       url: '/organization',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Usuarios',\r\n//               icon: 'person_add',\r\n//               url: '/user',\r\n//           },\r\n//           {\r\n//               name: 'Recursos humanos',\r\n//               icon: 'admin_panel_settings',\r\n//               url: '/human-resource',\r\n//           },\r\n//           // {\r\n//           //     name: 'Vendedores',\r\n//           //     icon: 'communication',\r\n//           //     url: '/seller',\r\n//           // },\r\n//           // {\r\n//           //     name: 'Jefes de proyectos',\r\n//           //     icon: 'supervisor_account',\r\n//           //     url: '/project-manager',\r\n//           // },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Cotizaciones',\r\n//       icon: 'monetization_on',\r\n//       url: '/quotation',\r\n//       childs: [\r\n//           {\r\n//               name: 'Cotizaciones',\r\n//               icon: 'monetization_on',\r\n//               url: '/quotation/recents'\r\n//           },\r\n//           {\r\n//               name: 'Costos unitarios',\r\n//               icon: 'call_split',\r\n//               url: '/quotation/unit-cost',\r\n//           },\r\n//           // {\r\n//           //     name: 'Materiales',\r\n//           //     icon: 'construction',\r\n//           //     url: '/material',\r\n//           // },\r\n//           {\r\n//               name: 'Mano de obra',\r\n//               icon: 'handshake',\r\n//               url: '/quotation/workforce',\r\n//           },\r\n//           {\r\n//               name: 'Equipos y herramientas',\r\n//               icon: 'inbox_customize',\r\n//               url: '/quotation/equipment-tool',\r\n//           },\r\n//           {\r\n//               name: 'Subcontratos',\r\n//               icon: 'add_business',\r\n//               url: '/quotation/subcontract',\r\n//           },\r\n//           {\r\n//               name: 'Categorias de costos',\r\n//               icon: 'gesture',\r\n//               url: '/quotation/unit-cost-category',\r\n//           }\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Productos',\r\n//       icon: 'widgets',\r\n//       url: '/product',\r\n//       childs: [\r\n//           {\r\n//               name: 'Lista de productos',\r\n//               icon: 'widgets',\r\n//               url: '/product',\r\n//           },\r\n//           {\r\n//               name: 'Categorias',\r\n//               icon: 'category',\r\n//               url: '/product/category',\r\n//           },\r\n//           {\r\n//               name: 'Marcas',\r\n//               icon: 'label_important',\r\n//               url: '/product/brand',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Configuraciones',\r\n//       icon: 'settings',\r\n//       url: '/configuration',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Tipos de documento',\r\n//               url: '/configuration/document-type',\r\n//               icon: 'dock',\r\n//           },\r\n//           {\r\n//               name: 'Áreas de la empresa',\r\n//               url: '/configuration/company-area',\r\n//               icon: 'apartment',\r\n//           },\r\n//           {\r\n//               name: 'Sector de stakeholders',\r\n//               url: '/configuration/business-sector',\r\n//               icon: 'corporate_fare',\r\n//           },\r\n//           {\r\n//               name: 'Bancos',\r\n//               url: '/configuration/bank',\r\n//               icon: 'account_balance',\r\n//           },\r\n//           {\r\n//               name: 'Cargos',\r\n//               url: '/configuration/position',\r\n//               icon: 'whatshot',\r\n//           },\r\n//           {\r\n//               name: 'Unidad de medida',\r\n//               url: '/configuration/measurement-unit',\r\n//               icon: 'stacked_bar_chart',\r\n//           },\r\n//           {\r\n//               name: 'Impuestos',\r\n//               url: '/configuration/taxe',\r\n//               icon: 'monitoring',\r\n//           },\r\n//           {\r\n//               name: 'Cuentas bancarias',\r\n//               url: '/configuration/account',\r\n//               icon: 'payments',\r\n//           },\r\n//           {\r\n//               name: 'Direcciones',\r\n//               url: '/configuration/address',\r\n//               icon: 'dns',\r\n//           },\r\n//           {\r\n//               name: 'Tipo de trabajador',\r\n//               url: '/configuration/worker-type',\r\n//               icon: 'engineering',\r\n//           },\r\n//           {\r\n//               name: 'Régimen laboral',\r\n//               url: '/configuration/laboral-regimen',\r\n//               icon: 'azm',\r\n//           },\r\n//           {\r\n//               name: 'Tipo de contrato',\r\n//               url: '/configuration/contract-type',\r\n//               icon: 'badge',\r\n//           },\r\n//           {\r\n//               name: 'Régimen de salud',\r\n//               url: '/configuration/health-regimen',\r\n//               icon: 'security',\r\n//           },\r\n//           {\r\n//               name: 'Régimen pensionario',\r\n//               url: '/configuration/pension-scheme',\r\n//               icon: 'receipt',\r\n//           },\r\n//           {\r\n//               name: 'Niveles de educación',\r\n//               url: '/configuration/education-level',\r\n//               icon: 'moving_ministry',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Configuración de calendario',\r\n//       icon: 'edit_calendar',\r\n//       url: '/calendar-configuration',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Calendarios',\r\n//               url: '/calendar/list',\r\n//               icon: 'calendar_month',\r\n//           },\r\n//           {\r\n//               name: 'Días feriados',\r\n//               url: '/holiday',\r\n//               icon: 'today',\r\n//           },\r\n//           {\r\n//               name: 'Configuraciones',\r\n//               icon: 'calendar_apps_script',\r\n//               url: '/calendar-configuration/list',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Control de cajas',\r\n//       icon: 'point_of_sale',\r\n//       url: '/box',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Caja',\r\n//               url: '/box/list',\r\n//               icon: 'flowsheet',\r\n//           },\r\n//           {\r\n//               name: 'Movimientos de caja',\r\n//               url: '/box/box-movement',\r\n//               icon: 'right_click',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Capital de trabajo',\r\n//       icon: 'store',\r\n//       url: '/working-capital-box',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Caja',\r\n//               url: '/working-capital-box/list',\r\n//               icon: 'flowsheet',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Caja de rendición',\r\n//       icon: 'point_of_sale',\r\n//       url: '/surrender-box',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Caja de rendición',\r\n//               url: '/surrender-box/list',\r\n//               icon: 'flowsheet',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Inversiones',\r\n//       icon: 'connect_without_contact',\r\n//       url: '/investor',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Inversionistas',\r\n//               url: '/investor/list',\r\n//               icon: 'recent_patient',\r\n//           },\r\n//           {\r\n//               name: 'Inversiones',\r\n//               url: '/investor/investment',\r\n//               icon: 'insights',\r\n//           },\r\n//           {\r\n//               name: 'Retiro de inversiones',\r\n//               url: '/investor/investment-withdrawal',\r\n//               icon: 'real_estate_agent',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Socios',\r\n//       icon: 'supervisor_account',\r\n//       url: '/partner',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Lista de socios',\r\n//               url: '/partner/list',\r\n//               icon: 'supervised_user_circle',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Requerimientos',\r\n//       icon: 'view_timeline',\r\n//       url: '/requirement',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Requerimientos',\r\n//               url: '/requirement/list',\r\n//               icon: 'last_page',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Registro de actas',\r\n//       icon: 'meeting_room',\r\n//       url: '/record-meeting',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Registro de actas',\r\n//               url: '/record-meeting/list',\r\n//               icon: 'auto_videocam',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Costos',\r\n//       icon: 'price_check',\r\n//       url: '/cost-center',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Centro de costos',\r\n//               url: '/cost-center/panel',\r\n//               icon: 'stacked_bar_chart',\r\n//           },\r\n//           {\r\n//               name: 'Tipo de centro de costos',\r\n//               url: '/cost-center/cost-center-type',\r\n//               icon: 'arrow_and_edge',\r\n//           },\r\n//           {\r\n//               name: 'Lista de gastos',\r\n//               url: '/cost-center/expense-list-general',\r\n//               icon: 'receipt_long',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Proyectos',\r\n//       icon: 'memory',\r\n//       url: '/project',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Lista de proyectos',\r\n//               url: '/project/list',\r\n//               icon: 'electric_bolt',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Compras',\r\n//       icon: 'sell',\r\n//       url: '/purchase-order',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Orden de compra',\r\n//               url: '/purchase-order/list',\r\n//               icon: 'file_open',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Ajustes',\r\n//       icon: 'build',\r\n//       url: '/settings',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Perfil',\r\n//               url: '/settings/profile',\r\n//               icon: 'account_box',\r\n//           },\r\n//           {\r\n//               name: 'Aplicación',\r\n//               url: '/settings/application',\r\n//               icon: 'settings_applications',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Notificaciones',\r\n//       icon: 'notifications',\r\n//       url: '/settings/profile/notifications/list',\r\n//       open: true,\r\n//   },\r\n// ];\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "links",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DrawerLink[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserRoleEnum[]",
                    "optional": true,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "HandleFileEvent",
            "id": "interface-HandleFileEvent-634603a0174ace9e549ac4ac5ca499a5557e5c7ba907596f3d56e67bda389583b7a151c26f75dfa6349e631fdf0d0d031b1bfc2999b3a8d9f7dc9dbf84ca1a47",
            "file": "src/app/shared/directives/handle-file-input.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    Directive,\r\n    Renderer2,\r\n    ElementRef,\r\n    Output,\r\n    EventEmitter,\r\n} from '@angular/core';\r\n\r\nexport interface HandleFileEvent {\r\n    base_64: string;\r\n    extension_file: string;\r\n    name_file: string;\r\n    size_file: number;\r\n    type_file: string;\r\n}\r\n\r\n@Directive({\r\n    selector: '[appHandleFileInput]',\r\n    standalone: true,\r\n})\r\nexport class HandleFileInputDirective {\r\n    @Output() handleFile: EventEmitter<HandleFileEvent | null> = new EventEmitter();\r\n\r\n    constructor(private el: ElementRef, private renderer2: Renderer2) {\r\n        this.renderer2.listen(el.nativeElement, 'input', (event) => {\r\n            this.handleFileSelect(event);\r\n        });\r\n    }\r\n\r\n    public handleFileSelect($event: InputEvent) {\r\n        const fileList: FileList = ($event.target! as HTMLInputElement).files as FileList;\r\n        if (fileList.length) {\r\n            const file = fileList[0];\r\n            const extension_file = file.name.split('.').pop()!;\r\n            const name_file = file.name;\r\n            const size_file = file.size;\r\n            const type_file = file.type;\r\n            const reader: FileReader = new FileReader();\r\n            reader.onload = (eventReader) => {\r\n                const base_64 = btoa(eventReader.target!.result as string);\r\n                this.handleFile.emit({\r\n                    base_64,\r\n                    extension_file,\r\n                    name_file,\r\n                    size_file,\r\n                    type_file,\r\n                });\r\n            };\r\n            reader.readAsBinaryString(file);\r\n        } else {\r\n            this.handleFile.emit(null);\r\n        }\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "base_64",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "extension_file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name_file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "size_file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "type_file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "HtmlListColumn",
            "id": "interface-HtmlListColumn-edc9a2c085d669b062640c6d2a97876fe56bb34f5ae23612a12a67b2af6f44bb5d3316d9f28e50d8c8d522c0e6ce8fc3245f639ec16593bc1c325c3c460a4296",
            "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule, DatePipe, Location, NgOptimizedImage } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, ViewChild, Input, ContentChild, TemplateRef, ElementRef, Renderer2, ViewEncapsulation, signal, WritableSignal, computed, inject, Inject, Optional, InjectionToken, EventEmitter, RendererStyleFlags2 } from '@angular/core';\r\nimport { MatCheckboxChange, MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSort, MatSortModule } from '@angular/material/sort';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from 'src/app/shared/utilities/queryParams';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { IndexListPipe } from '@pipe/index-list.pipe';\r\nimport { SpinnerDefaultComponent } from '@component/spinner-default/spinner-default.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { debounceTime } from 'rxjs';\r\nimport { DiffDatePipe } from '@pipe/diff-date.pipe';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { HiddenOptionButtonRowPipe } from '@pipe/hidden-option-button-row.pipe';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { GetUserByIdPipe } from '@pipe/get-user-by-id.pipe';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ListFormatPipe } from '@pipe/list-format.pipe';\r\nimport { LoadImagePrivateDirective } from '@directive/load-image-private.directive';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MatPseudoCheckboxModule } from '@angular/material/core';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { EventGlobalSearch, NAME_EVENT_GLOBAL_SEARCH } from 'src/app/sidenav/sidenav/sidenav.component';\r\nimport { ExecuteFunctionListPipe } from './execute-function-list.pipe';\r\nimport { FormInput, dateRangeFormInput, switchFormInput } from '@component/item-form-template/item-form-template.component';\r\nimport { RenameTitleColumnListPipe } from './rename-title-column-list.pipe';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DateFnsAdapter } from '@angular/material-date-fns-adapter';\r\nimport { MyDateAdapter } from '@utility/myDateAdapter';\r\nimport { MY_DATE_FORMATS } from '@utility/myDateFormat';\r\n\r\nexport const DATA_TYPE_LIST = new InjectionToken<'array' | 'paginator'>('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST');\r\n\r\nexport interface ItemListConfiguration<T = any> {\r\n  readonly dataType?: 'array' | 'paginator';\r\n  readonly keyGetItemsPaginator?: string;\r\n  readonly keyGetTotalItemsPaginator?: string;\r\n\r\n  readonly disableFiltersInQueryParams?: boolean;\r\n\r\n  title: string | null;\r\n\r\n  parseDataFn?: (data: T[]) => T[] | Promise<T[]>;\r\n  data?: WritableSignal<T[]>;\r\n  updateListEvent?: EventEmitter<void>;\r\n\r\n  defaultOrder?: {\r\n    key: string,\r\n    order: 'ASC' | 'DESC'\r\n  };\r\n\r\n  backButton?: boolean;\r\n\r\n  updateButton?: boolean;\r\n\r\n  server: {\r\n    readonly url: string,\r\n    queryParams?: { [key: string]: any } | string;\r\n  }\r\n\r\n  createButton?: {\r\n    text?: string,\r\n    routerLink: RouterLinkCreateButton\r\n  } | false;\r\n\r\n  filters?: FormInput[] | false;\r\n\r\n  rows?: {\r\n    selectable?: {\r\n      actions: SelectableActionButton<T>[];\r\n    };\r\n    index?: false | ({ title: string });\r\n    cssClass?: string | ((item: T) => string);\r\n    actions?: ActionButton<T>[];\r\n    options?: ActionButton<T>[] | false;\r\n  },\r\n\r\n  columns: WritableSignal<ListColumn<T>[]>;\r\n}\r\n\r\nexport interface RouterLinkCreateButton {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any;\r\n}\r\nexport interface RouterLinkItem<T> {\r\n  url: ((item: T, index: number) => string) | string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: ((item: T, index: number) => (string | { [key: string]: any } | any[] | number | null)) | string | { [key: string]: any } | any[] | number | null;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\ndeclare type ActionButtonActionsType = 'clickEvent' | 'routerLink';\r\ninterface ActionButton<T> {\r\n  type: 'clickEvent' | 'routerLink';\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((item: T, index: number) => boolean);\r\n  disabled?: boolean | ((item: T, index: number) => boolean);\r\n  cssClass?: string | ((item: T, index: number) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((item: T, index: number) => ({ [key: string]: any }));\r\n  fn?: (item: T, index: number, fns: {\r\n    deleteItemFn: (id: number | string) => Promise<void>,\r\n    restoreItemFn: (id: number | string) => Promise<void>,\r\n    updateChangesItemFn: (index: number, item: T) => void,\r\n  }) => void;\r\n  routerLink?: RouterLinkItem<T>;\r\n}\r\ninterface ClickEventActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'fn'>> & ActionButton<T>, 'type' | 'routerLink'> { }\r\nexport const clickEventActionButton = <T = any>(config: ClickEventActionButton<T>): ActionButton<T> => ({ type: 'clickEvent', ...config });\r\ninterface RouterLinkActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'routerLink'>> & ActionButton<T>, 'type' | 'clickEvent'> { }\r\nexport const routerLinkActionButton = <T = any>(config: RouterLinkActionButton<T>): ActionButton<T> => ({ type: 'routerLink', ...config });\r\ninterface SelectableActionButton<T> {\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((selectedItems: T[]) => boolean);\r\n  disabled?: boolean | ((selectedItems: T[]) => boolean);\r\n  cssClass?: string | ((selectedItems: T[]) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((selectedItems: T[]) => ({ [key: string]: any }));\r\n  fn: (selectedItems: T[]) => void;\r\n}\r\nexport const selectableActionButton = <T = any>(config: SelectableActionButton<T>): SelectableActionButton<T> => ({ ...config });\r\n\r\nexport interface ListItemExtended {\r\n  __selected__?: boolean;\r\n  __loading_status__?: boolean;\r\n}\r\n\r\nexport type TypeValueKeyItem = 'text' | 'diff-date' | 'date' | 'number' | 'email' | 'phone' | 'user' | 'uppercase' | 'lowercase' | 'titlecase' | 'first-letter-uppercase' | 'list-format' | 'currency';\r\n\r\nexport interface ListColumn<T> {\r\n  /**\r\n   * @description\r\n   * Agrega clases css al contenedor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   */\r\n  align?: 'left' | 'center' | 'right';\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor adicional de la celda de la columna\r\n   * @example\r\n   * clickEventAdditionalValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventAdditionalValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor de la celda de la columna\r\n   * @example\r\n   * clickEventValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css a la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClass: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClass?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor adicional de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayAdditionalValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo fecha (type: 'date')\r\n   * @example\r\n   * ...\r\n   * dateFormat: 'yyyy-MM-dd'\r\n   * ...\r\n   * dateFormat: 'dd/MM/yyyy' // Por defecto\r\n   * ...\r\n   */\r\n  dateFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor adicional a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.name\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayAdditionalValueFn?: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayValueFn: (item) => item.name\r\n   * ...\r\n   * displayValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * If you want to display a value in the column that is not in the item, you can use this function\r\n   * @example\r\n   * ...\r\n   * gridColumn: '1fr'\r\n   * ...\r\n   * gridColumn: '200px'\r\n   * ...\r\n   * gridColumn: 'max-content'\r\n   * ...\r\n   * gridColumn: 'fit-content(200px)'\r\n   * ...\r\n   */\r\n  gridColumn?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones > Columnas\r\n   * @example\r\n   * ...\r\n   * hidden: true\r\n   * ...\r\n   * hidden: false // Por defecto\r\n   * ...\r\n   */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo número (type: 'number')\r\n   * @example\r\n   * ...\r\n   * numberFormat: '2.2-2'\r\n   * ...\r\n   * numberFormat: '0.2-2' // Por defecto\r\n   * ...\r\n   */\r\n  numberFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor adicional de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkAdditionalValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Sortable column espicif key in object configuration\r\n   * @example\r\n   * sort: { key: 'name' }\r\n   */\r\n  sort?: { key: string };\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display additional value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: { color: 'green' }\r\n   * ...\r\n   * @param item\r\n   * @returns string | number | null | undefined | string[] | number[]\r\n   */\r\n  cssStyleDisplayAdditionalValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayValue: { color: 'green' }\r\n   * ...\r\n   */\r\n  cssStyleDisplayValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Title column\r\n   * @example\r\n   * title: 'Nombre'\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * @description\r\n   * To display a tooltip in the column on hover\r\n   * @example\r\n   * tooltip: 'Ver detalle'\r\n   */\r\n  tooltip?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * For show type value in cell\r\n   * @example\r\n   * ...\r\n   * type: 'number',\r\n   * displayValueFn: (item) => item.price, // output: 2,000.00\r\n   * ...\r\n   * type: 'date',\r\n   * displayValueFn: (item) => item.created_at, // output 12/12/2020\r\n   * ...\r\n   */\r\n  type?: TypeValueKeyItem | 'image' | 'html';\r\n\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface SimpleListColumn<T> extends Omit<ListColumn<T>, 'type' | 'displayAdditionalValueFn' | 'displayValueFn' | 'dateFormat' | 'numberFormat' | 'image'> { }\r\ninterface SimpleListColumn2<T> extends Omit<SimpleListColumn<T>, 'cssStyleDisplayAdditionalValue' | 'routerLinkAdditionalValue' | 'cssClassDisplayAdditionalValue' | 'clickEventAdditionalValue'> { }\r\ninterface ListFormatListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string[];\r\n  displayValueFn: (item: T, index: number) => string[];\r\n}\r\n\r\ninterface NumberListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => number | null | undefined;\r\n  numberFormat?: string;\r\n}\r\n\r\ninterface StringListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => string | number | null | undefined;\r\n}\r\n\r\ninterface DateListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined;\r\n  dateFormat?: string;\r\n}\r\n\r\ninterface ImageListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface HtmlListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n}\r\n\r\nexport const numberColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'number', ...config });\r\n\r\nexport const listFormatColumn = <T = any>(config: ListFormatListColumn<T>): ListColumn<T> => ({ type: 'list-format', ...config });\r\n\r\nexport const dateColumn = <T = any>(config: DateListColumn<T>): ListColumn<T> => ({ type: 'date', ...config });\r\n\r\nexport const diffDateColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'diff-date', ...config });\r\n\r\nexport const htmlColumn = <T = any>(config: HtmlListColumn<T>): ListColumn<T> => ({ type: 'html', ...config });\r\n\r\nexport const textColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'text', ...config });\r\n\r\nexport const uppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'uppercase', ...config });\r\n\r\nexport const lowercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'lowercase', ...config });\r\n\r\nexport const titlecaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'titlecase', ...config });\r\n\r\nexport const firstLetterUppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'first-letter-uppercase', ...config });\r\n\r\nexport const phoneColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'phone', ...config });\r\n\r\nexport const emailColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'email', ...config });\r\n\r\nexport const userColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'user', ...config });\r\n\r\nexport const imageColumn = <T = any>(config: ImageListColumn<T>): ListColumn<T> => ({ type: 'image', ...config });\r\n\r\n\r\nexport const itemNameAndDescriptionColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  title: 'Nombre',\r\n  gridColumn: '1fr',\r\n  sort: { key: 'name' },\r\n  routerLinkValue: { url: (item: any) => `../detail/${item.id}` },\r\n  displayValueFn: (item: any) => item.name,\r\n  displayAdditionalValueFn: (item: any) => item.description,\r\n  ...config,\r\n});\r\nexport const itemStatusColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'cssClassDisplayValue' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'first-letter-uppercase',\r\n  title: 'Estado',\r\n  sort: { key: 'status' },\r\n  align: 'center',\r\n  displayValueFn: (item: any) => item.status,\r\n  cssClassDisplayValue: (item: any) => `status-chip ${item.status}`,\r\n  ...config,\r\n});\r\nexport const itemCreatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Creado',\r\n  sort: { key: 'created_at' },\r\n  displayValueFn: (item: any) => item.created_at,\r\n  ...config,\r\n});\r\nexport const itemUpdatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Actualizado',\r\n  sort: { key: 'updated_at' },\r\n  hidden: true,\r\n  displayValueFn: (item: any) => item.updated_at,\r\n  ...config,\r\n});\r\nexport const simpleListColumns = (): ListColumn<any>[] => ([\r\n  itemNameAndDescriptionColumn(),\r\n  itemUpdatedAtColumn(),\r\n  itemCreatedAtColumn(),\r\n  itemStatusColumn(),\r\n]);\r\n\r\n\r\nexport const defaultListFilterInputs = (): FormInput[] => [\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de creación',\r\n    formControlNameFrom: 'created_at_from',\r\n    formControlNameTo: 'created_at_to',\r\n  }),\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de actualización',\r\n    formControlNameFrom: 'updated_at_from',\r\n    formControlNameTo: 'updated_at_to',\r\n  }),\r\n  switchFormInput({\r\n    textLabel: 'Registros inactivos',\r\n    formControlName: 'inactive',\r\n  }),\r\n];\r\n\r\nexport const deleteItemActionButton = () => clickEventActionButton({\r\n  icon: 'delete',\r\n  text: 'Eliminar',\r\n  fn: async ({ id }, _, { deleteItemFn }) => deleteItemFn(id),\r\n  hidden: (item) => item.deleted_at,\r\n});\r\n\r\nexport const restoreItemActionButton = () => clickEventActionButton({\r\n  icon: 'restore',\r\n  text: 'Restaurar',\r\n  fn: async ({ id }, _, { restoreItemFn }) => restoreItemFn(id),\r\n  hidden: (item) => !item.deleted_at,\r\n})\r\n\r\nexport const viewItemActionButton = () => routerLinkActionButton({\r\n  icon: 'visibility',\r\n  text: 'Ver',\r\n  routerLink: { url: (item) => `../view/${item.id}` },\r\n});\r\n\r\nexport const editItemActionButton = () => routerLinkActionButton({\r\n  icon: 'edit',\r\n  text: 'Editar',\r\n  routerLink: { url: (item) => `../edit/${item.id}` },\r\n})\r\n\r\n@Component({\r\n  selector: 'app-item-list-template',\r\n  standalone: true,\r\n  templateUrl: './item-list-template.component.html',\r\n  styleUrl: './item-list-template.component.css',\r\n  imports: [\r\n    CommonModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatSortModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatTooltipModule,\r\n    MatPseudoCheckboxModule,\r\n    IndexListPipe,\r\n    GetKeyItemPipe,\r\n    RouterLink,\r\n    DiffDatePipe,\r\n    HiddenOptionButtonRowPipe,\r\n    NgOptimizedImage,\r\n    ScrollingModule,\r\n    GetUserByIdPipe,\r\n    PathFilesServerPipe,\r\n    ListFormatPipe,\r\n    LoadImagePrivateDirective,\r\n    FirstLetterUppercasePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n    ExecuteFunctionListPipe,\r\n    RenameTitleColumnListPipe,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    FirstLetterUppercasePipe,\r\n    GetKeyItemPipe,\r\n    RenameTitleColumnListPipe,\r\n    BrowserAnimationsModule,\r\n    DateFnsAdapter,\r\n  ],\r\n})\r\nexport class ItemListTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemListConfiguration;\r\n\r\n  // @ContentChild('headers') headers!: TemplateRef<any>;\r\n  @ContentChild('rowList') rowList!: TemplateRef<any>;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  @ViewChild('divListItems', { static: true }) private divList!: ElementRef;\r\n\r\n  private _dataTypeList: 'array' | 'paginator' = 'array';\r\n  private _keyForGetItems: string;\r\n  private _keyForGetTotalItems: string;\r\n\r\n  private fetch = inject(FetchService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  private renderer = inject(Renderer2);\r\n  private eventsService = inject(EventsService);\r\n  public location = inject(Location);\r\n\r\n  // private datePipe = inject(DatePipe);\r\n  public firstLetterUppercasePipe = inject(FirstLetterUppercasePipe);\r\n  public getKeyItemPipe = inject(GetKeyItemPipe);\r\n  public renameTitleColumnListPipe = inject(RenameTitleColumnListPipe);\r\n\r\n  public lengthData = computed(() => this.data().length)\r\n\r\n  public searchCtrl: FormControl = new FormControl('');\r\n  public formFilters: FormGroup<any> | null = null;\r\n\r\n  public loading = signal(true);\r\n  public font: WritableSignal<'small' | 'medium' | 'large'> = signal('medium');\r\n  public headerListStyle: WritableSignal<'simple' | 'color'> = signal('simple');\r\n\r\n  private abortController = new AbortController();\r\n\r\n  private unsubscribe$: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(DATA_TYPE_LIST) _dataTypeList: 'array' | 'paginator',\r\n    @Optional() @Inject(KEY_GET_ITEMS_PAGINATOR_LIST) _keyForGetItems: string,\r\n    @Optional() @Inject(KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST) _keyForGetTotalItems: string\r\n  ) {\r\n    this._dataTypeList = _dataTypeList ?? 'paginator';\r\n    this._keyForGetItems = _keyForGetItems || 'data';\r\n    this._keyForGetTotalItems = _keyForGetTotalItems || 'total';\r\n  }\r\n\r\n  get data(): WritableSignal<any[]> {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  get defaultOrder(): string {\r\n    return this.configuration.defaultOrder ? `${this.configuration.defaultOrder?.key}|${this.configuration.defaultOrder?.order}` : 'id|DESC';\r\n  }\r\n\r\n  get dataTypeList(): 'array' | 'paginator' {\r\n    return this.configuration.dataType ?? this._dataTypeList;\r\n  }\r\n\r\n  get keyForGetItems(): string {\r\n    return this.configuration.keyGetItemsPaginator ?? this._keyForGetItems;\r\n  }\r\n\r\n  get keyForGetTotalItems(): string {\r\n    return this.configuration.keyGetTotalItemsPaginator ?? this._keyForGetTotalItems;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.configuration.data = signal([]);\r\n    this.configuration.updateListEvent = new EventEmitter();\r\n    if (this.configuration.rows?.options != false && !this.configuration.rows?.options?.length) {\r\n      this.configuration.rows = {\r\n        ...(this.configuration.rows ?? {}),\r\n        options: [\r\n          viewItemActionButton(),\r\n          editItemActionButton(),\r\n          deleteItemActionButton(),\r\n          restoreItemActionButton(),\r\n        ]\r\n      };\r\n    }\r\n    this.generateFormControlsFromFilterInputs();\r\n    this.generateColumnsCss();\r\n\r\n    this.eventsService\r\n      .eventsFiltered<EventGlobalSearch>([NAME_EVENT_GLOBAL_SEARCH])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(({ data }: any) => {\r\n        const type = data.type;\r\n        if (type == 'enter') this.searchCtrl.setValue(data.value);\r\n      })\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.paginator.pageIndex = 0;\r\n    this.paginator.pageSize = 20;\r\n\r\n    this.verifyQueryParams();\r\n\r\n    this.activatedRoute.queryParams.subscribe(() => this.callGetData());\r\n\r\n    this.sort.sortChange.subscribe(({ active, direction }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (this.defaultOrder == `${active}|${direction}` || !active || !direction) queryParams['order'] = null;\r\n      else queryParams['order'] = `${active}|${direction}`;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.searchCtrl.valueChanges.pipe(debounceTime(250)).subscribe((value: string) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (value) queryParams['search'] = value;\r\n      else queryParams['search'] = null;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.paginator.page.subscribe(({ pageIndex, pageSize }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (pageIndex == 0 || (queryParams['page'] ?? null) == pageIndex + 1) queryParams['page'] = null;\r\n      else queryParams['page'] = pageIndex + 1;\r\n      if (pageSize == 20 || (queryParams['per_page'] ?? null) == pageSize) queryParams['per_page'] = null;\r\n      else queryParams['per_page'] = pageSize;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.eventsService\r\n      .eventsFiltered([\r\n        `${this.configuration.server.url}_created`,\r\n        `${this.configuration.server.url}_updated`\r\n      ])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(() => this.callGetData());\r\n\r\n    // this.configuration.updateListEvent!.subscribe(() => this.callGetData({}));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n    if (this.abortController) this.abortController.abort();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private async generateColumnsCss(): Promise<void> {\r\n    const grid_cols: string[] = [];\r\n    const grid_areas: string[] = []\r\n    if (this.configuration.rows?.selectable) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('selected');\r\n    }\r\n    if (this.configuration.rows?.index != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('index');\r\n    }\r\n    for await (const column of this.configuration.columns()) {\r\n      if (!column.hidden) {\r\n        grid_cols.push(column.gridColumn ?? 'auto');\r\n        grid_areas.push(this.renameTitleColumnListPipe.transform(column.title));\r\n      }\r\n    }\r\n    if (this.configuration.rows?.actions) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('actions');\r\n    }\r\n    if (this.configuration.rows?.options != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('options');\r\n    }\r\n    this.renderer.setStyle(this.divList.nativeElement, 'grid-template-columns', grid_cols.join(' '));\r\n    this.renderer.setStyle(this.divList.nativeElement, '--items-list-grid-template-areas', `\"${grid_areas.join(' ')}\"`, RendererStyleFlags2.DashCase);\r\n    grid_areas.forEach((area, index) => this.renderer.setStyle(this.divList.nativeElement, `--items-list-grid-area-${index + 1}`, area, RendererStyleFlags2.DashCase));\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private getQueryParams(): { [key: string]: any } {\r\n    return !this.configuration.disableFiltersInQueryParams ? JSON.parse(JSON.stringify(this.activatedRoute.snapshot.queryParams)) : {\r\n      ...this.formFilters?.value ?? {},\r\n      page: this.paginator.pageIndex + 1,\r\n      per_page: this.paginator.pageSize,\r\n      order: this.sort.active ? `${this.sort.active}|${this.sort.direction}` : null,\r\n      search: this.searchCtrl.value ? this.searchCtrl.value : null,\r\n    }\r\n  }\r\n\r\n  private navigateOrCallGetData(params: any): void {\r\n    if (this.configuration.disableFiltersInQueryParams) this.callGetData(params);\r\n    else this.router.navigate([], { queryParams: params });\r\n  }\r\n\r\n  private verifyQueryParams(): void {\r\n    const queryParams = {} as any;\r\n    const { page, per_page, order, search, ...filters } = queryParams;\r\n    this.paginator.pageIndex = Number(page ?? 1) - 1;\r\n    this.paginator.pageSize = Number(per_page) ?? 20;\r\n    this.sort.active = order?.split('|')[0] ?? '';\r\n    this.sort.direction = order?.split('|')[1] == 'asc' ? 'asc' : 'desc';\r\n    this.sort.sortChange.emit();\r\n    this.searchCtrl.setValue(search ?? null, { emitEvent: false });\r\n  }\r\n\r\n  public callGetData(queryParams: any = {}): void {\r\n    const params = objectToURLSearchParams(queryParams);\r\n    if (!params.has('page')) params.set('page', String(this.paginator.pageIndex + 1));\r\n    if (!params.has('per_page')) params.set('per_page', String(this.paginator.pageSize));\r\n    if (!params.has('order')) params.set('order', this.defaultOrder);\r\n    this.getData(params);\r\n  }\r\n\r\n  private async getData(searchParams: URLSearchParams = new URLSearchParams()): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const serverUrl = this.configuration.server.url;\r\n    let queryParams = this.configuration.server.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const url = `${serverUrl}?${searchParams.toString()}&${queryParams ?? ''}`;\r\n    const config = { signal: this.abortController.signal };\r\n    try {\r\n      let items = [];\r\n      let totalItems = 0;\r\n      if (this.dataTypeList == 'array') {\r\n        items = await this.fetch.get<any[]>(url, config);\r\n        totalItems = items.length;\r\n      } else {\r\n        const paginatorData = await this.fetch.get<PaginatorData<any>>(url, config);\r\n        items = this.getKeyItemPipe.transform(paginatorData, this.keyForGetItems);\r\n        totalItems = this.getKeyItemPipe.transform(paginatorData, this.keyForGetTotalItems);\r\n      }\r\n      const { parseDataFn } = this.configuration;\r\n      const parseData = await parseDataFn?.(items) ?? items;\r\n      this.paginator.length = totalItems;\r\n      this.data.set(parseData);\r\n      this.loading.set(false);\r\n      this.checkSelectedItems();\r\n    } catch (err: any) {\r\n      if (err.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n  }\r\n\r\n  public hiddenToggleColumn($event: MatCheckboxChange, index: number): void {\r\n    this.configuration.columns.update((columns) => {\r\n      columns[index]['hidden'] = !$event.checked\r\n      return columns;\r\n    })\r\n    this.generateColumnsCss();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public navigateCreateView(): void {\r\n    this.router.navigate(['../create'], { relativeTo: this.activatedRoute });\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public allSelectedItems = signal(false);\r\n  public someSelectedItems = signal(false);\r\n  public selectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__));\r\n  public lengthSelectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__).length);\r\n\r\n  public selectedItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.toSpliced(index, 1, { ...data[index], __selected__: status }));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public selectedAllItems(status: boolean): void {\r\n    this.data.update((data) => data.map((e) => ({ ...e, __selected__: status })));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public someSelected(): boolean {\r\n    return this.data().length > 0 && this.data().some((e: ListItemExtended) => e.__selected__) && !this.allSelectedItems();\r\n  }\r\n\r\n  private checkSelectedItems(): void {\r\n    this.allSelectedItems.set(this.data().length > 0 && this.data().every((e: ListItemExtended) => e.__selected__));\r\n    this.someSelectedItems.set(this.someSelected());\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private generateFormControlsFromFilterInputs(): void {\r\n    if (this.configuration.filters == false) return;\r\n    if (!this.configuration.filters?.length) this.configuration.filters = defaultListFilterInputs();\r\n    const formFilters = new FormGroup({});\r\n    this.configuration.filters?.forEach((filter) => {\r\n      if (filter.text) {\r\n        formFilters.setControl(filter.text.formControlName, new FormControl(filter.text.defaultValue));\r\n      } else if (filter.textarea) {\r\n        formFilters.setControl(filter.textarea.formControlName, new FormControl(filter.textarea.defaultValue));\r\n      } else if (filter.select) {\r\n        formFilters.setControl(filter.select.formControlName, new FormControl(filter.select.defaultValue));\r\n      } else if (filter.number) {\r\n        formFilters.setControl(filter.number.formControlName, new FormControl(filter.number.defaultValue));\r\n      } else if (filter.date) {\r\n        formFilters.setControl(filter.date.formControlName, new FormControl(filter.date.defaultValue));\r\n      } else if (filter.dateRange) {\r\n        formFilters.setControl(filter.dateRange.formControlNameFrom, new FormControl(filter.dateRange.defaultValueFrom));\r\n        formFilters.setControl(filter.dateRange.formControlNameTo, new FormControl(filter.dateRange.defaultValueTo));\r\n      } else if (filter.autocompleteLocal) {\r\n        formFilters.setControl(filter.autocompleteLocal.formControlName, new FormControl(filter.autocompleteLocal.defaultValue));\r\n      } else if (filter.autocompleteServer) {\r\n        formFilters.setControl(filter.autocompleteServer.formControlName, new FormControl(filter.autocompleteServer.defaultValue));\r\n      } else if (filter.checkbox) {\r\n        formFilters.setControl(filter.checkbox.formControlName, new FormControl(filter.checkbox.defaultValue));\r\n      } else if (filter.switch) {\r\n        formFilters.setControl(filter.switch.formControlName, new FormControl(filter.switch.defaultValue));\r\n      }\r\n    });\r\n    this.formFilters = formFilters;\r\n  }\r\n\r\n  public getControlFormFilter(name: string): FormControl {\r\n    return this.formFilters!.get(name) as FormControl;\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private updateLoadingStatusItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.map((item: ListItemExtended, i) => {\r\n      if (i == index) item.__loading_status__ = status;\r\n      return item;\r\n    }));\r\n  }\r\n\r\n  public deleteItem = async (id: number | string) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}`;\r\n    try {\r\n      await this.fetch.delete(url);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public restoreItem = async (id: string | number) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}/restore`;\r\n    const config = { afterAlert: { description: 'Restaurando ítem de la lista' } }\r\n    try {\r\n      await this.fetch.put(url, config);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public updateChangesItem = (index: number, item: any) => {\r\n    this.configuration.data!.update(items => items.toSpliced(index, 1, item));\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "displayValueFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 448
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "SimpleListColumn2"
            ]
        },
        {
            "name": "IEvent",
            "id": "interface-IEvent-28c3bbbafaa93b7093bdecfb202397a849588bdfa34c14ace3ed824b53b6284350ba15cbfbd5eb96a6b472f0ac56b95f40f4aef23ce5f250f662f78d70297e2b",
            "file": "src/app/core/services/events.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, Subject, filter } from 'rxjs';\r\n\r\ninterface IEvent<T = any> {\r\n    name: string;\r\n    data: T;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class EventsService {\r\n\r\n    private event$: Subject<IEvent> = new Subject<IEvent>();\r\n\r\n    constructor() { }\r\n\r\n    public eventsFiltered<T = any>(nameEvents: string[]): Observable<IEvent<T>> {\r\n        return this.event$.asObservable().pipe(filter(event => nameEvents.some((name) => name == event.name)));\r\n    }\r\n\r\n    get getEventObservable(): Observable<IEvent> {\r\n        return this.event$.asObservable();\r\n    }\r\n\r\n    public emitEvent<T = any>(nameEvent: string, data: T): void {\r\n        return this.event$.next({ name: nameEvent, data });\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ImageListColumn",
            "id": "interface-ImageListColumn-edc9a2c085d669b062640c6d2a97876fe56bb34f5ae23612a12a67b2af6f44bb5d3316d9f28e50d8c8d522c0e6ce8fc3245f639ec16593bc1c325c3c460a4296",
            "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule, DatePipe, Location, NgOptimizedImage } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, ViewChild, Input, ContentChild, TemplateRef, ElementRef, Renderer2, ViewEncapsulation, signal, WritableSignal, computed, inject, Inject, Optional, InjectionToken, EventEmitter, RendererStyleFlags2 } from '@angular/core';\r\nimport { MatCheckboxChange, MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSort, MatSortModule } from '@angular/material/sort';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from 'src/app/shared/utilities/queryParams';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { IndexListPipe } from '@pipe/index-list.pipe';\r\nimport { SpinnerDefaultComponent } from '@component/spinner-default/spinner-default.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { debounceTime } from 'rxjs';\r\nimport { DiffDatePipe } from '@pipe/diff-date.pipe';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { HiddenOptionButtonRowPipe } from '@pipe/hidden-option-button-row.pipe';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { GetUserByIdPipe } from '@pipe/get-user-by-id.pipe';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ListFormatPipe } from '@pipe/list-format.pipe';\r\nimport { LoadImagePrivateDirective } from '@directive/load-image-private.directive';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MatPseudoCheckboxModule } from '@angular/material/core';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { EventGlobalSearch, NAME_EVENT_GLOBAL_SEARCH } from 'src/app/sidenav/sidenav/sidenav.component';\r\nimport { ExecuteFunctionListPipe } from './execute-function-list.pipe';\r\nimport { FormInput, dateRangeFormInput, switchFormInput } from '@component/item-form-template/item-form-template.component';\r\nimport { RenameTitleColumnListPipe } from './rename-title-column-list.pipe';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DateFnsAdapter } from '@angular/material-date-fns-adapter';\r\nimport { MyDateAdapter } from '@utility/myDateAdapter';\r\nimport { MY_DATE_FORMATS } from '@utility/myDateFormat';\r\n\r\nexport const DATA_TYPE_LIST = new InjectionToken<'array' | 'paginator'>('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST');\r\n\r\nexport interface ItemListConfiguration<T = any> {\r\n  readonly dataType?: 'array' | 'paginator';\r\n  readonly keyGetItemsPaginator?: string;\r\n  readonly keyGetTotalItemsPaginator?: string;\r\n\r\n  readonly disableFiltersInQueryParams?: boolean;\r\n\r\n  title: string | null;\r\n\r\n  parseDataFn?: (data: T[]) => T[] | Promise<T[]>;\r\n  data?: WritableSignal<T[]>;\r\n  updateListEvent?: EventEmitter<void>;\r\n\r\n  defaultOrder?: {\r\n    key: string,\r\n    order: 'ASC' | 'DESC'\r\n  };\r\n\r\n  backButton?: boolean;\r\n\r\n  updateButton?: boolean;\r\n\r\n  server: {\r\n    readonly url: string,\r\n    queryParams?: { [key: string]: any } | string;\r\n  }\r\n\r\n  createButton?: {\r\n    text?: string,\r\n    routerLink: RouterLinkCreateButton\r\n  } | false;\r\n\r\n  filters?: FormInput[] | false;\r\n\r\n  rows?: {\r\n    selectable?: {\r\n      actions: SelectableActionButton<T>[];\r\n    };\r\n    index?: false | ({ title: string });\r\n    cssClass?: string | ((item: T) => string);\r\n    actions?: ActionButton<T>[];\r\n    options?: ActionButton<T>[] | false;\r\n  },\r\n\r\n  columns: WritableSignal<ListColumn<T>[]>;\r\n}\r\n\r\nexport interface RouterLinkCreateButton {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any;\r\n}\r\nexport interface RouterLinkItem<T> {\r\n  url: ((item: T, index: number) => string) | string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: ((item: T, index: number) => (string | { [key: string]: any } | any[] | number | null)) | string | { [key: string]: any } | any[] | number | null;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\ndeclare type ActionButtonActionsType = 'clickEvent' | 'routerLink';\r\ninterface ActionButton<T> {\r\n  type: 'clickEvent' | 'routerLink';\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((item: T, index: number) => boolean);\r\n  disabled?: boolean | ((item: T, index: number) => boolean);\r\n  cssClass?: string | ((item: T, index: number) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((item: T, index: number) => ({ [key: string]: any }));\r\n  fn?: (item: T, index: number, fns: {\r\n    deleteItemFn: (id: number | string) => Promise<void>,\r\n    restoreItemFn: (id: number | string) => Promise<void>,\r\n    updateChangesItemFn: (index: number, item: T) => void,\r\n  }) => void;\r\n  routerLink?: RouterLinkItem<T>;\r\n}\r\ninterface ClickEventActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'fn'>> & ActionButton<T>, 'type' | 'routerLink'> { }\r\nexport const clickEventActionButton = <T = any>(config: ClickEventActionButton<T>): ActionButton<T> => ({ type: 'clickEvent', ...config });\r\ninterface RouterLinkActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'routerLink'>> & ActionButton<T>, 'type' | 'clickEvent'> { }\r\nexport const routerLinkActionButton = <T = any>(config: RouterLinkActionButton<T>): ActionButton<T> => ({ type: 'routerLink', ...config });\r\ninterface SelectableActionButton<T> {\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((selectedItems: T[]) => boolean);\r\n  disabled?: boolean | ((selectedItems: T[]) => boolean);\r\n  cssClass?: string | ((selectedItems: T[]) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((selectedItems: T[]) => ({ [key: string]: any }));\r\n  fn: (selectedItems: T[]) => void;\r\n}\r\nexport const selectableActionButton = <T = any>(config: SelectableActionButton<T>): SelectableActionButton<T> => ({ ...config });\r\n\r\nexport interface ListItemExtended {\r\n  __selected__?: boolean;\r\n  __loading_status__?: boolean;\r\n}\r\n\r\nexport type TypeValueKeyItem = 'text' | 'diff-date' | 'date' | 'number' | 'email' | 'phone' | 'user' | 'uppercase' | 'lowercase' | 'titlecase' | 'first-letter-uppercase' | 'list-format' | 'currency';\r\n\r\nexport interface ListColumn<T> {\r\n  /**\r\n   * @description\r\n   * Agrega clases css al contenedor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   */\r\n  align?: 'left' | 'center' | 'right';\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor adicional de la celda de la columna\r\n   * @example\r\n   * clickEventAdditionalValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventAdditionalValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor de la celda de la columna\r\n   * @example\r\n   * clickEventValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css a la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClass: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClass?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor adicional de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayAdditionalValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo fecha (type: 'date')\r\n   * @example\r\n   * ...\r\n   * dateFormat: 'yyyy-MM-dd'\r\n   * ...\r\n   * dateFormat: 'dd/MM/yyyy' // Por defecto\r\n   * ...\r\n   */\r\n  dateFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor adicional a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.name\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayAdditionalValueFn?: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayValueFn: (item) => item.name\r\n   * ...\r\n   * displayValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * If you want to display a value in the column that is not in the item, you can use this function\r\n   * @example\r\n   * ...\r\n   * gridColumn: '1fr'\r\n   * ...\r\n   * gridColumn: '200px'\r\n   * ...\r\n   * gridColumn: 'max-content'\r\n   * ...\r\n   * gridColumn: 'fit-content(200px)'\r\n   * ...\r\n   */\r\n  gridColumn?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones > Columnas\r\n   * @example\r\n   * ...\r\n   * hidden: true\r\n   * ...\r\n   * hidden: false // Por defecto\r\n   * ...\r\n   */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo número (type: 'number')\r\n   * @example\r\n   * ...\r\n   * numberFormat: '2.2-2'\r\n   * ...\r\n   * numberFormat: '0.2-2' // Por defecto\r\n   * ...\r\n   */\r\n  numberFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor adicional de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkAdditionalValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Sortable column espicif key in object configuration\r\n   * @example\r\n   * sort: { key: 'name' }\r\n   */\r\n  sort?: { key: string };\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display additional value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: { color: 'green' }\r\n   * ...\r\n   * @param item\r\n   * @returns string | number | null | undefined | string[] | number[]\r\n   */\r\n  cssStyleDisplayAdditionalValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayValue: { color: 'green' }\r\n   * ...\r\n   */\r\n  cssStyleDisplayValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Title column\r\n   * @example\r\n   * title: 'Nombre'\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * @description\r\n   * To display a tooltip in the column on hover\r\n   * @example\r\n   * tooltip: 'Ver detalle'\r\n   */\r\n  tooltip?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * For show type value in cell\r\n   * @example\r\n   * ...\r\n   * type: 'number',\r\n   * displayValueFn: (item) => item.price, // output: 2,000.00\r\n   * ...\r\n   * type: 'date',\r\n   * displayValueFn: (item) => item.created_at, // output 12/12/2020\r\n   * ...\r\n   */\r\n  type?: TypeValueKeyItem | 'image' | 'html';\r\n\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface SimpleListColumn<T> extends Omit<ListColumn<T>, 'type' | 'displayAdditionalValueFn' | 'displayValueFn' | 'dateFormat' | 'numberFormat' | 'image'> { }\r\ninterface SimpleListColumn2<T> extends Omit<SimpleListColumn<T>, 'cssStyleDisplayAdditionalValue' | 'routerLinkAdditionalValue' | 'cssClassDisplayAdditionalValue' | 'clickEventAdditionalValue'> { }\r\ninterface ListFormatListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string[];\r\n  displayValueFn: (item: T, index: number) => string[];\r\n}\r\n\r\ninterface NumberListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => number | null | undefined;\r\n  numberFormat?: string;\r\n}\r\n\r\ninterface StringListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => string | number | null | undefined;\r\n}\r\n\r\ninterface DateListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined;\r\n  dateFormat?: string;\r\n}\r\n\r\ninterface ImageListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface HtmlListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n}\r\n\r\nexport const numberColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'number', ...config });\r\n\r\nexport const listFormatColumn = <T = any>(config: ListFormatListColumn<T>): ListColumn<T> => ({ type: 'list-format', ...config });\r\n\r\nexport const dateColumn = <T = any>(config: DateListColumn<T>): ListColumn<T> => ({ type: 'date', ...config });\r\n\r\nexport const diffDateColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'diff-date', ...config });\r\n\r\nexport const htmlColumn = <T = any>(config: HtmlListColumn<T>): ListColumn<T> => ({ type: 'html', ...config });\r\n\r\nexport const textColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'text', ...config });\r\n\r\nexport const uppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'uppercase', ...config });\r\n\r\nexport const lowercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'lowercase', ...config });\r\n\r\nexport const titlecaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'titlecase', ...config });\r\n\r\nexport const firstLetterUppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'first-letter-uppercase', ...config });\r\n\r\nexport const phoneColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'phone', ...config });\r\n\r\nexport const emailColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'email', ...config });\r\n\r\nexport const userColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'user', ...config });\r\n\r\nexport const imageColumn = <T = any>(config: ImageListColumn<T>): ListColumn<T> => ({ type: 'image', ...config });\r\n\r\n\r\nexport const itemNameAndDescriptionColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  title: 'Nombre',\r\n  gridColumn: '1fr',\r\n  sort: { key: 'name' },\r\n  routerLinkValue: { url: (item: any) => `../detail/${item.id}` },\r\n  displayValueFn: (item: any) => item.name,\r\n  displayAdditionalValueFn: (item: any) => item.description,\r\n  ...config,\r\n});\r\nexport const itemStatusColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'cssClassDisplayValue' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'first-letter-uppercase',\r\n  title: 'Estado',\r\n  sort: { key: 'status' },\r\n  align: 'center',\r\n  displayValueFn: (item: any) => item.status,\r\n  cssClassDisplayValue: (item: any) => `status-chip ${item.status}`,\r\n  ...config,\r\n});\r\nexport const itemCreatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Creado',\r\n  sort: { key: 'created_at' },\r\n  displayValueFn: (item: any) => item.created_at,\r\n  ...config,\r\n});\r\nexport const itemUpdatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Actualizado',\r\n  sort: { key: 'updated_at' },\r\n  hidden: true,\r\n  displayValueFn: (item: any) => item.updated_at,\r\n  ...config,\r\n});\r\nexport const simpleListColumns = (): ListColumn<any>[] => ([\r\n  itemNameAndDescriptionColumn(),\r\n  itemUpdatedAtColumn(),\r\n  itemCreatedAtColumn(),\r\n  itemStatusColumn(),\r\n]);\r\n\r\n\r\nexport const defaultListFilterInputs = (): FormInput[] => [\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de creación',\r\n    formControlNameFrom: 'created_at_from',\r\n    formControlNameTo: 'created_at_to',\r\n  }),\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de actualización',\r\n    formControlNameFrom: 'updated_at_from',\r\n    formControlNameTo: 'updated_at_to',\r\n  }),\r\n  switchFormInput({\r\n    textLabel: 'Registros inactivos',\r\n    formControlName: 'inactive',\r\n  }),\r\n];\r\n\r\nexport const deleteItemActionButton = () => clickEventActionButton({\r\n  icon: 'delete',\r\n  text: 'Eliminar',\r\n  fn: async ({ id }, _, { deleteItemFn }) => deleteItemFn(id),\r\n  hidden: (item) => item.deleted_at,\r\n});\r\n\r\nexport const restoreItemActionButton = () => clickEventActionButton({\r\n  icon: 'restore',\r\n  text: 'Restaurar',\r\n  fn: async ({ id }, _, { restoreItemFn }) => restoreItemFn(id),\r\n  hidden: (item) => !item.deleted_at,\r\n})\r\n\r\nexport const viewItemActionButton = () => routerLinkActionButton({\r\n  icon: 'visibility',\r\n  text: 'Ver',\r\n  routerLink: { url: (item) => `../view/${item.id}` },\r\n});\r\n\r\nexport const editItemActionButton = () => routerLinkActionButton({\r\n  icon: 'edit',\r\n  text: 'Editar',\r\n  routerLink: { url: (item) => `../edit/${item.id}` },\r\n})\r\n\r\n@Component({\r\n  selector: 'app-item-list-template',\r\n  standalone: true,\r\n  templateUrl: './item-list-template.component.html',\r\n  styleUrl: './item-list-template.component.css',\r\n  imports: [\r\n    CommonModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatSortModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatTooltipModule,\r\n    MatPseudoCheckboxModule,\r\n    IndexListPipe,\r\n    GetKeyItemPipe,\r\n    RouterLink,\r\n    DiffDatePipe,\r\n    HiddenOptionButtonRowPipe,\r\n    NgOptimizedImage,\r\n    ScrollingModule,\r\n    GetUserByIdPipe,\r\n    PathFilesServerPipe,\r\n    ListFormatPipe,\r\n    LoadImagePrivateDirective,\r\n    FirstLetterUppercasePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n    ExecuteFunctionListPipe,\r\n    RenameTitleColumnListPipe,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    FirstLetterUppercasePipe,\r\n    GetKeyItemPipe,\r\n    RenameTitleColumnListPipe,\r\n    BrowserAnimationsModule,\r\n    DateFnsAdapter,\r\n  ],\r\n})\r\nexport class ItemListTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemListConfiguration;\r\n\r\n  // @ContentChild('headers') headers!: TemplateRef<any>;\r\n  @ContentChild('rowList') rowList!: TemplateRef<any>;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  @ViewChild('divListItems', { static: true }) private divList!: ElementRef;\r\n\r\n  private _dataTypeList: 'array' | 'paginator' = 'array';\r\n  private _keyForGetItems: string;\r\n  private _keyForGetTotalItems: string;\r\n\r\n  private fetch = inject(FetchService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  private renderer = inject(Renderer2);\r\n  private eventsService = inject(EventsService);\r\n  public location = inject(Location);\r\n\r\n  // private datePipe = inject(DatePipe);\r\n  public firstLetterUppercasePipe = inject(FirstLetterUppercasePipe);\r\n  public getKeyItemPipe = inject(GetKeyItemPipe);\r\n  public renameTitleColumnListPipe = inject(RenameTitleColumnListPipe);\r\n\r\n  public lengthData = computed(() => this.data().length)\r\n\r\n  public searchCtrl: FormControl = new FormControl('');\r\n  public formFilters: FormGroup<any> | null = null;\r\n\r\n  public loading = signal(true);\r\n  public font: WritableSignal<'small' | 'medium' | 'large'> = signal('medium');\r\n  public headerListStyle: WritableSignal<'simple' | 'color'> = signal('simple');\r\n\r\n  private abortController = new AbortController();\r\n\r\n  private unsubscribe$: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(DATA_TYPE_LIST) _dataTypeList: 'array' | 'paginator',\r\n    @Optional() @Inject(KEY_GET_ITEMS_PAGINATOR_LIST) _keyForGetItems: string,\r\n    @Optional() @Inject(KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST) _keyForGetTotalItems: string\r\n  ) {\r\n    this._dataTypeList = _dataTypeList ?? 'paginator';\r\n    this._keyForGetItems = _keyForGetItems || 'data';\r\n    this._keyForGetTotalItems = _keyForGetTotalItems || 'total';\r\n  }\r\n\r\n  get data(): WritableSignal<any[]> {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  get defaultOrder(): string {\r\n    return this.configuration.defaultOrder ? `${this.configuration.defaultOrder?.key}|${this.configuration.defaultOrder?.order}` : 'id|DESC';\r\n  }\r\n\r\n  get dataTypeList(): 'array' | 'paginator' {\r\n    return this.configuration.dataType ?? this._dataTypeList;\r\n  }\r\n\r\n  get keyForGetItems(): string {\r\n    return this.configuration.keyGetItemsPaginator ?? this._keyForGetItems;\r\n  }\r\n\r\n  get keyForGetTotalItems(): string {\r\n    return this.configuration.keyGetTotalItemsPaginator ?? this._keyForGetTotalItems;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.configuration.data = signal([]);\r\n    this.configuration.updateListEvent = new EventEmitter();\r\n    if (this.configuration.rows?.options != false && !this.configuration.rows?.options?.length) {\r\n      this.configuration.rows = {\r\n        ...(this.configuration.rows ?? {}),\r\n        options: [\r\n          viewItemActionButton(),\r\n          editItemActionButton(),\r\n          deleteItemActionButton(),\r\n          restoreItemActionButton(),\r\n        ]\r\n      };\r\n    }\r\n    this.generateFormControlsFromFilterInputs();\r\n    this.generateColumnsCss();\r\n\r\n    this.eventsService\r\n      .eventsFiltered<EventGlobalSearch>([NAME_EVENT_GLOBAL_SEARCH])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(({ data }: any) => {\r\n        const type = data.type;\r\n        if (type == 'enter') this.searchCtrl.setValue(data.value);\r\n      })\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.paginator.pageIndex = 0;\r\n    this.paginator.pageSize = 20;\r\n\r\n    this.verifyQueryParams();\r\n\r\n    this.activatedRoute.queryParams.subscribe(() => this.callGetData());\r\n\r\n    this.sort.sortChange.subscribe(({ active, direction }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (this.defaultOrder == `${active}|${direction}` || !active || !direction) queryParams['order'] = null;\r\n      else queryParams['order'] = `${active}|${direction}`;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.searchCtrl.valueChanges.pipe(debounceTime(250)).subscribe((value: string) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (value) queryParams['search'] = value;\r\n      else queryParams['search'] = null;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.paginator.page.subscribe(({ pageIndex, pageSize }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (pageIndex == 0 || (queryParams['page'] ?? null) == pageIndex + 1) queryParams['page'] = null;\r\n      else queryParams['page'] = pageIndex + 1;\r\n      if (pageSize == 20 || (queryParams['per_page'] ?? null) == pageSize) queryParams['per_page'] = null;\r\n      else queryParams['per_page'] = pageSize;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.eventsService\r\n      .eventsFiltered([\r\n        `${this.configuration.server.url}_created`,\r\n        `${this.configuration.server.url}_updated`\r\n      ])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(() => this.callGetData());\r\n\r\n    // this.configuration.updateListEvent!.subscribe(() => this.callGetData({}));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n    if (this.abortController) this.abortController.abort();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private async generateColumnsCss(): Promise<void> {\r\n    const grid_cols: string[] = [];\r\n    const grid_areas: string[] = []\r\n    if (this.configuration.rows?.selectable) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('selected');\r\n    }\r\n    if (this.configuration.rows?.index != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('index');\r\n    }\r\n    for await (const column of this.configuration.columns()) {\r\n      if (!column.hidden) {\r\n        grid_cols.push(column.gridColumn ?? 'auto');\r\n        grid_areas.push(this.renameTitleColumnListPipe.transform(column.title));\r\n      }\r\n    }\r\n    if (this.configuration.rows?.actions) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('actions');\r\n    }\r\n    if (this.configuration.rows?.options != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('options');\r\n    }\r\n    this.renderer.setStyle(this.divList.nativeElement, 'grid-template-columns', grid_cols.join(' '));\r\n    this.renderer.setStyle(this.divList.nativeElement, '--items-list-grid-template-areas', `\"${grid_areas.join(' ')}\"`, RendererStyleFlags2.DashCase);\r\n    grid_areas.forEach((area, index) => this.renderer.setStyle(this.divList.nativeElement, `--items-list-grid-area-${index + 1}`, area, RendererStyleFlags2.DashCase));\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private getQueryParams(): { [key: string]: any } {\r\n    return !this.configuration.disableFiltersInQueryParams ? JSON.parse(JSON.stringify(this.activatedRoute.snapshot.queryParams)) : {\r\n      ...this.formFilters?.value ?? {},\r\n      page: this.paginator.pageIndex + 1,\r\n      per_page: this.paginator.pageSize,\r\n      order: this.sort.active ? `${this.sort.active}|${this.sort.direction}` : null,\r\n      search: this.searchCtrl.value ? this.searchCtrl.value : null,\r\n    }\r\n  }\r\n\r\n  private navigateOrCallGetData(params: any): void {\r\n    if (this.configuration.disableFiltersInQueryParams) this.callGetData(params);\r\n    else this.router.navigate([], { queryParams: params });\r\n  }\r\n\r\n  private verifyQueryParams(): void {\r\n    const queryParams = {} as any;\r\n    const { page, per_page, order, search, ...filters } = queryParams;\r\n    this.paginator.pageIndex = Number(page ?? 1) - 1;\r\n    this.paginator.pageSize = Number(per_page) ?? 20;\r\n    this.sort.active = order?.split('|')[0] ?? '';\r\n    this.sort.direction = order?.split('|')[1] == 'asc' ? 'asc' : 'desc';\r\n    this.sort.sortChange.emit();\r\n    this.searchCtrl.setValue(search ?? null, { emitEvent: false });\r\n  }\r\n\r\n  public callGetData(queryParams: any = {}): void {\r\n    const params = objectToURLSearchParams(queryParams);\r\n    if (!params.has('page')) params.set('page', String(this.paginator.pageIndex + 1));\r\n    if (!params.has('per_page')) params.set('per_page', String(this.paginator.pageSize));\r\n    if (!params.has('order')) params.set('order', this.defaultOrder);\r\n    this.getData(params);\r\n  }\r\n\r\n  private async getData(searchParams: URLSearchParams = new URLSearchParams()): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const serverUrl = this.configuration.server.url;\r\n    let queryParams = this.configuration.server.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const url = `${serverUrl}?${searchParams.toString()}&${queryParams ?? ''}`;\r\n    const config = { signal: this.abortController.signal };\r\n    try {\r\n      let items = [];\r\n      let totalItems = 0;\r\n      if (this.dataTypeList == 'array') {\r\n        items = await this.fetch.get<any[]>(url, config);\r\n        totalItems = items.length;\r\n      } else {\r\n        const paginatorData = await this.fetch.get<PaginatorData<any>>(url, config);\r\n        items = this.getKeyItemPipe.transform(paginatorData, this.keyForGetItems);\r\n        totalItems = this.getKeyItemPipe.transform(paginatorData, this.keyForGetTotalItems);\r\n      }\r\n      const { parseDataFn } = this.configuration;\r\n      const parseData = await parseDataFn?.(items) ?? items;\r\n      this.paginator.length = totalItems;\r\n      this.data.set(parseData);\r\n      this.loading.set(false);\r\n      this.checkSelectedItems();\r\n    } catch (err: any) {\r\n      if (err.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n  }\r\n\r\n  public hiddenToggleColumn($event: MatCheckboxChange, index: number): void {\r\n    this.configuration.columns.update((columns) => {\r\n      columns[index]['hidden'] = !$event.checked\r\n      return columns;\r\n    })\r\n    this.generateColumnsCss();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public navigateCreateView(): void {\r\n    this.router.navigate(['../create'], { relativeTo: this.activatedRoute });\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public allSelectedItems = signal(false);\r\n  public someSelectedItems = signal(false);\r\n  public selectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__));\r\n  public lengthSelectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__).length);\r\n\r\n  public selectedItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.toSpliced(index, 1, { ...data[index], __selected__: status }));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public selectedAllItems(status: boolean): void {\r\n    this.data.update((data) => data.map((e) => ({ ...e, __selected__: status })));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public someSelected(): boolean {\r\n    return this.data().length > 0 && this.data().some((e: ListItemExtended) => e.__selected__) && !this.allSelectedItems();\r\n  }\r\n\r\n  private checkSelectedItems(): void {\r\n    this.allSelectedItems.set(this.data().length > 0 && this.data().every((e: ListItemExtended) => e.__selected__));\r\n    this.someSelectedItems.set(this.someSelected());\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private generateFormControlsFromFilterInputs(): void {\r\n    if (this.configuration.filters == false) return;\r\n    if (!this.configuration.filters?.length) this.configuration.filters = defaultListFilterInputs();\r\n    const formFilters = new FormGroup({});\r\n    this.configuration.filters?.forEach((filter) => {\r\n      if (filter.text) {\r\n        formFilters.setControl(filter.text.formControlName, new FormControl(filter.text.defaultValue));\r\n      } else if (filter.textarea) {\r\n        formFilters.setControl(filter.textarea.formControlName, new FormControl(filter.textarea.defaultValue));\r\n      } else if (filter.select) {\r\n        formFilters.setControl(filter.select.formControlName, new FormControl(filter.select.defaultValue));\r\n      } else if (filter.number) {\r\n        formFilters.setControl(filter.number.formControlName, new FormControl(filter.number.defaultValue));\r\n      } else if (filter.date) {\r\n        formFilters.setControl(filter.date.formControlName, new FormControl(filter.date.defaultValue));\r\n      } else if (filter.dateRange) {\r\n        formFilters.setControl(filter.dateRange.formControlNameFrom, new FormControl(filter.dateRange.defaultValueFrom));\r\n        formFilters.setControl(filter.dateRange.formControlNameTo, new FormControl(filter.dateRange.defaultValueTo));\r\n      } else if (filter.autocompleteLocal) {\r\n        formFilters.setControl(filter.autocompleteLocal.formControlName, new FormControl(filter.autocompleteLocal.defaultValue));\r\n      } else if (filter.autocompleteServer) {\r\n        formFilters.setControl(filter.autocompleteServer.formControlName, new FormControl(filter.autocompleteServer.defaultValue));\r\n      } else if (filter.checkbox) {\r\n        formFilters.setControl(filter.checkbox.formControlName, new FormControl(filter.checkbox.defaultValue));\r\n      } else if (filter.switch) {\r\n        formFilters.setControl(filter.switch.formControlName, new FormControl(filter.switch.defaultValue));\r\n      }\r\n    });\r\n    this.formFilters = formFilters;\r\n  }\r\n\r\n  public getControlFormFilter(name: string): FormControl {\r\n    return this.formFilters!.get(name) as FormControl;\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private updateLoadingStatusItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.map((item: ListItemExtended, i) => {\r\n      if (i == index) item.__loading_status__ = status;\r\n      return item;\r\n    }));\r\n  }\r\n\r\n  public deleteItem = async (id: number | string) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}`;\r\n    try {\r\n      await this.fetch.delete(url);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public restoreItem = async (id: string | number) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}/restore`;\r\n    const config = { afterAlert: { description: 'Restaurando ítem de la lista' } }\r\n    try {\r\n      await this.fetch.put(url, config);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public updateChangesItem = (index: number, item: any) => {\r\n    this.configuration.data!.update(items => items.toSpliced(index, 1, item));\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "displayValueFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 438
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 439
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "SimpleListColumn2"
            ]
        },
        {
            "name": "InputAutocompleteConfiguration",
            "id": "interface-InputAutocompleteConfiguration-bd14b6266fa4cf3ac6d1c8ba2983660e710be52a4a04554bf38570c6a3d8a191246f43a725132d4ede61012ec5736f74f6ee8c6537f174970a9ec098ba910dd0",
            "file": "src/app/shared/components/input-autocomplete-template/input-autocomplete-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NgStyle } from '@angular/common';\r\nimport { Component, ElementRef, Input, Renderer2, ViewChild, WritableSignal, inject, signal } from '@angular/core';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { RouterLink } from '@angular/router';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { DatabaseStorageService, NameModuleDatabase } from \"@service/database-storage.service\";\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { debounceTime, tap } from 'rxjs/operators';\r\n\r\nexport interface InputAutocompleteConfiguration<T = any> {\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  cssClassOption?: string | ((item: T) => string);\r\n  cssStyleOption?: ({ [key: string]: any }) | ((item: T) => ({ [key: string]: any }));\r\n  disableOptionFn?: (item: T) => boolean;\r\n  conditionFilterFn?: (item: T, value: string) => boolean;\r\n  displayValueFn?: (item: T) => string | number | { [key: string]: any };\r\n  displayTextFn?: (item: T) => string | number;\r\n  parseDataFn?: (data: T[]) => (T[] | Promise<T[]>);\r\n  data?: T[];\r\n  addButton?: RouterLinkInputAutocomplete;\r\n}\r\n\r\nexport interface InputAutocompleteServerConfiguration<T = any> extends InputAutocompleteConfiguration<T> {\r\n  server: {\r\n    url: string;\r\n    searchKey?: string;\r\n    queryParams?: string | { [key: string]: any };\r\n  }\r\n}\r\n\r\nexport interface InputAutocompleteLocalConfiguration<T = any> extends InputAutocompleteConfiguration<T> {\r\n  local: {\r\n    readonly nameModuleDatabase: NameModuleDatabase;\r\n  }\r\n}\r\n\r\nexport interface ButtonAddInputAutocomplete {\r\n  label?: string;\r\n  routerLink: string;\r\n  function?: () => void;\r\n  outlet: 'route-lateral' | 'principal';\r\n}\r\n\r\ninterface RouterLinkInputAutocomplete {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any\r\n}\r\n@Component({\r\n  selector: 'app-input-autocomplete-template',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    NgStyle,\r\n    MatFormFieldModule,\r\n    MatAutocompleteModule,\r\n    MatInputModule,\r\n    GetMixedValuePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    RouterLink,\r\n  ],\r\n  templateUrl: './input-autocomplete-template.component.html',\r\n  styleUrl: './input-autocomplete-template.component.scss'\r\n})\r\nexport class InputAutocompleteTemplateComponent {\r\n  @Input({ required: true }) configuration!: InputAutocompleteConfiguration | InputAutocompleteLocalConfiguration | InputAutocompleteServerConfiguration;\r\n  @Input({ required: true }) idControl!: FormControl;\r\n  @Input() autocompleteControl: FormControl = new FormControl();\r\n\r\n  @ViewChild('inputHtml', { static: true })\r\n  inputHtml!: ElementRef<HTMLInputElement>;\r\n\r\n  private databaseStorage = inject(DatabaseStorageService);\r\n  private fetch = inject(FetchService);\r\n  private renderer = inject(Renderer2);\r\n\r\n  public filterData: WritableSignal<any[]> = signal([]);\r\n  public loading: WritableSignal<boolean> = signal(false);\r\n  public init: WritableSignal<boolean> = signal(false);\r\n  private abortController = new AbortController();\r\n\r\n  get conditionFilterFn(): (item: any, value: string) => boolean {\r\n    return this.configuration.conditionFilterFn ?? ((item, value) => (item.name ?? '').trim().toLowerCase().includes(value.trim().toLowerCase()));\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if((this.configuration as InputAutocompleteLocalConfiguration).local) {\r\n      if(this.idControl.value) {\r\n        this.findLocalItem(this.idControl.value);\r\n      };\r\n    }\r\n    this.autocompleteControl.valueChanges.pipe(tap(() => this.loading.set(true)), debounceTime(250))\r\n      .subscribe((data: (string | { [key: string]: any })) => {\r\n        this.init.set(true);\r\n        if (data instanceof Object) {\r\n          const value = this.configuration.displayValueFn ? this.configuration.displayValueFn(data) : data['id'];\r\n          this.idControl.setValue(value, { emitEvent: false });\r\n          this.renderer.setAttribute(this.inputHtml.nativeElement, 'readonly', 'readonly');\r\n        } else if (data !== null && data !== undefined) {\r\n          if (this.idControl.value) this.idControl.setValue(null, { emitEvent: false });\r\n          if (this.configuration.data) this.getItemsFromData(data);\r\n          else if ((this.configuration as InputAutocompleteLocalConfiguration).local) this.getItemsLocal(data);\r\n          else if ((this.configuration as InputAutocompleteServerConfiguration).server) this.getItemsServer(data);\r\n        }\r\n      });\r\n  }\r\n\r\n  private async findLocalItem(value: number | string): Promise<void> {\r\n    const data = await this.databaseStorage.getData<any>((this.configuration as InputAutocompleteLocalConfiguration).local!.nameModuleDatabase);\r\n    const item = data.find((item) => {\r\n      const id = this.configuration.displayValueFn ? this.configuration.displayValueFn(data) : item['id']\r\n      return id == value\r\n    });\r\n    this.autocompleteControl.setValue(item);\r\n  }\r\n\r\n  private async getItemsFromData(value: string): Promise<void> {\r\n    let data = this.configuration.data!;\r\n    const { parseDataFn } = this.configuration;\r\n    if (parseDataFn) data = await parseDataFn(data);\r\n    this.filterData.set(data.filter((item) => this.conditionFilterFn(item, value)));\r\n    this.loading.set(false);\r\n  }\r\n\r\n  private async getItemsLocal(value: string): Promise<void> {\r\n    const { nameModuleDatabase } = (this.configuration as InputAutocompleteLocalConfiguration).local!;\r\n    let data = await this.databaseStorage.getData(nameModuleDatabase);\r\n    const { parseDataFn } = this.configuration;\r\n    if (parseDataFn) data = await parseDataFn(data);\r\n    this.filterData.set(data.filter((item) => this.conditionFilterFn(item, value)));\r\n    this.loading.set(false);\r\n  }\r\n\r\n  private async getItemsServer(value: string): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const { url, searchKey } = (this.configuration as InputAutocompleteServerConfiguration).server!;\r\n    let queryParams = (this.configuration as InputAutocompleteServerConfiguration).server!.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    try {\r\n      const endpoint = `${url}?${searchKey ?? 'search'}=${value}&${queryParams ? queryParams : ''}`;\r\n      const response = await this.fetch.get<PaginatorData<any> | any[]>(endpoint, { signal: this.abortController.signal });\r\n      let data = response instanceof Array ? response : response.data;\r\n      const { parseDataFn } = this.configuration;\r\n      if (parseDataFn) data = await parseDataFn(data);\r\n      this.filterData.set(data);\r\n      this.loading.set(false);\r\n    } catch (error: any) {\r\n      if (error.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n    this.loading.set(false);\r\n  }\r\n\r\n  public displayFn = (value: any) => {\r\n    return value instanceof Object ? value.name : ''\r\n  }\r\n\r\n  public clearInput() {\r\n    this.autocompleteControl.setValue(null);\r\n    this.idControl.setValue(null, { emitEvent: false });\r\n    this.renderer.removeAttribute(this.inputHtml.nativeElement, 'readonly');\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "addButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouterLinkInputAutocomplete",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "conditionFilterFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "cssClassOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "cssStyleOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | ",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "disableOptionFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "displayTextFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "displayValueFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "parseDataFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "textLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "InputAutocompleteLocalConfiguration",
            "id": "interface-InputAutocompleteLocalConfiguration-bd14b6266fa4cf3ac6d1c8ba2983660e710be52a4a04554bf38570c6a3d8a191246f43a725132d4ede61012ec5736f74f6ee8c6537f174970a9ec098ba910dd0",
            "file": "src/app/shared/components/input-autocomplete-template/input-autocomplete-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NgStyle } from '@angular/common';\r\nimport { Component, ElementRef, Input, Renderer2, ViewChild, WritableSignal, inject, signal } from '@angular/core';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { RouterLink } from '@angular/router';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { DatabaseStorageService, NameModuleDatabase } from \"@service/database-storage.service\";\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { debounceTime, tap } from 'rxjs/operators';\r\n\r\nexport interface InputAutocompleteConfiguration<T = any> {\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  cssClassOption?: string | ((item: T) => string);\r\n  cssStyleOption?: ({ [key: string]: any }) | ((item: T) => ({ [key: string]: any }));\r\n  disableOptionFn?: (item: T) => boolean;\r\n  conditionFilterFn?: (item: T, value: string) => boolean;\r\n  displayValueFn?: (item: T) => string | number | { [key: string]: any };\r\n  displayTextFn?: (item: T) => string | number;\r\n  parseDataFn?: (data: T[]) => (T[] | Promise<T[]>);\r\n  data?: T[];\r\n  addButton?: RouterLinkInputAutocomplete;\r\n}\r\n\r\nexport interface InputAutocompleteServerConfiguration<T = any> extends InputAutocompleteConfiguration<T> {\r\n  server: {\r\n    url: string;\r\n    searchKey?: string;\r\n    queryParams?: string | { [key: string]: any };\r\n  }\r\n}\r\n\r\nexport interface InputAutocompleteLocalConfiguration<T = any> extends InputAutocompleteConfiguration<T> {\r\n  local: {\r\n    readonly nameModuleDatabase: NameModuleDatabase;\r\n  }\r\n}\r\n\r\nexport interface ButtonAddInputAutocomplete {\r\n  label?: string;\r\n  routerLink: string;\r\n  function?: () => void;\r\n  outlet: 'route-lateral' | 'principal';\r\n}\r\n\r\ninterface RouterLinkInputAutocomplete {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any\r\n}\r\n@Component({\r\n  selector: 'app-input-autocomplete-template',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    NgStyle,\r\n    MatFormFieldModule,\r\n    MatAutocompleteModule,\r\n    MatInputModule,\r\n    GetMixedValuePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    RouterLink,\r\n  ],\r\n  templateUrl: './input-autocomplete-template.component.html',\r\n  styleUrl: './input-autocomplete-template.component.scss'\r\n})\r\nexport class InputAutocompleteTemplateComponent {\r\n  @Input({ required: true }) configuration!: InputAutocompleteConfiguration | InputAutocompleteLocalConfiguration | InputAutocompleteServerConfiguration;\r\n  @Input({ required: true }) idControl!: FormControl;\r\n  @Input() autocompleteControl: FormControl = new FormControl();\r\n\r\n  @ViewChild('inputHtml', { static: true })\r\n  inputHtml!: ElementRef<HTMLInputElement>;\r\n\r\n  private databaseStorage = inject(DatabaseStorageService);\r\n  private fetch = inject(FetchService);\r\n  private renderer = inject(Renderer2);\r\n\r\n  public filterData: WritableSignal<any[]> = signal([]);\r\n  public loading: WritableSignal<boolean> = signal(false);\r\n  public init: WritableSignal<boolean> = signal(false);\r\n  private abortController = new AbortController();\r\n\r\n  get conditionFilterFn(): (item: any, value: string) => boolean {\r\n    return this.configuration.conditionFilterFn ?? ((item, value) => (item.name ?? '').trim().toLowerCase().includes(value.trim().toLowerCase()));\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if((this.configuration as InputAutocompleteLocalConfiguration).local) {\r\n      if(this.idControl.value) {\r\n        this.findLocalItem(this.idControl.value);\r\n      };\r\n    }\r\n    this.autocompleteControl.valueChanges.pipe(tap(() => this.loading.set(true)), debounceTime(250))\r\n      .subscribe((data: (string | { [key: string]: any })) => {\r\n        this.init.set(true);\r\n        if (data instanceof Object) {\r\n          const value = this.configuration.displayValueFn ? this.configuration.displayValueFn(data) : data['id'];\r\n          this.idControl.setValue(value, { emitEvent: false });\r\n          this.renderer.setAttribute(this.inputHtml.nativeElement, 'readonly', 'readonly');\r\n        } else if (data !== null && data !== undefined) {\r\n          if (this.idControl.value) this.idControl.setValue(null, { emitEvent: false });\r\n          if (this.configuration.data) this.getItemsFromData(data);\r\n          else if ((this.configuration as InputAutocompleteLocalConfiguration).local) this.getItemsLocal(data);\r\n          else if ((this.configuration as InputAutocompleteServerConfiguration).server) this.getItemsServer(data);\r\n        }\r\n      });\r\n  }\r\n\r\n  private async findLocalItem(value: number | string): Promise<void> {\r\n    const data = await this.databaseStorage.getData<any>((this.configuration as InputAutocompleteLocalConfiguration).local!.nameModuleDatabase);\r\n    const item = data.find((item) => {\r\n      const id = this.configuration.displayValueFn ? this.configuration.displayValueFn(data) : item['id']\r\n      return id == value\r\n    });\r\n    this.autocompleteControl.setValue(item);\r\n  }\r\n\r\n  private async getItemsFromData(value: string): Promise<void> {\r\n    let data = this.configuration.data!;\r\n    const { parseDataFn } = this.configuration;\r\n    if (parseDataFn) data = await parseDataFn(data);\r\n    this.filterData.set(data.filter((item) => this.conditionFilterFn(item, value)));\r\n    this.loading.set(false);\r\n  }\r\n\r\n  private async getItemsLocal(value: string): Promise<void> {\r\n    const { nameModuleDatabase } = (this.configuration as InputAutocompleteLocalConfiguration).local!;\r\n    let data = await this.databaseStorage.getData(nameModuleDatabase);\r\n    const { parseDataFn } = this.configuration;\r\n    if (parseDataFn) data = await parseDataFn(data);\r\n    this.filterData.set(data.filter((item) => this.conditionFilterFn(item, value)));\r\n    this.loading.set(false);\r\n  }\r\n\r\n  private async getItemsServer(value: string): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const { url, searchKey } = (this.configuration as InputAutocompleteServerConfiguration).server!;\r\n    let queryParams = (this.configuration as InputAutocompleteServerConfiguration).server!.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    try {\r\n      const endpoint = `${url}?${searchKey ?? 'search'}=${value}&${queryParams ? queryParams : ''}`;\r\n      const response = await this.fetch.get<PaginatorData<any> | any[]>(endpoint, { signal: this.abortController.signal });\r\n      let data = response instanceof Array ? response : response.data;\r\n      const { parseDataFn } = this.configuration;\r\n      if (parseDataFn) data = await parseDataFn(data);\r\n      this.filterData.set(data);\r\n      this.loading.set(false);\r\n    } catch (error: any) {\r\n      if (error.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n    this.loading.set(false);\r\n  }\r\n\r\n  public displayFn = (value: any) => {\r\n    return value instanceof Object ? value.name : ''\r\n  }\r\n\r\n  public clearInput() {\r\n    this.autocompleteControl.setValue(null);\r\n    this.idControl.setValue(null, { emitEvent: false });\r\n    this.renderer.removeAttribute(this.inputHtml.nativeElement, 'readonly');\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "local",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "InputAutocompleteConfiguration"
            ]
        },
        {
            "name": "InputAutocompleteServerConfiguration",
            "id": "interface-InputAutocompleteServerConfiguration-bd14b6266fa4cf3ac6d1c8ba2983660e710be52a4a04554bf38570c6a3d8a191246f43a725132d4ede61012ec5736f74f6ee8c6537f174970a9ec098ba910dd0",
            "file": "src/app/shared/components/input-autocomplete-template/input-autocomplete-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NgStyle } from '@angular/common';\r\nimport { Component, ElementRef, Input, Renderer2, ViewChild, WritableSignal, inject, signal } from '@angular/core';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { RouterLink } from '@angular/router';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { DatabaseStorageService, NameModuleDatabase } from \"@service/database-storage.service\";\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { debounceTime, tap } from 'rxjs/operators';\r\n\r\nexport interface InputAutocompleteConfiguration<T = any> {\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  cssClassOption?: string | ((item: T) => string);\r\n  cssStyleOption?: ({ [key: string]: any }) | ((item: T) => ({ [key: string]: any }));\r\n  disableOptionFn?: (item: T) => boolean;\r\n  conditionFilterFn?: (item: T, value: string) => boolean;\r\n  displayValueFn?: (item: T) => string | number | { [key: string]: any };\r\n  displayTextFn?: (item: T) => string | number;\r\n  parseDataFn?: (data: T[]) => (T[] | Promise<T[]>);\r\n  data?: T[];\r\n  addButton?: RouterLinkInputAutocomplete;\r\n}\r\n\r\nexport interface InputAutocompleteServerConfiguration<T = any> extends InputAutocompleteConfiguration<T> {\r\n  server: {\r\n    url: string;\r\n    searchKey?: string;\r\n    queryParams?: string | { [key: string]: any };\r\n  }\r\n}\r\n\r\nexport interface InputAutocompleteLocalConfiguration<T = any> extends InputAutocompleteConfiguration<T> {\r\n  local: {\r\n    readonly nameModuleDatabase: NameModuleDatabase;\r\n  }\r\n}\r\n\r\nexport interface ButtonAddInputAutocomplete {\r\n  label?: string;\r\n  routerLink: string;\r\n  function?: () => void;\r\n  outlet: 'route-lateral' | 'principal';\r\n}\r\n\r\ninterface RouterLinkInputAutocomplete {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any\r\n}\r\n@Component({\r\n  selector: 'app-input-autocomplete-template',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    NgStyle,\r\n    MatFormFieldModule,\r\n    MatAutocompleteModule,\r\n    MatInputModule,\r\n    GetMixedValuePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    RouterLink,\r\n  ],\r\n  templateUrl: './input-autocomplete-template.component.html',\r\n  styleUrl: './input-autocomplete-template.component.scss'\r\n})\r\nexport class InputAutocompleteTemplateComponent {\r\n  @Input({ required: true }) configuration!: InputAutocompleteConfiguration | InputAutocompleteLocalConfiguration | InputAutocompleteServerConfiguration;\r\n  @Input({ required: true }) idControl!: FormControl;\r\n  @Input() autocompleteControl: FormControl = new FormControl();\r\n\r\n  @ViewChild('inputHtml', { static: true })\r\n  inputHtml!: ElementRef<HTMLInputElement>;\r\n\r\n  private databaseStorage = inject(DatabaseStorageService);\r\n  private fetch = inject(FetchService);\r\n  private renderer = inject(Renderer2);\r\n\r\n  public filterData: WritableSignal<any[]> = signal([]);\r\n  public loading: WritableSignal<boolean> = signal(false);\r\n  public init: WritableSignal<boolean> = signal(false);\r\n  private abortController = new AbortController();\r\n\r\n  get conditionFilterFn(): (item: any, value: string) => boolean {\r\n    return this.configuration.conditionFilterFn ?? ((item, value) => (item.name ?? '').trim().toLowerCase().includes(value.trim().toLowerCase()));\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if((this.configuration as InputAutocompleteLocalConfiguration).local) {\r\n      if(this.idControl.value) {\r\n        this.findLocalItem(this.idControl.value);\r\n      };\r\n    }\r\n    this.autocompleteControl.valueChanges.pipe(tap(() => this.loading.set(true)), debounceTime(250))\r\n      .subscribe((data: (string | { [key: string]: any })) => {\r\n        this.init.set(true);\r\n        if (data instanceof Object) {\r\n          const value = this.configuration.displayValueFn ? this.configuration.displayValueFn(data) : data['id'];\r\n          this.idControl.setValue(value, { emitEvent: false });\r\n          this.renderer.setAttribute(this.inputHtml.nativeElement, 'readonly', 'readonly');\r\n        } else if (data !== null && data !== undefined) {\r\n          if (this.idControl.value) this.idControl.setValue(null, { emitEvent: false });\r\n          if (this.configuration.data) this.getItemsFromData(data);\r\n          else if ((this.configuration as InputAutocompleteLocalConfiguration).local) this.getItemsLocal(data);\r\n          else if ((this.configuration as InputAutocompleteServerConfiguration).server) this.getItemsServer(data);\r\n        }\r\n      });\r\n  }\r\n\r\n  private async findLocalItem(value: number | string): Promise<void> {\r\n    const data = await this.databaseStorage.getData<any>((this.configuration as InputAutocompleteLocalConfiguration).local!.nameModuleDatabase);\r\n    const item = data.find((item) => {\r\n      const id = this.configuration.displayValueFn ? this.configuration.displayValueFn(data) : item['id']\r\n      return id == value\r\n    });\r\n    this.autocompleteControl.setValue(item);\r\n  }\r\n\r\n  private async getItemsFromData(value: string): Promise<void> {\r\n    let data = this.configuration.data!;\r\n    const { parseDataFn } = this.configuration;\r\n    if (parseDataFn) data = await parseDataFn(data);\r\n    this.filterData.set(data.filter((item) => this.conditionFilterFn(item, value)));\r\n    this.loading.set(false);\r\n  }\r\n\r\n  private async getItemsLocal(value: string): Promise<void> {\r\n    const { nameModuleDatabase } = (this.configuration as InputAutocompleteLocalConfiguration).local!;\r\n    let data = await this.databaseStorage.getData(nameModuleDatabase);\r\n    const { parseDataFn } = this.configuration;\r\n    if (parseDataFn) data = await parseDataFn(data);\r\n    this.filterData.set(data.filter((item) => this.conditionFilterFn(item, value)));\r\n    this.loading.set(false);\r\n  }\r\n\r\n  private async getItemsServer(value: string): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const { url, searchKey } = (this.configuration as InputAutocompleteServerConfiguration).server!;\r\n    let queryParams = (this.configuration as InputAutocompleteServerConfiguration).server!.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    try {\r\n      const endpoint = `${url}?${searchKey ?? 'search'}=${value}&${queryParams ? queryParams : ''}`;\r\n      const response = await this.fetch.get<PaginatorData<any> | any[]>(endpoint, { signal: this.abortController.signal });\r\n      let data = response instanceof Array ? response : response.data;\r\n      const { parseDataFn } = this.configuration;\r\n      if (parseDataFn) data = await parseDataFn(data);\r\n      this.filterData.set(data);\r\n      this.loading.set(false);\r\n    } catch (error: any) {\r\n      if (error.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n    this.loading.set(false);\r\n  }\r\n\r\n  public displayFn = (value: any) => {\r\n    return value instanceof Object ? value.name : ''\r\n  }\r\n\r\n  public clearInput() {\r\n    this.autocompleteControl.setValue(null);\r\n    this.idControl.setValue(null, { emitEvent: false });\r\n    this.renderer.removeAttribute(this.inputHtml.nativeElement, 'readonly');\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "server",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "InputAutocompleteConfiguration"
            ]
        },
        {
            "name": "InputFileConfiguration",
            "id": "interface-InputFileConfiguration-2043cc53712a3c8be485cd79c942df274bb88529007350d3405e84f64a783d8e651dac2cda30cd81f2adfbfdf72f7ae3aab5e375f1048b0eb9a07d0520bc7d13",
            "file": "src/app/shared/components/select-file/select-file.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nexport interface InputFileConfiguration {\r\n  /**\r\n   * property accept of input file\r\n   * @default '*'\r\n   * @example 'image/*' (For Images) | 'application/pdf' (For PDF) | 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' (For Word) | 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' (For Excel) | 'application/vnd.openxmlformats-officedocument.presentationml.presentation' (For Power Point) | 'text/plain' (For Text) | 'application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/vnd.ms-powerpoint, application/vnd.openxmlformats-officedocument.presentationml.presentation, text/plain, application/pdf, image/*'>\r\n   * @type {string}\r\n   */\r\n  acceptFiles?: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-select-file',\r\n  templateUrl: './select-file.component.html',\r\n  styleUrls: ['./select-file.component.scss'],\r\n  imports: [CommonModule],\r\n  standalone: true,\r\n})\r\nexport class SelectFileComponent {\r\n  @Input({ required: true }) fileCtrl!: FormControl;\r\n  @Input({ required: true }) configuration!: InputFileConfiguration;\r\n\r\n  public handleFileSelect($event: any) {\r\n    const fileList: FileList = ($event.target! as HTMLInputElement).files as FileList;\r\n    if (fileList.length) {\r\n      const file = fileList[0];\r\n      const extension_file = file.name.split('.').pop()!;\r\n      const name_file = file.name;\r\n      const size_file = file.size;\r\n      const type_file = file.type;\r\n      const reader: FileReader = new FileReader();\r\n      reader.onload = (eventReader) => {\r\n        const base_64 = btoa(eventReader.target!.result as string);\r\n        this.fileCtrl.setValue({\r\n          base_64,\r\n          extension_file,\r\n          name_file,\r\n          size_file,\r\n          type_file,\r\n        });\r\n      };\r\n      reader.readAsBinaryString(file);\r\n    } else {\r\n      this.fileCtrl.setValue(null);\r\n    }\r\n  }\r\n\r\n  get getImageFile(): string | null {\r\n    const fileValue = this.fileCtrl.value;\r\n    if(fileValue instanceof Object) {\r\n      const { extension_file, base_64, type_file } = fileValue!;\r\n      if (/(docx?)/.test(extension_file)) {\r\n        return '/assets/svg-icons/microsoft-word.svg';\r\n      } else if (/(xlsx?|csv)/.test(extension_file)) {\r\n        return '/assets/svg-icons/microsoft-excel.svg';\r\n      } else if (/(pptx?)/.test(extension_file)) {\r\n        return '/assets/svg-icons/microsoft-powerpoint.svg';\r\n      } else if (/(png|jpg|jpeg|webp|avif)/.test(extension_file)) {\r\n        return `data:${type_file};base64,${base_64}`;\r\n      } else if (/(pdf)/.test(extension_file)) {\r\n        return '/assets/svg-icons/pdf.png';\r\n      } else if (/(txt)/.test(extension_file)) {\r\n        return '/assets/svg-icons/document.svg';\r\n      }\r\n    } else if(fileValue) {\r\n      if(/(http(s?))/i.test(fileValue)) return fileValue;\r\n      else return environment.URL_FILES_SERVER + fileValue;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "acceptFiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>property accept of input file</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
                    "line": 13,
                    "rawdescription": "\n\nproperty accept of input file\n```html\n```",
                    "jsdoctags": [
                        {
                            "pos": 301,
                            "end": 320,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 302,
                                "end": 309,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;*&#39;</p>\n"
                        },
                        {
                            "pos": 320,
                            "end": 1013,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 321,
                                "end": 328,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>&#39;image/<em>&#39; (For Images) | &#39;application/pdf&#39; (For PDF) | &#39;application/vnd.openxmlformats-officedocument.wordprocessingml.document&#39; (For Word) | &#39;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#39; (For Excel) | &#39;application/vnd.openxmlformats-officedocument.presentationml.presentation&#39; (For Power Point) | &#39;text/plain&#39; (For Text) | &#39;application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/vnd.ms-powerpoint, application/vnd.openxmlformats-officedocument.presentationml.presentation, text/plain, application/pdf, image/</em>&#39;&gt;</p>\n"
                        },
                        {
                            "pos": 1013,
                            "end": 1032,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 351,
                            "tagName": {
                                "pos": 1014,
                                "end": 1018,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 1019,
                                "end": 1027,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 316,
                                "type": {
                                    "pos": 1020,
                                    "end": 1026,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 154
                                }
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "InputSelectConfiguration",
            "id": "interface-InputSelectConfiguration-a6a025df6f336f909585f40229d9e1c6d8fb29cebafc17fe57f9be8414f01bedfbd1cec507ce5f4b8d32c2bc5ac228dee7e31f3dc872472283335dffd7e59bf0",
            "file": "src/app/shared/components/input-select-template/input-select-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { DatabaseStorageService } from '@service/database-storage.service';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\n\r\nimport { NameModuleDatabase } from \"@service/database-storage.service\";\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { RouterLink } from '@angular/router';\r\nimport { NgStyle } from '@angular/common';\r\n\r\nexport interface InputSelectConfiguration<T = any> {\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  cssClassOption?: string | ((item: T) => string);\r\n  cssStyleOption?: ({ [key: string]: any }) | ((item: T) => ({ [key: string]: any }));\r\n  disableOptionFn?: (item: T) => boolean;\r\n  displayValueFn?: (item: T) => string | number | { [key: string]: any };\r\n  displayTextFn?: (item: T) => string | number;\r\n  parseDataFn?: (data: T[]) => (T[] | Promise<T[]>);\r\n  data?: T[];\r\n  addButton?: ButtonAddInputSelect;\r\n}\r\n\r\nexport interface InputSelectServerConfiguration<T = any> extends InputSelectConfiguration<T> {\r\n  server: {\r\n    url: string;\r\n    queryParams?: string | { [key: string]: any };\r\n  }\r\n}\r\n\r\nexport interface InputSelectLocalConfiguration<T = any> extends InputSelectConfiguration<T> {\r\n  local: {\r\n    nameModuleDatabase: NameModuleDatabase;\r\n  }\r\n}\r\n\r\ninterface ButtonAddInputSelect {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any\r\n}\r\n@Component({\r\n  selector: 'app-input-select-template',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    NgStyle,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    GetMixedValuePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    RouterLink,\r\n  ],\r\n  templateUrl: './input-select-template.component.html',\r\n  styleUrl: './input-select-template.component.scss'\r\n})\r\nexport class InputSelectTemplateComponent {\r\n  @Input({ required: true }) public configuration!: InputSelectServerConfiguration | InputSelectConfiguration | InputSelectLocalConfiguration;\r\n  @Input({ required: true }) public control!: FormControl;\r\n  private fetch = inject(FetchService);\r\n  private databaseStorage = inject(DatabaseStorageService);\r\n  private abortController = new AbortController();\r\n  public loading:WritableSignal<boolean> = signal(false);\r\n\r\n  ngOnInit(): void {\r\n    if (!this.configuration.data) {\r\n      this.configuration.data = [];\r\n      this.getData();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  get data() {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  private getData() {\r\n    if ((this.configuration as InputSelectServerConfiguration).server) {\r\n      this.getItemsServer();\r\n    } else if ((this.configuration as InputSelectLocalConfiguration).local) {\r\n      this.getItemsLocal();\r\n    }\r\n  }\r\n\r\n  private async getItemsServer(): Promise<void> {\r\n    const { url } = (this.configuration as InputSelectServerConfiguration).server!;\r\n    let queryParams = (this.configuration as InputSelectServerConfiguration).server!.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const endpoint = `${url}?${queryParams ? queryParams : ''}`;\r\n    const response = await this.fetch.get<PaginatorData<any> | any[]>(endpoint, { signal: this.abortController.signal });\r\n    const data = response instanceof Array ? response : response.data\r\n    const { parseDataFn } = this.configuration;\r\n    this.configuration.data = parseDataFn ? await parseDataFn(data) : data;\r\n  }\r\n\r\n  private async getItemsLocal(): Promise<void> {\r\n    const response = await this.databaseStorage.getData((this.configuration as InputSelectLocalConfiguration).local!.nameModuleDatabase);\r\n    const { parseDataFn } = this.configuration;\r\n    this.configuration.data = parseDataFn ? await parseDataFn(response) : response;\r\n  }\r\n  \r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "addButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonAddInputSelect",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "cssClassOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "cssStyleOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | ",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "disableOptionFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "displayTextFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "displayValueFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "parseDataFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "textLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "InputSelectLocalConfiguration",
            "id": "interface-InputSelectLocalConfiguration-a6a025df6f336f909585f40229d9e1c6d8fb29cebafc17fe57f9be8414f01bedfbd1cec507ce5f4b8d32c2bc5ac228dee7e31f3dc872472283335dffd7e59bf0",
            "file": "src/app/shared/components/input-select-template/input-select-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { DatabaseStorageService } from '@service/database-storage.service';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\n\r\nimport { NameModuleDatabase } from \"@service/database-storage.service\";\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { RouterLink } from '@angular/router';\r\nimport { NgStyle } from '@angular/common';\r\n\r\nexport interface InputSelectConfiguration<T = any> {\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  cssClassOption?: string | ((item: T) => string);\r\n  cssStyleOption?: ({ [key: string]: any }) | ((item: T) => ({ [key: string]: any }));\r\n  disableOptionFn?: (item: T) => boolean;\r\n  displayValueFn?: (item: T) => string | number | { [key: string]: any };\r\n  displayTextFn?: (item: T) => string | number;\r\n  parseDataFn?: (data: T[]) => (T[] | Promise<T[]>);\r\n  data?: T[];\r\n  addButton?: ButtonAddInputSelect;\r\n}\r\n\r\nexport interface InputSelectServerConfiguration<T = any> extends InputSelectConfiguration<T> {\r\n  server: {\r\n    url: string;\r\n    queryParams?: string | { [key: string]: any };\r\n  }\r\n}\r\n\r\nexport interface InputSelectLocalConfiguration<T = any> extends InputSelectConfiguration<T> {\r\n  local: {\r\n    nameModuleDatabase: NameModuleDatabase;\r\n  }\r\n}\r\n\r\ninterface ButtonAddInputSelect {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any\r\n}\r\n@Component({\r\n  selector: 'app-input-select-template',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    NgStyle,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    GetMixedValuePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    RouterLink,\r\n  ],\r\n  templateUrl: './input-select-template.component.html',\r\n  styleUrl: './input-select-template.component.scss'\r\n})\r\nexport class InputSelectTemplateComponent {\r\n  @Input({ required: true }) public configuration!: InputSelectServerConfiguration | InputSelectConfiguration | InputSelectLocalConfiguration;\r\n  @Input({ required: true }) public control!: FormControl;\r\n  private fetch = inject(FetchService);\r\n  private databaseStorage = inject(DatabaseStorageService);\r\n  private abortController = new AbortController();\r\n  public loading:WritableSignal<boolean> = signal(false);\r\n\r\n  ngOnInit(): void {\r\n    if (!this.configuration.data) {\r\n      this.configuration.data = [];\r\n      this.getData();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  get data() {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  private getData() {\r\n    if ((this.configuration as InputSelectServerConfiguration).server) {\r\n      this.getItemsServer();\r\n    } else if ((this.configuration as InputSelectLocalConfiguration).local) {\r\n      this.getItemsLocal();\r\n    }\r\n  }\r\n\r\n  private async getItemsServer(): Promise<void> {\r\n    const { url } = (this.configuration as InputSelectServerConfiguration).server!;\r\n    let queryParams = (this.configuration as InputSelectServerConfiguration).server!.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const endpoint = `${url}?${queryParams ? queryParams : ''}`;\r\n    const response = await this.fetch.get<PaginatorData<any> | any[]>(endpoint, { signal: this.abortController.signal });\r\n    const data = response instanceof Array ? response : response.data\r\n    const { parseDataFn } = this.configuration;\r\n    this.configuration.data = parseDataFn ? await parseDataFn(data) : data;\r\n  }\r\n\r\n  private async getItemsLocal(): Promise<void> {\r\n    const response = await this.databaseStorage.getData((this.configuration as InputSelectLocalConfiguration).local!.nameModuleDatabase);\r\n    const { parseDataFn } = this.configuration;\r\n    this.configuration.data = parseDataFn ? await parseDataFn(response) : response;\r\n  }\r\n  \r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "local",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "InputSelectConfiguration"
            ]
        },
        {
            "name": "InputSelectServerConfiguration",
            "id": "interface-InputSelectServerConfiguration-a6a025df6f336f909585f40229d9e1c6d8fb29cebafc17fe57f9be8414f01bedfbd1cec507ce5f4b8d32c2bc5ac228dee7e31f3dc872472283335dffd7e59bf0",
            "file": "src/app/shared/components/input-select-template/input-select-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { DatabaseStorageService } from '@service/database-storage.service';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\n\r\nimport { NameModuleDatabase } from \"@service/database-storage.service\";\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { RouterLink } from '@angular/router';\r\nimport { NgStyle } from '@angular/common';\r\n\r\nexport interface InputSelectConfiguration<T = any> {\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  cssClassOption?: string | ((item: T) => string);\r\n  cssStyleOption?: ({ [key: string]: any }) | ((item: T) => ({ [key: string]: any }));\r\n  disableOptionFn?: (item: T) => boolean;\r\n  displayValueFn?: (item: T) => string | number | { [key: string]: any };\r\n  displayTextFn?: (item: T) => string | number;\r\n  parseDataFn?: (data: T[]) => (T[] | Promise<T[]>);\r\n  data?: T[];\r\n  addButton?: ButtonAddInputSelect;\r\n}\r\n\r\nexport interface InputSelectServerConfiguration<T = any> extends InputSelectConfiguration<T> {\r\n  server: {\r\n    url: string;\r\n    queryParams?: string | { [key: string]: any };\r\n  }\r\n}\r\n\r\nexport interface InputSelectLocalConfiguration<T = any> extends InputSelectConfiguration<T> {\r\n  local: {\r\n    nameModuleDatabase: NameModuleDatabase;\r\n  }\r\n}\r\n\r\ninterface ButtonAddInputSelect {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any\r\n}\r\n@Component({\r\n  selector: 'app-input-select-template',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    NgStyle,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    GetMixedValuePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    RouterLink,\r\n  ],\r\n  templateUrl: './input-select-template.component.html',\r\n  styleUrl: './input-select-template.component.scss'\r\n})\r\nexport class InputSelectTemplateComponent {\r\n  @Input({ required: true }) public configuration!: InputSelectServerConfiguration | InputSelectConfiguration | InputSelectLocalConfiguration;\r\n  @Input({ required: true }) public control!: FormControl;\r\n  private fetch = inject(FetchService);\r\n  private databaseStorage = inject(DatabaseStorageService);\r\n  private abortController = new AbortController();\r\n  public loading:WritableSignal<boolean> = signal(false);\r\n\r\n  ngOnInit(): void {\r\n    if (!this.configuration.data) {\r\n      this.configuration.data = [];\r\n      this.getData();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  get data() {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  private getData() {\r\n    if ((this.configuration as InputSelectServerConfiguration).server) {\r\n      this.getItemsServer();\r\n    } else if ((this.configuration as InputSelectLocalConfiguration).local) {\r\n      this.getItemsLocal();\r\n    }\r\n  }\r\n\r\n  private async getItemsServer(): Promise<void> {\r\n    const { url } = (this.configuration as InputSelectServerConfiguration).server!;\r\n    let queryParams = (this.configuration as InputSelectServerConfiguration).server!.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const endpoint = `${url}?${queryParams ? queryParams : ''}`;\r\n    const response = await this.fetch.get<PaginatorData<any> | any[]>(endpoint, { signal: this.abortController.signal });\r\n    const data = response instanceof Array ? response : response.data\r\n    const { parseDataFn } = this.configuration;\r\n    this.configuration.data = parseDataFn ? await parseDataFn(data) : data;\r\n  }\r\n\r\n  private async getItemsLocal(): Promise<void> {\r\n    const response = await this.databaseStorage.getData((this.configuration as InputSelectLocalConfiguration).local!.nameModuleDatabase);\r\n    const { parseDataFn } = this.configuration;\r\n    this.configuration.data = parseDataFn ? await parseDataFn(response) : response;\r\n  }\r\n  \r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "server",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "InputSelectConfiguration"
            ]
        },
        {
            "name": "ItemDetail",
            "id": "interface-ItemDetail-75a719ba2c59e83e75c0e546e67e91ecd288a8eaae523955cca2535e665d2b945fef6327af9bd30cfdda606a531003ff10652cb2b8d6d62e22e9d189f1037fca",
            "file": "src/app/shared/interfaces/itemDetail.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TypeValueKeyItem } from \"@component/item-list-template/item-list-template.component\";\r\nimport { FetchErrorResponse } from \"./fetch\";\r\nimport { EventEmitter, TemplateRef, WritableSignal } from \"@angular/core\";\r\n\r\nexport interface ItemDetailConfiguration<T = any> {\r\n    title: string;\r\n\r\n    subtitle?: ((item: T) => string | number | null | undefined) | false;\r\n\r\n    itemId?: string;\r\n\r\n    server: {\r\n        url: string;\r\n        queryParams?: { [key: string]: any };\r\n    }\r\n\r\n    loading?: boolean;\r\n\r\n    groups: ItemDetailGroup<T>[];\r\n\r\n    dataItem?: WritableSignal<T | null>;\r\n\r\n    parseItemFn?: (item: T) => (T | Promise<T>);\r\n    afterSetItemFn?: (item: T) => void;\r\n    afterDeleteItemFn?: (item: T) => void;\r\n    afterRestoreItemFn?: (item: T) => void;\r\n\r\n    editButton?: {\r\n        text?: string;\r\n        routerLink?: RouterLinkItem<T>\r\n    } | false;\r\n\r\n    deleteButton?: boolean;\r\n    restoreButton?: boolean;\r\n    backButton?: boolean;\r\n\r\n    actionButtons?: ActionButton<T, ActionButtonType>[];\r\n\r\n    ignoreShowError?: boolean;\r\n    interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n    httpError?: FetchErrorResponse;\r\n\r\n    hiddeHeader?: boolean;\r\n\r\n    updateItemEvent?: EventEmitter<boolean>;\r\n}\r\n\r\nexport interface ItemDetailGroup<T> {\r\n    icon?: string,\r\n    title?: string,\r\n    details: ItemDetail<T>[]\r\n    template?: {\r\n        ref: TemplateRef<any>,\r\n        position?: 'before' | 'after',\r\n    },\r\n    actions?: ActionButton<T>[]\r\n}\r\n\r\nexport interface ItemDetail<T> {\r\n    clickEvent?: (item: T) => void;\r\n    cssClass?: ((item: T) => string) | string;\r\n    dateFormat?: string;\r\n    displayValueFn: (item: T) => string | number | null | undefined | string[];\r\n    key?: string;\r\n    title: string;\r\n    numberFormat?: string;\r\n    routerLink?: RouterLinkItem<T>\r\n    tooltip?: ((item: T) => string) | string;\r\n    type?: TypeValueKeyItem | 'image' | 'image-server' | 'private-image-server' | 'html';\r\n}\r\n\r\nexport interface ActionButton<T, Type = 'clickEvent'> {\r\n    id: number | string;\r\n    type?: Type;\r\n    style: StyleButton;\r\n    icon?: string;\r\n    text?: string;\r\n    title?: string;\r\n    clickEvent: (item: T) => void;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\nexport type ActionButtonType = 'clickEvent' | 'update' | 'delete' | 'restore';\r\n\r\nexport interface RouterLinkItem<T> {\r\n    url: ((item: T) => string) | string;\r\n    outlet?: 'route-lateral' | 'principal';\r\n    queryParams?: { [key: string]: any },\r\n    state?: ((item: T) => (string | {[key: string]: any} | any[] | number | null)) | string | {[key: string]: any} | any[] | number | null;\r\n}\r\n",
            "properties": [
                {
                    "name": "clickEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "cssClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | string",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "dateFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "displayValueFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "numberFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "routerLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouterLinkItem<T>",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | string",
                    "optional": true,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeValueKeyItem | \"image\" | \"image-server\" | \"private-image-server\" | \"html\"",
                    "optional": true,
                    "description": "",
                    "line": 69
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ItemDetailConfiguration",
            "id": "interface-ItemDetailConfiguration-75a719ba2c59e83e75c0e546e67e91ecd288a8eaae523955cca2535e665d2b945fef6327af9bd30cfdda606a531003ff10652cb2b8d6d62e22e9d189f1037fca",
            "file": "src/app/shared/interfaces/itemDetail.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TypeValueKeyItem } from \"@component/item-list-template/item-list-template.component\";\r\nimport { FetchErrorResponse } from \"./fetch\";\r\nimport { EventEmitter, TemplateRef, WritableSignal } from \"@angular/core\";\r\n\r\nexport interface ItemDetailConfiguration<T = any> {\r\n    title: string;\r\n\r\n    subtitle?: ((item: T) => string | number | null | undefined) | false;\r\n\r\n    itemId?: string;\r\n\r\n    server: {\r\n        url: string;\r\n        queryParams?: { [key: string]: any };\r\n    }\r\n\r\n    loading?: boolean;\r\n\r\n    groups: ItemDetailGroup<T>[];\r\n\r\n    dataItem?: WritableSignal<T | null>;\r\n\r\n    parseItemFn?: (item: T) => (T | Promise<T>);\r\n    afterSetItemFn?: (item: T) => void;\r\n    afterDeleteItemFn?: (item: T) => void;\r\n    afterRestoreItemFn?: (item: T) => void;\r\n\r\n    editButton?: {\r\n        text?: string;\r\n        routerLink?: RouterLinkItem<T>\r\n    } | false;\r\n\r\n    deleteButton?: boolean;\r\n    restoreButton?: boolean;\r\n    backButton?: boolean;\r\n\r\n    actionButtons?: ActionButton<T, ActionButtonType>[];\r\n\r\n    ignoreShowError?: boolean;\r\n    interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n    httpError?: FetchErrorResponse;\r\n\r\n    hiddeHeader?: boolean;\r\n\r\n    updateItemEvent?: EventEmitter<boolean>;\r\n}\r\n\r\nexport interface ItemDetailGroup<T> {\r\n    icon?: string,\r\n    title?: string,\r\n    details: ItemDetail<T>[]\r\n    template?: {\r\n        ref: TemplateRef<any>,\r\n        position?: 'before' | 'after',\r\n    },\r\n    actions?: ActionButton<T>[]\r\n}\r\n\r\nexport interface ItemDetail<T> {\r\n    clickEvent?: (item: T) => void;\r\n    cssClass?: ((item: T) => string) | string;\r\n    dateFormat?: string;\r\n    displayValueFn: (item: T) => string | number | null | undefined | string[];\r\n    key?: string;\r\n    title: string;\r\n    numberFormat?: string;\r\n    routerLink?: RouterLinkItem<T>\r\n    tooltip?: ((item: T) => string) | string;\r\n    type?: TypeValueKeyItem | 'image' | 'image-server' | 'private-image-server' | 'html';\r\n}\r\n\r\nexport interface ActionButton<T, Type = 'clickEvent'> {\r\n    id: number | string;\r\n    type?: Type;\r\n    style: StyleButton;\r\n    icon?: string;\r\n    text?: string;\r\n    title?: string;\r\n    clickEvent: (item: T) => void;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\nexport type ActionButtonType = 'clickEvent' | 'update' | 'delete' | 'restore';\r\n\r\nexport interface RouterLinkItem<T> {\r\n    url: ((item: T) => string) | string;\r\n    outlet?: 'route-lateral' | 'principal';\r\n    queryParams?: { [key: string]: any },\r\n    state?: ((item: T) => (string | {[key: string]: any} | any[] | number | null)) | string | {[key: string]: any} | any[] | number | null;\r\n}\r\n",
            "properties": [
                {
                    "name": "actionButtons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionButton<T, ActionButtonType>[]",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "afterDeleteItemFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "afterRestoreItemFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "afterSetItemFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "backButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "dataItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<T | null>",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "deleteButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "editButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | ",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "groups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDetailGroup<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "hiddeHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "httpError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FetchErrorResponse",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "ignoreShowError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "interceptHttpErrorItemFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "itemId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "parseItemFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "restoreButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "server",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | ",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "updateItemEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<boolean>",
                    "optional": true,
                    "description": "",
                    "line": 45
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ItemDetailGroup",
            "id": "interface-ItemDetailGroup-75a719ba2c59e83e75c0e546e67e91ecd288a8eaae523955cca2535e665d2b945fef6327af9bd30cfdda606a531003ff10652cb2b8d6d62e22e9d189f1037fca",
            "file": "src/app/shared/interfaces/itemDetail.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TypeValueKeyItem } from \"@component/item-list-template/item-list-template.component\";\r\nimport { FetchErrorResponse } from \"./fetch\";\r\nimport { EventEmitter, TemplateRef, WritableSignal } from \"@angular/core\";\r\n\r\nexport interface ItemDetailConfiguration<T = any> {\r\n    title: string;\r\n\r\n    subtitle?: ((item: T) => string | number | null | undefined) | false;\r\n\r\n    itemId?: string;\r\n\r\n    server: {\r\n        url: string;\r\n        queryParams?: { [key: string]: any };\r\n    }\r\n\r\n    loading?: boolean;\r\n\r\n    groups: ItemDetailGroup<T>[];\r\n\r\n    dataItem?: WritableSignal<T | null>;\r\n\r\n    parseItemFn?: (item: T) => (T | Promise<T>);\r\n    afterSetItemFn?: (item: T) => void;\r\n    afterDeleteItemFn?: (item: T) => void;\r\n    afterRestoreItemFn?: (item: T) => void;\r\n\r\n    editButton?: {\r\n        text?: string;\r\n        routerLink?: RouterLinkItem<T>\r\n    } | false;\r\n\r\n    deleteButton?: boolean;\r\n    restoreButton?: boolean;\r\n    backButton?: boolean;\r\n\r\n    actionButtons?: ActionButton<T, ActionButtonType>[];\r\n\r\n    ignoreShowError?: boolean;\r\n    interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n    httpError?: FetchErrorResponse;\r\n\r\n    hiddeHeader?: boolean;\r\n\r\n    updateItemEvent?: EventEmitter<boolean>;\r\n}\r\n\r\nexport interface ItemDetailGroup<T> {\r\n    icon?: string,\r\n    title?: string,\r\n    details: ItemDetail<T>[]\r\n    template?: {\r\n        ref: TemplateRef<any>,\r\n        position?: 'before' | 'after',\r\n    },\r\n    actions?: ActionButton<T>[]\r\n}\r\n\r\nexport interface ItemDetail<T> {\r\n    clickEvent?: (item: T) => void;\r\n    cssClass?: ((item: T) => string) | string;\r\n    dateFormat?: string;\r\n    displayValueFn: (item: T) => string | number | null | undefined | string[];\r\n    key?: string;\r\n    title: string;\r\n    numberFormat?: string;\r\n    routerLink?: RouterLinkItem<T>\r\n    tooltip?: ((item: T) => string) | string;\r\n    type?: TypeValueKeyItem | 'image' | 'image-server' | 'private-image-server' | 'html';\r\n}\r\n\r\nexport interface ActionButton<T, Type = 'clickEvent'> {\r\n    id: number | string;\r\n    type?: Type;\r\n    style: StyleButton;\r\n    icon?: string;\r\n    text?: string;\r\n    title?: string;\r\n    clickEvent: (item: T) => void;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\nexport type ActionButtonType = 'clickEvent' | 'update' | 'delete' | 'restore';\r\n\r\nexport interface RouterLinkItem<T> {\r\n    url: ((item: T) => string) | string;\r\n    outlet?: 'route-lateral' | 'principal';\r\n    queryParams?: { [key: string]: any },\r\n    state?: ((item: T) => (string | {[key: string]: any} | any[] | number | null)) | string | {[key: string]: any} | any[] | number | null;\r\n}\r\n",
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionButton<T>[]",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "details",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDetail<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 50
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ItemFormConfiguration",
            "id": "interface-ItemFormConfiguration-c318b4a215c8ef742cae4789ee423f79c07102763a82acdca3a73e70fce6b013cf18d23c85dd12f649226b77bd037e42298d7e0f64fce4e298d57932521aba8a",
            "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { FetchService, RequestInitFetch, ToastForFetch } from '@service/fetch.service';\r\nimport { EventsService } from '@service/events.service';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { SpinnerDefaultComponent } from '../spinner-default/spinner-default.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { InputFileConfiguration, SelectFileComponent } from '../select-file/select-file.component';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { ErrorTemplateComponent } from '../error-template/error-template.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { ExecuteFunctionPipe } from '@pipe/execute-function.pipe';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { InputAutocompleteConfiguration, InputAutocompleteLocalConfiguration, InputAutocompleteServerConfiguration, InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectConfiguration, InputSelectLocalConfiguration, InputSelectServerConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { ConfirmDialogData } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\n\r\nexport interface ItemFormConfiguration<Item = any, Data = any> {\r\n  title?: string;\r\n  titleModule: string;\r\n\r\n  subtitle?: ((item: Item) => string | number | null | undefined) | false;\r\n\r\n  formGroup: FormGroup;\r\n  type: 'create' | 'update';\r\n\r\n  loading?: boolean;\r\n  hiddeFields?: boolean;\r\n  fields?: FormInput[];\r\n\r\n  dataItem?: WritableSignal<Item | null>,\r\n\r\n  server: {\r\n      url: string;\r\n      queryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      updateUrl?: string;\r\n      updateQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      createUrl?: string;\r\n      createQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      itemUrl?: string;\r\n      itemQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      fetch?: {\r\n        confirmDialog?: ConfirmDialogData,\r\n        toast?: ToastForFetch,\r\n      }\r\n  }\r\n\r\n  parseDataItemBeforeSendFormFn?: (data: Data) => (Data | Promise<Data>);\r\n  afterSaveFormFn?: (data: Item) => void;\r\n\r\n  itemId?: string | number\r\n  parseItemBeforePatchFormFn?: (item: Item) => (Item | Promise<Item>);\r\n\r\n  ignoreShowError?: boolean;\r\n  interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n  httpError?: FetchErrorResponse;\r\n\r\n  disableAutoBackLocation?: boolean;\r\n\r\n  saveButton?: {\r\n      text: string;\r\n      icon?: string;\r\n      iconPosition?: 'left' | 'right';\r\n  };\r\n  \r\n  cancelButton?: {\r\n      iconPosition?: 'left' | 'right';\r\n      text: string;\r\n      icon?: string;\r\n  } | false;\r\n}\r\n\r\nexport declare type InputType = 'select' | 'select-local' | 'select-server' | 'date' | 'date-range' | 'text' | 'number' | 'textarea' | 'checkbox' | 'switch' | 'autocomplete' | 'autocomplete-local' | 'autocomplete-server';\r\n\r\nexport interface FormInput {\r\n\r\n  type: InputType | 'file';\r\n\r\n  text?: TextFormInput;\r\n\r\n  number?: NumberFormInput;\r\n\r\n  textarea?: TextareaFormInput;\r\n  \r\n  date?: DateFormInput;\r\n  \r\n  dateRange?: DateRangeFormInput;\r\n  \r\n  switch?: SwitchFormInput;\r\n  \r\n  checkbox?: CheckboxFormInput;\r\n\r\n  select?: SelectConfigurationExt;\r\n\r\n  selectLocal?: SelectLocalConfigurationExt;\r\n  \r\n  selectServer?: SelectServerConfigurationExt;\r\n\r\n  autocomplete?: AutocompleteConfigurationExt;\r\n\r\n  autocompleteServer?: AutocompleteServerConfigurationExt;\r\n\r\n  autocompleteLocal?: AutocompleteLocalConfigurationExt;\r\n\r\n  file?: FileFormInput;\r\n}\r\n\r\nexport interface TextFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface NumberFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface TextareaFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  rows?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SelectFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | boolean | null;\r\n  options: { text: string, value: any }[];\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateRangeFormInput<T = any> {\r\n  formControlNameFrom: string;\r\n  formControlNameTo: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValueFrom?: Date | string | number | null;\r\n  defaultValueTo?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SwitchFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface CheckboxFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectConfigurationExt<T = any> extends InputSelectConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectLocalConfigurationExt<T = any> extends InputSelectLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectServerConfigurationExt<T = any> extends InputSelectServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteConfigurationExt<T = any> extends InputAutocompleteConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteLocalConfigurationExt<T = any> extends InputAutocompleteLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteServerConfigurationExt<T = any> extends InputAutocompleteServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface FileFormInput<T = any> extends InputFileConfiguration {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: any;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport const textFormInput = (configuration: TextFormInput): FormInput => ({\r\n  type: 'text',\r\n  text: configuration\r\n});\r\n\r\nexport const numberFormInput = (configuration: NumberFormInput): FormInput => ({\r\n  type: 'number',\r\n  number: configuration\r\n});\r\n\r\nexport const textareaFormInput = (configuration: TextareaFormInput): FormInput => ({\r\n  type: 'textarea',\r\n  textarea: configuration\r\n});\r\n\r\nexport const selectFormInput = (configuration: SelectConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectLocalFormInput = (configuration: SelectLocalConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectServerFormInput = (configuration: SelectServerConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const dateFormInput = (configuration: DateFormInput): FormInput => ({\r\n  type: 'date',\r\n  date: configuration\r\n});\r\n\r\nexport const dateRangeFormInput = (configuration: DateRangeFormInput): FormInput => ({\r\n  type: 'date-range',\r\n  dateRange: configuration\r\n});\r\n\r\nexport const switchFormInput = (configuration: SwitchFormInput): FormInput => ({\r\n  type: 'switch',\r\n  switch: configuration\r\n});\r\n\r\nexport const checkboxFormInput = (configuration: CheckboxFormInput): FormInput => ({\r\n  type: 'checkbox',\r\n  checkbox: configuration\r\n});\r\n\r\nexport const autocompleteFormInput = (configuration: AutocompleteConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocomplete: configuration\r\n});\r\n\r\nexport const autocompleteLocalFormInput = (configuration: AutocompleteLocalConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocompleteLocal: configuration\r\n});\r\n\r\nexport const autocompleteServerFormInput = (configuration: AutocompleteServerConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-server',\r\n  autocompleteServer: configuration\r\n});\r\n\r\nexport const fileFormInput = (configuration: FileFormInput): FormInput => ({\r\n  type: 'file',\r\n  file: configuration\r\n});\r\n\r\n\r\n@Component({\r\n  selector: 'app-item-form-template',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ScrollingModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    SelectFileComponent,\r\n    PathFilesServerPipe,\r\n    ScrollingModule,\r\n    ErrorTemplateComponent,\r\n    GetKeyItemPipe,\r\n    ExecuteFunctionPipe,\r\n    GetMixedValuePipe,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n  ],\r\n  templateUrl: './item-form-template.component.html',\r\n  styleUrls: ['./item-form-template.component.css']\r\n})\r\nexport class ItemFormTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemFormConfiguration;\r\n\r\n  private fetch = inject(FetchService);\r\n  private events = inject(EventsService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  public location = inject(Location);\r\n\r\n  private abortController = new AbortController();\r\n\r\n  ngOnInit() {\r\n    if (this.configuration.type == 'update') {\r\n      this.setItemId();\r\n      if (this.configuration.dataItem && this.configuration.dataItem()) {\r\n        this.configuration.loading = false;\r\n      } else {\r\n        this.configuration.dataItem = signal(null);\r\n        this.getItem();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private setItemId() {\r\n    if (!this.configuration.itemId) {\r\n      if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n        this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getControl(name: string): FormControl {\r\n    return this.configuration.formGroup.get(name) as FormControl;\r\n  }\r\n\r\n  public async submitForm() {\r\n    try {\r\n      const form = this.configuration.formGroup;\r\n      form.markAllAsTouched();\r\n      if (form.invalid || this.configuration.loading) return;\r\n      this.configuration.loading = true;\r\n\r\n      let data = form.getRawValue();\r\n      const { parseDataItemBeforeSendFormFn } = this.configuration;\r\n      data = await parseDataItemBeforeSendFormFn?.(data) ?? data;\r\n\r\n      const requestInit: RequestInitFetch = { };\r\n      if(this.configuration.server.fetch?.confirmDialog) {\r\n        requestInit.confirmDialog = this.configuration.server.fetch.confirmDialog;\r\n      }\r\n      if(this.configuration.server.fetch?.toast) {\r\n        requestInit.toast = this.configuration.server.fetch.toast;\r\n      }\r\n\r\n      let response = null;\r\n      if (this.configuration.type === 'create') {\r\n        response = await this.fetch.post(this.configuration.server.url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_created`, response);\r\n      } else {\r\n        const url = this.configuration.server.updateUrl ?? `${this.configuration.server.url}/${this.configuration.dataItem!()?.id}`;\r\n        response = await this.fetch.put(url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_updated`, response);\r\n      }\r\n\r\n      const { afterSaveFormFn } = this.configuration;\r\n      if (afterSaveFormFn) afterSaveFormFn(response);\r\n\r\n      if (!this.configuration.disableAutoBackLocation) this.location.back();\r\n    } catch { }\r\n    this.configuration.loading = false;\r\n  }\r\n\r\n  public async getItem() {\r\n    this.configuration.dataItem = signal(null)\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { itemId, server } = this.configuration;\r\n      let queryParams:any = server.itemQueryParams ?? {};\r\n      if (queryParams instanceof Object) {\r\n        queryParams = objectToURLSearchParams(queryParams);\r\n        queryParams = queryParams.toString();\r\n      }\r\n      const url = `${server.itemUrl ?? server.url}/${itemId}?${queryParams ? queryParams : ''}`;\r\n      const requestInit: RequestInitFetch = { signal: this.abortController.signal };\r\n      let item: any = await this.fetch.get(url, requestInit);\r\n      const { parseItemBeforePatchFormFn } = this.configuration;\r\n      item = await parseItemBeforePatchFormFn?.(item) ?? item;\r\n      this.configuration.formGroup.patchValue(item);\r\n      this.configuration.dataItem.set(item);\r\n      this.configuration.hiddeFields = false;\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "afterSaveFormFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "cancelButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | ",
                    "optional": true,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "dataItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<Item | null>",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "disableAutoBackLocation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormInput[]",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "hiddeFields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "httpError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FetchErrorResponse",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "ignoreShowError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "interceptHttpErrorItemFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "itemId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "parseDataItemBeforeSendFormFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "parseItemBeforePatchFormFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "saveButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "server",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | ",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "titleModule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"create\" | \"update\"",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ItemFormDocumentContractItem",
            "id": "interface-ItemFormDocumentContractItem-924a7d65315970eb174d1a6c44ae9c78c245038d93898ee8700ab4b6ad3db1d45b3007511037de1362df988b516456abad9e3f39e1540d9f2de932c7f7392029",
            "file": "src/app/modules/organization/clients/client-documents/pages/client-document-create/client-document-create.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, WritableSignal, computed, inject, signal } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ItemFormConfiguration, ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\nimport { Contract } from '@interface/contract';\r\nimport { ClientContractDocumentItemFormComponent } from '../../components/client-contract-document-item-form/client-contract-document-item-form.component';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { EventsService } from '@service/events.service';\r\nimport { StatusModel } from '@interface/baseModel';\r\nimport { addMonths, format, parseISO, setDefaultOptions, subDays } from 'date-fns';\r\nimport { es } from 'date-fns/locale'\r\nimport { DecimalPipe } from '@angular/common';\r\n\r\nexport interface ItemFormDocumentContractItem {\r\n    edit?: boolean;\r\n    inputAutoFocus?: 'period';\r\n    contract: Contract,\r\n    periods: number,\r\n    description: string,\r\n    price: number,\r\n}\r\n\r\n@Component({\r\n    selector: 'app-client-document-create',\r\n    standalone: true,\r\n    imports: [ItemFormTemplateComponent, ClientContractDocumentItemFormComponent, DecimalPipe],\r\n    templateUrl: './client-document-create.component.html',\r\n    styleUrl: './client-document-create.component.scss'\r\n})\r\nexport class ClientDocumentCreateComponent {\r\n    private router = inject(Router);\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private eventsService = inject(EventsService);\r\n    private subscription?: Subscription;\r\n    public items: WritableSignal<ItemFormDocumentContractItem[]> = signal([]);\r\n    public total = computed(() => this.items().reduce((acc, item) => acc + item.price, 0));\r\n    public formConfiguration: ItemFormConfiguration = {\r\n        title: \"Nuevo Documento\",\r\n        titleModule: \"documento\",\r\n        type: \"create\",\r\n        server: {\r\n            url: 'document/contracts/generate',\r\n        },\r\n        formGroup: new FormGroup({\r\n            client_id: new FormControl(this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id'), [Validators.required]),\r\n            valid_contracts: new FormControl(false, [Validators.requiredTrue]),\r\n        }),\r\n        parseDataItemBeforeSendFormFn: (data) => ({\r\n            ...data,\r\n            contracts: this.items().map((item) => ({ id: item.contract.id, periods: item.periods }))\r\n        }),\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.subscription = this.eventsService.eventsFiltered(['add-contract-document-item']).subscribe(event => {\r\n            this.addData(event.data);\r\n        });\r\n\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription?.unsubscribe();\r\n    }\r\n\r\n    private addData(contracts: Contract[]) {\r\n        const newData: ItemFormDocumentContractItem[] = contracts.map(contract => {\r\n            const { description, price } = this.getDetails(contract, 1);\r\n            return { contract, periods: 1, description, price }\r\n        })\r\n        this.items.update((data) => [...data, ...newData]);\r\n        this.formConfiguration.formGroup.get('valid_contracts')?.setValue(true);\r\n    }\r\n\r\n    private getDetails(contract: Contract, periods: number) {\r\n        setDefaultOptions({ locale: es })\r\n        const contractVehiclesActives = contract.contract_vehicles?.filter((contract_vehicle) => contract_vehicle.vehicle?.status == StatusModel.Habilitado);\r\n        const platesString = contractVehiclesActives?.map(contractVehicle => contractVehicle.vehicle?.plate).join(', ');\r\n        const nextPeriod = (contract.last_contract_document_item?.end_period ? contract.last_contract_document_item?.end_period : 1) - 1;\r\n        const dateNextPeriod = addMonths(parseISO(contract.start_date), nextPeriod);\r\n        const dateEndPeriod = subDays(addMonths(addMonths(parseISO(contract.start_date), nextPeriod), periods), 1);\r\n        const dateStringInit = dateNextPeriod.getFullYear() == dateEndPeriod.getFullYear() ? format(dateNextPeriod, \"dd 'DE' MMMM\").toUpperCase() : format(dateNextPeriod, \"dd 'DE' MMMM yyyy\").toUpperCase();\r\n        const dateStringEnd = format(dateEndPeriod, \"dd 'DE' MMMM yyyy\").toUpperCase();\r\n        const vehiclesQuantity = contractVehiclesActives?.length ?? 0;\r\n        const price = (contract.sale_price * vehiclesQuantity);\r\n        const description = `ALQUILER MENSUAL DE GPS POR ${vehiclesQuantity} UNIDADES - PERIODO DEL ${dateStringInit} AL ${dateStringEnd} | ${contract.plan?.name} | CONTRATO ${contract.code} | PLACAS: ${platesString}`;\r\n        return { description, price }\r\n    }\r\n\r\n    public newAdd(event: Event) {\r\n        event.preventDefault()\r\n        const clientId = this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id');\r\n        const not_include_ids = this.items().map(item => item.contract.id);\r\n        this.router.navigate([{ outlets: { 'route-lateral': `client/${clientId}/contract/add` } }], { state: { not_include_ids } });\r\n    }\r\n\r\n    public deleteItem(index: number) {\r\n        this.items.update((data) => data.toSpliced(index, 1))\r\n        if (this.items().length == 0) this.formConfiguration.formGroup.get('valid_contracts')?.setValue(false);\r\n    }\r\n\r\n    public updateDescription(index: number) {\r\n        const item = this.items()[index];\r\n        const description = this.getDetails(item.contract, item.periods).description;\r\n        this.items.update((data) => data.toSpliced(index, 1, { ...item, description }));\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "contract",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Contract",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "edit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "inputAutoFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "periods",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ItemListConfiguration",
            "id": "interface-ItemListConfiguration-edc9a2c085d669b062640c6d2a97876fe56bb34f5ae23612a12a67b2af6f44bb5d3316d9f28e50d8c8d522c0e6ce8fc3245f639ec16593bc1c325c3c460a4296",
            "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule, DatePipe, Location, NgOptimizedImage } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, ViewChild, Input, ContentChild, TemplateRef, ElementRef, Renderer2, ViewEncapsulation, signal, WritableSignal, computed, inject, Inject, Optional, InjectionToken, EventEmitter, RendererStyleFlags2 } from '@angular/core';\r\nimport { MatCheckboxChange, MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSort, MatSortModule } from '@angular/material/sort';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from 'src/app/shared/utilities/queryParams';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { IndexListPipe } from '@pipe/index-list.pipe';\r\nimport { SpinnerDefaultComponent } from '@component/spinner-default/spinner-default.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { debounceTime } from 'rxjs';\r\nimport { DiffDatePipe } from '@pipe/diff-date.pipe';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { HiddenOptionButtonRowPipe } from '@pipe/hidden-option-button-row.pipe';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { GetUserByIdPipe } from '@pipe/get-user-by-id.pipe';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ListFormatPipe } from '@pipe/list-format.pipe';\r\nimport { LoadImagePrivateDirective } from '@directive/load-image-private.directive';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MatPseudoCheckboxModule } from '@angular/material/core';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { EventGlobalSearch, NAME_EVENT_GLOBAL_SEARCH } from 'src/app/sidenav/sidenav/sidenav.component';\r\nimport { ExecuteFunctionListPipe } from './execute-function-list.pipe';\r\nimport { FormInput, dateRangeFormInput, switchFormInput } from '@component/item-form-template/item-form-template.component';\r\nimport { RenameTitleColumnListPipe } from './rename-title-column-list.pipe';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DateFnsAdapter } from '@angular/material-date-fns-adapter';\r\nimport { MyDateAdapter } from '@utility/myDateAdapter';\r\nimport { MY_DATE_FORMATS } from '@utility/myDateFormat';\r\n\r\nexport const DATA_TYPE_LIST = new InjectionToken<'array' | 'paginator'>('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST');\r\n\r\nexport interface ItemListConfiguration<T = any> {\r\n  readonly dataType?: 'array' | 'paginator';\r\n  readonly keyGetItemsPaginator?: string;\r\n  readonly keyGetTotalItemsPaginator?: string;\r\n\r\n  readonly disableFiltersInQueryParams?: boolean;\r\n\r\n  title: string | null;\r\n\r\n  parseDataFn?: (data: T[]) => T[] | Promise<T[]>;\r\n  data?: WritableSignal<T[]>;\r\n  updateListEvent?: EventEmitter<void>;\r\n\r\n  defaultOrder?: {\r\n    key: string,\r\n    order: 'ASC' | 'DESC'\r\n  };\r\n\r\n  backButton?: boolean;\r\n\r\n  updateButton?: boolean;\r\n\r\n  server: {\r\n    readonly url: string,\r\n    queryParams?: { [key: string]: any } | string;\r\n  }\r\n\r\n  createButton?: {\r\n    text?: string,\r\n    routerLink: RouterLinkCreateButton\r\n  } | false;\r\n\r\n  filters?: FormInput[] | false;\r\n\r\n  rows?: {\r\n    selectable?: {\r\n      actions: SelectableActionButton<T>[];\r\n    };\r\n    index?: false | ({ title: string });\r\n    cssClass?: string | ((item: T) => string);\r\n    actions?: ActionButton<T>[];\r\n    options?: ActionButton<T>[] | false;\r\n  },\r\n\r\n  columns: WritableSignal<ListColumn<T>[]>;\r\n}\r\n\r\nexport interface RouterLinkCreateButton {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any;\r\n}\r\nexport interface RouterLinkItem<T> {\r\n  url: ((item: T, index: number) => string) | string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: ((item: T, index: number) => (string | { [key: string]: any } | any[] | number | null)) | string | { [key: string]: any } | any[] | number | null;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\ndeclare type ActionButtonActionsType = 'clickEvent' | 'routerLink';\r\ninterface ActionButton<T> {\r\n  type: 'clickEvent' | 'routerLink';\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((item: T, index: number) => boolean);\r\n  disabled?: boolean | ((item: T, index: number) => boolean);\r\n  cssClass?: string | ((item: T, index: number) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((item: T, index: number) => ({ [key: string]: any }));\r\n  fn?: (item: T, index: number, fns: {\r\n    deleteItemFn: (id: number | string) => Promise<void>,\r\n    restoreItemFn: (id: number | string) => Promise<void>,\r\n    updateChangesItemFn: (index: number, item: T) => void,\r\n  }) => void;\r\n  routerLink?: RouterLinkItem<T>;\r\n}\r\ninterface ClickEventActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'fn'>> & ActionButton<T>, 'type' | 'routerLink'> { }\r\nexport const clickEventActionButton = <T = any>(config: ClickEventActionButton<T>): ActionButton<T> => ({ type: 'clickEvent', ...config });\r\ninterface RouterLinkActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'routerLink'>> & ActionButton<T>, 'type' | 'clickEvent'> { }\r\nexport const routerLinkActionButton = <T = any>(config: RouterLinkActionButton<T>): ActionButton<T> => ({ type: 'routerLink', ...config });\r\ninterface SelectableActionButton<T> {\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((selectedItems: T[]) => boolean);\r\n  disabled?: boolean | ((selectedItems: T[]) => boolean);\r\n  cssClass?: string | ((selectedItems: T[]) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((selectedItems: T[]) => ({ [key: string]: any }));\r\n  fn: (selectedItems: T[]) => void;\r\n}\r\nexport const selectableActionButton = <T = any>(config: SelectableActionButton<T>): SelectableActionButton<T> => ({ ...config });\r\n\r\nexport interface ListItemExtended {\r\n  __selected__?: boolean;\r\n  __loading_status__?: boolean;\r\n}\r\n\r\nexport type TypeValueKeyItem = 'text' | 'diff-date' | 'date' | 'number' | 'email' | 'phone' | 'user' | 'uppercase' | 'lowercase' | 'titlecase' | 'first-letter-uppercase' | 'list-format' | 'currency';\r\n\r\nexport interface ListColumn<T> {\r\n  /**\r\n   * @description\r\n   * Agrega clases css al contenedor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   */\r\n  align?: 'left' | 'center' | 'right';\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor adicional de la celda de la columna\r\n   * @example\r\n   * clickEventAdditionalValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventAdditionalValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor de la celda de la columna\r\n   * @example\r\n   * clickEventValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css a la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClass: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClass?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor adicional de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayAdditionalValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo fecha (type: 'date')\r\n   * @example\r\n   * ...\r\n   * dateFormat: 'yyyy-MM-dd'\r\n   * ...\r\n   * dateFormat: 'dd/MM/yyyy' // Por defecto\r\n   * ...\r\n   */\r\n  dateFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor adicional a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.name\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayAdditionalValueFn?: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayValueFn: (item) => item.name\r\n   * ...\r\n   * displayValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * If you want to display a value in the column that is not in the item, you can use this function\r\n   * @example\r\n   * ...\r\n   * gridColumn: '1fr'\r\n   * ...\r\n   * gridColumn: '200px'\r\n   * ...\r\n   * gridColumn: 'max-content'\r\n   * ...\r\n   * gridColumn: 'fit-content(200px)'\r\n   * ...\r\n   */\r\n  gridColumn?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones > Columnas\r\n   * @example\r\n   * ...\r\n   * hidden: true\r\n   * ...\r\n   * hidden: false // Por defecto\r\n   * ...\r\n   */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo número (type: 'number')\r\n   * @example\r\n   * ...\r\n   * numberFormat: '2.2-2'\r\n   * ...\r\n   * numberFormat: '0.2-2' // Por defecto\r\n   * ...\r\n   */\r\n  numberFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor adicional de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkAdditionalValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Sortable column espicif key in object configuration\r\n   * @example\r\n   * sort: { key: 'name' }\r\n   */\r\n  sort?: { key: string };\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display additional value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: { color: 'green' }\r\n   * ...\r\n   * @param item\r\n   * @returns string | number | null | undefined | string[] | number[]\r\n   */\r\n  cssStyleDisplayAdditionalValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayValue: { color: 'green' }\r\n   * ...\r\n   */\r\n  cssStyleDisplayValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Title column\r\n   * @example\r\n   * title: 'Nombre'\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * @description\r\n   * To display a tooltip in the column on hover\r\n   * @example\r\n   * tooltip: 'Ver detalle'\r\n   */\r\n  tooltip?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * For show type value in cell\r\n   * @example\r\n   * ...\r\n   * type: 'number',\r\n   * displayValueFn: (item) => item.price, // output: 2,000.00\r\n   * ...\r\n   * type: 'date',\r\n   * displayValueFn: (item) => item.created_at, // output 12/12/2020\r\n   * ...\r\n   */\r\n  type?: TypeValueKeyItem | 'image' | 'html';\r\n\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface SimpleListColumn<T> extends Omit<ListColumn<T>, 'type' | 'displayAdditionalValueFn' | 'displayValueFn' | 'dateFormat' | 'numberFormat' | 'image'> { }\r\ninterface SimpleListColumn2<T> extends Omit<SimpleListColumn<T>, 'cssStyleDisplayAdditionalValue' | 'routerLinkAdditionalValue' | 'cssClassDisplayAdditionalValue' | 'clickEventAdditionalValue'> { }\r\ninterface ListFormatListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string[];\r\n  displayValueFn: (item: T, index: number) => string[];\r\n}\r\n\r\ninterface NumberListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => number | null | undefined;\r\n  numberFormat?: string;\r\n}\r\n\r\ninterface StringListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => string | number | null | undefined;\r\n}\r\n\r\ninterface DateListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined;\r\n  dateFormat?: string;\r\n}\r\n\r\ninterface ImageListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface HtmlListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n}\r\n\r\nexport const numberColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'number', ...config });\r\n\r\nexport const listFormatColumn = <T = any>(config: ListFormatListColumn<T>): ListColumn<T> => ({ type: 'list-format', ...config });\r\n\r\nexport const dateColumn = <T = any>(config: DateListColumn<T>): ListColumn<T> => ({ type: 'date', ...config });\r\n\r\nexport const diffDateColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'diff-date', ...config });\r\n\r\nexport const htmlColumn = <T = any>(config: HtmlListColumn<T>): ListColumn<T> => ({ type: 'html', ...config });\r\n\r\nexport const textColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'text', ...config });\r\n\r\nexport const uppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'uppercase', ...config });\r\n\r\nexport const lowercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'lowercase', ...config });\r\n\r\nexport const titlecaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'titlecase', ...config });\r\n\r\nexport const firstLetterUppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'first-letter-uppercase', ...config });\r\n\r\nexport const phoneColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'phone', ...config });\r\n\r\nexport const emailColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'email', ...config });\r\n\r\nexport const userColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'user', ...config });\r\n\r\nexport const imageColumn = <T = any>(config: ImageListColumn<T>): ListColumn<T> => ({ type: 'image', ...config });\r\n\r\n\r\nexport const itemNameAndDescriptionColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  title: 'Nombre',\r\n  gridColumn: '1fr',\r\n  sort: { key: 'name' },\r\n  routerLinkValue: { url: (item: any) => `../detail/${item.id}` },\r\n  displayValueFn: (item: any) => item.name,\r\n  displayAdditionalValueFn: (item: any) => item.description,\r\n  ...config,\r\n});\r\nexport const itemStatusColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'cssClassDisplayValue' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'first-letter-uppercase',\r\n  title: 'Estado',\r\n  sort: { key: 'status' },\r\n  align: 'center',\r\n  displayValueFn: (item: any) => item.status,\r\n  cssClassDisplayValue: (item: any) => `status-chip ${item.status}`,\r\n  ...config,\r\n});\r\nexport const itemCreatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Creado',\r\n  sort: { key: 'created_at' },\r\n  displayValueFn: (item: any) => item.created_at,\r\n  ...config,\r\n});\r\nexport const itemUpdatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Actualizado',\r\n  sort: { key: 'updated_at' },\r\n  hidden: true,\r\n  displayValueFn: (item: any) => item.updated_at,\r\n  ...config,\r\n});\r\nexport const simpleListColumns = (): ListColumn<any>[] => ([\r\n  itemNameAndDescriptionColumn(),\r\n  itemUpdatedAtColumn(),\r\n  itemCreatedAtColumn(),\r\n  itemStatusColumn(),\r\n]);\r\n\r\n\r\nexport const defaultListFilterInputs = (): FormInput[] => [\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de creación',\r\n    formControlNameFrom: 'created_at_from',\r\n    formControlNameTo: 'created_at_to',\r\n  }),\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de actualización',\r\n    formControlNameFrom: 'updated_at_from',\r\n    formControlNameTo: 'updated_at_to',\r\n  }),\r\n  switchFormInput({\r\n    textLabel: 'Registros inactivos',\r\n    formControlName: 'inactive',\r\n  }),\r\n];\r\n\r\nexport const deleteItemActionButton = () => clickEventActionButton({\r\n  icon: 'delete',\r\n  text: 'Eliminar',\r\n  fn: async ({ id }, _, { deleteItemFn }) => deleteItemFn(id),\r\n  hidden: (item) => item.deleted_at,\r\n});\r\n\r\nexport const restoreItemActionButton = () => clickEventActionButton({\r\n  icon: 'restore',\r\n  text: 'Restaurar',\r\n  fn: async ({ id }, _, { restoreItemFn }) => restoreItemFn(id),\r\n  hidden: (item) => !item.deleted_at,\r\n})\r\n\r\nexport const viewItemActionButton = () => routerLinkActionButton({\r\n  icon: 'visibility',\r\n  text: 'Ver',\r\n  routerLink: { url: (item) => `../view/${item.id}` },\r\n});\r\n\r\nexport const editItemActionButton = () => routerLinkActionButton({\r\n  icon: 'edit',\r\n  text: 'Editar',\r\n  routerLink: { url: (item) => `../edit/${item.id}` },\r\n})\r\n\r\n@Component({\r\n  selector: 'app-item-list-template',\r\n  standalone: true,\r\n  templateUrl: './item-list-template.component.html',\r\n  styleUrl: './item-list-template.component.css',\r\n  imports: [\r\n    CommonModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatSortModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatTooltipModule,\r\n    MatPseudoCheckboxModule,\r\n    IndexListPipe,\r\n    GetKeyItemPipe,\r\n    RouterLink,\r\n    DiffDatePipe,\r\n    HiddenOptionButtonRowPipe,\r\n    NgOptimizedImage,\r\n    ScrollingModule,\r\n    GetUserByIdPipe,\r\n    PathFilesServerPipe,\r\n    ListFormatPipe,\r\n    LoadImagePrivateDirective,\r\n    FirstLetterUppercasePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n    ExecuteFunctionListPipe,\r\n    RenameTitleColumnListPipe,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    FirstLetterUppercasePipe,\r\n    GetKeyItemPipe,\r\n    RenameTitleColumnListPipe,\r\n    BrowserAnimationsModule,\r\n    DateFnsAdapter,\r\n  ],\r\n})\r\nexport class ItemListTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemListConfiguration;\r\n\r\n  // @ContentChild('headers') headers!: TemplateRef<any>;\r\n  @ContentChild('rowList') rowList!: TemplateRef<any>;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  @ViewChild('divListItems', { static: true }) private divList!: ElementRef;\r\n\r\n  private _dataTypeList: 'array' | 'paginator' = 'array';\r\n  private _keyForGetItems: string;\r\n  private _keyForGetTotalItems: string;\r\n\r\n  private fetch = inject(FetchService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  private renderer = inject(Renderer2);\r\n  private eventsService = inject(EventsService);\r\n  public location = inject(Location);\r\n\r\n  // private datePipe = inject(DatePipe);\r\n  public firstLetterUppercasePipe = inject(FirstLetterUppercasePipe);\r\n  public getKeyItemPipe = inject(GetKeyItemPipe);\r\n  public renameTitleColumnListPipe = inject(RenameTitleColumnListPipe);\r\n\r\n  public lengthData = computed(() => this.data().length)\r\n\r\n  public searchCtrl: FormControl = new FormControl('');\r\n  public formFilters: FormGroup<any> | null = null;\r\n\r\n  public loading = signal(true);\r\n  public font: WritableSignal<'small' | 'medium' | 'large'> = signal('medium');\r\n  public headerListStyle: WritableSignal<'simple' | 'color'> = signal('simple');\r\n\r\n  private abortController = new AbortController();\r\n\r\n  private unsubscribe$: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(DATA_TYPE_LIST) _dataTypeList: 'array' | 'paginator',\r\n    @Optional() @Inject(KEY_GET_ITEMS_PAGINATOR_LIST) _keyForGetItems: string,\r\n    @Optional() @Inject(KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST) _keyForGetTotalItems: string\r\n  ) {\r\n    this._dataTypeList = _dataTypeList ?? 'paginator';\r\n    this._keyForGetItems = _keyForGetItems || 'data';\r\n    this._keyForGetTotalItems = _keyForGetTotalItems || 'total';\r\n  }\r\n\r\n  get data(): WritableSignal<any[]> {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  get defaultOrder(): string {\r\n    return this.configuration.defaultOrder ? `${this.configuration.defaultOrder?.key}|${this.configuration.defaultOrder?.order}` : 'id|DESC';\r\n  }\r\n\r\n  get dataTypeList(): 'array' | 'paginator' {\r\n    return this.configuration.dataType ?? this._dataTypeList;\r\n  }\r\n\r\n  get keyForGetItems(): string {\r\n    return this.configuration.keyGetItemsPaginator ?? this._keyForGetItems;\r\n  }\r\n\r\n  get keyForGetTotalItems(): string {\r\n    return this.configuration.keyGetTotalItemsPaginator ?? this._keyForGetTotalItems;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.configuration.data = signal([]);\r\n    this.configuration.updateListEvent = new EventEmitter();\r\n    if (this.configuration.rows?.options != false && !this.configuration.rows?.options?.length) {\r\n      this.configuration.rows = {\r\n        ...(this.configuration.rows ?? {}),\r\n        options: [\r\n          viewItemActionButton(),\r\n          editItemActionButton(),\r\n          deleteItemActionButton(),\r\n          restoreItemActionButton(),\r\n        ]\r\n      };\r\n    }\r\n    this.generateFormControlsFromFilterInputs();\r\n    this.generateColumnsCss();\r\n\r\n    this.eventsService\r\n      .eventsFiltered<EventGlobalSearch>([NAME_EVENT_GLOBAL_SEARCH])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(({ data }: any) => {\r\n        const type = data.type;\r\n        if (type == 'enter') this.searchCtrl.setValue(data.value);\r\n      })\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.paginator.pageIndex = 0;\r\n    this.paginator.pageSize = 20;\r\n\r\n    this.verifyQueryParams();\r\n\r\n    this.activatedRoute.queryParams.subscribe(() => this.callGetData());\r\n\r\n    this.sort.sortChange.subscribe(({ active, direction }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (this.defaultOrder == `${active}|${direction}` || !active || !direction) queryParams['order'] = null;\r\n      else queryParams['order'] = `${active}|${direction}`;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.searchCtrl.valueChanges.pipe(debounceTime(250)).subscribe((value: string) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (value) queryParams['search'] = value;\r\n      else queryParams['search'] = null;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.paginator.page.subscribe(({ pageIndex, pageSize }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (pageIndex == 0 || (queryParams['page'] ?? null) == pageIndex + 1) queryParams['page'] = null;\r\n      else queryParams['page'] = pageIndex + 1;\r\n      if (pageSize == 20 || (queryParams['per_page'] ?? null) == pageSize) queryParams['per_page'] = null;\r\n      else queryParams['per_page'] = pageSize;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.eventsService\r\n      .eventsFiltered([\r\n        `${this.configuration.server.url}_created`,\r\n        `${this.configuration.server.url}_updated`\r\n      ])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(() => this.callGetData());\r\n\r\n    // this.configuration.updateListEvent!.subscribe(() => this.callGetData({}));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n    if (this.abortController) this.abortController.abort();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private async generateColumnsCss(): Promise<void> {\r\n    const grid_cols: string[] = [];\r\n    const grid_areas: string[] = []\r\n    if (this.configuration.rows?.selectable) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('selected');\r\n    }\r\n    if (this.configuration.rows?.index != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('index');\r\n    }\r\n    for await (const column of this.configuration.columns()) {\r\n      if (!column.hidden) {\r\n        grid_cols.push(column.gridColumn ?? 'auto');\r\n        grid_areas.push(this.renameTitleColumnListPipe.transform(column.title));\r\n      }\r\n    }\r\n    if (this.configuration.rows?.actions) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('actions');\r\n    }\r\n    if (this.configuration.rows?.options != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('options');\r\n    }\r\n    this.renderer.setStyle(this.divList.nativeElement, 'grid-template-columns', grid_cols.join(' '));\r\n    this.renderer.setStyle(this.divList.nativeElement, '--items-list-grid-template-areas', `\"${grid_areas.join(' ')}\"`, RendererStyleFlags2.DashCase);\r\n    grid_areas.forEach((area, index) => this.renderer.setStyle(this.divList.nativeElement, `--items-list-grid-area-${index + 1}`, area, RendererStyleFlags2.DashCase));\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private getQueryParams(): { [key: string]: any } {\r\n    return !this.configuration.disableFiltersInQueryParams ? JSON.parse(JSON.stringify(this.activatedRoute.snapshot.queryParams)) : {\r\n      ...this.formFilters?.value ?? {},\r\n      page: this.paginator.pageIndex + 1,\r\n      per_page: this.paginator.pageSize,\r\n      order: this.sort.active ? `${this.sort.active}|${this.sort.direction}` : null,\r\n      search: this.searchCtrl.value ? this.searchCtrl.value : null,\r\n    }\r\n  }\r\n\r\n  private navigateOrCallGetData(params: any): void {\r\n    if (this.configuration.disableFiltersInQueryParams) this.callGetData(params);\r\n    else this.router.navigate([], { queryParams: params });\r\n  }\r\n\r\n  private verifyQueryParams(): void {\r\n    const queryParams = {} as any;\r\n    const { page, per_page, order, search, ...filters } = queryParams;\r\n    this.paginator.pageIndex = Number(page ?? 1) - 1;\r\n    this.paginator.pageSize = Number(per_page) ?? 20;\r\n    this.sort.active = order?.split('|')[0] ?? '';\r\n    this.sort.direction = order?.split('|')[1] == 'asc' ? 'asc' : 'desc';\r\n    this.sort.sortChange.emit();\r\n    this.searchCtrl.setValue(search ?? null, { emitEvent: false });\r\n  }\r\n\r\n  public callGetData(queryParams: any = {}): void {\r\n    const params = objectToURLSearchParams(queryParams);\r\n    if (!params.has('page')) params.set('page', String(this.paginator.pageIndex + 1));\r\n    if (!params.has('per_page')) params.set('per_page', String(this.paginator.pageSize));\r\n    if (!params.has('order')) params.set('order', this.defaultOrder);\r\n    this.getData(params);\r\n  }\r\n\r\n  private async getData(searchParams: URLSearchParams = new URLSearchParams()): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const serverUrl = this.configuration.server.url;\r\n    let queryParams = this.configuration.server.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const url = `${serverUrl}?${searchParams.toString()}&${queryParams ?? ''}`;\r\n    const config = { signal: this.abortController.signal };\r\n    try {\r\n      let items = [];\r\n      let totalItems = 0;\r\n      if (this.dataTypeList == 'array') {\r\n        items = await this.fetch.get<any[]>(url, config);\r\n        totalItems = items.length;\r\n      } else {\r\n        const paginatorData = await this.fetch.get<PaginatorData<any>>(url, config);\r\n        items = this.getKeyItemPipe.transform(paginatorData, this.keyForGetItems);\r\n        totalItems = this.getKeyItemPipe.transform(paginatorData, this.keyForGetTotalItems);\r\n      }\r\n      const { parseDataFn } = this.configuration;\r\n      const parseData = await parseDataFn?.(items) ?? items;\r\n      this.paginator.length = totalItems;\r\n      this.data.set(parseData);\r\n      this.loading.set(false);\r\n      this.checkSelectedItems();\r\n    } catch (err: any) {\r\n      if (err.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n  }\r\n\r\n  public hiddenToggleColumn($event: MatCheckboxChange, index: number): void {\r\n    this.configuration.columns.update((columns) => {\r\n      columns[index]['hidden'] = !$event.checked\r\n      return columns;\r\n    })\r\n    this.generateColumnsCss();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public navigateCreateView(): void {\r\n    this.router.navigate(['../create'], { relativeTo: this.activatedRoute });\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public allSelectedItems = signal(false);\r\n  public someSelectedItems = signal(false);\r\n  public selectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__));\r\n  public lengthSelectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__).length);\r\n\r\n  public selectedItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.toSpliced(index, 1, { ...data[index], __selected__: status }));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public selectedAllItems(status: boolean): void {\r\n    this.data.update((data) => data.map((e) => ({ ...e, __selected__: status })));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public someSelected(): boolean {\r\n    return this.data().length > 0 && this.data().some((e: ListItemExtended) => e.__selected__) && !this.allSelectedItems();\r\n  }\r\n\r\n  private checkSelectedItems(): void {\r\n    this.allSelectedItems.set(this.data().length > 0 && this.data().every((e: ListItemExtended) => e.__selected__));\r\n    this.someSelectedItems.set(this.someSelected());\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private generateFormControlsFromFilterInputs(): void {\r\n    if (this.configuration.filters == false) return;\r\n    if (!this.configuration.filters?.length) this.configuration.filters = defaultListFilterInputs();\r\n    const formFilters = new FormGroup({});\r\n    this.configuration.filters?.forEach((filter) => {\r\n      if (filter.text) {\r\n        formFilters.setControl(filter.text.formControlName, new FormControl(filter.text.defaultValue));\r\n      } else if (filter.textarea) {\r\n        formFilters.setControl(filter.textarea.formControlName, new FormControl(filter.textarea.defaultValue));\r\n      } else if (filter.select) {\r\n        formFilters.setControl(filter.select.formControlName, new FormControl(filter.select.defaultValue));\r\n      } else if (filter.number) {\r\n        formFilters.setControl(filter.number.formControlName, new FormControl(filter.number.defaultValue));\r\n      } else if (filter.date) {\r\n        formFilters.setControl(filter.date.formControlName, new FormControl(filter.date.defaultValue));\r\n      } else if (filter.dateRange) {\r\n        formFilters.setControl(filter.dateRange.formControlNameFrom, new FormControl(filter.dateRange.defaultValueFrom));\r\n        formFilters.setControl(filter.dateRange.formControlNameTo, new FormControl(filter.dateRange.defaultValueTo));\r\n      } else if (filter.autocompleteLocal) {\r\n        formFilters.setControl(filter.autocompleteLocal.formControlName, new FormControl(filter.autocompleteLocal.defaultValue));\r\n      } else if (filter.autocompleteServer) {\r\n        formFilters.setControl(filter.autocompleteServer.formControlName, new FormControl(filter.autocompleteServer.defaultValue));\r\n      } else if (filter.checkbox) {\r\n        formFilters.setControl(filter.checkbox.formControlName, new FormControl(filter.checkbox.defaultValue));\r\n      } else if (filter.switch) {\r\n        formFilters.setControl(filter.switch.formControlName, new FormControl(filter.switch.defaultValue));\r\n      }\r\n    });\r\n    this.formFilters = formFilters;\r\n  }\r\n\r\n  public getControlFormFilter(name: string): FormControl {\r\n    return this.formFilters!.get(name) as FormControl;\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private updateLoadingStatusItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.map((item: ListItemExtended, i) => {\r\n      if (i == index) item.__loading_status__ = status;\r\n      return item;\r\n    }));\r\n  }\r\n\r\n  public deleteItem = async (id: number | string) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}`;\r\n    try {\r\n      await this.fetch.delete(url);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public restoreItem = async (id: string | number) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}/restore`;\r\n    const config = { afterAlert: { description: 'Restaurando ítem de la lista' } }\r\n    try {\r\n      await this.fetch.put(url, config);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public updateChangesItem = (index: number, item: any) => {\r\n    this.configuration.data!.update(items => items.toSpliced(index, 1, item));\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "backButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<ListColumn[]>",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "createButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | ",
                    "optional": true,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "dataType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"array\" | \"paginator\"",
                    "optional": true,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "defaultOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "disableFiltersInQueryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormInput[] | ",
                    "optional": true,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "keyGetItemsPaginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "keyGetTotalItemsPaginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "parseDataFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "server",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "updateButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "updateListEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<void>",
                    "optional": true,
                    "description": "",
                    "line": 60
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ItemViewConfiguration",
            "id": "interface-ItemViewConfiguration-ffbc78c057c09fea1fa5e296071afb5056c624b620ccb7c46a2704c162751379f4a6427c3bd5b9d2d4fc0284bcba4198b97098fbefbb8365dce287501eb92a38",
            "file": "src/app/shared/components/item-view-template/item-view-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, inject, ViewEncapsulation, ChangeDetectionStrategy, WritableSignal, signal } from '@angular/core';\r\nimport { Location, NgClass, NgFor, NgIf } from '@angular/common';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { ActivatedRoute, IsActiveMatchOptions, Params, Router, RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\n\r\nexport interface ItemViewConfiguration<T = any> {\r\n    item?: WritableSignal<T|null>;\r\n    nameItemFn?: (item: T) => string;\r\n    titleModule: string;\r\n    itemId?: string;\r\n    links: LinkNavProfile[];\r\n    loading?: boolean;\r\n    parseItemFn?: (item: T) => (T | Promise<T>);\r\n    afterSetItemFn?: (item: T) => void;\r\n    interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n    httpError?: FetchErrorResponse;\r\n    server: {\r\n        url: string;\r\n        queryParams?: { [key: string]: any };\r\n    }\r\n}\r\n\r\nexport interface LinkNavProfile {\r\n    text: string;\r\n    routerLink: string;\r\n    routerLinkActiveOptions?: { exact: boolean } | IsActiveMatchOptions;\r\n    queryParams?: Params | null;\r\n    icon?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-item-view-template',\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    RouterLink,\r\n    RouterLinkActive,\r\n    RouterOutlet,\r\n    MatTabsModule,\r\n    GetMixedValuePipe,\r\n  ],\r\n  templateUrl: './item-view-template.component.html',\r\n  styleUrls: ['./item-view-template.component.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ItemViewTemplateComponent {\r\n  @Input() public configuration!: ItemViewConfiguration;\r\n  public location = inject(Location);\r\n  public router = inject(Router);\r\n  public activatedRoute = inject(ActivatedRoute);\r\n  private fetch = inject(FetchService);\r\n  private abortController = new AbortController();\r\n\r\n  get links(): any {\r\n    return this.configuration.links;\r\n  }\r\n\r\n  \r\n\r\n  get itemId(): number | string {\r\n    return this.configuration.itemId ?? this.activatedRoute.snapshot.paramMap.get('id')!;\r\n  }\r\n\r\n  get titleModule(): string {\r\n    return this.configuration.titleModule;\r\n  }\r\n\r\n  get nameItemFn(): (item: any) => string {\r\n    return this.configuration.nameItemFn ?? ((item: any) => item?.name);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.configuration.item ??= signal(null);\r\n    this.activatedRoute.params.subscribe(() => this.getItem());\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private async getItem<T>() {\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { server } = this.configuration;\r\n      const queryParams = objectToURLSearchParams(server.queryParams ?? {});\r\n      const url = `${server.url}/${this.itemId}?${queryParams ? queryParams : ''}`;\r\n      const response = await this.fetch.get<T>(url, { signal: this.abortController.signal });\r\n      const { parseItemFn } = this.configuration;\r\n      const item = parseItemFn?.(response) ?? response;\r\n      const { afterSetItemFn } = this.configuration;\r\n      if (afterSetItemFn) afterSetItemFn(item);\r\n      this.configuration.item!.set(item);\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "afterSetItemFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "httpError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FetchErrorResponse",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "interceptHttpErrorItemFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<T | null>",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "itemId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "links",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LinkNavProfile[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "nameItemFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "parseItemFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "server",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "titleModule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LinkNavProfile",
            "id": "interface-LinkNavProfile-ffbc78c057c09fea1fa5e296071afb5056c624b620ccb7c46a2704c162751379f4a6427c3bd5b9d2d4fc0284bcba4198b97098fbefbb8365dce287501eb92a38",
            "file": "src/app/shared/components/item-view-template/item-view-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, inject, ViewEncapsulation, ChangeDetectionStrategy, WritableSignal, signal } from '@angular/core';\r\nimport { Location, NgClass, NgFor, NgIf } from '@angular/common';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { ActivatedRoute, IsActiveMatchOptions, Params, Router, RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\n\r\nexport interface ItemViewConfiguration<T = any> {\r\n    item?: WritableSignal<T|null>;\r\n    nameItemFn?: (item: T) => string;\r\n    titleModule: string;\r\n    itemId?: string;\r\n    links: LinkNavProfile[];\r\n    loading?: boolean;\r\n    parseItemFn?: (item: T) => (T | Promise<T>);\r\n    afterSetItemFn?: (item: T) => void;\r\n    interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n    httpError?: FetchErrorResponse;\r\n    server: {\r\n        url: string;\r\n        queryParams?: { [key: string]: any };\r\n    }\r\n}\r\n\r\nexport interface LinkNavProfile {\r\n    text: string;\r\n    routerLink: string;\r\n    routerLinkActiveOptions?: { exact: boolean } | IsActiveMatchOptions;\r\n    queryParams?: Params | null;\r\n    icon?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-item-view-template',\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    RouterLink,\r\n    RouterLinkActive,\r\n    RouterOutlet,\r\n    MatTabsModule,\r\n    GetMixedValuePipe,\r\n  ],\r\n  templateUrl: './item-view-template.component.html',\r\n  styleUrls: ['./item-view-template.component.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ItemViewTemplateComponent {\r\n  @Input() public configuration!: ItemViewConfiguration;\r\n  public location = inject(Location);\r\n  public router = inject(Router);\r\n  public activatedRoute = inject(ActivatedRoute);\r\n  private fetch = inject(FetchService);\r\n  private abortController = new AbortController();\r\n\r\n  get links(): any {\r\n    return this.configuration.links;\r\n  }\r\n\r\n  \r\n\r\n  get itemId(): number | string {\r\n    return this.configuration.itemId ?? this.activatedRoute.snapshot.paramMap.get('id')!;\r\n  }\r\n\r\n  get titleModule(): string {\r\n    return this.configuration.titleModule;\r\n  }\r\n\r\n  get nameItemFn(): (item: any) => string {\r\n    return this.configuration.nameItemFn ?? ((item: any) => item?.name);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.configuration.item ??= signal(null);\r\n    this.activatedRoute.params.subscribe(() => this.getItem());\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private async getItem<T>() {\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { server } = this.configuration;\r\n      const queryParams = objectToURLSearchParams(server.queryParams ?? {});\r\n      const url = `${server.url}/${this.itemId}?${queryParams ? queryParams : ''}`;\r\n      const response = await this.fetch.get<T>(url, { signal: this.abortController.signal });\r\n      const { parseItemFn } = this.configuration;\r\n      const item = parseItemFn?.(response) ?? response;\r\n      const { afterSetItemFn } = this.configuration;\r\n      if (afterSetItemFn) afterSetItemFn(item);\r\n      this.configuration.item!.set(item);\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Params | null",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "routerLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "routerLinkActiveOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | IsActiveMatchOptions",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ListColumn",
            "id": "interface-ListColumn-edc9a2c085d669b062640c6d2a97876fe56bb34f5ae23612a12a67b2af6f44bb5d3316d9f28e50d8c8d522c0e6ce8fc3245f639ec16593bc1c325c3c460a4296",
            "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule, DatePipe, Location, NgOptimizedImage } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, ViewChild, Input, ContentChild, TemplateRef, ElementRef, Renderer2, ViewEncapsulation, signal, WritableSignal, computed, inject, Inject, Optional, InjectionToken, EventEmitter, RendererStyleFlags2 } from '@angular/core';\r\nimport { MatCheckboxChange, MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSort, MatSortModule } from '@angular/material/sort';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from 'src/app/shared/utilities/queryParams';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { IndexListPipe } from '@pipe/index-list.pipe';\r\nimport { SpinnerDefaultComponent } from '@component/spinner-default/spinner-default.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { debounceTime } from 'rxjs';\r\nimport { DiffDatePipe } from '@pipe/diff-date.pipe';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { HiddenOptionButtonRowPipe } from '@pipe/hidden-option-button-row.pipe';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { GetUserByIdPipe } from '@pipe/get-user-by-id.pipe';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ListFormatPipe } from '@pipe/list-format.pipe';\r\nimport { LoadImagePrivateDirective } from '@directive/load-image-private.directive';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MatPseudoCheckboxModule } from '@angular/material/core';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { EventGlobalSearch, NAME_EVENT_GLOBAL_SEARCH } from 'src/app/sidenav/sidenav/sidenav.component';\r\nimport { ExecuteFunctionListPipe } from './execute-function-list.pipe';\r\nimport { FormInput, dateRangeFormInput, switchFormInput } from '@component/item-form-template/item-form-template.component';\r\nimport { RenameTitleColumnListPipe } from './rename-title-column-list.pipe';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DateFnsAdapter } from '@angular/material-date-fns-adapter';\r\nimport { MyDateAdapter } from '@utility/myDateAdapter';\r\nimport { MY_DATE_FORMATS } from '@utility/myDateFormat';\r\n\r\nexport const DATA_TYPE_LIST = new InjectionToken<'array' | 'paginator'>('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST');\r\n\r\nexport interface ItemListConfiguration<T = any> {\r\n  readonly dataType?: 'array' | 'paginator';\r\n  readonly keyGetItemsPaginator?: string;\r\n  readonly keyGetTotalItemsPaginator?: string;\r\n\r\n  readonly disableFiltersInQueryParams?: boolean;\r\n\r\n  title: string | null;\r\n\r\n  parseDataFn?: (data: T[]) => T[] | Promise<T[]>;\r\n  data?: WritableSignal<T[]>;\r\n  updateListEvent?: EventEmitter<void>;\r\n\r\n  defaultOrder?: {\r\n    key: string,\r\n    order: 'ASC' | 'DESC'\r\n  };\r\n\r\n  backButton?: boolean;\r\n\r\n  updateButton?: boolean;\r\n\r\n  server: {\r\n    readonly url: string,\r\n    queryParams?: { [key: string]: any } | string;\r\n  }\r\n\r\n  createButton?: {\r\n    text?: string,\r\n    routerLink: RouterLinkCreateButton\r\n  } | false;\r\n\r\n  filters?: FormInput[] | false;\r\n\r\n  rows?: {\r\n    selectable?: {\r\n      actions: SelectableActionButton<T>[];\r\n    };\r\n    index?: false | ({ title: string });\r\n    cssClass?: string | ((item: T) => string);\r\n    actions?: ActionButton<T>[];\r\n    options?: ActionButton<T>[] | false;\r\n  },\r\n\r\n  columns: WritableSignal<ListColumn<T>[]>;\r\n}\r\n\r\nexport interface RouterLinkCreateButton {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any;\r\n}\r\nexport interface RouterLinkItem<T> {\r\n  url: ((item: T, index: number) => string) | string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: ((item: T, index: number) => (string | { [key: string]: any } | any[] | number | null)) | string | { [key: string]: any } | any[] | number | null;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\ndeclare type ActionButtonActionsType = 'clickEvent' | 'routerLink';\r\ninterface ActionButton<T> {\r\n  type: 'clickEvent' | 'routerLink';\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((item: T, index: number) => boolean);\r\n  disabled?: boolean | ((item: T, index: number) => boolean);\r\n  cssClass?: string | ((item: T, index: number) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((item: T, index: number) => ({ [key: string]: any }));\r\n  fn?: (item: T, index: number, fns: {\r\n    deleteItemFn: (id: number | string) => Promise<void>,\r\n    restoreItemFn: (id: number | string) => Promise<void>,\r\n    updateChangesItemFn: (index: number, item: T) => void,\r\n  }) => void;\r\n  routerLink?: RouterLinkItem<T>;\r\n}\r\ninterface ClickEventActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'fn'>> & ActionButton<T>, 'type' | 'routerLink'> { }\r\nexport const clickEventActionButton = <T = any>(config: ClickEventActionButton<T>): ActionButton<T> => ({ type: 'clickEvent', ...config });\r\ninterface RouterLinkActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'routerLink'>> & ActionButton<T>, 'type' | 'clickEvent'> { }\r\nexport const routerLinkActionButton = <T = any>(config: RouterLinkActionButton<T>): ActionButton<T> => ({ type: 'routerLink', ...config });\r\ninterface SelectableActionButton<T> {\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((selectedItems: T[]) => boolean);\r\n  disabled?: boolean | ((selectedItems: T[]) => boolean);\r\n  cssClass?: string | ((selectedItems: T[]) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((selectedItems: T[]) => ({ [key: string]: any }));\r\n  fn: (selectedItems: T[]) => void;\r\n}\r\nexport const selectableActionButton = <T = any>(config: SelectableActionButton<T>): SelectableActionButton<T> => ({ ...config });\r\n\r\nexport interface ListItemExtended {\r\n  __selected__?: boolean;\r\n  __loading_status__?: boolean;\r\n}\r\n\r\nexport type TypeValueKeyItem = 'text' | 'diff-date' | 'date' | 'number' | 'email' | 'phone' | 'user' | 'uppercase' | 'lowercase' | 'titlecase' | 'first-letter-uppercase' | 'list-format' | 'currency';\r\n\r\nexport interface ListColumn<T> {\r\n  /**\r\n   * @description\r\n   * Agrega clases css al contenedor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   */\r\n  align?: 'left' | 'center' | 'right';\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor adicional de la celda de la columna\r\n   * @example\r\n   * clickEventAdditionalValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventAdditionalValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor de la celda de la columna\r\n   * @example\r\n   * clickEventValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css a la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClass: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClass?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor adicional de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayAdditionalValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo fecha (type: 'date')\r\n   * @example\r\n   * ...\r\n   * dateFormat: 'yyyy-MM-dd'\r\n   * ...\r\n   * dateFormat: 'dd/MM/yyyy' // Por defecto\r\n   * ...\r\n   */\r\n  dateFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor adicional a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.name\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayAdditionalValueFn?: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayValueFn: (item) => item.name\r\n   * ...\r\n   * displayValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * If you want to display a value in the column that is not in the item, you can use this function\r\n   * @example\r\n   * ...\r\n   * gridColumn: '1fr'\r\n   * ...\r\n   * gridColumn: '200px'\r\n   * ...\r\n   * gridColumn: 'max-content'\r\n   * ...\r\n   * gridColumn: 'fit-content(200px)'\r\n   * ...\r\n   */\r\n  gridColumn?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones > Columnas\r\n   * @example\r\n   * ...\r\n   * hidden: true\r\n   * ...\r\n   * hidden: false // Por defecto\r\n   * ...\r\n   */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo número (type: 'number')\r\n   * @example\r\n   * ...\r\n   * numberFormat: '2.2-2'\r\n   * ...\r\n   * numberFormat: '0.2-2' // Por defecto\r\n   * ...\r\n   */\r\n  numberFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor adicional de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkAdditionalValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Sortable column espicif key in object configuration\r\n   * @example\r\n   * sort: { key: 'name' }\r\n   */\r\n  sort?: { key: string };\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display additional value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: { color: 'green' }\r\n   * ...\r\n   * @param item\r\n   * @returns string | number | null | undefined | string[] | number[]\r\n   */\r\n  cssStyleDisplayAdditionalValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayValue: { color: 'green' }\r\n   * ...\r\n   */\r\n  cssStyleDisplayValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Title column\r\n   * @example\r\n   * title: 'Nombre'\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * @description\r\n   * To display a tooltip in the column on hover\r\n   * @example\r\n   * tooltip: 'Ver detalle'\r\n   */\r\n  tooltip?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * For show type value in cell\r\n   * @example\r\n   * ...\r\n   * type: 'number',\r\n   * displayValueFn: (item) => item.price, // output: 2,000.00\r\n   * ...\r\n   * type: 'date',\r\n   * displayValueFn: (item) => item.created_at, // output 12/12/2020\r\n   * ...\r\n   */\r\n  type?: TypeValueKeyItem | 'image' | 'html';\r\n\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface SimpleListColumn<T> extends Omit<ListColumn<T>, 'type' | 'displayAdditionalValueFn' | 'displayValueFn' | 'dateFormat' | 'numberFormat' | 'image'> { }\r\ninterface SimpleListColumn2<T> extends Omit<SimpleListColumn<T>, 'cssStyleDisplayAdditionalValue' | 'routerLinkAdditionalValue' | 'cssClassDisplayAdditionalValue' | 'clickEventAdditionalValue'> { }\r\ninterface ListFormatListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string[];\r\n  displayValueFn: (item: T, index: number) => string[];\r\n}\r\n\r\ninterface NumberListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => number | null | undefined;\r\n  numberFormat?: string;\r\n}\r\n\r\ninterface StringListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => string | number | null | undefined;\r\n}\r\n\r\ninterface DateListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined;\r\n  dateFormat?: string;\r\n}\r\n\r\ninterface ImageListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface HtmlListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n}\r\n\r\nexport const numberColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'number', ...config });\r\n\r\nexport const listFormatColumn = <T = any>(config: ListFormatListColumn<T>): ListColumn<T> => ({ type: 'list-format', ...config });\r\n\r\nexport const dateColumn = <T = any>(config: DateListColumn<T>): ListColumn<T> => ({ type: 'date', ...config });\r\n\r\nexport const diffDateColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'diff-date', ...config });\r\n\r\nexport const htmlColumn = <T = any>(config: HtmlListColumn<T>): ListColumn<T> => ({ type: 'html', ...config });\r\n\r\nexport const textColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'text', ...config });\r\n\r\nexport const uppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'uppercase', ...config });\r\n\r\nexport const lowercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'lowercase', ...config });\r\n\r\nexport const titlecaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'titlecase', ...config });\r\n\r\nexport const firstLetterUppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'first-letter-uppercase', ...config });\r\n\r\nexport const phoneColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'phone', ...config });\r\n\r\nexport const emailColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'email', ...config });\r\n\r\nexport const userColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'user', ...config });\r\n\r\nexport const imageColumn = <T = any>(config: ImageListColumn<T>): ListColumn<T> => ({ type: 'image', ...config });\r\n\r\n\r\nexport const itemNameAndDescriptionColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  title: 'Nombre',\r\n  gridColumn: '1fr',\r\n  sort: { key: 'name' },\r\n  routerLinkValue: { url: (item: any) => `../detail/${item.id}` },\r\n  displayValueFn: (item: any) => item.name,\r\n  displayAdditionalValueFn: (item: any) => item.description,\r\n  ...config,\r\n});\r\nexport const itemStatusColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'cssClassDisplayValue' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'first-letter-uppercase',\r\n  title: 'Estado',\r\n  sort: { key: 'status' },\r\n  align: 'center',\r\n  displayValueFn: (item: any) => item.status,\r\n  cssClassDisplayValue: (item: any) => `status-chip ${item.status}`,\r\n  ...config,\r\n});\r\nexport const itemCreatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Creado',\r\n  sort: { key: 'created_at' },\r\n  displayValueFn: (item: any) => item.created_at,\r\n  ...config,\r\n});\r\nexport const itemUpdatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Actualizado',\r\n  sort: { key: 'updated_at' },\r\n  hidden: true,\r\n  displayValueFn: (item: any) => item.updated_at,\r\n  ...config,\r\n});\r\nexport const simpleListColumns = (): ListColumn<any>[] => ([\r\n  itemNameAndDescriptionColumn(),\r\n  itemUpdatedAtColumn(),\r\n  itemCreatedAtColumn(),\r\n  itemStatusColumn(),\r\n]);\r\n\r\n\r\nexport const defaultListFilterInputs = (): FormInput[] => [\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de creación',\r\n    formControlNameFrom: 'created_at_from',\r\n    formControlNameTo: 'created_at_to',\r\n  }),\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de actualización',\r\n    formControlNameFrom: 'updated_at_from',\r\n    formControlNameTo: 'updated_at_to',\r\n  }),\r\n  switchFormInput({\r\n    textLabel: 'Registros inactivos',\r\n    formControlName: 'inactive',\r\n  }),\r\n];\r\n\r\nexport const deleteItemActionButton = () => clickEventActionButton({\r\n  icon: 'delete',\r\n  text: 'Eliminar',\r\n  fn: async ({ id }, _, { deleteItemFn }) => deleteItemFn(id),\r\n  hidden: (item) => item.deleted_at,\r\n});\r\n\r\nexport const restoreItemActionButton = () => clickEventActionButton({\r\n  icon: 'restore',\r\n  text: 'Restaurar',\r\n  fn: async ({ id }, _, { restoreItemFn }) => restoreItemFn(id),\r\n  hidden: (item) => !item.deleted_at,\r\n})\r\n\r\nexport const viewItemActionButton = () => routerLinkActionButton({\r\n  icon: 'visibility',\r\n  text: 'Ver',\r\n  routerLink: { url: (item) => `../view/${item.id}` },\r\n});\r\n\r\nexport const editItemActionButton = () => routerLinkActionButton({\r\n  icon: 'edit',\r\n  text: 'Editar',\r\n  routerLink: { url: (item) => `../edit/${item.id}` },\r\n})\r\n\r\n@Component({\r\n  selector: 'app-item-list-template',\r\n  standalone: true,\r\n  templateUrl: './item-list-template.component.html',\r\n  styleUrl: './item-list-template.component.css',\r\n  imports: [\r\n    CommonModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatSortModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatTooltipModule,\r\n    MatPseudoCheckboxModule,\r\n    IndexListPipe,\r\n    GetKeyItemPipe,\r\n    RouterLink,\r\n    DiffDatePipe,\r\n    HiddenOptionButtonRowPipe,\r\n    NgOptimizedImage,\r\n    ScrollingModule,\r\n    GetUserByIdPipe,\r\n    PathFilesServerPipe,\r\n    ListFormatPipe,\r\n    LoadImagePrivateDirective,\r\n    FirstLetterUppercasePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n    ExecuteFunctionListPipe,\r\n    RenameTitleColumnListPipe,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    FirstLetterUppercasePipe,\r\n    GetKeyItemPipe,\r\n    RenameTitleColumnListPipe,\r\n    BrowserAnimationsModule,\r\n    DateFnsAdapter,\r\n  ],\r\n})\r\nexport class ItemListTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemListConfiguration;\r\n\r\n  // @ContentChild('headers') headers!: TemplateRef<any>;\r\n  @ContentChild('rowList') rowList!: TemplateRef<any>;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  @ViewChild('divListItems', { static: true }) private divList!: ElementRef;\r\n\r\n  private _dataTypeList: 'array' | 'paginator' = 'array';\r\n  private _keyForGetItems: string;\r\n  private _keyForGetTotalItems: string;\r\n\r\n  private fetch = inject(FetchService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  private renderer = inject(Renderer2);\r\n  private eventsService = inject(EventsService);\r\n  public location = inject(Location);\r\n\r\n  // private datePipe = inject(DatePipe);\r\n  public firstLetterUppercasePipe = inject(FirstLetterUppercasePipe);\r\n  public getKeyItemPipe = inject(GetKeyItemPipe);\r\n  public renameTitleColumnListPipe = inject(RenameTitleColumnListPipe);\r\n\r\n  public lengthData = computed(() => this.data().length)\r\n\r\n  public searchCtrl: FormControl = new FormControl('');\r\n  public formFilters: FormGroup<any> | null = null;\r\n\r\n  public loading = signal(true);\r\n  public font: WritableSignal<'small' | 'medium' | 'large'> = signal('medium');\r\n  public headerListStyle: WritableSignal<'simple' | 'color'> = signal('simple');\r\n\r\n  private abortController = new AbortController();\r\n\r\n  private unsubscribe$: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(DATA_TYPE_LIST) _dataTypeList: 'array' | 'paginator',\r\n    @Optional() @Inject(KEY_GET_ITEMS_PAGINATOR_LIST) _keyForGetItems: string,\r\n    @Optional() @Inject(KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST) _keyForGetTotalItems: string\r\n  ) {\r\n    this._dataTypeList = _dataTypeList ?? 'paginator';\r\n    this._keyForGetItems = _keyForGetItems || 'data';\r\n    this._keyForGetTotalItems = _keyForGetTotalItems || 'total';\r\n  }\r\n\r\n  get data(): WritableSignal<any[]> {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  get defaultOrder(): string {\r\n    return this.configuration.defaultOrder ? `${this.configuration.defaultOrder?.key}|${this.configuration.defaultOrder?.order}` : 'id|DESC';\r\n  }\r\n\r\n  get dataTypeList(): 'array' | 'paginator' {\r\n    return this.configuration.dataType ?? this._dataTypeList;\r\n  }\r\n\r\n  get keyForGetItems(): string {\r\n    return this.configuration.keyGetItemsPaginator ?? this._keyForGetItems;\r\n  }\r\n\r\n  get keyForGetTotalItems(): string {\r\n    return this.configuration.keyGetTotalItemsPaginator ?? this._keyForGetTotalItems;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.configuration.data = signal([]);\r\n    this.configuration.updateListEvent = new EventEmitter();\r\n    if (this.configuration.rows?.options != false && !this.configuration.rows?.options?.length) {\r\n      this.configuration.rows = {\r\n        ...(this.configuration.rows ?? {}),\r\n        options: [\r\n          viewItemActionButton(),\r\n          editItemActionButton(),\r\n          deleteItemActionButton(),\r\n          restoreItemActionButton(),\r\n        ]\r\n      };\r\n    }\r\n    this.generateFormControlsFromFilterInputs();\r\n    this.generateColumnsCss();\r\n\r\n    this.eventsService\r\n      .eventsFiltered<EventGlobalSearch>([NAME_EVENT_GLOBAL_SEARCH])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(({ data }: any) => {\r\n        const type = data.type;\r\n        if (type == 'enter') this.searchCtrl.setValue(data.value);\r\n      })\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.paginator.pageIndex = 0;\r\n    this.paginator.pageSize = 20;\r\n\r\n    this.verifyQueryParams();\r\n\r\n    this.activatedRoute.queryParams.subscribe(() => this.callGetData());\r\n\r\n    this.sort.sortChange.subscribe(({ active, direction }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (this.defaultOrder == `${active}|${direction}` || !active || !direction) queryParams['order'] = null;\r\n      else queryParams['order'] = `${active}|${direction}`;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.searchCtrl.valueChanges.pipe(debounceTime(250)).subscribe((value: string) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (value) queryParams['search'] = value;\r\n      else queryParams['search'] = null;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.paginator.page.subscribe(({ pageIndex, pageSize }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (pageIndex == 0 || (queryParams['page'] ?? null) == pageIndex + 1) queryParams['page'] = null;\r\n      else queryParams['page'] = pageIndex + 1;\r\n      if (pageSize == 20 || (queryParams['per_page'] ?? null) == pageSize) queryParams['per_page'] = null;\r\n      else queryParams['per_page'] = pageSize;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.eventsService\r\n      .eventsFiltered([\r\n        `${this.configuration.server.url}_created`,\r\n        `${this.configuration.server.url}_updated`\r\n      ])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(() => this.callGetData());\r\n\r\n    // this.configuration.updateListEvent!.subscribe(() => this.callGetData({}));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n    if (this.abortController) this.abortController.abort();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private async generateColumnsCss(): Promise<void> {\r\n    const grid_cols: string[] = [];\r\n    const grid_areas: string[] = []\r\n    if (this.configuration.rows?.selectable) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('selected');\r\n    }\r\n    if (this.configuration.rows?.index != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('index');\r\n    }\r\n    for await (const column of this.configuration.columns()) {\r\n      if (!column.hidden) {\r\n        grid_cols.push(column.gridColumn ?? 'auto');\r\n        grid_areas.push(this.renameTitleColumnListPipe.transform(column.title));\r\n      }\r\n    }\r\n    if (this.configuration.rows?.actions) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('actions');\r\n    }\r\n    if (this.configuration.rows?.options != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('options');\r\n    }\r\n    this.renderer.setStyle(this.divList.nativeElement, 'grid-template-columns', grid_cols.join(' '));\r\n    this.renderer.setStyle(this.divList.nativeElement, '--items-list-grid-template-areas', `\"${grid_areas.join(' ')}\"`, RendererStyleFlags2.DashCase);\r\n    grid_areas.forEach((area, index) => this.renderer.setStyle(this.divList.nativeElement, `--items-list-grid-area-${index + 1}`, area, RendererStyleFlags2.DashCase));\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private getQueryParams(): { [key: string]: any } {\r\n    return !this.configuration.disableFiltersInQueryParams ? JSON.parse(JSON.stringify(this.activatedRoute.snapshot.queryParams)) : {\r\n      ...this.formFilters?.value ?? {},\r\n      page: this.paginator.pageIndex + 1,\r\n      per_page: this.paginator.pageSize,\r\n      order: this.sort.active ? `${this.sort.active}|${this.sort.direction}` : null,\r\n      search: this.searchCtrl.value ? this.searchCtrl.value : null,\r\n    }\r\n  }\r\n\r\n  private navigateOrCallGetData(params: any): void {\r\n    if (this.configuration.disableFiltersInQueryParams) this.callGetData(params);\r\n    else this.router.navigate([], { queryParams: params });\r\n  }\r\n\r\n  private verifyQueryParams(): void {\r\n    const queryParams = {} as any;\r\n    const { page, per_page, order, search, ...filters } = queryParams;\r\n    this.paginator.pageIndex = Number(page ?? 1) - 1;\r\n    this.paginator.pageSize = Number(per_page) ?? 20;\r\n    this.sort.active = order?.split('|')[0] ?? '';\r\n    this.sort.direction = order?.split('|')[1] == 'asc' ? 'asc' : 'desc';\r\n    this.sort.sortChange.emit();\r\n    this.searchCtrl.setValue(search ?? null, { emitEvent: false });\r\n  }\r\n\r\n  public callGetData(queryParams: any = {}): void {\r\n    const params = objectToURLSearchParams(queryParams);\r\n    if (!params.has('page')) params.set('page', String(this.paginator.pageIndex + 1));\r\n    if (!params.has('per_page')) params.set('per_page', String(this.paginator.pageSize));\r\n    if (!params.has('order')) params.set('order', this.defaultOrder);\r\n    this.getData(params);\r\n  }\r\n\r\n  private async getData(searchParams: URLSearchParams = new URLSearchParams()): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const serverUrl = this.configuration.server.url;\r\n    let queryParams = this.configuration.server.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const url = `${serverUrl}?${searchParams.toString()}&${queryParams ?? ''}`;\r\n    const config = { signal: this.abortController.signal };\r\n    try {\r\n      let items = [];\r\n      let totalItems = 0;\r\n      if (this.dataTypeList == 'array') {\r\n        items = await this.fetch.get<any[]>(url, config);\r\n        totalItems = items.length;\r\n      } else {\r\n        const paginatorData = await this.fetch.get<PaginatorData<any>>(url, config);\r\n        items = this.getKeyItemPipe.transform(paginatorData, this.keyForGetItems);\r\n        totalItems = this.getKeyItemPipe.transform(paginatorData, this.keyForGetTotalItems);\r\n      }\r\n      const { parseDataFn } = this.configuration;\r\n      const parseData = await parseDataFn?.(items) ?? items;\r\n      this.paginator.length = totalItems;\r\n      this.data.set(parseData);\r\n      this.loading.set(false);\r\n      this.checkSelectedItems();\r\n    } catch (err: any) {\r\n      if (err.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n  }\r\n\r\n  public hiddenToggleColumn($event: MatCheckboxChange, index: number): void {\r\n    this.configuration.columns.update((columns) => {\r\n      columns[index]['hidden'] = !$event.checked\r\n      return columns;\r\n    })\r\n    this.generateColumnsCss();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public navigateCreateView(): void {\r\n    this.router.navigate(['../create'], { relativeTo: this.activatedRoute });\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public allSelectedItems = signal(false);\r\n  public someSelectedItems = signal(false);\r\n  public selectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__));\r\n  public lengthSelectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__).length);\r\n\r\n  public selectedItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.toSpliced(index, 1, { ...data[index], __selected__: status }));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public selectedAllItems(status: boolean): void {\r\n    this.data.update((data) => data.map((e) => ({ ...e, __selected__: status })));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public someSelected(): boolean {\r\n    return this.data().length > 0 && this.data().some((e: ListItemExtended) => e.__selected__) && !this.allSelectedItems();\r\n  }\r\n\r\n  private checkSelectedItems(): void {\r\n    this.allSelectedItems.set(this.data().length > 0 && this.data().every((e: ListItemExtended) => e.__selected__));\r\n    this.someSelectedItems.set(this.someSelected());\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private generateFormControlsFromFilterInputs(): void {\r\n    if (this.configuration.filters == false) return;\r\n    if (!this.configuration.filters?.length) this.configuration.filters = defaultListFilterInputs();\r\n    const formFilters = new FormGroup({});\r\n    this.configuration.filters?.forEach((filter) => {\r\n      if (filter.text) {\r\n        formFilters.setControl(filter.text.formControlName, new FormControl(filter.text.defaultValue));\r\n      } else if (filter.textarea) {\r\n        formFilters.setControl(filter.textarea.formControlName, new FormControl(filter.textarea.defaultValue));\r\n      } else if (filter.select) {\r\n        formFilters.setControl(filter.select.formControlName, new FormControl(filter.select.defaultValue));\r\n      } else if (filter.number) {\r\n        formFilters.setControl(filter.number.formControlName, new FormControl(filter.number.defaultValue));\r\n      } else if (filter.date) {\r\n        formFilters.setControl(filter.date.formControlName, new FormControl(filter.date.defaultValue));\r\n      } else if (filter.dateRange) {\r\n        formFilters.setControl(filter.dateRange.formControlNameFrom, new FormControl(filter.dateRange.defaultValueFrom));\r\n        formFilters.setControl(filter.dateRange.formControlNameTo, new FormControl(filter.dateRange.defaultValueTo));\r\n      } else if (filter.autocompleteLocal) {\r\n        formFilters.setControl(filter.autocompleteLocal.formControlName, new FormControl(filter.autocompleteLocal.defaultValue));\r\n      } else if (filter.autocompleteServer) {\r\n        formFilters.setControl(filter.autocompleteServer.formControlName, new FormControl(filter.autocompleteServer.defaultValue));\r\n      } else if (filter.checkbox) {\r\n        formFilters.setControl(filter.checkbox.formControlName, new FormControl(filter.checkbox.defaultValue));\r\n      } else if (filter.switch) {\r\n        formFilters.setControl(filter.switch.formControlName, new FormControl(filter.switch.defaultValue));\r\n      }\r\n    });\r\n    this.formFilters = formFilters;\r\n  }\r\n\r\n  public getControlFormFilter(name: string): FormControl {\r\n    return this.formFilters!.get(name) as FormControl;\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private updateLoadingStatusItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.map((item: ListItemExtended, i) => {\r\n      if (i == index) item.__loading_status__ = status;\r\n      return item;\r\n    }));\r\n  }\r\n\r\n  public deleteItem = async (id: number | string) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}`;\r\n    try {\r\n      await this.fetch.delete(url);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public restoreItem = async (id: string | number) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}/restore`;\r\n    const config = { afterAlert: { description: 'Restaurando ítem de la lista' } }\r\n    try {\r\n      await this.fetch.put(url, config);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public updateChangesItem = (index: number, item: any) => {\r\n    this.configuration.data!.update(items => items.toSpliced(index, 1, item));\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "align",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"left\" | \"center\" | \"right\"",
                    "optional": true,
                    "description": "<p>Agrega clases css al contenedor de la celda de la columna</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">...\ncssClass: (item) =&gt; item.status === &#39;active&#39; ? &#39;text-green-500&#39; : &#39;text-red-500&#39;</code></pre></div>",
                    "line": 161,
                    "rawdescription": "\n\nAgrega clases css al contenedor de la celda de la columna\n```html\n...\ncssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\n```",
                    "jsdoctags": [
                        {
                            "pos": 7721,
                            "end": 7804,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 7722,
                                "end": 7733,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "description"
                            },
                            "comment": "<p>Agrega clases css al contenedor de la celda de la columna</p>\n"
                        },
                        {
                            "pos": 7804,
                            "end": 7914,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 7805,
                                "end": 7812,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>...\ncssClass: (item) =&gt; item.status === &#39;active&#39; ? &#39;text-green-500&#39; : &#39;text-red-500&#39;</p>\n"
                        }
                    ]
                },
                {
                    "name": "clickEventAdditionalValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>Función que se ejecuta al dar click en el valor adicional de la celda de la columna</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">clickEventAdditionalValue: (item) =&gt; { // TODO }</code></pre></div>",
                    "line": 171,
                    "rawdescription": "\n\nFunción que se ejecuta al dar click en el valor adicional de la celda de la columna\n```html\nclickEventAdditionalValue: (item) => { // TODO }\n```",
                    "jsdoctags": [
                        {
                            "pos": 7972,
                            "end": 8081,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 7973,
                                "end": 7984,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "description"
                            },
                            "comment": "<p>Función que se ejecuta al dar click en el valor adicional de la celda de la columna</p>\n"
                        },
                        {
                            "pos": 8081,
                            "end": 8151,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 8082,
                                "end": 8089,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>clickEventAdditionalValue: (item) =&gt; { // TODO }</p>\n"
                        },
                        {
                            "pos": 8151,
                            "end": 8226,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 348,
                            "tagName": {
                                "pos": 8152,
                                "end": 8157,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>como parámetro pasa el item de cada elemento de la lista</p>\n",
                            "name": {
                                "pos": 8158,
                                "end": 8162,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "item"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        },
                        {
                            "pos": 8226,
                            "end": 8244,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 349,
                            "tagName": {
                                "pos": 8227,
                                "end": 8234,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>void</p>\n"
                        }
                    ]
                },
                {
                    "name": "clickEventValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>Función que se ejecuta al dar click en el valor de la celda de la columna</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">clickEventValue: (item) =&gt; { // TODO }</code></pre></div>",
                    "line": 181,
                    "rawdescription": "\n\nFunción que se ejecuta al dar click en el valor de la celda de la columna\n```html\nclickEventValue: (item) => { // TODO }\n```",
                    "jsdoctags": [
                        {
                            "pos": 8327,
                            "end": 8426,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 8328,
                                "end": 8339,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "description"
                            },
                            "comment": "<p>Función que se ejecuta al dar click en el valor de la celda de la columna</p>\n"
                        },
                        {
                            "pos": 8426,
                            "end": 8486,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 8427,
                                "end": 8434,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>clickEventValue: (item) =&gt; { // TODO }</p>\n"
                        },
                        {
                            "pos": 8486,
                            "end": 8561,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 348,
                            "tagName": {
                                "pos": 8487,
                                "end": 8492,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>como parámetro pasa el item de cada elemento de la lista</p>\n",
                            "name": {
                                "pos": 8493,
                                "end": 8497,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "item"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        },
                        {
                            "pos": 8561,
                            "end": 8579,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 349,
                            "tagName": {
                                "pos": 8562,
                                "end": 8569,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>void</p>\n"
                        }
                    ]
                },
                {
                    "name": "cssClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | string",
                    "optional": true,
                    "description": "<p>Agrega clases css a la celda de la columna</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">...\ncssClass: (item) =&gt; item.status === &#39;active&#39; ? &#39;text-green-500&#39; : &#39;text-red-500&#39;\n...\ncssClass: &#39;text-green-500&#39;\n...</code></pre></div>",
                    "line": 193,
                    "rawdescription": "\n\nAgrega clases css a la celda de la columna\n```html\n...\ncssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\n...\ncssClass: 'text-green-500'\n...\n```",
                    "jsdoctags": [
                        {
                            "pos": 8652,
                            "end": 8720,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 8653,
                                "end": 8664,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "description"
                            },
                            "comment": "<p>Agrega clases css a la celda de la columna</p>\n"
                        },
                        {
                            "pos": 8720,
                            "end": 8883,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 8721,
                                "end": 8728,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>...\ncssClass: (item) =&gt; item.status === &#39;active&#39; ? &#39;text-green-500&#39; : &#39;text-red-500&#39;\n...\ncssClass: &#39;text-green-500&#39;\n...</p>\n"
                        }
                    ]
                },
                {
                    "name": "cssClassDisplayAdditionalValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | string",
                    "optional": true,
                    "description": "<p>Agrega clases css al elemento del valor adicional de la celda de la columna</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">...\ncssClassDisplayAdditionalValue: (item) =&gt; item.status === &#39;active&#39; ? &#39;text-green-500&#39; : &#39;text-red-500&#39;\n...\ncssClassDisplayAdditionalValue: &#39;text-green-500&#39;\n...</code></pre></div>",
                    "line": 205,
                    "rawdescription": "\n\nAgrega clases css al elemento del valor adicional de la celda de la columna\n```html\n...\ncssClassDisplayAdditionalValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\n...\ncssClassDisplayAdditionalValue: 'text-green-500'\n...\n```",
                    "jsdoctags": [
                        {
                            "pos": 8947,
                            "end": 9048,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 8948,
                                "end": 8959,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "description"
                            },
                            "comment": "<p>Agrega clases css al elemento del valor adicional de la celda de la columna</p>\n"
                        },
                        {
                            "pos": 9048,
                            "end": 9255,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 9049,
                                "end": 9056,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>...\ncssClassDisplayAdditionalValue: (item) =&gt; item.status === &#39;active&#39; ? &#39;text-green-500&#39; : &#39;text-red-500&#39;\n...\ncssClassDisplayAdditionalValue: &#39;text-green-500&#39;\n...</p>\n"
                        }
                    ]
                },
                {
                    "name": "cssClassDisplayValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | string",
                    "optional": true,
                    "description": "<p>Agrega clases css al elemento del valor de la celda de la columna</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">...\ncssClassDisplayValue: (item) =&gt; item.status === &#39;active&#39; ? &#39;text-green-500&#39; : &#39;text-red-500&#39;\n...\ncssClassDisplayValue: &#39;text-green-500&#39;\n...</code></pre></div>",
                    "line": 217,
                    "rawdescription": "\n\nAgrega clases css al elemento del valor de la celda de la columna\n```html\n...\ncssClassDisplayValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\n...\ncssClassDisplayValue: 'text-green-500'\n...\n```",
                    "jsdoctags": [
                        {
                            "pos": 9341,
                            "end": 9432,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 9342,
                                "end": 9353,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "description"
                            },
                            "comment": "<p>Agrega clases css al elemento del valor de la celda de la columna</p>\n"
                        },
                        {
                            "pos": 9432,
                            "end": 9619,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 9433,
                                "end": 9440,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>...\ncssClassDisplayValue: (item) =&gt; item.status === &#39;active&#39; ? &#39;text-green-500&#39; : &#39;text-red-500&#39;\n...\ncssClassDisplayValue: &#39;text-green-500&#39;\n...</p>\n"
                        }
                    ]
                },
                {
                    "name": "cssStyleDisplayAdditionalValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | ",
                    "optional": true,
                    "description": "<p>Set Inline style for display additional value</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">...\ncssStyleDisplayAdditionalValue: (item) =&gt; ({ color: item.status === &#39;active&#39; ? &#39;green&#39; : &#39;red&#39; })\n...\ncssStyleDisplayAdditionalValue: { color: &#39;green&#39; }\n...</code></pre></div>",
                    "line": 361,
                    "rawdescription": "\n\nSet Inline style for display additional value\n```html\n...\ncssStyleDisplayAdditionalValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\n...\ncssStyleDisplayAdditionalValue: { color: 'green' }\n...\n```",
                    "jsdoctags": [
                        {
                            "pos": 13212,
                            "end": 13283,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 13213,
                                "end": 13224,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "description"
                            },
                            "comment": "<p>Set Inline style for display additional value</p>\n"
                        },
                        {
                            "pos": 13283,
                            "end": 13489,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 13284,
                                "end": 13291,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>...\ncssStyleDisplayAdditionalValue: (item) =&gt; ({ color: item.status === &#39;active&#39; ? &#39;green&#39; : &#39;red&#39; })\n...\ncssStyleDisplayAdditionalValue: { color: &#39;green&#39; }\n...</p>\n"
                        },
                        {
                            "pos": 13489,
                            "end": 13507,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 348,
                            "tagName": {
                                "pos": 13490,
                                "end": 13495,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 13496,
                                "end": 13500,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "item"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        },
                        {
                            "pos": 13507,
                            "end": 13577,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 349,
                            "tagName": {
                                "pos": 13508,
                                "end": 13515,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>string | number | null | undefined | string[] | number[]</p>\n"
                        }
                    ]
                },
                {
                    "name": "cssStyleDisplayValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | ",
                    "optional": true,
                    "description": "<p>Set Inline style for display value</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">...\ncssStyleDisplayValue: (item) =&gt; ({ color: item.status === &#39;active&#39; ? &#39;green&#39; : &#39;red&#39; })\n...\ncssStyleDisplayValue: { color: &#39;green&#39; }\n...</code></pre></div>",
                    "line": 373,
                    "rawdescription": "\n\nSet Inline style for display value\n```html\n...\ncssStyleDisplayValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\n...\ncssStyleDisplayValue: { color: 'green' }\n...\n```",
                    "jsdoctags": [
                        {
                            "pos": 13714,
                            "end": 13774,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 13715,
                                "end": 13726,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "description"
                            },
                            "comment": "<p>Set Inline style for display value</p>\n"
                        },
                        {
                            "pos": 13774,
                            "end": 13958,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 13775,
                                "end": 13782,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>...\ncssStyleDisplayValue: (item) =&gt; ({ color: item.status === &#39;active&#39; ? &#39;green&#39; : &#39;red&#39; })\n...\ncssStyleDisplayValue: { color: &#39;green&#39; }\n...</p>\n"
                        }
                    ]
                },
                {
                    "name": "dateFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Establece el formato de la columna cuando esta es de tipo fecha (type: &#39;date&#39;)</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">...\ndateFormat: &#39;yyyy-MM-dd&#39;\n...\ndateFormat: &#39;dd/MM/yyyy&#39; // Por defecto\n...</code></pre></div>",
                    "line": 229,
                    "rawdescription": "\n\nEstablece el formato de la columna cuando esta es de tipo fecha (type: 'date')\n```html\n...\ndateFormat: 'yyyy-MM-dd'\n...\ndateFormat: 'dd/MM/yyyy' // Por defecto\n...\n```",
                    "jsdoctags": [
                        {
                            "pos": 9695,
                            "end": 9799,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 9696,
                                "end": 9707,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "description"
                            },
                            "comment": "<p>Establece el formato de la columna cuando esta es de tipo fecha (type: &#39;date&#39;)</p>\n"
                        },
                        {
                            "pos": 9799,
                            "end": 9919,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 9800,
                                "end": 9807,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>...\ndateFormat: &#39;yyyy-MM-dd&#39;\n...\ndateFormat: &#39;dd/MM/yyyy&#39; // Por defecto\n...</p>\n"
                        }
                    ]
                },
                {
                    "name": "displayAdditionalValueFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>Función que retorna el valor adicional a mostrar en la celda de cada columna</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">...\ndisplayAdditionalValueFn: (item) =&gt; item.name\n...\ndisplayAdditionalValueFn: (item) =&gt; item.price // with type &#39;number&#39;\n...\ndisplayAdditionalValueFn: (item) =&gt;  `&lt;p&gt;${item.name} &lt;i&gt;${item.email}&lt;/i&gt;&lt;/p&gt;`// with type &#39;html&#39;\n...\ndisplayAdditionalValueFn: (item) =&gt; item.contacts.map((contact) =&gt; contact.name) // with type &#39;list-format&#39;\n...</code></pre></div>",
                    "line": 247,
                    "rawdescription": "\n\nFunción que retorna el valor adicional a mostrar en la celda de cada columna\n```html\n...\ndisplayAdditionalValueFn: (item) => item.name\n...\ndisplayAdditionalValueFn: (item) => item.price // with type 'number'\n...\ndisplayAdditionalValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\n...\ndisplayAdditionalValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\n...\n```",
                    "jsdoctags": [
                        {
                            "pos": 9961,
                            "end": 10063,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 9962,
                                "end": 9973,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "description"
                            },
                            "comment": "<p>Función que retorna el valor adicional a mostrar en la celda de cada columna</p>\n"
                        },
                        {
                            "pos": 10063,
                            "end": 10474,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 10064,
                                "end": 10071,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>...\ndisplayAdditionalValueFn: (item) =&gt; item.name\n...\ndisplayAdditionalValueFn: (item) =&gt; item.price // with type &#39;number&#39;\n...\ndisplayAdditionalValueFn: (item) =&gt;  <code>&lt;p&gt;${item.name} &lt;i&gt;${item.email}&lt;/i&gt;&lt;/p&gt;</code>// with type &#39;html&#39;\n...\ndisplayAdditionalValueFn: (item) =&gt; item.contacts.map((contact) =&gt; contact.name) // with type &#39;list-format&#39;\n...</p>\n"
                        },
                        {
                            "pos": 10474,
                            "end": 10492,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 348,
                            "tagName": {
                                "pos": 10475,
                                "end": 10480,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 10481,
                                "end": 10485,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "item"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        },
                        {
                            "pos": 10492,
                            "end": 10569,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 349,
                            "tagName": {
                                "pos": 10493,
                                "end": 10500,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Date | string | number | null | undefined | string[] | number[]</p>\n"
                        }
                    ]
                },
                {
                    "name": "displayValueFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Función que retorna el valor a mostrar en la celda de cada columna</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">...\ndisplayValueFn: (item) =&gt; item.name\n...\ndisplayValueFn: (item) =&gt; item.price // with type &#39;number&#39;\n...\ndisplayValueFn: (item) =&gt;  `&lt;p&gt;${item.name} &lt;i&gt;${item.email}&lt;/i&gt;&lt;/p&gt;`// with type &#39;html&#39;\n...\ndisplayValueFn: (item) =&gt; item.contacts.map((contact) =&gt; contact.name) // with type &#39;list-format&#39;\n...</code></pre></div>",
                    "line": 265,
                    "rawdescription": "\n\nFunción que retorna el valor a mostrar en la celda de cada columna\n```html\n...\ndisplayValueFn: (item) => item.name\n...\ndisplayValueFn: (item) => item.price // with type 'number'\n...\ndisplayValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\n...\ndisplayValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\n...\n```",
                    "jsdoctags": [
                        {
                            "pos": 10710,
                            "end": 10802,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 10711,
                                "end": 10722,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "description"
                            },
                            "comment": "<p>Función que retorna el valor a mostrar en la celda de cada columna</p>\n"
                        },
                        {
                            "pos": 10802,
                            "end": 11173,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 10803,
                                "end": 10810,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>...\ndisplayValueFn: (item) =&gt; item.name\n...\ndisplayValueFn: (item) =&gt; item.price // with type &#39;number&#39;\n...\ndisplayValueFn: (item) =&gt;  <code>&lt;p&gt;${item.name} &lt;i&gt;${item.email}&lt;/i&gt;&lt;/p&gt;</code>// with type &#39;html&#39;\n...\ndisplayValueFn: (item) =&gt; item.contacts.map((contact) =&gt; contact.name) // with type &#39;list-format&#39;\n...</p>\n"
                        },
                        {
                            "pos": 11173,
                            "end": 11191,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 348,
                            "tagName": {
                                "pos": 11174,
                                "end": 11179,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 11180,
                                "end": 11184,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "item"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        },
                        {
                            "pos": 11191,
                            "end": 11268,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 349,
                            "tagName": {
                                "pos": 11192,
                                "end": 11199,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Date | string | number | null | undefined | string[] | number[]</p>\n"
                        }
                    ]
                },
                {
                    "name": "gridColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>If you want to display a value in the column that is not in the item, you can use this function</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">...\ngridColumn: &#39;1fr&#39;\n...\ngridColumn: &#39;200px&#39;\n...\ngridColumn: &#39;max-content&#39;\n...\ngridColumn: &#39;fit-content(200px)&#39;\n...</code></pre></div>",
                    "line": 281,
                    "rawdescription": "\n\nIf you want to display a value in the column that is not in the item, you can use this function\n```html\n...\ngridColumn: '1fr'\n...\ngridColumn: '200px'\n...\ngridColumn: 'max-content'\n...\ngridColumn: 'fit-content(200px)'\n...\n```",
                    "jsdoctags": [
                        {
                            "pos": 11398,
                            "end": 11519,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 11399,
                                "end": 11410,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "description"
                            },
                            "comment": "<p>If you want to display a value in the column that is not in the item, you can use this function</p>\n"
                        },
                        {
                            "pos": 11519,
                            "end": 11703,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 11520,
                                "end": 11527,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>...\ngridColumn: &#39;1fr&#39;\n...\ngridColumn: &#39;200px&#39;\n...\ngridColumn: &#39;max-content&#39;\n...\ngridColumn: &#39;fit-content(200px)&#39;\n...</p>\n"
                        }
                    ]
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Establece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones &gt; Columnas</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">...\nhidden: true\n...\nhidden: false // Por defecto\n...</code></pre></div>",
                    "line": 293,
                    "rawdescription": "\n\nEstablece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones > Columnas\n```html\n...\nhidden: true\n...\nhidden: false // Por defecto\n...\n```",
                    "jsdoctags": [
                        {
                            "pos": 11745,
                            "end": 11882,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 11746,
                                "end": 11757,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "description"
                            },
                            "comment": "<p>Establece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones &gt; Columnas</p>\n"
                        },
                        {
                            "pos": 11882,
                            "end": 11979,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 11883,
                                "end": 11890,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>...\nhidden: true\n...\nhidden: false // Por defecto\n...</p>\n"
                        }
                    ]
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 405
                },
                {
                    "name": "numberFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Establece el formato de la columna cuando esta es de tipo número (type: &#39;number&#39;)</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">...\nnumberFormat: &#39;2.2-2&#39;\n...\nnumberFormat: &#39;0.2-2&#39; // Por defecto\n...</code></pre></div>",
                    "line": 305,
                    "rawdescription": "\n\nEstablece el formato de la columna cuando esta es de tipo número (type: 'number')\n```html\n...\nnumberFormat: '2.2-2'\n...\nnumberFormat: '0.2-2' // Por defecto\n...\n```",
                    "jsdoctags": [
                        {
                            "pos": 12018,
                            "end": 12125,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 12019,
                                "end": 12030,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "description"
                            },
                            "comment": "<p>Establece el formato de la columna cuando esta es de tipo número (type: &#39;number&#39;)</p>\n"
                        },
                        {
                            "pos": 12125,
                            "end": 12239,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 12126,
                                "end": 12133,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>...\nnumberFormat: &#39;2.2-2&#39;\n...\nnumberFormat: &#39;0.2-2&#39; // Por defecto\n...</p>\n"
                        }
                    ]
                },
                {
                    "name": "routerLinkAdditionalValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouterLinkItem<T>",
                    "optional": true,
                    "description": "<p>Para agregarle routerLink al valor adicional de la columna</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">...\nrouterLinkAdditionalValue: {\n    url: (item) =&gt; `/admin/usuarios/${item.id}`,\n}\n...\nrouterLinkAdditionalValue: {\n   outlet: &#39;route-lateral&#39;,\n   url: &#39;/admin/usuarios&#39;,\n}\n...</code></pre></div>",
                    "line": 322,
                    "rawdescription": "\n\nPara agregarle routerLink al valor adicional de la columna\n```html\n...\nrouterLinkAdditionalValue: {\n    url: (item) => `/admin/usuarios/${item.id}`,\n}\n...\nrouterLinkAdditionalValue: {\n   outlet: 'route-lateral',\n   url: '/admin/usuarios',\n}\n...\n```",
                    "jsdoctags": [
                        {
                            "pos": 12283,
                            "end": 12367,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 12284,
                                "end": 12295,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "description"
                            },
                            "comment": "<p>Para agregarle routerLink al valor adicional de la columna</p>\n"
                        },
                        {
                            "pos": 12367,
                            "end": 12618,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 12368,
                                "end": 12375,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>...\nrouterLinkAdditionalValue: {\n    url: (item) =&gt; <code>/admin/usuarios/${item.id}</code>,\n}\n...\nrouterLinkAdditionalValue: {\n   outlet: &#39;route-lateral&#39;,\n   url: &#39;/admin/usuarios&#39;,\n}\n...</p>\n"
                        }
                    ]
                },
                {
                    "name": "routerLinkValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouterLinkItem<T>",
                    "optional": true,
                    "description": "<p>Para agregarle routerLink al valor de la columna</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">...\nrouterLinkValue: {\n    url: (item) =&gt; `/admin/usuarios/${item.id}`,\n}\n...\nrouterLinkValue: {\n   outlet: &#39;route-lateral&#39;,\n   url: &#39;/admin/usuarios&#39;,\n}\n...</code></pre></div>",
                    "line": 339,
                    "rawdescription": "\n\nPara agregarle routerLink al valor de la columna\n```html\n...\nrouterLinkValue: {\n    url: (item) => `/admin/usuarios/${item.id}`,\n}\n...\nrouterLinkValue: {\n   outlet: 'route-lateral',\n   url: '/admin/usuarios',\n}\n...\n```",
                    "jsdoctags": [
                        {
                            "pos": 12686,
                            "end": 12760,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 12687,
                                "end": 12698,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "description"
                            },
                            "comment": "<p>Para agregarle routerLink al valor de la columna</p>\n"
                        },
                        {
                            "pos": 12760,
                            "end": 12991,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 12761,
                                "end": 12768,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>...\nrouterLinkValue: {\n    url: (item) =&gt; <code>/admin/usuarios/${item.id}</code>,\n}\n...\nrouterLinkValue: {\n   outlet: &#39;route-lateral&#39;,\n   url: &#39;/admin/usuarios&#39;,\n}\n...</p>\n"
                        }
                    ]
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "<p>Sortable column espicif key in object configuration</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">sort: { key: &#39;name&#39; }</code></pre></div>",
                    "line": 347,
                    "rawdescription": "\n\nSortable column espicif key in object configuration\n```html\nsort: { key: 'name' }\n```",
                    "jsdoctags": [
                        {
                            "pos": 13049,
                            "end": 13126,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 13050,
                                "end": 13061,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "description"
                            },
                            "comment": "<p>Sortable column espicif key in object configuration</p>\n"
                        },
                        {
                            "pos": 13126,
                            "end": 13167,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 13127,
                                "end": 13134,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>sort: { key: &#39;name&#39; }</p>\n"
                        }
                    ]
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Title column</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">title: &#39;Nombre&#39;</code></pre></div>",
                    "line": 381,
                    "rawdescription": "\n\nTitle column\n```html\ntitle: 'Nombre'\n```",
                    "jsdoctags": [
                        {
                            "pos": 14085,
                            "end": 14123,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 14086,
                                "end": 14097,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "description"
                            },
                            "comment": "<p>Title column</p>\n"
                        },
                        {
                            "pos": 14123,
                            "end": 14158,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 14124,
                                "end": 14131,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>title: &#39;Nombre&#39;</p>\n"
                        }
                    ]
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | string",
                    "optional": true,
                    "description": "<p>To display a tooltip in the column on hover</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">tooltip: &#39;Ver detalle&#39;</code></pre></div>",
                    "line": 389,
                    "rawdescription": "\n\nTo display a tooltip in the column on hover\n```html\ntooltip: 'Ver detalle'\n```",
                    "jsdoctags": [
                        {
                            "pos": 14194,
                            "end": 14263,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 14195,
                                "end": 14206,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "description"
                            },
                            "comment": "<p>To display a tooltip in the column on hover</p>\n"
                        },
                        {
                            "pos": 14263,
                            "end": 14305,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 14264,
                                "end": 14271,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>tooltip: &#39;Ver detalle&#39;</p>\n"
                        }
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeValueKeyItem | \"image\" | \"html\"",
                    "optional": true,
                    "description": "<p>For show type value in cell</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">...\ntype: &#39;number&#39;,\ndisplayValueFn: (item) =&gt; item.price, // output: 2,000.00\n...\ntype: &#39;date&#39;,\ndisplayValueFn: (item) =&gt; item.created_at, // output 12/12/2020\n...</code></pre></div>",
                    "line": 403,
                    "rawdescription": "\n\nFor show type value in cell\n```html\n...\ntype: 'number',\ndisplayValueFn: (item) => item.price, // output: 2,000.00\n...\ntype: 'date',\ndisplayValueFn: (item) => item.created_at, // output 12/12/2020\n...\n```",
                    "jsdoctags": [
                        {
                            "pos": 14368,
                            "end": 14421,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 14369,
                                "end": 14380,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "description"
                            },
                            "comment": "<p>For show type value in cell</p>\n"
                        },
                        {
                            "pos": 14421,
                            "end": 14640,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 14422,
                                "end": 14429,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>...\ntype: &#39;number&#39;,\ndisplayValueFn: (item) =&gt; item.price, // output: 2,000.00\n...\ntype: &#39;date&#39;,\ndisplayValueFn: (item) =&gt; item.created_at, // output 12/12/2020\n...</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ListFormatListColumn",
            "id": "interface-ListFormatListColumn-edc9a2c085d669b062640c6d2a97876fe56bb34f5ae23612a12a67b2af6f44bb5d3316d9f28e50d8c8d522c0e6ce8fc3245f639ec16593bc1c325c3c460a4296",
            "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule, DatePipe, Location, NgOptimizedImage } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, ViewChild, Input, ContentChild, TemplateRef, ElementRef, Renderer2, ViewEncapsulation, signal, WritableSignal, computed, inject, Inject, Optional, InjectionToken, EventEmitter, RendererStyleFlags2 } from '@angular/core';\r\nimport { MatCheckboxChange, MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSort, MatSortModule } from '@angular/material/sort';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from 'src/app/shared/utilities/queryParams';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { IndexListPipe } from '@pipe/index-list.pipe';\r\nimport { SpinnerDefaultComponent } from '@component/spinner-default/spinner-default.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { debounceTime } from 'rxjs';\r\nimport { DiffDatePipe } from '@pipe/diff-date.pipe';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { HiddenOptionButtonRowPipe } from '@pipe/hidden-option-button-row.pipe';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { GetUserByIdPipe } from '@pipe/get-user-by-id.pipe';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ListFormatPipe } from '@pipe/list-format.pipe';\r\nimport { LoadImagePrivateDirective } from '@directive/load-image-private.directive';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MatPseudoCheckboxModule } from '@angular/material/core';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { EventGlobalSearch, NAME_EVENT_GLOBAL_SEARCH } from 'src/app/sidenav/sidenav/sidenav.component';\r\nimport { ExecuteFunctionListPipe } from './execute-function-list.pipe';\r\nimport { FormInput, dateRangeFormInput, switchFormInput } from '@component/item-form-template/item-form-template.component';\r\nimport { RenameTitleColumnListPipe } from './rename-title-column-list.pipe';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DateFnsAdapter } from '@angular/material-date-fns-adapter';\r\nimport { MyDateAdapter } from '@utility/myDateAdapter';\r\nimport { MY_DATE_FORMATS } from '@utility/myDateFormat';\r\n\r\nexport const DATA_TYPE_LIST = new InjectionToken<'array' | 'paginator'>('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST');\r\n\r\nexport interface ItemListConfiguration<T = any> {\r\n  readonly dataType?: 'array' | 'paginator';\r\n  readonly keyGetItemsPaginator?: string;\r\n  readonly keyGetTotalItemsPaginator?: string;\r\n\r\n  readonly disableFiltersInQueryParams?: boolean;\r\n\r\n  title: string | null;\r\n\r\n  parseDataFn?: (data: T[]) => T[] | Promise<T[]>;\r\n  data?: WritableSignal<T[]>;\r\n  updateListEvent?: EventEmitter<void>;\r\n\r\n  defaultOrder?: {\r\n    key: string,\r\n    order: 'ASC' | 'DESC'\r\n  };\r\n\r\n  backButton?: boolean;\r\n\r\n  updateButton?: boolean;\r\n\r\n  server: {\r\n    readonly url: string,\r\n    queryParams?: { [key: string]: any } | string;\r\n  }\r\n\r\n  createButton?: {\r\n    text?: string,\r\n    routerLink: RouterLinkCreateButton\r\n  } | false;\r\n\r\n  filters?: FormInput[] | false;\r\n\r\n  rows?: {\r\n    selectable?: {\r\n      actions: SelectableActionButton<T>[];\r\n    };\r\n    index?: false | ({ title: string });\r\n    cssClass?: string | ((item: T) => string);\r\n    actions?: ActionButton<T>[];\r\n    options?: ActionButton<T>[] | false;\r\n  },\r\n\r\n  columns: WritableSignal<ListColumn<T>[]>;\r\n}\r\n\r\nexport interface RouterLinkCreateButton {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any;\r\n}\r\nexport interface RouterLinkItem<T> {\r\n  url: ((item: T, index: number) => string) | string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: ((item: T, index: number) => (string | { [key: string]: any } | any[] | number | null)) | string | { [key: string]: any } | any[] | number | null;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\ndeclare type ActionButtonActionsType = 'clickEvent' | 'routerLink';\r\ninterface ActionButton<T> {\r\n  type: 'clickEvent' | 'routerLink';\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((item: T, index: number) => boolean);\r\n  disabled?: boolean | ((item: T, index: number) => boolean);\r\n  cssClass?: string | ((item: T, index: number) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((item: T, index: number) => ({ [key: string]: any }));\r\n  fn?: (item: T, index: number, fns: {\r\n    deleteItemFn: (id: number | string) => Promise<void>,\r\n    restoreItemFn: (id: number | string) => Promise<void>,\r\n    updateChangesItemFn: (index: number, item: T) => void,\r\n  }) => void;\r\n  routerLink?: RouterLinkItem<T>;\r\n}\r\ninterface ClickEventActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'fn'>> & ActionButton<T>, 'type' | 'routerLink'> { }\r\nexport const clickEventActionButton = <T = any>(config: ClickEventActionButton<T>): ActionButton<T> => ({ type: 'clickEvent', ...config });\r\ninterface RouterLinkActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'routerLink'>> & ActionButton<T>, 'type' | 'clickEvent'> { }\r\nexport const routerLinkActionButton = <T = any>(config: RouterLinkActionButton<T>): ActionButton<T> => ({ type: 'routerLink', ...config });\r\ninterface SelectableActionButton<T> {\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((selectedItems: T[]) => boolean);\r\n  disabled?: boolean | ((selectedItems: T[]) => boolean);\r\n  cssClass?: string | ((selectedItems: T[]) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((selectedItems: T[]) => ({ [key: string]: any }));\r\n  fn: (selectedItems: T[]) => void;\r\n}\r\nexport const selectableActionButton = <T = any>(config: SelectableActionButton<T>): SelectableActionButton<T> => ({ ...config });\r\n\r\nexport interface ListItemExtended {\r\n  __selected__?: boolean;\r\n  __loading_status__?: boolean;\r\n}\r\n\r\nexport type TypeValueKeyItem = 'text' | 'diff-date' | 'date' | 'number' | 'email' | 'phone' | 'user' | 'uppercase' | 'lowercase' | 'titlecase' | 'first-letter-uppercase' | 'list-format' | 'currency';\r\n\r\nexport interface ListColumn<T> {\r\n  /**\r\n   * @description\r\n   * Agrega clases css al contenedor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   */\r\n  align?: 'left' | 'center' | 'right';\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor adicional de la celda de la columna\r\n   * @example\r\n   * clickEventAdditionalValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventAdditionalValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor de la celda de la columna\r\n   * @example\r\n   * clickEventValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css a la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClass: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClass?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor adicional de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayAdditionalValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo fecha (type: 'date')\r\n   * @example\r\n   * ...\r\n   * dateFormat: 'yyyy-MM-dd'\r\n   * ...\r\n   * dateFormat: 'dd/MM/yyyy' // Por defecto\r\n   * ...\r\n   */\r\n  dateFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor adicional a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.name\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayAdditionalValueFn?: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayValueFn: (item) => item.name\r\n   * ...\r\n   * displayValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * If you want to display a value in the column that is not in the item, you can use this function\r\n   * @example\r\n   * ...\r\n   * gridColumn: '1fr'\r\n   * ...\r\n   * gridColumn: '200px'\r\n   * ...\r\n   * gridColumn: 'max-content'\r\n   * ...\r\n   * gridColumn: 'fit-content(200px)'\r\n   * ...\r\n   */\r\n  gridColumn?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones > Columnas\r\n   * @example\r\n   * ...\r\n   * hidden: true\r\n   * ...\r\n   * hidden: false // Por defecto\r\n   * ...\r\n   */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo número (type: 'number')\r\n   * @example\r\n   * ...\r\n   * numberFormat: '2.2-2'\r\n   * ...\r\n   * numberFormat: '0.2-2' // Por defecto\r\n   * ...\r\n   */\r\n  numberFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor adicional de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkAdditionalValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Sortable column espicif key in object configuration\r\n   * @example\r\n   * sort: { key: 'name' }\r\n   */\r\n  sort?: { key: string };\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display additional value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: { color: 'green' }\r\n   * ...\r\n   * @param item\r\n   * @returns string | number | null | undefined | string[] | number[]\r\n   */\r\n  cssStyleDisplayAdditionalValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayValue: { color: 'green' }\r\n   * ...\r\n   */\r\n  cssStyleDisplayValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Title column\r\n   * @example\r\n   * title: 'Nombre'\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * @description\r\n   * To display a tooltip in the column on hover\r\n   * @example\r\n   * tooltip: 'Ver detalle'\r\n   */\r\n  tooltip?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * For show type value in cell\r\n   * @example\r\n   * ...\r\n   * type: 'number',\r\n   * displayValueFn: (item) => item.price, // output: 2,000.00\r\n   * ...\r\n   * type: 'date',\r\n   * displayValueFn: (item) => item.created_at, // output 12/12/2020\r\n   * ...\r\n   */\r\n  type?: TypeValueKeyItem | 'image' | 'html';\r\n\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface SimpleListColumn<T> extends Omit<ListColumn<T>, 'type' | 'displayAdditionalValueFn' | 'displayValueFn' | 'dateFormat' | 'numberFormat' | 'image'> { }\r\ninterface SimpleListColumn2<T> extends Omit<SimpleListColumn<T>, 'cssStyleDisplayAdditionalValue' | 'routerLinkAdditionalValue' | 'cssClassDisplayAdditionalValue' | 'clickEventAdditionalValue'> { }\r\ninterface ListFormatListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string[];\r\n  displayValueFn: (item: T, index: number) => string[];\r\n}\r\n\r\ninterface NumberListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => number | null | undefined;\r\n  numberFormat?: string;\r\n}\r\n\r\ninterface StringListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => string | number | null | undefined;\r\n}\r\n\r\ninterface DateListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined;\r\n  dateFormat?: string;\r\n}\r\n\r\ninterface ImageListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface HtmlListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n}\r\n\r\nexport const numberColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'number', ...config });\r\n\r\nexport const listFormatColumn = <T = any>(config: ListFormatListColumn<T>): ListColumn<T> => ({ type: 'list-format', ...config });\r\n\r\nexport const dateColumn = <T = any>(config: DateListColumn<T>): ListColumn<T> => ({ type: 'date', ...config });\r\n\r\nexport const diffDateColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'diff-date', ...config });\r\n\r\nexport const htmlColumn = <T = any>(config: HtmlListColumn<T>): ListColumn<T> => ({ type: 'html', ...config });\r\n\r\nexport const textColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'text', ...config });\r\n\r\nexport const uppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'uppercase', ...config });\r\n\r\nexport const lowercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'lowercase', ...config });\r\n\r\nexport const titlecaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'titlecase', ...config });\r\n\r\nexport const firstLetterUppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'first-letter-uppercase', ...config });\r\n\r\nexport const phoneColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'phone', ...config });\r\n\r\nexport const emailColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'email', ...config });\r\n\r\nexport const userColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'user', ...config });\r\n\r\nexport const imageColumn = <T = any>(config: ImageListColumn<T>): ListColumn<T> => ({ type: 'image', ...config });\r\n\r\n\r\nexport const itemNameAndDescriptionColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  title: 'Nombre',\r\n  gridColumn: '1fr',\r\n  sort: { key: 'name' },\r\n  routerLinkValue: { url: (item: any) => `../detail/${item.id}` },\r\n  displayValueFn: (item: any) => item.name,\r\n  displayAdditionalValueFn: (item: any) => item.description,\r\n  ...config,\r\n});\r\nexport const itemStatusColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'cssClassDisplayValue' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'first-letter-uppercase',\r\n  title: 'Estado',\r\n  sort: { key: 'status' },\r\n  align: 'center',\r\n  displayValueFn: (item: any) => item.status,\r\n  cssClassDisplayValue: (item: any) => `status-chip ${item.status}`,\r\n  ...config,\r\n});\r\nexport const itemCreatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Creado',\r\n  sort: { key: 'created_at' },\r\n  displayValueFn: (item: any) => item.created_at,\r\n  ...config,\r\n});\r\nexport const itemUpdatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Actualizado',\r\n  sort: { key: 'updated_at' },\r\n  hidden: true,\r\n  displayValueFn: (item: any) => item.updated_at,\r\n  ...config,\r\n});\r\nexport const simpleListColumns = (): ListColumn<any>[] => ([\r\n  itemNameAndDescriptionColumn(),\r\n  itemUpdatedAtColumn(),\r\n  itemCreatedAtColumn(),\r\n  itemStatusColumn(),\r\n]);\r\n\r\n\r\nexport const defaultListFilterInputs = (): FormInput[] => [\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de creación',\r\n    formControlNameFrom: 'created_at_from',\r\n    formControlNameTo: 'created_at_to',\r\n  }),\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de actualización',\r\n    formControlNameFrom: 'updated_at_from',\r\n    formControlNameTo: 'updated_at_to',\r\n  }),\r\n  switchFormInput({\r\n    textLabel: 'Registros inactivos',\r\n    formControlName: 'inactive',\r\n  }),\r\n];\r\n\r\nexport const deleteItemActionButton = () => clickEventActionButton({\r\n  icon: 'delete',\r\n  text: 'Eliminar',\r\n  fn: async ({ id }, _, { deleteItemFn }) => deleteItemFn(id),\r\n  hidden: (item) => item.deleted_at,\r\n});\r\n\r\nexport const restoreItemActionButton = () => clickEventActionButton({\r\n  icon: 'restore',\r\n  text: 'Restaurar',\r\n  fn: async ({ id }, _, { restoreItemFn }) => restoreItemFn(id),\r\n  hidden: (item) => !item.deleted_at,\r\n})\r\n\r\nexport const viewItemActionButton = () => routerLinkActionButton({\r\n  icon: 'visibility',\r\n  text: 'Ver',\r\n  routerLink: { url: (item) => `../view/${item.id}` },\r\n});\r\n\r\nexport const editItemActionButton = () => routerLinkActionButton({\r\n  icon: 'edit',\r\n  text: 'Editar',\r\n  routerLink: { url: (item) => `../edit/${item.id}` },\r\n})\r\n\r\n@Component({\r\n  selector: 'app-item-list-template',\r\n  standalone: true,\r\n  templateUrl: './item-list-template.component.html',\r\n  styleUrl: './item-list-template.component.css',\r\n  imports: [\r\n    CommonModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatSortModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatTooltipModule,\r\n    MatPseudoCheckboxModule,\r\n    IndexListPipe,\r\n    GetKeyItemPipe,\r\n    RouterLink,\r\n    DiffDatePipe,\r\n    HiddenOptionButtonRowPipe,\r\n    NgOptimizedImage,\r\n    ScrollingModule,\r\n    GetUserByIdPipe,\r\n    PathFilesServerPipe,\r\n    ListFormatPipe,\r\n    LoadImagePrivateDirective,\r\n    FirstLetterUppercasePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n    ExecuteFunctionListPipe,\r\n    RenameTitleColumnListPipe,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    FirstLetterUppercasePipe,\r\n    GetKeyItemPipe,\r\n    RenameTitleColumnListPipe,\r\n    BrowserAnimationsModule,\r\n    DateFnsAdapter,\r\n  ],\r\n})\r\nexport class ItemListTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemListConfiguration;\r\n\r\n  // @ContentChild('headers') headers!: TemplateRef<any>;\r\n  @ContentChild('rowList') rowList!: TemplateRef<any>;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  @ViewChild('divListItems', { static: true }) private divList!: ElementRef;\r\n\r\n  private _dataTypeList: 'array' | 'paginator' = 'array';\r\n  private _keyForGetItems: string;\r\n  private _keyForGetTotalItems: string;\r\n\r\n  private fetch = inject(FetchService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  private renderer = inject(Renderer2);\r\n  private eventsService = inject(EventsService);\r\n  public location = inject(Location);\r\n\r\n  // private datePipe = inject(DatePipe);\r\n  public firstLetterUppercasePipe = inject(FirstLetterUppercasePipe);\r\n  public getKeyItemPipe = inject(GetKeyItemPipe);\r\n  public renameTitleColumnListPipe = inject(RenameTitleColumnListPipe);\r\n\r\n  public lengthData = computed(() => this.data().length)\r\n\r\n  public searchCtrl: FormControl = new FormControl('');\r\n  public formFilters: FormGroup<any> | null = null;\r\n\r\n  public loading = signal(true);\r\n  public font: WritableSignal<'small' | 'medium' | 'large'> = signal('medium');\r\n  public headerListStyle: WritableSignal<'simple' | 'color'> = signal('simple');\r\n\r\n  private abortController = new AbortController();\r\n\r\n  private unsubscribe$: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(DATA_TYPE_LIST) _dataTypeList: 'array' | 'paginator',\r\n    @Optional() @Inject(KEY_GET_ITEMS_PAGINATOR_LIST) _keyForGetItems: string,\r\n    @Optional() @Inject(KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST) _keyForGetTotalItems: string\r\n  ) {\r\n    this._dataTypeList = _dataTypeList ?? 'paginator';\r\n    this._keyForGetItems = _keyForGetItems || 'data';\r\n    this._keyForGetTotalItems = _keyForGetTotalItems || 'total';\r\n  }\r\n\r\n  get data(): WritableSignal<any[]> {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  get defaultOrder(): string {\r\n    return this.configuration.defaultOrder ? `${this.configuration.defaultOrder?.key}|${this.configuration.defaultOrder?.order}` : 'id|DESC';\r\n  }\r\n\r\n  get dataTypeList(): 'array' | 'paginator' {\r\n    return this.configuration.dataType ?? this._dataTypeList;\r\n  }\r\n\r\n  get keyForGetItems(): string {\r\n    return this.configuration.keyGetItemsPaginator ?? this._keyForGetItems;\r\n  }\r\n\r\n  get keyForGetTotalItems(): string {\r\n    return this.configuration.keyGetTotalItemsPaginator ?? this._keyForGetTotalItems;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.configuration.data = signal([]);\r\n    this.configuration.updateListEvent = new EventEmitter();\r\n    if (this.configuration.rows?.options != false && !this.configuration.rows?.options?.length) {\r\n      this.configuration.rows = {\r\n        ...(this.configuration.rows ?? {}),\r\n        options: [\r\n          viewItemActionButton(),\r\n          editItemActionButton(),\r\n          deleteItemActionButton(),\r\n          restoreItemActionButton(),\r\n        ]\r\n      };\r\n    }\r\n    this.generateFormControlsFromFilterInputs();\r\n    this.generateColumnsCss();\r\n\r\n    this.eventsService\r\n      .eventsFiltered<EventGlobalSearch>([NAME_EVENT_GLOBAL_SEARCH])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(({ data }: any) => {\r\n        const type = data.type;\r\n        if (type == 'enter') this.searchCtrl.setValue(data.value);\r\n      })\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.paginator.pageIndex = 0;\r\n    this.paginator.pageSize = 20;\r\n\r\n    this.verifyQueryParams();\r\n\r\n    this.activatedRoute.queryParams.subscribe(() => this.callGetData());\r\n\r\n    this.sort.sortChange.subscribe(({ active, direction }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (this.defaultOrder == `${active}|${direction}` || !active || !direction) queryParams['order'] = null;\r\n      else queryParams['order'] = `${active}|${direction}`;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.searchCtrl.valueChanges.pipe(debounceTime(250)).subscribe((value: string) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (value) queryParams['search'] = value;\r\n      else queryParams['search'] = null;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.paginator.page.subscribe(({ pageIndex, pageSize }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (pageIndex == 0 || (queryParams['page'] ?? null) == pageIndex + 1) queryParams['page'] = null;\r\n      else queryParams['page'] = pageIndex + 1;\r\n      if (pageSize == 20 || (queryParams['per_page'] ?? null) == pageSize) queryParams['per_page'] = null;\r\n      else queryParams['per_page'] = pageSize;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.eventsService\r\n      .eventsFiltered([\r\n        `${this.configuration.server.url}_created`,\r\n        `${this.configuration.server.url}_updated`\r\n      ])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(() => this.callGetData());\r\n\r\n    // this.configuration.updateListEvent!.subscribe(() => this.callGetData({}));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n    if (this.abortController) this.abortController.abort();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private async generateColumnsCss(): Promise<void> {\r\n    const grid_cols: string[] = [];\r\n    const grid_areas: string[] = []\r\n    if (this.configuration.rows?.selectable) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('selected');\r\n    }\r\n    if (this.configuration.rows?.index != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('index');\r\n    }\r\n    for await (const column of this.configuration.columns()) {\r\n      if (!column.hidden) {\r\n        grid_cols.push(column.gridColumn ?? 'auto');\r\n        grid_areas.push(this.renameTitleColumnListPipe.transform(column.title));\r\n      }\r\n    }\r\n    if (this.configuration.rows?.actions) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('actions');\r\n    }\r\n    if (this.configuration.rows?.options != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('options');\r\n    }\r\n    this.renderer.setStyle(this.divList.nativeElement, 'grid-template-columns', grid_cols.join(' '));\r\n    this.renderer.setStyle(this.divList.nativeElement, '--items-list-grid-template-areas', `\"${grid_areas.join(' ')}\"`, RendererStyleFlags2.DashCase);\r\n    grid_areas.forEach((area, index) => this.renderer.setStyle(this.divList.nativeElement, `--items-list-grid-area-${index + 1}`, area, RendererStyleFlags2.DashCase));\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private getQueryParams(): { [key: string]: any } {\r\n    return !this.configuration.disableFiltersInQueryParams ? JSON.parse(JSON.stringify(this.activatedRoute.snapshot.queryParams)) : {\r\n      ...this.formFilters?.value ?? {},\r\n      page: this.paginator.pageIndex + 1,\r\n      per_page: this.paginator.pageSize,\r\n      order: this.sort.active ? `${this.sort.active}|${this.sort.direction}` : null,\r\n      search: this.searchCtrl.value ? this.searchCtrl.value : null,\r\n    }\r\n  }\r\n\r\n  private navigateOrCallGetData(params: any): void {\r\n    if (this.configuration.disableFiltersInQueryParams) this.callGetData(params);\r\n    else this.router.navigate([], { queryParams: params });\r\n  }\r\n\r\n  private verifyQueryParams(): void {\r\n    const queryParams = {} as any;\r\n    const { page, per_page, order, search, ...filters } = queryParams;\r\n    this.paginator.pageIndex = Number(page ?? 1) - 1;\r\n    this.paginator.pageSize = Number(per_page) ?? 20;\r\n    this.sort.active = order?.split('|')[0] ?? '';\r\n    this.sort.direction = order?.split('|')[1] == 'asc' ? 'asc' : 'desc';\r\n    this.sort.sortChange.emit();\r\n    this.searchCtrl.setValue(search ?? null, { emitEvent: false });\r\n  }\r\n\r\n  public callGetData(queryParams: any = {}): void {\r\n    const params = objectToURLSearchParams(queryParams);\r\n    if (!params.has('page')) params.set('page', String(this.paginator.pageIndex + 1));\r\n    if (!params.has('per_page')) params.set('per_page', String(this.paginator.pageSize));\r\n    if (!params.has('order')) params.set('order', this.defaultOrder);\r\n    this.getData(params);\r\n  }\r\n\r\n  private async getData(searchParams: URLSearchParams = new URLSearchParams()): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const serverUrl = this.configuration.server.url;\r\n    let queryParams = this.configuration.server.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const url = `${serverUrl}?${searchParams.toString()}&${queryParams ?? ''}`;\r\n    const config = { signal: this.abortController.signal };\r\n    try {\r\n      let items = [];\r\n      let totalItems = 0;\r\n      if (this.dataTypeList == 'array') {\r\n        items = await this.fetch.get<any[]>(url, config);\r\n        totalItems = items.length;\r\n      } else {\r\n        const paginatorData = await this.fetch.get<PaginatorData<any>>(url, config);\r\n        items = this.getKeyItemPipe.transform(paginatorData, this.keyForGetItems);\r\n        totalItems = this.getKeyItemPipe.transform(paginatorData, this.keyForGetTotalItems);\r\n      }\r\n      const { parseDataFn } = this.configuration;\r\n      const parseData = await parseDataFn?.(items) ?? items;\r\n      this.paginator.length = totalItems;\r\n      this.data.set(parseData);\r\n      this.loading.set(false);\r\n      this.checkSelectedItems();\r\n    } catch (err: any) {\r\n      if (err.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n  }\r\n\r\n  public hiddenToggleColumn($event: MatCheckboxChange, index: number): void {\r\n    this.configuration.columns.update((columns) => {\r\n      columns[index]['hidden'] = !$event.checked\r\n      return columns;\r\n    })\r\n    this.generateColumnsCss();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public navigateCreateView(): void {\r\n    this.router.navigate(['../create'], { relativeTo: this.activatedRoute });\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public allSelectedItems = signal(false);\r\n  public someSelectedItems = signal(false);\r\n  public selectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__));\r\n  public lengthSelectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__).length);\r\n\r\n  public selectedItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.toSpliced(index, 1, { ...data[index], __selected__: status }));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public selectedAllItems(status: boolean): void {\r\n    this.data.update((data) => data.map((e) => ({ ...e, __selected__: status })));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public someSelected(): boolean {\r\n    return this.data().length > 0 && this.data().some((e: ListItemExtended) => e.__selected__) && !this.allSelectedItems();\r\n  }\r\n\r\n  private checkSelectedItems(): void {\r\n    this.allSelectedItems.set(this.data().length > 0 && this.data().every((e: ListItemExtended) => e.__selected__));\r\n    this.someSelectedItems.set(this.someSelected());\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private generateFormControlsFromFilterInputs(): void {\r\n    if (this.configuration.filters == false) return;\r\n    if (!this.configuration.filters?.length) this.configuration.filters = defaultListFilterInputs();\r\n    const formFilters = new FormGroup({});\r\n    this.configuration.filters?.forEach((filter) => {\r\n      if (filter.text) {\r\n        formFilters.setControl(filter.text.formControlName, new FormControl(filter.text.defaultValue));\r\n      } else if (filter.textarea) {\r\n        formFilters.setControl(filter.textarea.formControlName, new FormControl(filter.textarea.defaultValue));\r\n      } else if (filter.select) {\r\n        formFilters.setControl(filter.select.formControlName, new FormControl(filter.select.defaultValue));\r\n      } else if (filter.number) {\r\n        formFilters.setControl(filter.number.formControlName, new FormControl(filter.number.defaultValue));\r\n      } else if (filter.date) {\r\n        formFilters.setControl(filter.date.formControlName, new FormControl(filter.date.defaultValue));\r\n      } else if (filter.dateRange) {\r\n        formFilters.setControl(filter.dateRange.formControlNameFrom, new FormControl(filter.dateRange.defaultValueFrom));\r\n        formFilters.setControl(filter.dateRange.formControlNameTo, new FormControl(filter.dateRange.defaultValueTo));\r\n      } else if (filter.autocompleteLocal) {\r\n        formFilters.setControl(filter.autocompleteLocal.formControlName, new FormControl(filter.autocompleteLocal.defaultValue));\r\n      } else if (filter.autocompleteServer) {\r\n        formFilters.setControl(filter.autocompleteServer.formControlName, new FormControl(filter.autocompleteServer.defaultValue));\r\n      } else if (filter.checkbox) {\r\n        formFilters.setControl(filter.checkbox.formControlName, new FormControl(filter.checkbox.defaultValue));\r\n      } else if (filter.switch) {\r\n        formFilters.setControl(filter.switch.formControlName, new FormControl(filter.switch.defaultValue));\r\n      }\r\n    });\r\n    this.formFilters = formFilters;\r\n  }\r\n\r\n  public getControlFormFilter(name: string): FormControl {\r\n    return this.formFilters!.get(name) as FormControl;\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private updateLoadingStatusItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.map((item: ListItemExtended, i) => {\r\n      if (i == index) item.__loading_status__ = status;\r\n      return item;\r\n    }));\r\n  }\r\n\r\n  public deleteItem = async (id: number | string) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}`;\r\n    try {\r\n      await this.fetch.delete(url);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public restoreItem = async (id: string | number) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}/restore`;\r\n    const config = { afterAlert: { description: 'Restaurando ítem de la lista' } }\r\n    try {\r\n      await this.fetch.put(url, config);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public updateChangesItem = (index: number, item: any) => {\r\n    this.configuration.data!.update(items => items.toSpliced(index, 1, item));\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "displayAdditionalValueFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 416
                },
                {
                    "name": "displayValueFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 417
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "SimpleListColumn"
            ]
        },
        {
            "name": "ListFormatOptions",
            "id": "interface-ListFormatOptions-a02d633b44e519cb029e5d34c5ded4417165ff12a914a5b227f9d3edc2b758a1ed5037dd455eed7f010a9dc5e57d3d2ce3091253d4f8ffbc8f5af085a002ebbf",
            "file": "src/app/shared/pipe/list-format.pipe.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\ninterface ListFormatOptions {\r\n  lang?: string;\r\n  type?: 'conjunction' | 'disjunction' | 'unit';\r\n  style?: 'long' | 'short' | 'narrow';\r\n}\r\n\r\n@Pipe({\r\n  name: 'listFormat',\r\n  standalone: true\r\n})\r\nexport class ListFormatPipe implements PipeTransform {\r\n\r\n  transform(values: string[], options?:ListFormatOptions): string {\r\n    if(!(values instanceof Array)) return '';\r\n    else if (values.length && (values[0] as any) instanceof Object) return '';\r\n    const { lang = 'es-ES', type = 'conjunction', style = 'long' } = options ?? {};\r\n    return (new Intl.ListFormat(lang, { style, type}).format(values)) ?? '';\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "lang",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"long\" | \"short\" | \"narrow\"",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"conjunction\" | \"disjunction\" | \"unit\"",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ListItemExtended",
            "id": "interface-ListItemExtended-edc9a2c085d669b062640c6d2a97876fe56bb34f5ae23612a12a67b2af6f44bb5d3316d9f28e50d8c8d522c0e6ce8fc3245f639ec16593bc1c325c3c460a4296",
            "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule, DatePipe, Location, NgOptimizedImage } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, ViewChild, Input, ContentChild, TemplateRef, ElementRef, Renderer2, ViewEncapsulation, signal, WritableSignal, computed, inject, Inject, Optional, InjectionToken, EventEmitter, RendererStyleFlags2 } from '@angular/core';\r\nimport { MatCheckboxChange, MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSort, MatSortModule } from '@angular/material/sort';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from 'src/app/shared/utilities/queryParams';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { IndexListPipe } from '@pipe/index-list.pipe';\r\nimport { SpinnerDefaultComponent } from '@component/spinner-default/spinner-default.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { debounceTime } from 'rxjs';\r\nimport { DiffDatePipe } from '@pipe/diff-date.pipe';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { HiddenOptionButtonRowPipe } from '@pipe/hidden-option-button-row.pipe';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { GetUserByIdPipe } from '@pipe/get-user-by-id.pipe';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ListFormatPipe } from '@pipe/list-format.pipe';\r\nimport { LoadImagePrivateDirective } from '@directive/load-image-private.directive';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MatPseudoCheckboxModule } from '@angular/material/core';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { EventGlobalSearch, NAME_EVENT_GLOBAL_SEARCH } from 'src/app/sidenav/sidenav/sidenav.component';\r\nimport { ExecuteFunctionListPipe } from './execute-function-list.pipe';\r\nimport { FormInput, dateRangeFormInput, switchFormInput } from '@component/item-form-template/item-form-template.component';\r\nimport { RenameTitleColumnListPipe } from './rename-title-column-list.pipe';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DateFnsAdapter } from '@angular/material-date-fns-adapter';\r\nimport { MyDateAdapter } from '@utility/myDateAdapter';\r\nimport { MY_DATE_FORMATS } from '@utility/myDateFormat';\r\n\r\nexport const DATA_TYPE_LIST = new InjectionToken<'array' | 'paginator'>('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST');\r\n\r\nexport interface ItemListConfiguration<T = any> {\r\n  readonly dataType?: 'array' | 'paginator';\r\n  readonly keyGetItemsPaginator?: string;\r\n  readonly keyGetTotalItemsPaginator?: string;\r\n\r\n  readonly disableFiltersInQueryParams?: boolean;\r\n\r\n  title: string | null;\r\n\r\n  parseDataFn?: (data: T[]) => T[] | Promise<T[]>;\r\n  data?: WritableSignal<T[]>;\r\n  updateListEvent?: EventEmitter<void>;\r\n\r\n  defaultOrder?: {\r\n    key: string,\r\n    order: 'ASC' | 'DESC'\r\n  };\r\n\r\n  backButton?: boolean;\r\n\r\n  updateButton?: boolean;\r\n\r\n  server: {\r\n    readonly url: string,\r\n    queryParams?: { [key: string]: any } | string;\r\n  }\r\n\r\n  createButton?: {\r\n    text?: string,\r\n    routerLink: RouterLinkCreateButton\r\n  } | false;\r\n\r\n  filters?: FormInput[] | false;\r\n\r\n  rows?: {\r\n    selectable?: {\r\n      actions: SelectableActionButton<T>[];\r\n    };\r\n    index?: false | ({ title: string });\r\n    cssClass?: string | ((item: T) => string);\r\n    actions?: ActionButton<T>[];\r\n    options?: ActionButton<T>[] | false;\r\n  },\r\n\r\n  columns: WritableSignal<ListColumn<T>[]>;\r\n}\r\n\r\nexport interface RouterLinkCreateButton {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any;\r\n}\r\nexport interface RouterLinkItem<T> {\r\n  url: ((item: T, index: number) => string) | string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: ((item: T, index: number) => (string | { [key: string]: any } | any[] | number | null)) | string | { [key: string]: any } | any[] | number | null;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\ndeclare type ActionButtonActionsType = 'clickEvent' | 'routerLink';\r\ninterface ActionButton<T> {\r\n  type: 'clickEvent' | 'routerLink';\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((item: T, index: number) => boolean);\r\n  disabled?: boolean | ((item: T, index: number) => boolean);\r\n  cssClass?: string | ((item: T, index: number) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((item: T, index: number) => ({ [key: string]: any }));\r\n  fn?: (item: T, index: number, fns: {\r\n    deleteItemFn: (id: number | string) => Promise<void>,\r\n    restoreItemFn: (id: number | string) => Promise<void>,\r\n    updateChangesItemFn: (index: number, item: T) => void,\r\n  }) => void;\r\n  routerLink?: RouterLinkItem<T>;\r\n}\r\ninterface ClickEventActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'fn'>> & ActionButton<T>, 'type' | 'routerLink'> { }\r\nexport const clickEventActionButton = <T = any>(config: ClickEventActionButton<T>): ActionButton<T> => ({ type: 'clickEvent', ...config });\r\ninterface RouterLinkActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'routerLink'>> & ActionButton<T>, 'type' | 'clickEvent'> { }\r\nexport const routerLinkActionButton = <T = any>(config: RouterLinkActionButton<T>): ActionButton<T> => ({ type: 'routerLink', ...config });\r\ninterface SelectableActionButton<T> {\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((selectedItems: T[]) => boolean);\r\n  disabled?: boolean | ((selectedItems: T[]) => boolean);\r\n  cssClass?: string | ((selectedItems: T[]) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((selectedItems: T[]) => ({ [key: string]: any }));\r\n  fn: (selectedItems: T[]) => void;\r\n}\r\nexport const selectableActionButton = <T = any>(config: SelectableActionButton<T>): SelectableActionButton<T> => ({ ...config });\r\n\r\nexport interface ListItemExtended {\r\n  __selected__?: boolean;\r\n  __loading_status__?: boolean;\r\n}\r\n\r\nexport type TypeValueKeyItem = 'text' | 'diff-date' | 'date' | 'number' | 'email' | 'phone' | 'user' | 'uppercase' | 'lowercase' | 'titlecase' | 'first-letter-uppercase' | 'list-format' | 'currency';\r\n\r\nexport interface ListColumn<T> {\r\n  /**\r\n   * @description\r\n   * Agrega clases css al contenedor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   */\r\n  align?: 'left' | 'center' | 'right';\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor adicional de la celda de la columna\r\n   * @example\r\n   * clickEventAdditionalValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventAdditionalValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor de la celda de la columna\r\n   * @example\r\n   * clickEventValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css a la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClass: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClass?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor adicional de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayAdditionalValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo fecha (type: 'date')\r\n   * @example\r\n   * ...\r\n   * dateFormat: 'yyyy-MM-dd'\r\n   * ...\r\n   * dateFormat: 'dd/MM/yyyy' // Por defecto\r\n   * ...\r\n   */\r\n  dateFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor adicional a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.name\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayAdditionalValueFn?: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayValueFn: (item) => item.name\r\n   * ...\r\n   * displayValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * If you want to display a value in the column that is not in the item, you can use this function\r\n   * @example\r\n   * ...\r\n   * gridColumn: '1fr'\r\n   * ...\r\n   * gridColumn: '200px'\r\n   * ...\r\n   * gridColumn: 'max-content'\r\n   * ...\r\n   * gridColumn: 'fit-content(200px)'\r\n   * ...\r\n   */\r\n  gridColumn?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones > Columnas\r\n   * @example\r\n   * ...\r\n   * hidden: true\r\n   * ...\r\n   * hidden: false // Por defecto\r\n   * ...\r\n   */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo número (type: 'number')\r\n   * @example\r\n   * ...\r\n   * numberFormat: '2.2-2'\r\n   * ...\r\n   * numberFormat: '0.2-2' // Por defecto\r\n   * ...\r\n   */\r\n  numberFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor adicional de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkAdditionalValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Sortable column espicif key in object configuration\r\n   * @example\r\n   * sort: { key: 'name' }\r\n   */\r\n  sort?: { key: string };\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display additional value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: { color: 'green' }\r\n   * ...\r\n   * @param item\r\n   * @returns string | number | null | undefined | string[] | number[]\r\n   */\r\n  cssStyleDisplayAdditionalValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayValue: { color: 'green' }\r\n   * ...\r\n   */\r\n  cssStyleDisplayValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Title column\r\n   * @example\r\n   * title: 'Nombre'\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * @description\r\n   * To display a tooltip in the column on hover\r\n   * @example\r\n   * tooltip: 'Ver detalle'\r\n   */\r\n  tooltip?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * For show type value in cell\r\n   * @example\r\n   * ...\r\n   * type: 'number',\r\n   * displayValueFn: (item) => item.price, // output: 2,000.00\r\n   * ...\r\n   * type: 'date',\r\n   * displayValueFn: (item) => item.created_at, // output 12/12/2020\r\n   * ...\r\n   */\r\n  type?: TypeValueKeyItem | 'image' | 'html';\r\n\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface SimpleListColumn<T> extends Omit<ListColumn<T>, 'type' | 'displayAdditionalValueFn' | 'displayValueFn' | 'dateFormat' | 'numberFormat' | 'image'> { }\r\ninterface SimpleListColumn2<T> extends Omit<SimpleListColumn<T>, 'cssStyleDisplayAdditionalValue' | 'routerLinkAdditionalValue' | 'cssClassDisplayAdditionalValue' | 'clickEventAdditionalValue'> { }\r\ninterface ListFormatListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string[];\r\n  displayValueFn: (item: T, index: number) => string[];\r\n}\r\n\r\ninterface NumberListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => number | null | undefined;\r\n  numberFormat?: string;\r\n}\r\n\r\ninterface StringListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => string | number | null | undefined;\r\n}\r\n\r\ninterface DateListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined;\r\n  dateFormat?: string;\r\n}\r\n\r\ninterface ImageListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface HtmlListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n}\r\n\r\nexport const numberColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'number', ...config });\r\n\r\nexport const listFormatColumn = <T = any>(config: ListFormatListColumn<T>): ListColumn<T> => ({ type: 'list-format', ...config });\r\n\r\nexport const dateColumn = <T = any>(config: DateListColumn<T>): ListColumn<T> => ({ type: 'date', ...config });\r\n\r\nexport const diffDateColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'diff-date', ...config });\r\n\r\nexport const htmlColumn = <T = any>(config: HtmlListColumn<T>): ListColumn<T> => ({ type: 'html', ...config });\r\n\r\nexport const textColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'text', ...config });\r\n\r\nexport const uppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'uppercase', ...config });\r\n\r\nexport const lowercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'lowercase', ...config });\r\n\r\nexport const titlecaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'titlecase', ...config });\r\n\r\nexport const firstLetterUppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'first-letter-uppercase', ...config });\r\n\r\nexport const phoneColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'phone', ...config });\r\n\r\nexport const emailColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'email', ...config });\r\n\r\nexport const userColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'user', ...config });\r\n\r\nexport const imageColumn = <T = any>(config: ImageListColumn<T>): ListColumn<T> => ({ type: 'image', ...config });\r\n\r\n\r\nexport const itemNameAndDescriptionColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  title: 'Nombre',\r\n  gridColumn: '1fr',\r\n  sort: { key: 'name' },\r\n  routerLinkValue: { url: (item: any) => `../detail/${item.id}` },\r\n  displayValueFn: (item: any) => item.name,\r\n  displayAdditionalValueFn: (item: any) => item.description,\r\n  ...config,\r\n});\r\nexport const itemStatusColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'cssClassDisplayValue' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'first-letter-uppercase',\r\n  title: 'Estado',\r\n  sort: { key: 'status' },\r\n  align: 'center',\r\n  displayValueFn: (item: any) => item.status,\r\n  cssClassDisplayValue: (item: any) => `status-chip ${item.status}`,\r\n  ...config,\r\n});\r\nexport const itemCreatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Creado',\r\n  sort: { key: 'created_at' },\r\n  displayValueFn: (item: any) => item.created_at,\r\n  ...config,\r\n});\r\nexport const itemUpdatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Actualizado',\r\n  sort: { key: 'updated_at' },\r\n  hidden: true,\r\n  displayValueFn: (item: any) => item.updated_at,\r\n  ...config,\r\n});\r\nexport const simpleListColumns = (): ListColumn<any>[] => ([\r\n  itemNameAndDescriptionColumn(),\r\n  itemUpdatedAtColumn(),\r\n  itemCreatedAtColumn(),\r\n  itemStatusColumn(),\r\n]);\r\n\r\n\r\nexport const defaultListFilterInputs = (): FormInput[] => [\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de creación',\r\n    formControlNameFrom: 'created_at_from',\r\n    formControlNameTo: 'created_at_to',\r\n  }),\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de actualización',\r\n    formControlNameFrom: 'updated_at_from',\r\n    formControlNameTo: 'updated_at_to',\r\n  }),\r\n  switchFormInput({\r\n    textLabel: 'Registros inactivos',\r\n    formControlName: 'inactive',\r\n  }),\r\n];\r\n\r\nexport const deleteItemActionButton = () => clickEventActionButton({\r\n  icon: 'delete',\r\n  text: 'Eliminar',\r\n  fn: async ({ id }, _, { deleteItemFn }) => deleteItemFn(id),\r\n  hidden: (item) => item.deleted_at,\r\n});\r\n\r\nexport const restoreItemActionButton = () => clickEventActionButton({\r\n  icon: 'restore',\r\n  text: 'Restaurar',\r\n  fn: async ({ id }, _, { restoreItemFn }) => restoreItemFn(id),\r\n  hidden: (item) => !item.deleted_at,\r\n})\r\n\r\nexport const viewItemActionButton = () => routerLinkActionButton({\r\n  icon: 'visibility',\r\n  text: 'Ver',\r\n  routerLink: { url: (item) => `../view/${item.id}` },\r\n});\r\n\r\nexport const editItemActionButton = () => routerLinkActionButton({\r\n  icon: 'edit',\r\n  text: 'Editar',\r\n  routerLink: { url: (item) => `../edit/${item.id}` },\r\n})\r\n\r\n@Component({\r\n  selector: 'app-item-list-template',\r\n  standalone: true,\r\n  templateUrl: './item-list-template.component.html',\r\n  styleUrl: './item-list-template.component.css',\r\n  imports: [\r\n    CommonModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatSortModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatTooltipModule,\r\n    MatPseudoCheckboxModule,\r\n    IndexListPipe,\r\n    GetKeyItemPipe,\r\n    RouterLink,\r\n    DiffDatePipe,\r\n    HiddenOptionButtonRowPipe,\r\n    NgOptimizedImage,\r\n    ScrollingModule,\r\n    GetUserByIdPipe,\r\n    PathFilesServerPipe,\r\n    ListFormatPipe,\r\n    LoadImagePrivateDirective,\r\n    FirstLetterUppercasePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n    ExecuteFunctionListPipe,\r\n    RenameTitleColumnListPipe,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    FirstLetterUppercasePipe,\r\n    GetKeyItemPipe,\r\n    RenameTitleColumnListPipe,\r\n    BrowserAnimationsModule,\r\n    DateFnsAdapter,\r\n  ],\r\n})\r\nexport class ItemListTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemListConfiguration;\r\n\r\n  // @ContentChild('headers') headers!: TemplateRef<any>;\r\n  @ContentChild('rowList') rowList!: TemplateRef<any>;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  @ViewChild('divListItems', { static: true }) private divList!: ElementRef;\r\n\r\n  private _dataTypeList: 'array' | 'paginator' = 'array';\r\n  private _keyForGetItems: string;\r\n  private _keyForGetTotalItems: string;\r\n\r\n  private fetch = inject(FetchService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  private renderer = inject(Renderer2);\r\n  private eventsService = inject(EventsService);\r\n  public location = inject(Location);\r\n\r\n  // private datePipe = inject(DatePipe);\r\n  public firstLetterUppercasePipe = inject(FirstLetterUppercasePipe);\r\n  public getKeyItemPipe = inject(GetKeyItemPipe);\r\n  public renameTitleColumnListPipe = inject(RenameTitleColumnListPipe);\r\n\r\n  public lengthData = computed(() => this.data().length)\r\n\r\n  public searchCtrl: FormControl = new FormControl('');\r\n  public formFilters: FormGroup<any> | null = null;\r\n\r\n  public loading = signal(true);\r\n  public font: WritableSignal<'small' | 'medium' | 'large'> = signal('medium');\r\n  public headerListStyle: WritableSignal<'simple' | 'color'> = signal('simple');\r\n\r\n  private abortController = new AbortController();\r\n\r\n  private unsubscribe$: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(DATA_TYPE_LIST) _dataTypeList: 'array' | 'paginator',\r\n    @Optional() @Inject(KEY_GET_ITEMS_PAGINATOR_LIST) _keyForGetItems: string,\r\n    @Optional() @Inject(KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST) _keyForGetTotalItems: string\r\n  ) {\r\n    this._dataTypeList = _dataTypeList ?? 'paginator';\r\n    this._keyForGetItems = _keyForGetItems || 'data';\r\n    this._keyForGetTotalItems = _keyForGetTotalItems || 'total';\r\n  }\r\n\r\n  get data(): WritableSignal<any[]> {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  get defaultOrder(): string {\r\n    return this.configuration.defaultOrder ? `${this.configuration.defaultOrder?.key}|${this.configuration.defaultOrder?.order}` : 'id|DESC';\r\n  }\r\n\r\n  get dataTypeList(): 'array' | 'paginator' {\r\n    return this.configuration.dataType ?? this._dataTypeList;\r\n  }\r\n\r\n  get keyForGetItems(): string {\r\n    return this.configuration.keyGetItemsPaginator ?? this._keyForGetItems;\r\n  }\r\n\r\n  get keyForGetTotalItems(): string {\r\n    return this.configuration.keyGetTotalItemsPaginator ?? this._keyForGetTotalItems;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.configuration.data = signal([]);\r\n    this.configuration.updateListEvent = new EventEmitter();\r\n    if (this.configuration.rows?.options != false && !this.configuration.rows?.options?.length) {\r\n      this.configuration.rows = {\r\n        ...(this.configuration.rows ?? {}),\r\n        options: [\r\n          viewItemActionButton(),\r\n          editItemActionButton(),\r\n          deleteItemActionButton(),\r\n          restoreItemActionButton(),\r\n        ]\r\n      };\r\n    }\r\n    this.generateFormControlsFromFilterInputs();\r\n    this.generateColumnsCss();\r\n\r\n    this.eventsService\r\n      .eventsFiltered<EventGlobalSearch>([NAME_EVENT_GLOBAL_SEARCH])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(({ data }: any) => {\r\n        const type = data.type;\r\n        if (type == 'enter') this.searchCtrl.setValue(data.value);\r\n      })\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.paginator.pageIndex = 0;\r\n    this.paginator.pageSize = 20;\r\n\r\n    this.verifyQueryParams();\r\n\r\n    this.activatedRoute.queryParams.subscribe(() => this.callGetData());\r\n\r\n    this.sort.sortChange.subscribe(({ active, direction }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (this.defaultOrder == `${active}|${direction}` || !active || !direction) queryParams['order'] = null;\r\n      else queryParams['order'] = `${active}|${direction}`;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.searchCtrl.valueChanges.pipe(debounceTime(250)).subscribe((value: string) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (value) queryParams['search'] = value;\r\n      else queryParams['search'] = null;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.paginator.page.subscribe(({ pageIndex, pageSize }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (pageIndex == 0 || (queryParams['page'] ?? null) == pageIndex + 1) queryParams['page'] = null;\r\n      else queryParams['page'] = pageIndex + 1;\r\n      if (pageSize == 20 || (queryParams['per_page'] ?? null) == pageSize) queryParams['per_page'] = null;\r\n      else queryParams['per_page'] = pageSize;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.eventsService\r\n      .eventsFiltered([\r\n        `${this.configuration.server.url}_created`,\r\n        `${this.configuration.server.url}_updated`\r\n      ])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(() => this.callGetData());\r\n\r\n    // this.configuration.updateListEvent!.subscribe(() => this.callGetData({}));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n    if (this.abortController) this.abortController.abort();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private async generateColumnsCss(): Promise<void> {\r\n    const grid_cols: string[] = [];\r\n    const grid_areas: string[] = []\r\n    if (this.configuration.rows?.selectable) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('selected');\r\n    }\r\n    if (this.configuration.rows?.index != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('index');\r\n    }\r\n    for await (const column of this.configuration.columns()) {\r\n      if (!column.hidden) {\r\n        grid_cols.push(column.gridColumn ?? 'auto');\r\n        grid_areas.push(this.renameTitleColumnListPipe.transform(column.title));\r\n      }\r\n    }\r\n    if (this.configuration.rows?.actions) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('actions');\r\n    }\r\n    if (this.configuration.rows?.options != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('options');\r\n    }\r\n    this.renderer.setStyle(this.divList.nativeElement, 'grid-template-columns', grid_cols.join(' '));\r\n    this.renderer.setStyle(this.divList.nativeElement, '--items-list-grid-template-areas', `\"${grid_areas.join(' ')}\"`, RendererStyleFlags2.DashCase);\r\n    grid_areas.forEach((area, index) => this.renderer.setStyle(this.divList.nativeElement, `--items-list-grid-area-${index + 1}`, area, RendererStyleFlags2.DashCase));\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private getQueryParams(): { [key: string]: any } {\r\n    return !this.configuration.disableFiltersInQueryParams ? JSON.parse(JSON.stringify(this.activatedRoute.snapshot.queryParams)) : {\r\n      ...this.formFilters?.value ?? {},\r\n      page: this.paginator.pageIndex + 1,\r\n      per_page: this.paginator.pageSize,\r\n      order: this.sort.active ? `${this.sort.active}|${this.sort.direction}` : null,\r\n      search: this.searchCtrl.value ? this.searchCtrl.value : null,\r\n    }\r\n  }\r\n\r\n  private navigateOrCallGetData(params: any): void {\r\n    if (this.configuration.disableFiltersInQueryParams) this.callGetData(params);\r\n    else this.router.navigate([], { queryParams: params });\r\n  }\r\n\r\n  private verifyQueryParams(): void {\r\n    const queryParams = {} as any;\r\n    const { page, per_page, order, search, ...filters } = queryParams;\r\n    this.paginator.pageIndex = Number(page ?? 1) - 1;\r\n    this.paginator.pageSize = Number(per_page) ?? 20;\r\n    this.sort.active = order?.split('|')[0] ?? '';\r\n    this.sort.direction = order?.split('|')[1] == 'asc' ? 'asc' : 'desc';\r\n    this.sort.sortChange.emit();\r\n    this.searchCtrl.setValue(search ?? null, { emitEvent: false });\r\n  }\r\n\r\n  public callGetData(queryParams: any = {}): void {\r\n    const params = objectToURLSearchParams(queryParams);\r\n    if (!params.has('page')) params.set('page', String(this.paginator.pageIndex + 1));\r\n    if (!params.has('per_page')) params.set('per_page', String(this.paginator.pageSize));\r\n    if (!params.has('order')) params.set('order', this.defaultOrder);\r\n    this.getData(params);\r\n  }\r\n\r\n  private async getData(searchParams: URLSearchParams = new URLSearchParams()): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const serverUrl = this.configuration.server.url;\r\n    let queryParams = this.configuration.server.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const url = `${serverUrl}?${searchParams.toString()}&${queryParams ?? ''}`;\r\n    const config = { signal: this.abortController.signal };\r\n    try {\r\n      let items = [];\r\n      let totalItems = 0;\r\n      if (this.dataTypeList == 'array') {\r\n        items = await this.fetch.get<any[]>(url, config);\r\n        totalItems = items.length;\r\n      } else {\r\n        const paginatorData = await this.fetch.get<PaginatorData<any>>(url, config);\r\n        items = this.getKeyItemPipe.transform(paginatorData, this.keyForGetItems);\r\n        totalItems = this.getKeyItemPipe.transform(paginatorData, this.keyForGetTotalItems);\r\n      }\r\n      const { parseDataFn } = this.configuration;\r\n      const parseData = await parseDataFn?.(items) ?? items;\r\n      this.paginator.length = totalItems;\r\n      this.data.set(parseData);\r\n      this.loading.set(false);\r\n      this.checkSelectedItems();\r\n    } catch (err: any) {\r\n      if (err.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n  }\r\n\r\n  public hiddenToggleColumn($event: MatCheckboxChange, index: number): void {\r\n    this.configuration.columns.update((columns) => {\r\n      columns[index]['hidden'] = !$event.checked\r\n      return columns;\r\n    })\r\n    this.generateColumnsCss();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public navigateCreateView(): void {\r\n    this.router.navigate(['../create'], { relativeTo: this.activatedRoute });\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public allSelectedItems = signal(false);\r\n  public someSelectedItems = signal(false);\r\n  public selectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__));\r\n  public lengthSelectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__).length);\r\n\r\n  public selectedItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.toSpliced(index, 1, { ...data[index], __selected__: status }));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public selectedAllItems(status: boolean): void {\r\n    this.data.update((data) => data.map((e) => ({ ...e, __selected__: status })));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public someSelected(): boolean {\r\n    return this.data().length > 0 && this.data().some((e: ListItemExtended) => e.__selected__) && !this.allSelectedItems();\r\n  }\r\n\r\n  private checkSelectedItems(): void {\r\n    this.allSelectedItems.set(this.data().length > 0 && this.data().every((e: ListItemExtended) => e.__selected__));\r\n    this.someSelectedItems.set(this.someSelected());\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private generateFormControlsFromFilterInputs(): void {\r\n    if (this.configuration.filters == false) return;\r\n    if (!this.configuration.filters?.length) this.configuration.filters = defaultListFilterInputs();\r\n    const formFilters = new FormGroup({});\r\n    this.configuration.filters?.forEach((filter) => {\r\n      if (filter.text) {\r\n        formFilters.setControl(filter.text.formControlName, new FormControl(filter.text.defaultValue));\r\n      } else if (filter.textarea) {\r\n        formFilters.setControl(filter.textarea.formControlName, new FormControl(filter.textarea.defaultValue));\r\n      } else if (filter.select) {\r\n        formFilters.setControl(filter.select.formControlName, new FormControl(filter.select.defaultValue));\r\n      } else if (filter.number) {\r\n        formFilters.setControl(filter.number.formControlName, new FormControl(filter.number.defaultValue));\r\n      } else if (filter.date) {\r\n        formFilters.setControl(filter.date.formControlName, new FormControl(filter.date.defaultValue));\r\n      } else if (filter.dateRange) {\r\n        formFilters.setControl(filter.dateRange.formControlNameFrom, new FormControl(filter.dateRange.defaultValueFrom));\r\n        formFilters.setControl(filter.dateRange.formControlNameTo, new FormControl(filter.dateRange.defaultValueTo));\r\n      } else if (filter.autocompleteLocal) {\r\n        formFilters.setControl(filter.autocompleteLocal.formControlName, new FormControl(filter.autocompleteLocal.defaultValue));\r\n      } else if (filter.autocompleteServer) {\r\n        formFilters.setControl(filter.autocompleteServer.formControlName, new FormControl(filter.autocompleteServer.defaultValue));\r\n      } else if (filter.checkbox) {\r\n        formFilters.setControl(filter.checkbox.formControlName, new FormControl(filter.checkbox.defaultValue));\r\n      } else if (filter.switch) {\r\n        formFilters.setControl(filter.switch.formControlName, new FormControl(filter.switch.defaultValue));\r\n      }\r\n    });\r\n    this.formFilters = formFilters;\r\n  }\r\n\r\n  public getControlFormFilter(name: string): FormControl {\r\n    return this.formFilters!.get(name) as FormControl;\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private updateLoadingStatusItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.map((item: ListItemExtended, i) => {\r\n      if (i == index) item.__loading_status__ = status;\r\n      return item;\r\n    }));\r\n  }\r\n\r\n  public deleteItem = async (id: number | string) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}`;\r\n    try {\r\n      await this.fetch.delete(url);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public restoreItem = async (id: string | number) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}/restore`;\r\n    const config = { afterAlert: { description: 'Restaurando ítem de la lista' } }\r\n    try {\r\n      await this.fetch.put(url, config);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public updateChangesItem = (index: number, item: any) => {\r\n    this.configuration.data!.update(items => items.toSpliced(index, 1, item));\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "__loading_status__",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 148
                },
                {
                    "name": "__selected__",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 147
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ModuleConfiguration",
            "id": "interface-ModuleConfiguration-6823f4b66151be0a931670a7cb2aebdb3a3319ddb11882225005b85b95c687bcd559d92ac1b969acbaccbe533e10f9301e27919cfba6fb85fc8b7087d56d5613",
            "file": "src/app/core/services/database-storage.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\r\nimport { StorageMap } from '@ngx-pwa/local-storage';\r\nimport { FetchService } from './fetch.service';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { getWeek } from 'date-fns';\r\n\r\nconst SAL_LONG = 16;\r\nconst INITIALIZATION_VECTOR_LONG = SAL_LONG;\r\n\r\nconst bufferABase64 = (buffer: any) => btoa(String.fromCharCode(...new Uint8Array(buffer)));\r\nconst base64ABuffer = (buffer: any) => Uint8Array.from(atob(buffer), c => c.charCodeAt(0));\r\n\r\nconst passwordBasedKeyDerivation = async (password: string, sal: any, iterations: number, long: number, hash: any, algoritmo = 'AES-CBC') => {\r\n    const encoder = new TextEncoder();\r\n    let key = await window.crypto.subtle.importKey('raw', encoder.encode(password), { name: 'PBKDF2' }, false, ['deriveKey']);\r\n    return await window.crypto.subtle.deriveKey(\r\n        {\r\n            name: 'PBKDF2',\r\n            salt: encoder.encode(sal),\r\n            iterations,\r\n            hash\r\n        },\r\n        key,\r\n        { name: algoritmo, length: long },\r\n        false,\r\n        ['encrypt', 'decrypt'],\r\n    );\r\n}\r\n\r\nconst encrypt = async (password: string, textoPlano: any) => {\r\n    const encoder = new TextEncoder();\r\n    const sal = window.crypto.getRandomValues(new Uint8Array(SAL_LONG));\r\n    const initializationVector = window.crypto.getRandomValues(new Uint8Array(INITIALIZATION_VECTOR_LONG));\r\n    const textPlainBuffer = encoder.encode(textoPlano);\r\n    const clave = await passwordBasedKeyDerivation(password, sal, 100000, 256, 'SHA-256');\r\n    const encrypted = await window.crypto.subtle.encrypt({ name: \"AES-CBC\", iv: initializationVector }, clave, textPlainBuffer);\r\n    return bufferABase64([...sal, ...initializationVector, ...new Uint8Array(encrypted)]);\r\n};\r\n\r\nconst decrypt = async (password: string, encriptadoEnBase64: any) => {\r\n    const decoder = new TextDecoder();\r\n    const encryptData = base64ABuffer(encriptadoEnBase64);\r\n    const sal = encryptData.slice(0, SAL_LONG);\r\n    const initializationVector = encryptData.slice(0 + SAL_LONG, SAL_LONG + INITIALIZATION_VECTOR_LONG);\r\n    const clave = await passwordBasedKeyDerivation(password, sal, 100000, 256, 'SHA-256');\r\n    const decryptDataBuffer = await window.crypto.subtle.decrypt({ name: \"AES-CBC\", iv: initializationVector }, clave, encryptData.slice(SAL_LONG + INITIALIZATION_VECTOR_LONG));\r\n    return decoder.decode(decryptDataBuffer);\r\n}\r\n\r\nexport enum NameModuleDatabase {\r\n    BoxOpenings = 'boxOpenings',\r\n    Banks = 'banks',\r\n    Users = 'users',\r\n    Taxes = 'taxes',\r\n    DocumentTypes = 'documentTypes',\r\n    Plans = 'plans',\r\n    VehicleTypes = 'vehicleTypes',\r\n}\r\n\r\nenum Recurrent {\r\n    Hourly = 'hourly',\r\n    Daily = 'daily',\r\n    Weekly = 'weekly',\r\n    Monthly = 'monthly',\r\n    Yearly = 'yearly',\r\n}\r\n\r\ninterface StorageConfiguration<T = any> {\r\n    data: any;\r\n    recurrent: Recurrent;\r\n    lastUpdate: Date;\r\n}\r\n\r\ninterface ModuleConfiguration {\r\n    readonly key: NameModuleDatabase;\r\n    readonly recurrent: Recurrent;\r\n    readonly name: string;\r\n    readonly config: {\r\n        url: string;\r\n        queryParams?: string;\r\n    };\r\n    lastUpdate?: Date;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DatabaseStorageService {\r\n\r\n    private storageMap = inject(StorageMap);\r\n    private fetch = inject(FetchService);\r\n    public readonly modules: ModuleConfiguration[] = [\r\n        {\r\n            name: 'Aperturas de caja',\r\n            key: NameModuleDatabase.BoxOpenings,\r\n            recurrent: Recurrent.Hourly,\r\n            config: {\r\n                url: 'box-opening',\r\n                queryParams: 'relations=box.account.bank&box_status=abierto&limit=100'\r\n            },\r\n        },\r\n        {\r\n            name: 'Bancos',\r\n            key: NameModuleDatabase.Banks,\r\n            recurrent: Recurrent.Daily,\r\n            config: {\r\n                url: 'database-storage/banks'\r\n            },\r\n        },\r\n        {\r\n            name: 'Usuarios',\r\n            key: NameModuleDatabase.Users,\r\n            recurrent: Recurrent.Hourly,\r\n            config: {\r\n                url: 'database-storage/users'\r\n            },\r\n        },\r\n        {\r\n            name: 'Valores de impuestos',\r\n            key: NameModuleDatabase.Taxes,\r\n            recurrent: Recurrent.Hourly,\r\n            config: {\r\n                url: 'database-storage/taxes'\r\n            },\r\n        },\r\n        {\r\n            name: 'Tipos de documento',\r\n            key: NameModuleDatabase.DocumentTypes,\r\n            recurrent: Recurrent.Daily,\r\n            config: {\r\n                url: 'database-storage/document-types'\r\n            },\r\n        },\r\n        {\r\n            name: 'Planes',\r\n            key: NameModuleDatabase.Plans,\r\n            recurrent: Recurrent.Daily,\r\n            config: {\r\n                url: 'database-storage/plans'\r\n            },\r\n        },\r\n        {\r\n            name: 'Tipos de vehículo',\r\n            key: NameModuleDatabase.VehicleTypes,\r\n            recurrent: Recurrent.Daily,\r\n            config: {\r\n                url: 'database-storage/vehicle-types'\r\n            },\r\n        },\r\n    ];\r\n\r\n    constructor() {\r\n        this.modules.forEach(module => {\r\n            this.storageMap.get(module.key).subscribe((response) => {\r\n                if(response) module.lastUpdate = (response as StorageConfiguration).lastUpdate;\r\n            })\r\n        });\r\n    }\r\n\r\n    public async getOne<T = any>(key: NameModuleDatabase, id: number): Promise<T | undefined> {\r\n        return (await this.getData<any>(key)).find((item) => item.id == id);\r\n    }\r\n\r\n    public async getData<T>(key: NameModuleDatabase): Promise<T[]> {\r\n        const module = this.modules.find((e) => e.key == key)!;\r\n        return new Promise(async (resolve) => {\r\n            this.storageMap.get(key).subscribe(async (response) => {\r\n                if (response) {\r\n                    const { recurrent, lastUpdate } = response as StorageConfiguration<T>;\r\n\r\n                    const c_year = new Date().getFullYear();\r\n                    const c_month = new Date().getMonth();\r\n                    const c_date = new Date().getDate();\r\n                    const c_week = getWeek(new Date(), { weekStartsOn: 1 });\r\n                    const c_hour = new Date().getHours();\r\n                    \r\n                    const u_year = lastUpdate.getFullYear();\r\n                    const u_month = lastUpdate.getMonth();\r\n                    const u_date = lastUpdate.getDate();\r\n                    const u_week = getWeek(lastUpdate, { weekStartsOn: 1 });\r\n                    const u_hour = lastUpdate.getHours();\r\n\r\n                    if (recurrent == Recurrent.Hourly && (c_year != u_year || c_month != u_month || c_date != u_date || c_hour != u_hour)) resolve(await this.getDataServer(module));\r\n                    else if (recurrent == Recurrent.Daily && (c_year != u_year || c_month != u_month || c_date != u_date)) resolve(await this.getDataServer(module));\r\n                    else if (recurrent == Recurrent.Weekly && (c_year != u_year || c_week != u_week)) resolve(await this.getDataServer(module));\r\n                    else if (recurrent == Recurrent.Monthly && (c_year != u_year || c_month != u_month)) resolve(await this.getDataServer(module));\r\n                    else if (recurrent == Recurrent.Yearly && c_year != u_year) resolve(await this.getDataServer(module));\r\n\r\n                    const decode = await decrypt('0123456', (response as StorageConfiguration<T>).data);\r\n                    resolve(JSON.parse(decode));\r\n                } else {\r\n                    resolve(this.getDataServer(module));\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public updateDataLocal(key: NameModuleDatabase): void {\r\n        const config = this.modules.find((e) => e.key == key);\r\n        if (!config) return;\r\n        this.getDataServer(config);\r\n    }\r\n\r\n    private async getDataServer<T>(module: ModuleConfiguration): Promise<T[]> {\r\n        const { config, key, recurrent } = module;\r\n        const url = `${config.url}?${config.queryParams ? config.queryParams : ''}`;\r\n        const result = await this.fetch.get<T[] | PaginatorData<T>>(url);\r\n        const data = result instanceof Array ? result : result.data;\r\n        module.lastUpdate = new Date();\r\n        const storageConfig: StorageConfiguration<T> = {\r\n            data: await encrypt('0123456', JSON.stringify(data)),\r\n            recurrent,\r\n            lastUpdate: module.lastUpdate,\r\n        }\r\n        this.storageMap.set(key, storageConfig).subscribe(() => { });\r\n        return data;\r\n    }\r\n\r\n}",
            "properties": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NameModuleDatabase",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "lastUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "recurrent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Recurrent",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Notification",
            "id": "interface-Notification-e9690db7d1891d02be44f56d756d312553f3c4f8f54b6a32839c5bdb40e04c155afafe295e31e8f9631a16f435e84f6cf98b987fde15b1803946db067c5f72b4",
            "file": "src/app/shared/interfaces/notification.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Notification {\r\n    id: string;\r\n    notifiable_type: string;\r\n    notifiable_id: string;\r\n    read_at: string;\r\n    created_at: string;\r\n    data: {\r\n        user_id: number;\r\n        model: string;\r\n        model_id: string;\r\n        redirect_url: string;\r\n        message: string;\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "created_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "notifiable_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "notifiable_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "read_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "NumberFormInput",
            "id": "interface-NumberFormInput-c318b4a215c8ef742cae4789ee423f79c07102763a82acdca3a73e70fce6b013cf18d23c85dd12f649226b77bd037e42298d7e0f64fce4e298d57932521aba8a",
            "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { FetchService, RequestInitFetch, ToastForFetch } from '@service/fetch.service';\r\nimport { EventsService } from '@service/events.service';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { SpinnerDefaultComponent } from '../spinner-default/spinner-default.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { InputFileConfiguration, SelectFileComponent } from '../select-file/select-file.component';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { ErrorTemplateComponent } from '../error-template/error-template.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { ExecuteFunctionPipe } from '@pipe/execute-function.pipe';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { InputAutocompleteConfiguration, InputAutocompleteLocalConfiguration, InputAutocompleteServerConfiguration, InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectConfiguration, InputSelectLocalConfiguration, InputSelectServerConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { ConfirmDialogData } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\n\r\nexport interface ItemFormConfiguration<Item = any, Data = any> {\r\n  title?: string;\r\n  titleModule: string;\r\n\r\n  subtitle?: ((item: Item) => string | number | null | undefined) | false;\r\n\r\n  formGroup: FormGroup;\r\n  type: 'create' | 'update';\r\n\r\n  loading?: boolean;\r\n  hiddeFields?: boolean;\r\n  fields?: FormInput[];\r\n\r\n  dataItem?: WritableSignal<Item | null>,\r\n\r\n  server: {\r\n      url: string;\r\n      queryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      updateUrl?: string;\r\n      updateQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      createUrl?: string;\r\n      createQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      itemUrl?: string;\r\n      itemQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      fetch?: {\r\n        confirmDialog?: ConfirmDialogData,\r\n        toast?: ToastForFetch,\r\n      }\r\n  }\r\n\r\n  parseDataItemBeforeSendFormFn?: (data: Data) => (Data | Promise<Data>);\r\n  afterSaveFormFn?: (data: Item) => void;\r\n\r\n  itemId?: string | number\r\n  parseItemBeforePatchFormFn?: (item: Item) => (Item | Promise<Item>);\r\n\r\n  ignoreShowError?: boolean;\r\n  interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n  httpError?: FetchErrorResponse;\r\n\r\n  disableAutoBackLocation?: boolean;\r\n\r\n  saveButton?: {\r\n      text: string;\r\n      icon?: string;\r\n      iconPosition?: 'left' | 'right';\r\n  };\r\n  \r\n  cancelButton?: {\r\n      iconPosition?: 'left' | 'right';\r\n      text: string;\r\n      icon?: string;\r\n  } | false;\r\n}\r\n\r\nexport declare type InputType = 'select' | 'select-local' | 'select-server' | 'date' | 'date-range' | 'text' | 'number' | 'textarea' | 'checkbox' | 'switch' | 'autocomplete' | 'autocomplete-local' | 'autocomplete-server';\r\n\r\nexport interface FormInput {\r\n\r\n  type: InputType | 'file';\r\n\r\n  text?: TextFormInput;\r\n\r\n  number?: NumberFormInput;\r\n\r\n  textarea?: TextareaFormInput;\r\n  \r\n  date?: DateFormInput;\r\n  \r\n  dateRange?: DateRangeFormInput;\r\n  \r\n  switch?: SwitchFormInput;\r\n  \r\n  checkbox?: CheckboxFormInput;\r\n\r\n  select?: SelectConfigurationExt;\r\n\r\n  selectLocal?: SelectLocalConfigurationExt;\r\n  \r\n  selectServer?: SelectServerConfigurationExt;\r\n\r\n  autocomplete?: AutocompleteConfigurationExt;\r\n\r\n  autocompleteServer?: AutocompleteServerConfigurationExt;\r\n\r\n  autocompleteLocal?: AutocompleteLocalConfigurationExt;\r\n\r\n  file?: FileFormInput;\r\n}\r\n\r\nexport interface TextFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface NumberFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface TextareaFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  rows?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SelectFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | boolean | null;\r\n  options: { text: string, value: any }[];\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateRangeFormInput<T = any> {\r\n  formControlNameFrom: string;\r\n  formControlNameTo: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValueFrom?: Date | string | number | null;\r\n  defaultValueTo?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SwitchFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface CheckboxFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectConfigurationExt<T = any> extends InputSelectConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectLocalConfigurationExt<T = any> extends InputSelectLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectServerConfigurationExt<T = any> extends InputSelectServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteConfigurationExt<T = any> extends InputAutocompleteConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteLocalConfigurationExt<T = any> extends InputAutocompleteLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteServerConfigurationExt<T = any> extends InputAutocompleteServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface FileFormInput<T = any> extends InputFileConfiguration {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: any;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport const textFormInput = (configuration: TextFormInput): FormInput => ({\r\n  type: 'text',\r\n  text: configuration\r\n});\r\n\r\nexport const numberFormInput = (configuration: NumberFormInput): FormInput => ({\r\n  type: 'number',\r\n  number: configuration\r\n});\r\n\r\nexport const textareaFormInput = (configuration: TextareaFormInput): FormInput => ({\r\n  type: 'textarea',\r\n  textarea: configuration\r\n});\r\n\r\nexport const selectFormInput = (configuration: SelectConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectLocalFormInput = (configuration: SelectLocalConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectServerFormInput = (configuration: SelectServerConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const dateFormInput = (configuration: DateFormInput): FormInput => ({\r\n  type: 'date',\r\n  date: configuration\r\n});\r\n\r\nexport const dateRangeFormInput = (configuration: DateRangeFormInput): FormInput => ({\r\n  type: 'date-range',\r\n  dateRange: configuration\r\n});\r\n\r\nexport const switchFormInput = (configuration: SwitchFormInput): FormInput => ({\r\n  type: 'switch',\r\n  switch: configuration\r\n});\r\n\r\nexport const checkboxFormInput = (configuration: CheckboxFormInput): FormInput => ({\r\n  type: 'checkbox',\r\n  checkbox: configuration\r\n});\r\n\r\nexport const autocompleteFormInput = (configuration: AutocompleteConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocomplete: configuration\r\n});\r\n\r\nexport const autocompleteLocalFormInput = (configuration: AutocompleteLocalConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocompleteLocal: configuration\r\n});\r\n\r\nexport const autocompleteServerFormInput = (configuration: AutocompleteServerConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-server',\r\n  autocompleteServer: configuration\r\n});\r\n\r\nexport const fileFormInput = (configuration: FileFormInput): FormInput => ({\r\n  type: 'file',\r\n  file: configuration\r\n});\r\n\r\n\r\n@Component({\r\n  selector: 'app-item-form-template',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ScrollingModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    SelectFileComponent,\r\n    PathFilesServerPipe,\r\n    ScrollingModule,\r\n    ErrorTemplateComponent,\r\n    GetKeyItemPipe,\r\n    ExecuteFunctionPipe,\r\n    GetMixedValuePipe,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n  ],\r\n  templateUrl: './item-form-template.component.html',\r\n  styleUrls: ['./item-form-template.component.css']\r\n})\r\nexport class ItemFormTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemFormConfiguration;\r\n\r\n  private fetch = inject(FetchService);\r\n  private events = inject(EventsService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  public location = inject(Location);\r\n\r\n  private abortController = new AbortController();\r\n\r\n  ngOnInit() {\r\n    if (this.configuration.type == 'update') {\r\n      this.setItemId();\r\n      if (this.configuration.dataItem && this.configuration.dataItem()) {\r\n        this.configuration.loading = false;\r\n      } else {\r\n        this.configuration.dataItem = signal(null);\r\n        this.getItem();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private setItemId() {\r\n    if (!this.configuration.itemId) {\r\n      if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n        this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getControl(name: string): FormControl {\r\n    return this.configuration.formGroup.get(name) as FormControl;\r\n  }\r\n\r\n  public async submitForm() {\r\n    try {\r\n      const form = this.configuration.formGroup;\r\n      form.markAllAsTouched();\r\n      if (form.invalid || this.configuration.loading) return;\r\n      this.configuration.loading = true;\r\n\r\n      let data = form.getRawValue();\r\n      const { parseDataItemBeforeSendFormFn } = this.configuration;\r\n      data = await parseDataItemBeforeSendFormFn?.(data) ?? data;\r\n\r\n      const requestInit: RequestInitFetch = { };\r\n      if(this.configuration.server.fetch?.confirmDialog) {\r\n        requestInit.confirmDialog = this.configuration.server.fetch.confirmDialog;\r\n      }\r\n      if(this.configuration.server.fetch?.toast) {\r\n        requestInit.toast = this.configuration.server.fetch.toast;\r\n      }\r\n\r\n      let response = null;\r\n      if (this.configuration.type === 'create') {\r\n        response = await this.fetch.post(this.configuration.server.url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_created`, response);\r\n      } else {\r\n        const url = this.configuration.server.updateUrl ?? `${this.configuration.server.url}/${this.configuration.dataItem!()?.id}`;\r\n        response = await this.fetch.put(url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_updated`, response);\r\n      }\r\n\r\n      const { afterSaveFormFn } = this.configuration;\r\n      if (afterSaveFormFn) afterSaveFormFn(response);\r\n\r\n      if (!this.configuration.disableAutoBackLocation) this.location.back();\r\n    } catch { }\r\n    this.configuration.loading = false;\r\n  }\r\n\r\n  public async getItem() {\r\n    this.configuration.dataItem = signal(null)\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { itemId, server } = this.configuration;\r\n      let queryParams:any = server.itemQueryParams ?? {};\r\n      if (queryParams instanceof Object) {\r\n        queryParams = objectToURLSearchParams(queryParams);\r\n        queryParams = queryParams.toString();\r\n      }\r\n      const url = `${server.itemUrl ?? server.url}/${itemId}?${queryParams ? queryParams : ''}`;\r\n      const requestInit: RequestInitFetch = { signal: this.abortController.signal };\r\n      let item: any = await this.fetch.get(url, requestInit);\r\n      const { parseItemBeforePatchFormFn } = this.configuration;\r\n      item = await parseItemBeforePatchFormFn?.(item) ?? item;\r\n      this.configuration.formGroup.patchValue(item);\r\n      this.configuration.dataItem.set(item);\r\n      this.configuration.hiddeFields = false;\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "cssClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 134
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number | null",
                    "optional": true,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 131
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "step",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "textLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 128
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "NumberListColumn",
            "id": "interface-NumberListColumn-edc9a2c085d669b062640c6d2a97876fe56bb34f5ae23612a12a67b2af6f44bb5d3316d9f28e50d8c8d522c0e6ce8fc3245f639ec16593bc1c325c3c460a4296",
            "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule, DatePipe, Location, NgOptimizedImage } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, ViewChild, Input, ContentChild, TemplateRef, ElementRef, Renderer2, ViewEncapsulation, signal, WritableSignal, computed, inject, Inject, Optional, InjectionToken, EventEmitter, RendererStyleFlags2 } from '@angular/core';\r\nimport { MatCheckboxChange, MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSort, MatSortModule } from '@angular/material/sort';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from 'src/app/shared/utilities/queryParams';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { IndexListPipe } from '@pipe/index-list.pipe';\r\nimport { SpinnerDefaultComponent } from '@component/spinner-default/spinner-default.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { debounceTime } from 'rxjs';\r\nimport { DiffDatePipe } from '@pipe/diff-date.pipe';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { HiddenOptionButtonRowPipe } from '@pipe/hidden-option-button-row.pipe';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { GetUserByIdPipe } from '@pipe/get-user-by-id.pipe';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ListFormatPipe } from '@pipe/list-format.pipe';\r\nimport { LoadImagePrivateDirective } from '@directive/load-image-private.directive';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MatPseudoCheckboxModule } from '@angular/material/core';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { EventGlobalSearch, NAME_EVENT_GLOBAL_SEARCH } from 'src/app/sidenav/sidenav/sidenav.component';\r\nimport { ExecuteFunctionListPipe } from './execute-function-list.pipe';\r\nimport { FormInput, dateRangeFormInput, switchFormInput } from '@component/item-form-template/item-form-template.component';\r\nimport { RenameTitleColumnListPipe } from './rename-title-column-list.pipe';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DateFnsAdapter } from '@angular/material-date-fns-adapter';\r\nimport { MyDateAdapter } from '@utility/myDateAdapter';\r\nimport { MY_DATE_FORMATS } from '@utility/myDateFormat';\r\n\r\nexport const DATA_TYPE_LIST = new InjectionToken<'array' | 'paginator'>('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST');\r\n\r\nexport interface ItemListConfiguration<T = any> {\r\n  readonly dataType?: 'array' | 'paginator';\r\n  readonly keyGetItemsPaginator?: string;\r\n  readonly keyGetTotalItemsPaginator?: string;\r\n\r\n  readonly disableFiltersInQueryParams?: boolean;\r\n\r\n  title: string | null;\r\n\r\n  parseDataFn?: (data: T[]) => T[] | Promise<T[]>;\r\n  data?: WritableSignal<T[]>;\r\n  updateListEvent?: EventEmitter<void>;\r\n\r\n  defaultOrder?: {\r\n    key: string,\r\n    order: 'ASC' | 'DESC'\r\n  };\r\n\r\n  backButton?: boolean;\r\n\r\n  updateButton?: boolean;\r\n\r\n  server: {\r\n    readonly url: string,\r\n    queryParams?: { [key: string]: any } | string;\r\n  }\r\n\r\n  createButton?: {\r\n    text?: string,\r\n    routerLink: RouterLinkCreateButton\r\n  } | false;\r\n\r\n  filters?: FormInput[] | false;\r\n\r\n  rows?: {\r\n    selectable?: {\r\n      actions: SelectableActionButton<T>[];\r\n    };\r\n    index?: false | ({ title: string });\r\n    cssClass?: string | ((item: T) => string);\r\n    actions?: ActionButton<T>[];\r\n    options?: ActionButton<T>[] | false;\r\n  },\r\n\r\n  columns: WritableSignal<ListColumn<T>[]>;\r\n}\r\n\r\nexport interface RouterLinkCreateButton {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any;\r\n}\r\nexport interface RouterLinkItem<T> {\r\n  url: ((item: T, index: number) => string) | string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: ((item: T, index: number) => (string | { [key: string]: any } | any[] | number | null)) | string | { [key: string]: any } | any[] | number | null;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\ndeclare type ActionButtonActionsType = 'clickEvent' | 'routerLink';\r\ninterface ActionButton<T> {\r\n  type: 'clickEvent' | 'routerLink';\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((item: T, index: number) => boolean);\r\n  disabled?: boolean | ((item: T, index: number) => boolean);\r\n  cssClass?: string | ((item: T, index: number) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((item: T, index: number) => ({ [key: string]: any }));\r\n  fn?: (item: T, index: number, fns: {\r\n    deleteItemFn: (id: number | string) => Promise<void>,\r\n    restoreItemFn: (id: number | string) => Promise<void>,\r\n    updateChangesItemFn: (index: number, item: T) => void,\r\n  }) => void;\r\n  routerLink?: RouterLinkItem<T>;\r\n}\r\ninterface ClickEventActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'fn'>> & ActionButton<T>, 'type' | 'routerLink'> { }\r\nexport const clickEventActionButton = <T = any>(config: ClickEventActionButton<T>): ActionButton<T> => ({ type: 'clickEvent', ...config });\r\ninterface RouterLinkActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'routerLink'>> & ActionButton<T>, 'type' | 'clickEvent'> { }\r\nexport const routerLinkActionButton = <T = any>(config: RouterLinkActionButton<T>): ActionButton<T> => ({ type: 'routerLink', ...config });\r\ninterface SelectableActionButton<T> {\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((selectedItems: T[]) => boolean);\r\n  disabled?: boolean | ((selectedItems: T[]) => boolean);\r\n  cssClass?: string | ((selectedItems: T[]) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((selectedItems: T[]) => ({ [key: string]: any }));\r\n  fn: (selectedItems: T[]) => void;\r\n}\r\nexport const selectableActionButton = <T = any>(config: SelectableActionButton<T>): SelectableActionButton<T> => ({ ...config });\r\n\r\nexport interface ListItemExtended {\r\n  __selected__?: boolean;\r\n  __loading_status__?: boolean;\r\n}\r\n\r\nexport type TypeValueKeyItem = 'text' | 'diff-date' | 'date' | 'number' | 'email' | 'phone' | 'user' | 'uppercase' | 'lowercase' | 'titlecase' | 'first-letter-uppercase' | 'list-format' | 'currency';\r\n\r\nexport interface ListColumn<T> {\r\n  /**\r\n   * @description\r\n   * Agrega clases css al contenedor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   */\r\n  align?: 'left' | 'center' | 'right';\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor adicional de la celda de la columna\r\n   * @example\r\n   * clickEventAdditionalValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventAdditionalValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor de la celda de la columna\r\n   * @example\r\n   * clickEventValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css a la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClass: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClass?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor adicional de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayAdditionalValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo fecha (type: 'date')\r\n   * @example\r\n   * ...\r\n   * dateFormat: 'yyyy-MM-dd'\r\n   * ...\r\n   * dateFormat: 'dd/MM/yyyy' // Por defecto\r\n   * ...\r\n   */\r\n  dateFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor adicional a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.name\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayAdditionalValueFn?: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayValueFn: (item) => item.name\r\n   * ...\r\n   * displayValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * If you want to display a value in the column that is not in the item, you can use this function\r\n   * @example\r\n   * ...\r\n   * gridColumn: '1fr'\r\n   * ...\r\n   * gridColumn: '200px'\r\n   * ...\r\n   * gridColumn: 'max-content'\r\n   * ...\r\n   * gridColumn: 'fit-content(200px)'\r\n   * ...\r\n   */\r\n  gridColumn?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones > Columnas\r\n   * @example\r\n   * ...\r\n   * hidden: true\r\n   * ...\r\n   * hidden: false // Por defecto\r\n   * ...\r\n   */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo número (type: 'number')\r\n   * @example\r\n   * ...\r\n   * numberFormat: '2.2-2'\r\n   * ...\r\n   * numberFormat: '0.2-2' // Por defecto\r\n   * ...\r\n   */\r\n  numberFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor adicional de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkAdditionalValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Sortable column espicif key in object configuration\r\n   * @example\r\n   * sort: { key: 'name' }\r\n   */\r\n  sort?: { key: string };\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display additional value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: { color: 'green' }\r\n   * ...\r\n   * @param item\r\n   * @returns string | number | null | undefined | string[] | number[]\r\n   */\r\n  cssStyleDisplayAdditionalValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayValue: { color: 'green' }\r\n   * ...\r\n   */\r\n  cssStyleDisplayValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Title column\r\n   * @example\r\n   * title: 'Nombre'\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * @description\r\n   * To display a tooltip in the column on hover\r\n   * @example\r\n   * tooltip: 'Ver detalle'\r\n   */\r\n  tooltip?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * For show type value in cell\r\n   * @example\r\n   * ...\r\n   * type: 'number',\r\n   * displayValueFn: (item) => item.price, // output: 2,000.00\r\n   * ...\r\n   * type: 'date',\r\n   * displayValueFn: (item) => item.created_at, // output 12/12/2020\r\n   * ...\r\n   */\r\n  type?: TypeValueKeyItem | 'image' | 'html';\r\n\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface SimpleListColumn<T> extends Omit<ListColumn<T>, 'type' | 'displayAdditionalValueFn' | 'displayValueFn' | 'dateFormat' | 'numberFormat' | 'image'> { }\r\ninterface SimpleListColumn2<T> extends Omit<SimpleListColumn<T>, 'cssStyleDisplayAdditionalValue' | 'routerLinkAdditionalValue' | 'cssClassDisplayAdditionalValue' | 'clickEventAdditionalValue'> { }\r\ninterface ListFormatListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string[];\r\n  displayValueFn: (item: T, index: number) => string[];\r\n}\r\n\r\ninterface NumberListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => number | null | undefined;\r\n  numberFormat?: string;\r\n}\r\n\r\ninterface StringListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => string | number | null | undefined;\r\n}\r\n\r\ninterface DateListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined;\r\n  dateFormat?: string;\r\n}\r\n\r\ninterface ImageListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface HtmlListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n}\r\n\r\nexport const numberColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'number', ...config });\r\n\r\nexport const listFormatColumn = <T = any>(config: ListFormatListColumn<T>): ListColumn<T> => ({ type: 'list-format', ...config });\r\n\r\nexport const dateColumn = <T = any>(config: DateListColumn<T>): ListColumn<T> => ({ type: 'date', ...config });\r\n\r\nexport const diffDateColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'diff-date', ...config });\r\n\r\nexport const htmlColumn = <T = any>(config: HtmlListColumn<T>): ListColumn<T> => ({ type: 'html', ...config });\r\n\r\nexport const textColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'text', ...config });\r\n\r\nexport const uppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'uppercase', ...config });\r\n\r\nexport const lowercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'lowercase', ...config });\r\n\r\nexport const titlecaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'titlecase', ...config });\r\n\r\nexport const firstLetterUppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'first-letter-uppercase', ...config });\r\n\r\nexport const phoneColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'phone', ...config });\r\n\r\nexport const emailColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'email', ...config });\r\n\r\nexport const userColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'user', ...config });\r\n\r\nexport const imageColumn = <T = any>(config: ImageListColumn<T>): ListColumn<T> => ({ type: 'image', ...config });\r\n\r\n\r\nexport const itemNameAndDescriptionColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  title: 'Nombre',\r\n  gridColumn: '1fr',\r\n  sort: { key: 'name' },\r\n  routerLinkValue: { url: (item: any) => `../detail/${item.id}` },\r\n  displayValueFn: (item: any) => item.name,\r\n  displayAdditionalValueFn: (item: any) => item.description,\r\n  ...config,\r\n});\r\nexport const itemStatusColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'cssClassDisplayValue' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'first-letter-uppercase',\r\n  title: 'Estado',\r\n  sort: { key: 'status' },\r\n  align: 'center',\r\n  displayValueFn: (item: any) => item.status,\r\n  cssClassDisplayValue: (item: any) => `status-chip ${item.status}`,\r\n  ...config,\r\n});\r\nexport const itemCreatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Creado',\r\n  sort: { key: 'created_at' },\r\n  displayValueFn: (item: any) => item.created_at,\r\n  ...config,\r\n});\r\nexport const itemUpdatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Actualizado',\r\n  sort: { key: 'updated_at' },\r\n  hidden: true,\r\n  displayValueFn: (item: any) => item.updated_at,\r\n  ...config,\r\n});\r\nexport const simpleListColumns = (): ListColumn<any>[] => ([\r\n  itemNameAndDescriptionColumn(),\r\n  itemUpdatedAtColumn(),\r\n  itemCreatedAtColumn(),\r\n  itemStatusColumn(),\r\n]);\r\n\r\n\r\nexport const defaultListFilterInputs = (): FormInput[] => [\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de creación',\r\n    formControlNameFrom: 'created_at_from',\r\n    formControlNameTo: 'created_at_to',\r\n  }),\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de actualización',\r\n    formControlNameFrom: 'updated_at_from',\r\n    formControlNameTo: 'updated_at_to',\r\n  }),\r\n  switchFormInput({\r\n    textLabel: 'Registros inactivos',\r\n    formControlName: 'inactive',\r\n  }),\r\n];\r\n\r\nexport const deleteItemActionButton = () => clickEventActionButton({\r\n  icon: 'delete',\r\n  text: 'Eliminar',\r\n  fn: async ({ id }, _, { deleteItemFn }) => deleteItemFn(id),\r\n  hidden: (item) => item.deleted_at,\r\n});\r\n\r\nexport const restoreItemActionButton = () => clickEventActionButton({\r\n  icon: 'restore',\r\n  text: 'Restaurar',\r\n  fn: async ({ id }, _, { restoreItemFn }) => restoreItemFn(id),\r\n  hidden: (item) => !item.deleted_at,\r\n})\r\n\r\nexport const viewItemActionButton = () => routerLinkActionButton({\r\n  icon: 'visibility',\r\n  text: 'Ver',\r\n  routerLink: { url: (item) => `../view/${item.id}` },\r\n});\r\n\r\nexport const editItemActionButton = () => routerLinkActionButton({\r\n  icon: 'edit',\r\n  text: 'Editar',\r\n  routerLink: { url: (item) => `../edit/${item.id}` },\r\n})\r\n\r\n@Component({\r\n  selector: 'app-item-list-template',\r\n  standalone: true,\r\n  templateUrl: './item-list-template.component.html',\r\n  styleUrl: './item-list-template.component.css',\r\n  imports: [\r\n    CommonModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatSortModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatTooltipModule,\r\n    MatPseudoCheckboxModule,\r\n    IndexListPipe,\r\n    GetKeyItemPipe,\r\n    RouterLink,\r\n    DiffDatePipe,\r\n    HiddenOptionButtonRowPipe,\r\n    NgOptimizedImage,\r\n    ScrollingModule,\r\n    GetUserByIdPipe,\r\n    PathFilesServerPipe,\r\n    ListFormatPipe,\r\n    LoadImagePrivateDirective,\r\n    FirstLetterUppercasePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n    ExecuteFunctionListPipe,\r\n    RenameTitleColumnListPipe,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    FirstLetterUppercasePipe,\r\n    GetKeyItemPipe,\r\n    RenameTitleColumnListPipe,\r\n    BrowserAnimationsModule,\r\n    DateFnsAdapter,\r\n  ],\r\n})\r\nexport class ItemListTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemListConfiguration;\r\n\r\n  // @ContentChild('headers') headers!: TemplateRef<any>;\r\n  @ContentChild('rowList') rowList!: TemplateRef<any>;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  @ViewChild('divListItems', { static: true }) private divList!: ElementRef;\r\n\r\n  private _dataTypeList: 'array' | 'paginator' = 'array';\r\n  private _keyForGetItems: string;\r\n  private _keyForGetTotalItems: string;\r\n\r\n  private fetch = inject(FetchService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  private renderer = inject(Renderer2);\r\n  private eventsService = inject(EventsService);\r\n  public location = inject(Location);\r\n\r\n  // private datePipe = inject(DatePipe);\r\n  public firstLetterUppercasePipe = inject(FirstLetterUppercasePipe);\r\n  public getKeyItemPipe = inject(GetKeyItemPipe);\r\n  public renameTitleColumnListPipe = inject(RenameTitleColumnListPipe);\r\n\r\n  public lengthData = computed(() => this.data().length)\r\n\r\n  public searchCtrl: FormControl = new FormControl('');\r\n  public formFilters: FormGroup<any> | null = null;\r\n\r\n  public loading = signal(true);\r\n  public font: WritableSignal<'small' | 'medium' | 'large'> = signal('medium');\r\n  public headerListStyle: WritableSignal<'simple' | 'color'> = signal('simple');\r\n\r\n  private abortController = new AbortController();\r\n\r\n  private unsubscribe$: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(DATA_TYPE_LIST) _dataTypeList: 'array' | 'paginator',\r\n    @Optional() @Inject(KEY_GET_ITEMS_PAGINATOR_LIST) _keyForGetItems: string,\r\n    @Optional() @Inject(KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST) _keyForGetTotalItems: string\r\n  ) {\r\n    this._dataTypeList = _dataTypeList ?? 'paginator';\r\n    this._keyForGetItems = _keyForGetItems || 'data';\r\n    this._keyForGetTotalItems = _keyForGetTotalItems || 'total';\r\n  }\r\n\r\n  get data(): WritableSignal<any[]> {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  get defaultOrder(): string {\r\n    return this.configuration.defaultOrder ? `${this.configuration.defaultOrder?.key}|${this.configuration.defaultOrder?.order}` : 'id|DESC';\r\n  }\r\n\r\n  get dataTypeList(): 'array' | 'paginator' {\r\n    return this.configuration.dataType ?? this._dataTypeList;\r\n  }\r\n\r\n  get keyForGetItems(): string {\r\n    return this.configuration.keyGetItemsPaginator ?? this._keyForGetItems;\r\n  }\r\n\r\n  get keyForGetTotalItems(): string {\r\n    return this.configuration.keyGetTotalItemsPaginator ?? this._keyForGetTotalItems;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.configuration.data = signal([]);\r\n    this.configuration.updateListEvent = new EventEmitter();\r\n    if (this.configuration.rows?.options != false && !this.configuration.rows?.options?.length) {\r\n      this.configuration.rows = {\r\n        ...(this.configuration.rows ?? {}),\r\n        options: [\r\n          viewItemActionButton(),\r\n          editItemActionButton(),\r\n          deleteItemActionButton(),\r\n          restoreItemActionButton(),\r\n        ]\r\n      };\r\n    }\r\n    this.generateFormControlsFromFilterInputs();\r\n    this.generateColumnsCss();\r\n\r\n    this.eventsService\r\n      .eventsFiltered<EventGlobalSearch>([NAME_EVENT_GLOBAL_SEARCH])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(({ data }: any) => {\r\n        const type = data.type;\r\n        if (type == 'enter') this.searchCtrl.setValue(data.value);\r\n      })\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.paginator.pageIndex = 0;\r\n    this.paginator.pageSize = 20;\r\n\r\n    this.verifyQueryParams();\r\n\r\n    this.activatedRoute.queryParams.subscribe(() => this.callGetData());\r\n\r\n    this.sort.sortChange.subscribe(({ active, direction }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (this.defaultOrder == `${active}|${direction}` || !active || !direction) queryParams['order'] = null;\r\n      else queryParams['order'] = `${active}|${direction}`;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.searchCtrl.valueChanges.pipe(debounceTime(250)).subscribe((value: string) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (value) queryParams['search'] = value;\r\n      else queryParams['search'] = null;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.paginator.page.subscribe(({ pageIndex, pageSize }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (pageIndex == 0 || (queryParams['page'] ?? null) == pageIndex + 1) queryParams['page'] = null;\r\n      else queryParams['page'] = pageIndex + 1;\r\n      if (pageSize == 20 || (queryParams['per_page'] ?? null) == pageSize) queryParams['per_page'] = null;\r\n      else queryParams['per_page'] = pageSize;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.eventsService\r\n      .eventsFiltered([\r\n        `${this.configuration.server.url}_created`,\r\n        `${this.configuration.server.url}_updated`\r\n      ])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(() => this.callGetData());\r\n\r\n    // this.configuration.updateListEvent!.subscribe(() => this.callGetData({}));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n    if (this.abortController) this.abortController.abort();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private async generateColumnsCss(): Promise<void> {\r\n    const grid_cols: string[] = [];\r\n    const grid_areas: string[] = []\r\n    if (this.configuration.rows?.selectable) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('selected');\r\n    }\r\n    if (this.configuration.rows?.index != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('index');\r\n    }\r\n    for await (const column of this.configuration.columns()) {\r\n      if (!column.hidden) {\r\n        grid_cols.push(column.gridColumn ?? 'auto');\r\n        grid_areas.push(this.renameTitleColumnListPipe.transform(column.title));\r\n      }\r\n    }\r\n    if (this.configuration.rows?.actions) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('actions');\r\n    }\r\n    if (this.configuration.rows?.options != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('options');\r\n    }\r\n    this.renderer.setStyle(this.divList.nativeElement, 'grid-template-columns', grid_cols.join(' '));\r\n    this.renderer.setStyle(this.divList.nativeElement, '--items-list-grid-template-areas', `\"${grid_areas.join(' ')}\"`, RendererStyleFlags2.DashCase);\r\n    grid_areas.forEach((area, index) => this.renderer.setStyle(this.divList.nativeElement, `--items-list-grid-area-${index + 1}`, area, RendererStyleFlags2.DashCase));\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private getQueryParams(): { [key: string]: any } {\r\n    return !this.configuration.disableFiltersInQueryParams ? JSON.parse(JSON.stringify(this.activatedRoute.snapshot.queryParams)) : {\r\n      ...this.formFilters?.value ?? {},\r\n      page: this.paginator.pageIndex + 1,\r\n      per_page: this.paginator.pageSize,\r\n      order: this.sort.active ? `${this.sort.active}|${this.sort.direction}` : null,\r\n      search: this.searchCtrl.value ? this.searchCtrl.value : null,\r\n    }\r\n  }\r\n\r\n  private navigateOrCallGetData(params: any): void {\r\n    if (this.configuration.disableFiltersInQueryParams) this.callGetData(params);\r\n    else this.router.navigate([], { queryParams: params });\r\n  }\r\n\r\n  private verifyQueryParams(): void {\r\n    const queryParams = {} as any;\r\n    const { page, per_page, order, search, ...filters } = queryParams;\r\n    this.paginator.pageIndex = Number(page ?? 1) - 1;\r\n    this.paginator.pageSize = Number(per_page) ?? 20;\r\n    this.sort.active = order?.split('|')[0] ?? '';\r\n    this.sort.direction = order?.split('|')[1] == 'asc' ? 'asc' : 'desc';\r\n    this.sort.sortChange.emit();\r\n    this.searchCtrl.setValue(search ?? null, { emitEvent: false });\r\n  }\r\n\r\n  public callGetData(queryParams: any = {}): void {\r\n    const params = objectToURLSearchParams(queryParams);\r\n    if (!params.has('page')) params.set('page', String(this.paginator.pageIndex + 1));\r\n    if (!params.has('per_page')) params.set('per_page', String(this.paginator.pageSize));\r\n    if (!params.has('order')) params.set('order', this.defaultOrder);\r\n    this.getData(params);\r\n  }\r\n\r\n  private async getData(searchParams: URLSearchParams = new URLSearchParams()): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const serverUrl = this.configuration.server.url;\r\n    let queryParams = this.configuration.server.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const url = `${serverUrl}?${searchParams.toString()}&${queryParams ?? ''}`;\r\n    const config = { signal: this.abortController.signal };\r\n    try {\r\n      let items = [];\r\n      let totalItems = 0;\r\n      if (this.dataTypeList == 'array') {\r\n        items = await this.fetch.get<any[]>(url, config);\r\n        totalItems = items.length;\r\n      } else {\r\n        const paginatorData = await this.fetch.get<PaginatorData<any>>(url, config);\r\n        items = this.getKeyItemPipe.transform(paginatorData, this.keyForGetItems);\r\n        totalItems = this.getKeyItemPipe.transform(paginatorData, this.keyForGetTotalItems);\r\n      }\r\n      const { parseDataFn } = this.configuration;\r\n      const parseData = await parseDataFn?.(items) ?? items;\r\n      this.paginator.length = totalItems;\r\n      this.data.set(parseData);\r\n      this.loading.set(false);\r\n      this.checkSelectedItems();\r\n    } catch (err: any) {\r\n      if (err.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n  }\r\n\r\n  public hiddenToggleColumn($event: MatCheckboxChange, index: number): void {\r\n    this.configuration.columns.update((columns) => {\r\n      columns[index]['hidden'] = !$event.checked\r\n      return columns;\r\n    })\r\n    this.generateColumnsCss();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public navigateCreateView(): void {\r\n    this.router.navigate(['../create'], { relativeTo: this.activatedRoute });\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public allSelectedItems = signal(false);\r\n  public someSelectedItems = signal(false);\r\n  public selectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__));\r\n  public lengthSelectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__).length);\r\n\r\n  public selectedItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.toSpliced(index, 1, { ...data[index], __selected__: status }));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public selectedAllItems(status: boolean): void {\r\n    this.data.update((data) => data.map((e) => ({ ...e, __selected__: status })));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public someSelected(): boolean {\r\n    return this.data().length > 0 && this.data().some((e: ListItemExtended) => e.__selected__) && !this.allSelectedItems();\r\n  }\r\n\r\n  private checkSelectedItems(): void {\r\n    this.allSelectedItems.set(this.data().length > 0 && this.data().every((e: ListItemExtended) => e.__selected__));\r\n    this.someSelectedItems.set(this.someSelected());\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private generateFormControlsFromFilterInputs(): void {\r\n    if (this.configuration.filters == false) return;\r\n    if (!this.configuration.filters?.length) this.configuration.filters = defaultListFilterInputs();\r\n    const formFilters = new FormGroup({});\r\n    this.configuration.filters?.forEach((filter) => {\r\n      if (filter.text) {\r\n        formFilters.setControl(filter.text.formControlName, new FormControl(filter.text.defaultValue));\r\n      } else if (filter.textarea) {\r\n        formFilters.setControl(filter.textarea.formControlName, new FormControl(filter.textarea.defaultValue));\r\n      } else if (filter.select) {\r\n        formFilters.setControl(filter.select.formControlName, new FormControl(filter.select.defaultValue));\r\n      } else if (filter.number) {\r\n        formFilters.setControl(filter.number.formControlName, new FormControl(filter.number.defaultValue));\r\n      } else if (filter.date) {\r\n        formFilters.setControl(filter.date.formControlName, new FormControl(filter.date.defaultValue));\r\n      } else if (filter.dateRange) {\r\n        formFilters.setControl(filter.dateRange.formControlNameFrom, new FormControl(filter.dateRange.defaultValueFrom));\r\n        formFilters.setControl(filter.dateRange.formControlNameTo, new FormControl(filter.dateRange.defaultValueTo));\r\n      } else if (filter.autocompleteLocal) {\r\n        formFilters.setControl(filter.autocompleteLocal.formControlName, new FormControl(filter.autocompleteLocal.defaultValue));\r\n      } else if (filter.autocompleteServer) {\r\n        formFilters.setControl(filter.autocompleteServer.formControlName, new FormControl(filter.autocompleteServer.defaultValue));\r\n      } else if (filter.checkbox) {\r\n        formFilters.setControl(filter.checkbox.formControlName, new FormControl(filter.checkbox.defaultValue));\r\n      } else if (filter.switch) {\r\n        formFilters.setControl(filter.switch.formControlName, new FormControl(filter.switch.defaultValue));\r\n      }\r\n    });\r\n    this.formFilters = formFilters;\r\n  }\r\n\r\n  public getControlFormFilter(name: string): FormControl {\r\n    return this.formFilters!.get(name) as FormControl;\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private updateLoadingStatusItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.map((item: ListItemExtended, i) => {\r\n      if (i == index) item.__loading_status__ = status;\r\n      return item;\r\n    }));\r\n  }\r\n\r\n  public deleteItem = async (id: number | string) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}`;\r\n    try {\r\n      await this.fetch.delete(url);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public restoreItem = async (id: string | number) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}/restore`;\r\n    const config = { afterAlert: { description: 'Restaurando ítem de la lista' } }\r\n    try {\r\n      await this.fetch.put(url, config);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public updateChangesItem = (index: number, item: any) => {\r\n    this.configuration.data!.update(items => items.toSpliced(index, 1, item));\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "displayAdditionalValueFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 421
                },
                {
                    "name": "displayValueFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 422
                },
                {
                    "name": "numberFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 423
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "SimpleListColumn"
            ]
        },
        {
            "name": "PaginatorData",
            "id": "interface-PaginatorData-bffb2c9740f14ca147c5b6e2cb7e66b8e46dffe6520f97f90770d15bb72a2dc33a4fee06cfd5c913facf1fb3241ca2178ad03469d21cf484a7dfef4d6db7bba1",
            "file": "src/app/shared/interfaces/paginator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PaginatorData<T> {\r\n  current_page: number;\r\n  data: T[];\r\n  first_page_url: string;\r\n  from: number;\r\n  last_page: number;\r\n  last_page_url: string;\r\n  links: any[]\r\n  next_page_url: null | number;\r\n  path: string;\r\n  per_page: number;\r\n  prev_page_url: null | number;\r\n  to: number;\r\n  total: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "current_page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "first_page_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "from",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "last_page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "last_page_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "links",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "next_page_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null | number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "per_page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "prev_page_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null | number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PanelSidenavConfiguration",
            "id": "interface-PanelSidenavConfiguration-9e35dbe9df6f784b4f4f1e9d5868de97fb41554da82e8c829ecaa1347a88ba9c7ddf8e95ce22dc4492ac748140276e8a873c49985647880e34b146a9741bc898",
            "file": "src/app/shared/components/panel-drawer-template/panel-drawer-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, ViewEncapsulation, WritableSignal, signal } from '@angular/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\n\r\nexport interface PanelSidenavConfiguration {\r\n  title?: string;\r\n  groups: PanelSidenavGroup[];\r\n}\r\n\r\nexport interface PanelSidenavGroup {\r\n  title?: string;\r\n  icon?: string;\r\n  links: PanelSidenavLink[];\r\n}\r\n\r\nexport interface PanelSidenavLink {\r\n  title: string;\r\n  icon?: string;\r\n  routerLink: PanelSidenavLinkRouter;\r\n  children?: Omit<PanelSidenavLink, 'children'>[];\r\n}\r\n\r\nexport interface PanelSidenavLinkRouter {\r\n  url: string;\r\n  queryParams?: { [key: string]: any };\r\n}\r\n\r\n@Component({\r\n  selector: 'app-panel-drawer-template',\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    RouterLink,\r\n    RouterLinkActive,\r\n    RouterOutlet,\r\n  ],\r\n  templateUrl: './panel-drawer-template.component.html',\r\n  styleUrl: './panel-drawer-template.component.scss',\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class PanelDrawerTemplateComponent {\r\n  panelSidenavLinkSelected: WritableSignal<PanelSidenavLink | null> = signal(null);\r\n  showChildren: WritableSignal<boolean> = signal(false);\r\n  @Input({required: true}) public configuration!: PanelSidenavConfiguration;\r\n  public selectedLink(link: PanelSidenavLink) {\r\n    this.panelSidenavLinkSelected.set(link);\r\n    this.showChildren.set(true);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "groups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PanelSidenavGroup[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PanelSidenavGroup",
            "id": "interface-PanelSidenavGroup-9e35dbe9df6f784b4f4f1e9d5868de97fb41554da82e8c829ecaa1347a88ba9c7ddf8e95ce22dc4492ac748140276e8a873c49985647880e34b146a9741bc898",
            "file": "src/app/shared/components/panel-drawer-template/panel-drawer-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, ViewEncapsulation, WritableSignal, signal } from '@angular/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\n\r\nexport interface PanelSidenavConfiguration {\r\n  title?: string;\r\n  groups: PanelSidenavGroup[];\r\n}\r\n\r\nexport interface PanelSidenavGroup {\r\n  title?: string;\r\n  icon?: string;\r\n  links: PanelSidenavLink[];\r\n}\r\n\r\nexport interface PanelSidenavLink {\r\n  title: string;\r\n  icon?: string;\r\n  routerLink: PanelSidenavLinkRouter;\r\n  children?: Omit<PanelSidenavLink, 'children'>[];\r\n}\r\n\r\nexport interface PanelSidenavLinkRouter {\r\n  url: string;\r\n  queryParams?: { [key: string]: any };\r\n}\r\n\r\n@Component({\r\n  selector: 'app-panel-drawer-template',\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    RouterLink,\r\n    RouterLinkActive,\r\n    RouterOutlet,\r\n  ],\r\n  templateUrl: './panel-drawer-template.component.html',\r\n  styleUrl: './panel-drawer-template.component.scss',\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class PanelDrawerTemplateComponent {\r\n  panelSidenavLinkSelected: WritableSignal<PanelSidenavLink | null> = signal(null);\r\n  showChildren: WritableSignal<boolean> = signal(false);\r\n  @Input({required: true}) public configuration!: PanelSidenavConfiguration;\r\n  public selectedLink(link: PanelSidenavLink) {\r\n    this.panelSidenavLinkSelected.set(link);\r\n    this.showChildren.set(true);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "links",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PanelSidenavLink[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PanelSidenavLink",
            "id": "interface-PanelSidenavLink-9e35dbe9df6f784b4f4f1e9d5868de97fb41554da82e8c829ecaa1347a88ba9c7ddf8e95ce22dc4492ac748140276e8a873c49985647880e34b146a9741bc898",
            "file": "src/app/shared/components/panel-drawer-template/panel-drawer-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, ViewEncapsulation, WritableSignal, signal } from '@angular/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\n\r\nexport interface PanelSidenavConfiguration {\r\n  title?: string;\r\n  groups: PanelSidenavGroup[];\r\n}\r\n\r\nexport interface PanelSidenavGroup {\r\n  title?: string;\r\n  icon?: string;\r\n  links: PanelSidenavLink[];\r\n}\r\n\r\nexport interface PanelSidenavLink {\r\n  title: string;\r\n  icon?: string;\r\n  routerLink: PanelSidenavLinkRouter;\r\n  children?: Omit<PanelSidenavLink, 'children'>[];\r\n}\r\n\r\nexport interface PanelSidenavLinkRouter {\r\n  url: string;\r\n  queryParams?: { [key: string]: any };\r\n}\r\n\r\n@Component({\r\n  selector: 'app-panel-drawer-template',\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    RouterLink,\r\n    RouterLinkActive,\r\n    RouterOutlet,\r\n  ],\r\n  templateUrl: './panel-drawer-template.component.html',\r\n  styleUrl: './panel-drawer-template.component.scss',\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class PanelDrawerTemplateComponent {\r\n  panelSidenavLinkSelected: WritableSignal<PanelSidenavLink | null> = signal(null);\r\n  showChildren: WritableSignal<boolean> = signal(false);\r\n  @Input({required: true}) public configuration!: PanelSidenavConfiguration;\r\n  public selectedLink(link: PanelSidenavLink) {\r\n    this.panelSidenavLinkSelected.set(link);\r\n    this.showChildren.set(true);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Omit<PanelSidenavLink, children>[]",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "routerLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PanelSidenavLinkRouter",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PanelSidenavLinkRouter",
            "id": "interface-PanelSidenavLinkRouter-9e35dbe9df6f784b4f4f1e9d5868de97fb41554da82e8c829ecaa1347a88ba9c7ddf8e95ce22dc4492ac748140276e8a873c49985647880e34b146a9741bc898",
            "file": "src/app/shared/components/panel-drawer-template/panel-drawer-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, ViewEncapsulation, WritableSignal, signal } from '@angular/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\n\r\nexport interface PanelSidenavConfiguration {\r\n  title?: string;\r\n  groups: PanelSidenavGroup[];\r\n}\r\n\r\nexport interface PanelSidenavGroup {\r\n  title?: string;\r\n  icon?: string;\r\n  links: PanelSidenavLink[];\r\n}\r\n\r\nexport interface PanelSidenavLink {\r\n  title: string;\r\n  icon?: string;\r\n  routerLink: PanelSidenavLinkRouter;\r\n  children?: Omit<PanelSidenavLink, 'children'>[];\r\n}\r\n\r\nexport interface PanelSidenavLinkRouter {\r\n  url: string;\r\n  queryParams?: { [key: string]: any };\r\n}\r\n\r\n@Component({\r\n  selector: 'app-panel-drawer-template',\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    RouterLink,\r\n    RouterLinkActive,\r\n    RouterOutlet,\r\n  ],\r\n  templateUrl: './panel-drawer-template.component.html',\r\n  styleUrl: './panel-drawer-template.component.scss',\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class PanelDrawerTemplateComponent {\r\n  panelSidenavLinkSelected: WritableSignal<PanelSidenavLink | null> = signal(null);\r\n  showChildren: WritableSignal<boolean> = signal(false);\r\n  @Input({required: true}) public configuration!: PanelSidenavConfiguration;\r\n  public selectedLink(link: PanelSidenavLink) {\r\n    this.panelSidenavLinkSelected.set(link);\r\n    this.showChildren.set(true);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Plan",
            "id": "interface-Plan-2b869cc8f73c54da9a05cbad753ede9bcab4d1548217ffdeda6fd463d5cc68cae47612c058fff0fcb26fe6813ed6441a44bf392cafafbf53142d819288ddaa92",
            "file": "src/app/shared/interfaces/plan.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel, CoinEnum } from \"./baseModel\";\r\n\r\nexport interface Plan extends BaseModel {\r\n    name: string;\r\n    price: number;\r\n    interval: string | null;\r\n    interval_count: number | null;\r\n    trial_period_days: number | null;\r\n    coin: CoinEnum;\r\n    description: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "coin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CoinEnum",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "interval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "interval_count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "trial_period_days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "RepresentanteLegal",
            "id": "interface-RepresentanteLegal-57e21dc3a4de99cb9583a6a25624df912d51575b4c315d2e77ec559b7cf222ef75519170e88759a1677ebdc844dd563d0426c594f56003948002b584e1adeeb9",
            "file": "src/app/shared/interfaces/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel, DocumentTypeEnum } from \"./baseModel\";\r\n\r\nexport interface User extends BaseModel {\r\n    id: number;\r\n    document_number: string;\r\n    document_type: DocumentTypeEnum;\r\n    name: string;\r\n    email: string;\r\n    role: UserRoleEnum;\r\n    code: string;\r\n    address: string;\r\n    phone: string;\r\n    cellphone: string;\r\n    birth_date: string;\r\n    image?: string\r\n    email_verified_at?: string;\r\n\r\n    level: UserlevelEnum;\r\n\r\n}\r\n\r\nexport interface DataRUC {\r\n    document_type_id: number;\r\n    direccion: string;\r\n    direccion_completa: string;\r\n    ruc: string;\r\n    nombre_o_razon_social: string;\r\n    estado: string;\r\n    condicion: string;\r\n    departamento: string;\r\n    provincia: string;\r\n    distrito: string;\r\n    ubigeo_sunat: string;\r\n    ubigeo: [string, string, string],\r\n    es_agente_de_retencion: 'SI' | 'NO',\r\n    representantes_legales: RepresentanteLegal[]\r\n\r\n}\r\n\r\nexport enum UserRoleEnum {\r\n    PM = 'pm',\r\n    KAM = 'kam',\r\n    MASTER = 'master',\r\n    COMPRAS = 'compras',\r\n    ALMACEN = 'almacén',\r\n    TESORERÍA = 'tesorería',\r\n    CONTABILIDAD = 'contabilidad',\r\n    ADMINISTRACIÓN = 'administración',\r\n    GESTIÓN = 'gestión',\r\n}\r\n\r\nexport enum UserlevelEnum {\r\n    Master = 1,\r\n    Full = 2,\r\n    Standar = 3,\r\n    Basic = 4,\r\n}\r\n\r\nexport interface RepresentanteLegal {\r\n    tipodoc: string;\r\n    numdoc: string;\r\n    nombre: string;\r\n    cargo: string;\r\n    desde: string;\r\n}\r\n\r\n\r\nexport interface DataDNI {\r\n    dni: string;\r\n    nombres: string;\r\n    apellidoPaterno: string;\r\n    apellidoMaterno: string;\r\n    codVerifica: string;\r\n    document_type_id: number;\r\n\r\n}\r\n\r\nexport interface UserToken {\r\n    id: number;\r\n    name: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n    last_used_at: string;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "cargo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "desde",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "numdoc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "tipodoc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RequestInitFetch",
            "id": "interface-RequestInitFetch-300fea7126945213019d290d02e1ab2d32d4666f59f1f436efc72062a50c74b5f27afb5b83f1f596a3e2c0b9196d744d98a2d87fc14f4e95aa654ff50d18b0de",
            "file": "src/app/core/services/fetch.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\r\nimport { FetchErrorResponse, FetchErrorType, HTTP_ERROR_CODES, NAME_TOKEN, RequestInitFetch as RequestInit, defaultMessageDialogCreateItem, defaultMessageDialogDeleteItem, defaultMessageDialogUpdateItem } from 'src/app/shared/interfaces/fetch';\r\nimport { FetchBase } from '@utility/fetchBase';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ToastService } from './toast.service';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from './auth.service';\r\nimport { ToastDataPromise } from '@interface/toast';\r\nimport { MatSnackBarRef } from '@angular/material/snack-bar';\r\nimport { ConfirmDialogData, ConfirmDialogTemplateComponent } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nexport interface ToastForFetch extends Omit<ToastDataPromise, 'promise' | 'success' | 'error'> {\r\n  success: string | ((data: any, snackbarRef: MatSnackBarRef<any>, currentMessage: string) => Promise<string> | string);\r\n  error: string | ((error: any, snackbarRef: MatSnackBarRef<any>, currentMessage: string) => Promise<string> | string);\r\n}\r\n\r\nexport interface RequestInitFetch extends Omit<RequestInit, 'confirmDialog'> {\r\n  confirmDialog?: ConfirmDialogData | false;\r\n  toast?: ToastForFetch | false;\r\n}\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FetchService extends FetchBase {\r\n  private dialog = inject(MatDialog);\r\n  private toastService = inject(ToastService);\r\n  private router = inject(Router);\r\n  private authService = inject(AuthService);\r\n\r\n  private apiUrl: string = environment.API_URL;\r\n\r\n  constructor() {\r\n    super(\r\n      {\r\n        interceptHeadersFn: (request) => this.interceptHeadersFn(request),\r\n        interceptErrorsFn: (error, request) => this.interceptErrorsFn(error, request),\r\n      }\r\n    )\r\n  }\r\n\r\n  /* -------------------------------------------------------------------------------------- */\r\n  /* -----------------------------------    INTERCEPTORS   -------------------------------- */\r\n  /* -------------------------------------------------------------------------------------- */\r\n  private interceptHeadersFn(requestInit: RequestInitFetch): { [Key: string]: string } {\r\n    const headers = requestInit?.headers || {};\r\n    const token = localStorage.getItem(NAME_TOKEN);\r\n    if (token && !requestInit?.ignoreAuthorization) headers['Authorization'] = `Bearer ${token}`;\r\n    return headers;\r\n  }\r\n\r\n  private async interceptErrorsFn(error: FetchErrorResponse, request: RequestInitFetch): Promise<void> {    \r\n    if (request.ignoreInterceptErrors) return; // if ignore intercept errors\r\n\r\n    const errorName = error.name;\r\n\r\n    if (errorName == FetchErrorType.ABORT) return;\r\n\r\n    if (errorName == FetchErrorType.HTTP && error.status == 401 && error.statusText?.includes('Unauthorized')) {\r\n      this.toastService.open('Su sesión ha expirado');\r\n      this.authService.removeToken();\r\n      this.router.navigate(['/login']);\r\n      return;\r\n    }\r\n\r\n    this.toastService.open(this.getNameError(error) ?? 'Error desconocido');\r\n  }\r\n\r\n  private getNameError(error: FetchErrorResponse): string | undefined {\r\n    const errorHttp = HTTP_ERROR_CODES.find((httpError) => httpError.status == error.status);\r\n    return errorHttp?.description;\r\n  }\r\n\r\n  /* -------------------------------------------------------------------------------------- */\r\n  /* ------------------------------------   METHODS    ------------------------------------ */\r\n  /* -------------------------------------------------------------------------------------- */\r\n\r\n  public async get<T>(url: string, requestInit?: RequestInitFetch, baseUrl: string = this.apiUrl): Promise<T> {\r\n    const { toast, confirmDialog, ...request} = { ...requestInit ?? {} };\r\n\r\n    if (confirmDialog) await this.confirmDialog(confirmDialog);\r\n\r\n    if (toast) {\r\n      request.ignoreInterceptErrors = true;\r\n      const promise = this._get(`${baseUrl}/${url}`, request);\r\n      return this.resolveToastPromise<T>(promise, toast);\r\n    }\r\n\r\n    return this._get(`${baseUrl}/${url}`, request);\r\n  }\r\n\r\n  public async post<T>(url: string, body: any, requestInit?: RequestInitFetch, baseUrl: string = this.apiUrl): Promise<T> {\r\n    const { toast, confirmDialog, ...request} = { ...requestInit ?? {} };\r\n\r\n    if (confirmDialog != false) await this.confirmDialog(confirmDialog ?? defaultMessageDialogCreateItem());\r\n\r\n    if (toast != false) {\r\n      request.ignoreInterceptErrors = true;\r\n      const promise = this._post(`${baseUrl}/${url}`, body, request);\r\n      const toastDataPromise = toast ? toast : {\r\n        loading: 'Guardando registro...',\r\n        success: 'Registro guardado',\r\n        error: (error: any) => `Error al guardar registro: ${error.error?.message ?? 'Error desconocido'}`,\r\n      };\r\n      return this.resolveToastPromise<T>(promise, toastDataPromise, requestInit);\r\n    }\r\n\r\n    return this._post(`${baseUrl}/${url}`, body, request);\r\n  }\r\n\r\n  public async put<T>(url: string, body: any, requestInit?: RequestInitFetch, baseUrl: string = this.apiUrl): Promise<T> {\r\n    const { toast, confirmDialog, ...request} = { ...requestInit ?? {} };\r\n\r\n    if (confirmDialog != false) await this.confirmDialog(confirmDialog ?? defaultMessageDialogUpdateItem());\r\n\r\n    if (toast != false) {\r\n      request.ignoreInterceptErrors = true;\r\n      const promise = this._put(`${baseUrl}/${url}`, body, request);\r\n      const toastDataPromise = toast ? toast : {\r\n        loading: 'Actualizando registro...',\r\n        success: 'Registro actualizado',\r\n        error: (error: any) => `Error al actualizar registro: ${error.error?.message ?? 'Error desconocido'}`,\r\n      };\r\n      return this.resolveToastPromise<T>(promise, toastDataPromise, requestInit);\r\n    }\r\n\r\n    return this._put(`${baseUrl}/${url}`, body, request);\r\n  }\r\n\r\n  public async patch<T>(url: string, body: any, requestInit?: RequestInitFetch, baseUrl: string = this.apiUrl): Promise<T> {\r\n    const { toast, confirmDialog, ...request} = { ...requestInit ?? {} };\r\n\r\n    if (confirmDialog != false) await this.confirmDialog(confirmDialog ?? defaultMessageDialogUpdateItem());\r\n    \r\n    if (toast != false) {\r\n      request.ignoreInterceptErrors = true;\r\n      const promise = this._patch(`${baseUrl}/${url}`, body, request);\r\n      const toastDataPromise = toast ? toast : {\r\n        loading: 'Actualizando registro...',\r\n        success: 'Registro actualizado',\r\n        error: 'Error al actualizar registro',\r\n      };\r\n      return this.resolveToastPromise<T>(promise, toastDataPromise, requestInit);\r\n    }\r\n\r\n    return this._patch(`${baseUrl}/${url}`, body, request);\r\n  }\r\n\r\n  public async delete<T>(url: string, requestInit?: RequestInitFetch, baseUrl: string = this.apiUrl): Promise<T> {\r\n    const { toast, confirmDialog, ...request} = { ...requestInit ?? {} };\r\n\r\n    if (confirmDialog != false) await this.confirmDialog(confirmDialog ?? defaultMessageDialogDeleteItem());\r\n\r\n    if (toast != false) {\r\n      request.ignoreInterceptErrors = true;\r\n      const promise = this._delete(`${baseUrl}/${url}`, request);\r\n      const toastDataPromise = toast ? toast : {\r\n        loading: 'Eliminando registro...',\r\n        success: 'Registro eliminado',\r\n        error: 'Error al eliminar registro',\r\n      };\r\n      return this.resolveToastPromise<T>(promise, toastDataPromise, requestInit);\r\n    }\r\n\r\n    return this._delete(`${baseUrl}/${url}`, request);\r\n  }\r\n\r\n  public async blob(url: string, requestInit?: RequestInitFetch, baseUrl: string = this.apiUrl): Promise<Blob> {\r\n    const { toast, confirmDialog, ...request} = { ...requestInit ?? {} };\r\n\r\n    if (confirmDialog) await this.confirmDialog(confirmDialog);\r\n\r\n    if (toast) {\r\n      request.ignoreInterceptErrors = true;\r\n      const promise = this._blob<Blob>(`${baseUrl}/${url}`, request);\r\n      return this.resolveToastPromise<Blob>(promise, toast, requestInit);\r\n    }\r\n\r\n    return this._blob<Blob>(`${baseUrl}/${url}`, request);\r\n  }\r\n\r\n  /* -------------------------------------------------------------------------------------- */\r\n  /* ------------------------------------   ACTIONS   ------------------------------------- */\r\n  /* -------------------------------------------------------------------------------------- */\r\n  private confirmDialog(data: ConfirmDialogData): Promise<boolean> {\r\n    return new Promise((resolve, reject) => {\r\n      this.dialog\r\n        .open(ConfirmDialogTemplateComponent, { data })\r\n        .afterClosed()\r\n        .subscribe((res: boolean) => {\r\n          if (res) resolve(true);\r\n          reject({ name: FetchErrorType.CONFIRMATION_DIALOG, message: 'Abort confirmation dialog' });\r\n        });\r\n    });\r\n  }\r\n\r\n  private resolveToastPromise<T>(promise: Promise<T>, toastDataPromise: ToastForFetch, requestInit?: RequestInitFetch): Promise<T> {\r\n    return new Promise(async (resolve, reject) => {\r\n      this.toastService.promise(promise, {\r\n        loading: toastDataPromise.loading ?? 'Cargando...',\r\n        success: async (data, snackBarRef, currentMessage) => {\r\n          resolve(data);\r\n          return toastDataPromise.success instanceof Function ? await toastDataPromise.success(data, snackBarRef, currentMessage) : toastDataPromise.success;\r\n        },\r\n\r\n        error: (error: FetchErrorResponse, snackBarRef, currentMessage) => {\r\n          if (error.name == FetchErrorType.ABORT) {\r\n            snackBarRef.dismiss();\r\n            reject(error);\r\n            return currentMessage;\r\n          } else if (error.name == FetchErrorType.HTTP && error.status == 401 && error.statusText?.includes('Unauthorized') && !requestInit?.ignoreAuthorization) {\r\n            this.authService.removeToken();\r\n            this.router.navigate(['/login']);\r\n            return 'Su sesión ha expirado, vuelva a iniciar';\r\n          }\r\n          reject(error);\r\n          return toastDataPromise.error instanceof Function ? toastDataPromise.error(error, snackBarRef, currentMessage) : toastDataPromise.error;\r\n        },\r\n      });\r\n    });\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "confirmDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfirmDialogData | ",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "toast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ToastForFetch | ",
                    "optional": true,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "Omit"
            ]
        },
        {
            "name": "RequestInitFetch",
            "id": "interface-RequestInitFetch-c8c31ba306edb43ac5fd50a1ef27d518338efadccedc7def42edd8a4e57a5af3f69f1db37655f0fd8d27715415f1605a61c05f5db61aa4348bb60b43361f65bd-1",
            "file": "src/app/shared/interfaces/fetch.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ConfirmDialogData } from \"@component/confirm-dialog-template/confirm-dialog-template.component\";\r\n\r\nexport const NAME_TOKEN = 'access_token';\r\n\r\nexport enum FetchErrorType {\r\n    HTTP = 'HttpErrorResponse',\r\n    ABORT = 'AbortError',\r\n    FAILED_FETCH = 'FailedFetch',\r\n    UNKNOWN = 'UnknownError',\r\n\r\n    CONFIRMATION_DIALOG = 'ConfirmationDialogAborted',\r\n    TYPE_ERROR = 'TypeError',\r\n}\r\n\r\nexport interface RequestInitFetch extends RequestInit {\r\n    // example: {'Authorization': 'Bearer xyz........'}\r\n    headers?: { [Key: string]: string };\r\n\r\n    // ignore auth token\r\n    ignoreAuthorization?: boolean;\r\n\r\n    // ignore interception errors for actions globally\r\n    ignoreInterceptErrors?: boolean;\r\n\r\n    confirmDialog?: ConfirmDialogData;\r\n\r\n}\r\n\r\nexport interface FetchErrorResponse {\r\n    name?: FetchErrorType;\r\n    message?: string;\r\n    error?: any;\r\n    ok?: boolean;\r\n    status?: number;\r\n    statusText?: string;\r\n    url: string;\r\n    headers?: Headers;\r\n    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\r\n}\r\n\r\nexport const defaultMessageDialogCreateItem = () => ({\r\n    title: '¿Está seguro de guardar el registro?',\r\n    description: 'Asegúrese de haber llenado todos los datos del formulario correctamente',\r\n    icon: 'save',\r\n});\r\n\r\nexport const defaultMessageDialogUpdateItem = () => ({\r\n    title: '¿Está seguro de actualizar el registro?',\r\n    description: 'Asegúrese de haber modificado los datos del formulario correctamente',\r\n    icon: 'autorenew',\r\n});\r\n\r\nexport const defaultMessageDialogDeleteItem = () => ({\r\n    title: '¿Está seguro de eliminar el registro?',\r\n    description: 'El ítem se eliminará por completo, está acción es única y no se puede revertir',\r\n    icon: 'delete_forever',\r\n});\r\n\r\nexport const HTTP_ERROR_CODES = [\r\n    {\r\n        status: 400,\r\n        title: 'Solicitud Incorrecta',\r\n        description: 'La solicitud que el servidor recibió no se puede entender o procesar.',\r\n    },\r\n    {\r\n        status: 401,\r\n        title: 'No Autorizado',\r\n        description: 'El recurso solicitado requiere autenticación y no se ha proporcionado credenciales válidas.',\r\n        icon: 'security',\r\n    },\r\n    {\r\n        status: 403,\r\n        title: 'Prohibido',\r\n        description: 'No tiene permiso para acceder al recurso solicitado.',\r\n        icon: 'security',\r\n    },\r\n    {\r\n        status: 404,\r\n        title: 'No Encontrado',\r\n        description: 'El servidor no puede encontrar el recurso solicitado.',\r\n        icon: 'dangerous',\r\n    },\r\n    {\r\n        status: 405,\r\n        title: 'Método No Permitido',\r\n        description: 'El método utilizado en la solicitud no está permitido para el recurso solicitado.'\r\n    },\r\n    {\r\n        status: 408,\r\n        title: 'Tiempo de Espera Agotado',\r\n        description: 'El servidor ha esperado demasiado tiempo para recibir la solicitud del cliente.',\r\n\r\n    },\r\n    {\r\n        status: 422,\r\n        title: 'Entidad No Procesable',\r\n        description: 'La solicitud fue bien formada, pero no se pudo seguir debido a errores semánticos.'\r\n    },\r\n    {\r\n        status: 500,\r\n        title: 'Error Interno del Servidor',\r\n        description: 'El servidor ha encontrado una situación inesperada que le impide completar la solicitud.'\r\n    },\r\n    {\r\n        status: 501,\r\n        title: 'No Implementado',\r\n        description: 'El servidor no admite la funcionalidad necesaria para completar la solicitud.'\r\n    },\r\n    {\r\n        status: 502,\r\n        title: 'Puerta de Enlace Incorrecta',\r\n        description: 'El servidor de la puerta de enlace ha recibido una respuesta no válida del servidor de origen.'\r\n    },\r\n    {\r\n        status: 503,\r\n        title: 'Servicio No Disponible',\r\n        description: 'El servidor no puede responder a la solicitud en este momento debido a una sobrecarga o mantenimiento.'\r\n    },\r\n];",
            "properties": [
                {
                    "name": "confirmDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfirmDialogData",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "ignoreAuthorization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "ignoreInterceptErrors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "RequestInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "RequestInitFetch-1"
        },
        {
            "name": "ResponseLogin",
            "id": "interface-ResponseLogin-c9531bcc5f751c050f8ce5f9dd5d771efc50dd09e9b2dfb6d4f4cfd976416ccb9b087eccc20a2dcc4af3133533e02eea80bfa0e7bf5cb253fc7e93ad434c5c69",
            "file": "src/app/login/components/login/login.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, WritableSignal, inject, signal } from '@angular/core';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators, ReactiveFormsModule, FormsModule, FormGroup, FormControl } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { RECAPTCHA_LOADER_OPTIONS, RECAPTCHA_SETTINGS, RECAPTCHA_V3_SITE_KEY, ReCaptchaV3Service, RecaptchaFormsModule, RecaptchaModule, RecaptchaSettings, RecaptchaV3Module } from 'ng-recaptcha';\r\nimport { AuthService } from 'src/app/core/services/auth.service';\r\nimport { FetchService } from 'src/app/core/services/fetch.service';\r\nimport { SpinnerDefaultComponent } from '../../../shared/components/spinner-default/spinner-default.component';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { NgClass } from '@angular/common';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\n\r\ninterface ResponseLogin {\r\n  access_token: string;\r\n  token_type: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    SpinnerDefaultComponent,\r\n    RecaptchaModule,\r\n    RecaptchaFormsModule,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: RECAPTCHA_SETTINGS,\r\n      useValue: { siteKey: \"6Ldb0DIpAAAAAEvjUicIYq_Yqoq7u1RmGZGsEcVq\" } as RecaptchaSettings,\r\n    },\r\n  ],\r\n})\r\nexport class LoginComponent {\r\n  private fetch = inject(FetchService);\r\n  private authService = inject(AuthService);\r\n\r\n  public isLogin: boolean = true;\r\n  public formLogin: FormGroup = new FormGroup({\r\n    email: new FormControl('', [Validators.required, Validators.email]),\r\n    password: new FormControl('', [Validators.required]),\r\n    recaptchaToken: new FormControl('', [Validators.required])\r\n  });\r\n  public formResetPassword:FormGroup = new FormGroup({\r\n    email: new FormControl('', [Validators.required, Validators.email])\r\n  });\r\n\r\n  public loading: WritableSignal<boolean> = signal(false);\r\n\r\n  public changeType() {\r\n    this.isLogin = !this.isLogin;\r\n  }\r\n\r\n  public submitFormLogin() {\r\n    if (this.loading()) return;\r\n    this.formLogin.markAllAsTouched();\r\n    if (this.formLogin.valid) { this.login() }\r\n  }\r\n\r\n  private async login() {\r\n    this.loading.set(true);\r\n    try {\r\n      const response = await this.fetch.post<ResponseLogin>('login', this.formLogin.value, { \r\n        ignoreAuthorization: true, \r\n        confirmDialog: false,\r\n        toast: {\r\n          loading: 'Iniciando sesión...',\r\n          success: 'Sesión iniciada correctamente',\r\n          error: (error: FetchErrorResponse) => {\r\n            if(error.status == 401) return 'Credenciales incorrectas';\r\n            return 'Error al iniciar sesión';\r\n          }\r\n        }\r\n      });\r\n      this.reponseLogin(response);\r\n    } catch (error) { }\r\n    this.loading.set(false);\r\n  }\r\n\r\n  private reponseLogin(data: ResponseLogin) {\r\n    const token = data?.access_token;\r\n    if (token) {\r\n      this.authService.setToken(token);\r\n      this.authService.redirectToPrincipalRoute();\r\n    }\r\n  }\r\n\r\n  public submitFormResetPassword() { }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "access_token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "token_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RouterLinkActionButton",
            "id": "interface-RouterLinkActionButton-edc9a2c085d669b062640c6d2a97876fe56bb34f5ae23612a12a67b2af6f44bb5d3316d9f28e50d8c8d522c0e6ce8fc3245f639ec16593bc1c325c3c460a4296",
            "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule, DatePipe, Location, NgOptimizedImage } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, ViewChild, Input, ContentChild, TemplateRef, ElementRef, Renderer2, ViewEncapsulation, signal, WritableSignal, computed, inject, Inject, Optional, InjectionToken, EventEmitter, RendererStyleFlags2 } from '@angular/core';\r\nimport { MatCheckboxChange, MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSort, MatSortModule } from '@angular/material/sort';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from 'src/app/shared/utilities/queryParams';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { IndexListPipe } from '@pipe/index-list.pipe';\r\nimport { SpinnerDefaultComponent } from '@component/spinner-default/spinner-default.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { debounceTime } from 'rxjs';\r\nimport { DiffDatePipe } from '@pipe/diff-date.pipe';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { HiddenOptionButtonRowPipe } from '@pipe/hidden-option-button-row.pipe';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { GetUserByIdPipe } from '@pipe/get-user-by-id.pipe';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ListFormatPipe } from '@pipe/list-format.pipe';\r\nimport { LoadImagePrivateDirective } from '@directive/load-image-private.directive';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MatPseudoCheckboxModule } from '@angular/material/core';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { EventGlobalSearch, NAME_EVENT_GLOBAL_SEARCH } from 'src/app/sidenav/sidenav/sidenav.component';\r\nimport { ExecuteFunctionListPipe } from './execute-function-list.pipe';\r\nimport { FormInput, dateRangeFormInput, switchFormInput } from '@component/item-form-template/item-form-template.component';\r\nimport { RenameTitleColumnListPipe } from './rename-title-column-list.pipe';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DateFnsAdapter } from '@angular/material-date-fns-adapter';\r\nimport { MyDateAdapter } from '@utility/myDateAdapter';\r\nimport { MY_DATE_FORMATS } from '@utility/myDateFormat';\r\n\r\nexport const DATA_TYPE_LIST = new InjectionToken<'array' | 'paginator'>('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST');\r\n\r\nexport interface ItemListConfiguration<T = any> {\r\n  readonly dataType?: 'array' | 'paginator';\r\n  readonly keyGetItemsPaginator?: string;\r\n  readonly keyGetTotalItemsPaginator?: string;\r\n\r\n  readonly disableFiltersInQueryParams?: boolean;\r\n\r\n  title: string | null;\r\n\r\n  parseDataFn?: (data: T[]) => T[] | Promise<T[]>;\r\n  data?: WritableSignal<T[]>;\r\n  updateListEvent?: EventEmitter<void>;\r\n\r\n  defaultOrder?: {\r\n    key: string,\r\n    order: 'ASC' | 'DESC'\r\n  };\r\n\r\n  backButton?: boolean;\r\n\r\n  updateButton?: boolean;\r\n\r\n  server: {\r\n    readonly url: string,\r\n    queryParams?: { [key: string]: any } | string;\r\n  }\r\n\r\n  createButton?: {\r\n    text?: string,\r\n    routerLink: RouterLinkCreateButton\r\n  } | false;\r\n\r\n  filters?: FormInput[] | false;\r\n\r\n  rows?: {\r\n    selectable?: {\r\n      actions: SelectableActionButton<T>[];\r\n    };\r\n    index?: false | ({ title: string });\r\n    cssClass?: string | ((item: T) => string);\r\n    actions?: ActionButton<T>[];\r\n    options?: ActionButton<T>[] | false;\r\n  },\r\n\r\n  columns: WritableSignal<ListColumn<T>[]>;\r\n}\r\n\r\nexport interface RouterLinkCreateButton {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any;\r\n}\r\nexport interface RouterLinkItem<T> {\r\n  url: ((item: T, index: number) => string) | string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: ((item: T, index: number) => (string | { [key: string]: any } | any[] | number | null)) | string | { [key: string]: any } | any[] | number | null;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\ndeclare type ActionButtonActionsType = 'clickEvent' | 'routerLink';\r\ninterface ActionButton<T> {\r\n  type: 'clickEvent' | 'routerLink';\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((item: T, index: number) => boolean);\r\n  disabled?: boolean | ((item: T, index: number) => boolean);\r\n  cssClass?: string | ((item: T, index: number) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((item: T, index: number) => ({ [key: string]: any }));\r\n  fn?: (item: T, index: number, fns: {\r\n    deleteItemFn: (id: number | string) => Promise<void>,\r\n    restoreItemFn: (id: number | string) => Promise<void>,\r\n    updateChangesItemFn: (index: number, item: T) => void,\r\n  }) => void;\r\n  routerLink?: RouterLinkItem<T>;\r\n}\r\ninterface ClickEventActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'fn'>> & ActionButton<T>, 'type' | 'routerLink'> { }\r\nexport const clickEventActionButton = <T = any>(config: ClickEventActionButton<T>): ActionButton<T> => ({ type: 'clickEvent', ...config });\r\ninterface RouterLinkActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'routerLink'>> & ActionButton<T>, 'type' | 'clickEvent'> { }\r\nexport const routerLinkActionButton = <T = any>(config: RouterLinkActionButton<T>): ActionButton<T> => ({ type: 'routerLink', ...config });\r\ninterface SelectableActionButton<T> {\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((selectedItems: T[]) => boolean);\r\n  disabled?: boolean | ((selectedItems: T[]) => boolean);\r\n  cssClass?: string | ((selectedItems: T[]) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((selectedItems: T[]) => ({ [key: string]: any }));\r\n  fn: (selectedItems: T[]) => void;\r\n}\r\nexport const selectableActionButton = <T = any>(config: SelectableActionButton<T>): SelectableActionButton<T> => ({ ...config });\r\n\r\nexport interface ListItemExtended {\r\n  __selected__?: boolean;\r\n  __loading_status__?: boolean;\r\n}\r\n\r\nexport type TypeValueKeyItem = 'text' | 'diff-date' | 'date' | 'number' | 'email' | 'phone' | 'user' | 'uppercase' | 'lowercase' | 'titlecase' | 'first-letter-uppercase' | 'list-format' | 'currency';\r\n\r\nexport interface ListColumn<T> {\r\n  /**\r\n   * @description\r\n   * Agrega clases css al contenedor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   */\r\n  align?: 'left' | 'center' | 'right';\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor adicional de la celda de la columna\r\n   * @example\r\n   * clickEventAdditionalValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventAdditionalValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor de la celda de la columna\r\n   * @example\r\n   * clickEventValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css a la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClass: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClass?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor adicional de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayAdditionalValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo fecha (type: 'date')\r\n   * @example\r\n   * ...\r\n   * dateFormat: 'yyyy-MM-dd'\r\n   * ...\r\n   * dateFormat: 'dd/MM/yyyy' // Por defecto\r\n   * ...\r\n   */\r\n  dateFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor adicional a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.name\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayAdditionalValueFn?: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayValueFn: (item) => item.name\r\n   * ...\r\n   * displayValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * If you want to display a value in the column that is not in the item, you can use this function\r\n   * @example\r\n   * ...\r\n   * gridColumn: '1fr'\r\n   * ...\r\n   * gridColumn: '200px'\r\n   * ...\r\n   * gridColumn: 'max-content'\r\n   * ...\r\n   * gridColumn: 'fit-content(200px)'\r\n   * ...\r\n   */\r\n  gridColumn?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones > Columnas\r\n   * @example\r\n   * ...\r\n   * hidden: true\r\n   * ...\r\n   * hidden: false // Por defecto\r\n   * ...\r\n   */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo número (type: 'number')\r\n   * @example\r\n   * ...\r\n   * numberFormat: '2.2-2'\r\n   * ...\r\n   * numberFormat: '0.2-2' // Por defecto\r\n   * ...\r\n   */\r\n  numberFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor adicional de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkAdditionalValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Sortable column espicif key in object configuration\r\n   * @example\r\n   * sort: { key: 'name' }\r\n   */\r\n  sort?: { key: string };\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display additional value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: { color: 'green' }\r\n   * ...\r\n   * @param item\r\n   * @returns string | number | null | undefined | string[] | number[]\r\n   */\r\n  cssStyleDisplayAdditionalValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayValue: { color: 'green' }\r\n   * ...\r\n   */\r\n  cssStyleDisplayValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Title column\r\n   * @example\r\n   * title: 'Nombre'\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * @description\r\n   * To display a tooltip in the column on hover\r\n   * @example\r\n   * tooltip: 'Ver detalle'\r\n   */\r\n  tooltip?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * For show type value in cell\r\n   * @example\r\n   * ...\r\n   * type: 'number',\r\n   * displayValueFn: (item) => item.price, // output: 2,000.00\r\n   * ...\r\n   * type: 'date',\r\n   * displayValueFn: (item) => item.created_at, // output 12/12/2020\r\n   * ...\r\n   */\r\n  type?: TypeValueKeyItem | 'image' | 'html';\r\n\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface SimpleListColumn<T> extends Omit<ListColumn<T>, 'type' | 'displayAdditionalValueFn' | 'displayValueFn' | 'dateFormat' | 'numberFormat' | 'image'> { }\r\ninterface SimpleListColumn2<T> extends Omit<SimpleListColumn<T>, 'cssStyleDisplayAdditionalValue' | 'routerLinkAdditionalValue' | 'cssClassDisplayAdditionalValue' | 'clickEventAdditionalValue'> { }\r\ninterface ListFormatListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string[];\r\n  displayValueFn: (item: T, index: number) => string[];\r\n}\r\n\r\ninterface NumberListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => number | null | undefined;\r\n  numberFormat?: string;\r\n}\r\n\r\ninterface StringListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => string | number | null | undefined;\r\n}\r\n\r\ninterface DateListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined;\r\n  dateFormat?: string;\r\n}\r\n\r\ninterface ImageListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface HtmlListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n}\r\n\r\nexport const numberColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'number', ...config });\r\n\r\nexport const listFormatColumn = <T = any>(config: ListFormatListColumn<T>): ListColumn<T> => ({ type: 'list-format', ...config });\r\n\r\nexport const dateColumn = <T = any>(config: DateListColumn<T>): ListColumn<T> => ({ type: 'date', ...config });\r\n\r\nexport const diffDateColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'diff-date', ...config });\r\n\r\nexport const htmlColumn = <T = any>(config: HtmlListColumn<T>): ListColumn<T> => ({ type: 'html', ...config });\r\n\r\nexport const textColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'text', ...config });\r\n\r\nexport const uppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'uppercase', ...config });\r\n\r\nexport const lowercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'lowercase', ...config });\r\n\r\nexport const titlecaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'titlecase', ...config });\r\n\r\nexport const firstLetterUppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'first-letter-uppercase', ...config });\r\n\r\nexport const phoneColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'phone', ...config });\r\n\r\nexport const emailColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'email', ...config });\r\n\r\nexport const userColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'user', ...config });\r\n\r\nexport const imageColumn = <T = any>(config: ImageListColumn<T>): ListColumn<T> => ({ type: 'image', ...config });\r\n\r\n\r\nexport const itemNameAndDescriptionColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  title: 'Nombre',\r\n  gridColumn: '1fr',\r\n  sort: { key: 'name' },\r\n  routerLinkValue: { url: (item: any) => `../detail/${item.id}` },\r\n  displayValueFn: (item: any) => item.name,\r\n  displayAdditionalValueFn: (item: any) => item.description,\r\n  ...config,\r\n});\r\nexport const itemStatusColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'cssClassDisplayValue' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'first-letter-uppercase',\r\n  title: 'Estado',\r\n  sort: { key: 'status' },\r\n  align: 'center',\r\n  displayValueFn: (item: any) => item.status,\r\n  cssClassDisplayValue: (item: any) => `status-chip ${item.status}`,\r\n  ...config,\r\n});\r\nexport const itemCreatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Creado',\r\n  sort: { key: 'created_at' },\r\n  displayValueFn: (item: any) => item.created_at,\r\n  ...config,\r\n});\r\nexport const itemUpdatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Actualizado',\r\n  sort: { key: 'updated_at' },\r\n  hidden: true,\r\n  displayValueFn: (item: any) => item.updated_at,\r\n  ...config,\r\n});\r\nexport const simpleListColumns = (): ListColumn<any>[] => ([\r\n  itemNameAndDescriptionColumn(),\r\n  itemUpdatedAtColumn(),\r\n  itemCreatedAtColumn(),\r\n  itemStatusColumn(),\r\n]);\r\n\r\n\r\nexport const defaultListFilterInputs = (): FormInput[] => [\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de creación',\r\n    formControlNameFrom: 'created_at_from',\r\n    formControlNameTo: 'created_at_to',\r\n  }),\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de actualización',\r\n    formControlNameFrom: 'updated_at_from',\r\n    formControlNameTo: 'updated_at_to',\r\n  }),\r\n  switchFormInput({\r\n    textLabel: 'Registros inactivos',\r\n    formControlName: 'inactive',\r\n  }),\r\n];\r\n\r\nexport const deleteItemActionButton = () => clickEventActionButton({\r\n  icon: 'delete',\r\n  text: 'Eliminar',\r\n  fn: async ({ id }, _, { deleteItemFn }) => deleteItemFn(id),\r\n  hidden: (item) => item.deleted_at,\r\n});\r\n\r\nexport const restoreItemActionButton = () => clickEventActionButton({\r\n  icon: 'restore',\r\n  text: 'Restaurar',\r\n  fn: async ({ id }, _, { restoreItemFn }) => restoreItemFn(id),\r\n  hidden: (item) => !item.deleted_at,\r\n})\r\n\r\nexport const viewItemActionButton = () => routerLinkActionButton({\r\n  icon: 'visibility',\r\n  text: 'Ver',\r\n  routerLink: { url: (item) => `../view/${item.id}` },\r\n});\r\n\r\nexport const editItemActionButton = () => routerLinkActionButton({\r\n  icon: 'edit',\r\n  text: 'Editar',\r\n  routerLink: { url: (item) => `../edit/${item.id}` },\r\n})\r\n\r\n@Component({\r\n  selector: 'app-item-list-template',\r\n  standalone: true,\r\n  templateUrl: './item-list-template.component.html',\r\n  styleUrl: './item-list-template.component.css',\r\n  imports: [\r\n    CommonModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatSortModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatTooltipModule,\r\n    MatPseudoCheckboxModule,\r\n    IndexListPipe,\r\n    GetKeyItemPipe,\r\n    RouterLink,\r\n    DiffDatePipe,\r\n    HiddenOptionButtonRowPipe,\r\n    NgOptimizedImage,\r\n    ScrollingModule,\r\n    GetUserByIdPipe,\r\n    PathFilesServerPipe,\r\n    ListFormatPipe,\r\n    LoadImagePrivateDirective,\r\n    FirstLetterUppercasePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n    ExecuteFunctionListPipe,\r\n    RenameTitleColumnListPipe,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    FirstLetterUppercasePipe,\r\n    GetKeyItemPipe,\r\n    RenameTitleColumnListPipe,\r\n    BrowserAnimationsModule,\r\n    DateFnsAdapter,\r\n  ],\r\n})\r\nexport class ItemListTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemListConfiguration;\r\n\r\n  // @ContentChild('headers') headers!: TemplateRef<any>;\r\n  @ContentChild('rowList') rowList!: TemplateRef<any>;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  @ViewChild('divListItems', { static: true }) private divList!: ElementRef;\r\n\r\n  private _dataTypeList: 'array' | 'paginator' = 'array';\r\n  private _keyForGetItems: string;\r\n  private _keyForGetTotalItems: string;\r\n\r\n  private fetch = inject(FetchService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  private renderer = inject(Renderer2);\r\n  private eventsService = inject(EventsService);\r\n  public location = inject(Location);\r\n\r\n  // private datePipe = inject(DatePipe);\r\n  public firstLetterUppercasePipe = inject(FirstLetterUppercasePipe);\r\n  public getKeyItemPipe = inject(GetKeyItemPipe);\r\n  public renameTitleColumnListPipe = inject(RenameTitleColumnListPipe);\r\n\r\n  public lengthData = computed(() => this.data().length)\r\n\r\n  public searchCtrl: FormControl = new FormControl('');\r\n  public formFilters: FormGroup<any> | null = null;\r\n\r\n  public loading = signal(true);\r\n  public font: WritableSignal<'small' | 'medium' | 'large'> = signal('medium');\r\n  public headerListStyle: WritableSignal<'simple' | 'color'> = signal('simple');\r\n\r\n  private abortController = new AbortController();\r\n\r\n  private unsubscribe$: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(DATA_TYPE_LIST) _dataTypeList: 'array' | 'paginator',\r\n    @Optional() @Inject(KEY_GET_ITEMS_PAGINATOR_LIST) _keyForGetItems: string,\r\n    @Optional() @Inject(KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST) _keyForGetTotalItems: string\r\n  ) {\r\n    this._dataTypeList = _dataTypeList ?? 'paginator';\r\n    this._keyForGetItems = _keyForGetItems || 'data';\r\n    this._keyForGetTotalItems = _keyForGetTotalItems || 'total';\r\n  }\r\n\r\n  get data(): WritableSignal<any[]> {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  get defaultOrder(): string {\r\n    return this.configuration.defaultOrder ? `${this.configuration.defaultOrder?.key}|${this.configuration.defaultOrder?.order}` : 'id|DESC';\r\n  }\r\n\r\n  get dataTypeList(): 'array' | 'paginator' {\r\n    return this.configuration.dataType ?? this._dataTypeList;\r\n  }\r\n\r\n  get keyForGetItems(): string {\r\n    return this.configuration.keyGetItemsPaginator ?? this._keyForGetItems;\r\n  }\r\n\r\n  get keyForGetTotalItems(): string {\r\n    return this.configuration.keyGetTotalItemsPaginator ?? this._keyForGetTotalItems;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.configuration.data = signal([]);\r\n    this.configuration.updateListEvent = new EventEmitter();\r\n    if (this.configuration.rows?.options != false && !this.configuration.rows?.options?.length) {\r\n      this.configuration.rows = {\r\n        ...(this.configuration.rows ?? {}),\r\n        options: [\r\n          viewItemActionButton(),\r\n          editItemActionButton(),\r\n          deleteItemActionButton(),\r\n          restoreItemActionButton(),\r\n        ]\r\n      };\r\n    }\r\n    this.generateFormControlsFromFilterInputs();\r\n    this.generateColumnsCss();\r\n\r\n    this.eventsService\r\n      .eventsFiltered<EventGlobalSearch>([NAME_EVENT_GLOBAL_SEARCH])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(({ data }: any) => {\r\n        const type = data.type;\r\n        if (type == 'enter') this.searchCtrl.setValue(data.value);\r\n      })\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.paginator.pageIndex = 0;\r\n    this.paginator.pageSize = 20;\r\n\r\n    this.verifyQueryParams();\r\n\r\n    this.activatedRoute.queryParams.subscribe(() => this.callGetData());\r\n\r\n    this.sort.sortChange.subscribe(({ active, direction }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (this.defaultOrder == `${active}|${direction}` || !active || !direction) queryParams['order'] = null;\r\n      else queryParams['order'] = `${active}|${direction}`;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.searchCtrl.valueChanges.pipe(debounceTime(250)).subscribe((value: string) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (value) queryParams['search'] = value;\r\n      else queryParams['search'] = null;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.paginator.page.subscribe(({ pageIndex, pageSize }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (pageIndex == 0 || (queryParams['page'] ?? null) == pageIndex + 1) queryParams['page'] = null;\r\n      else queryParams['page'] = pageIndex + 1;\r\n      if (pageSize == 20 || (queryParams['per_page'] ?? null) == pageSize) queryParams['per_page'] = null;\r\n      else queryParams['per_page'] = pageSize;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.eventsService\r\n      .eventsFiltered([\r\n        `${this.configuration.server.url}_created`,\r\n        `${this.configuration.server.url}_updated`\r\n      ])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(() => this.callGetData());\r\n\r\n    // this.configuration.updateListEvent!.subscribe(() => this.callGetData({}));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n    if (this.abortController) this.abortController.abort();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private async generateColumnsCss(): Promise<void> {\r\n    const grid_cols: string[] = [];\r\n    const grid_areas: string[] = []\r\n    if (this.configuration.rows?.selectable) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('selected');\r\n    }\r\n    if (this.configuration.rows?.index != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('index');\r\n    }\r\n    for await (const column of this.configuration.columns()) {\r\n      if (!column.hidden) {\r\n        grid_cols.push(column.gridColumn ?? 'auto');\r\n        grid_areas.push(this.renameTitleColumnListPipe.transform(column.title));\r\n      }\r\n    }\r\n    if (this.configuration.rows?.actions) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('actions');\r\n    }\r\n    if (this.configuration.rows?.options != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('options');\r\n    }\r\n    this.renderer.setStyle(this.divList.nativeElement, 'grid-template-columns', grid_cols.join(' '));\r\n    this.renderer.setStyle(this.divList.nativeElement, '--items-list-grid-template-areas', `\"${grid_areas.join(' ')}\"`, RendererStyleFlags2.DashCase);\r\n    grid_areas.forEach((area, index) => this.renderer.setStyle(this.divList.nativeElement, `--items-list-grid-area-${index + 1}`, area, RendererStyleFlags2.DashCase));\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private getQueryParams(): { [key: string]: any } {\r\n    return !this.configuration.disableFiltersInQueryParams ? JSON.parse(JSON.stringify(this.activatedRoute.snapshot.queryParams)) : {\r\n      ...this.formFilters?.value ?? {},\r\n      page: this.paginator.pageIndex + 1,\r\n      per_page: this.paginator.pageSize,\r\n      order: this.sort.active ? `${this.sort.active}|${this.sort.direction}` : null,\r\n      search: this.searchCtrl.value ? this.searchCtrl.value : null,\r\n    }\r\n  }\r\n\r\n  private navigateOrCallGetData(params: any): void {\r\n    if (this.configuration.disableFiltersInQueryParams) this.callGetData(params);\r\n    else this.router.navigate([], { queryParams: params });\r\n  }\r\n\r\n  private verifyQueryParams(): void {\r\n    const queryParams = {} as any;\r\n    const { page, per_page, order, search, ...filters } = queryParams;\r\n    this.paginator.pageIndex = Number(page ?? 1) - 1;\r\n    this.paginator.pageSize = Number(per_page) ?? 20;\r\n    this.sort.active = order?.split('|')[0] ?? '';\r\n    this.sort.direction = order?.split('|')[1] == 'asc' ? 'asc' : 'desc';\r\n    this.sort.sortChange.emit();\r\n    this.searchCtrl.setValue(search ?? null, { emitEvent: false });\r\n  }\r\n\r\n  public callGetData(queryParams: any = {}): void {\r\n    const params = objectToURLSearchParams(queryParams);\r\n    if (!params.has('page')) params.set('page', String(this.paginator.pageIndex + 1));\r\n    if (!params.has('per_page')) params.set('per_page', String(this.paginator.pageSize));\r\n    if (!params.has('order')) params.set('order', this.defaultOrder);\r\n    this.getData(params);\r\n  }\r\n\r\n  private async getData(searchParams: URLSearchParams = new URLSearchParams()): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const serverUrl = this.configuration.server.url;\r\n    let queryParams = this.configuration.server.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const url = `${serverUrl}?${searchParams.toString()}&${queryParams ?? ''}`;\r\n    const config = { signal: this.abortController.signal };\r\n    try {\r\n      let items = [];\r\n      let totalItems = 0;\r\n      if (this.dataTypeList == 'array') {\r\n        items = await this.fetch.get<any[]>(url, config);\r\n        totalItems = items.length;\r\n      } else {\r\n        const paginatorData = await this.fetch.get<PaginatorData<any>>(url, config);\r\n        items = this.getKeyItemPipe.transform(paginatorData, this.keyForGetItems);\r\n        totalItems = this.getKeyItemPipe.transform(paginatorData, this.keyForGetTotalItems);\r\n      }\r\n      const { parseDataFn } = this.configuration;\r\n      const parseData = await parseDataFn?.(items) ?? items;\r\n      this.paginator.length = totalItems;\r\n      this.data.set(parseData);\r\n      this.loading.set(false);\r\n      this.checkSelectedItems();\r\n    } catch (err: any) {\r\n      if (err.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n  }\r\n\r\n  public hiddenToggleColumn($event: MatCheckboxChange, index: number): void {\r\n    this.configuration.columns.update((columns) => {\r\n      columns[index]['hidden'] = !$event.checked\r\n      return columns;\r\n    })\r\n    this.generateColumnsCss();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public navigateCreateView(): void {\r\n    this.router.navigate(['../create'], { relativeTo: this.activatedRoute });\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public allSelectedItems = signal(false);\r\n  public someSelectedItems = signal(false);\r\n  public selectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__));\r\n  public lengthSelectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__).length);\r\n\r\n  public selectedItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.toSpliced(index, 1, { ...data[index], __selected__: status }));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public selectedAllItems(status: boolean): void {\r\n    this.data.update((data) => data.map((e) => ({ ...e, __selected__: status })));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public someSelected(): boolean {\r\n    return this.data().length > 0 && this.data().some((e: ListItemExtended) => e.__selected__) && !this.allSelectedItems();\r\n  }\r\n\r\n  private checkSelectedItems(): void {\r\n    this.allSelectedItems.set(this.data().length > 0 && this.data().every((e: ListItemExtended) => e.__selected__));\r\n    this.someSelectedItems.set(this.someSelected());\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private generateFormControlsFromFilterInputs(): void {\r\n    if (this.configuration.filters == false) return;\r\n    if (!this.configuration.filters?.length) this.configuration.filters = defaultListFilterInputs();\r\n    const formFilters = new FormGroup({});\r\n    this.configuration.filters?.forEach((filter) => {\r\n      if (filter.text) {\r\n        formFilters.setControl(filter.text.formControlName, new FormControl(filter.text.defaultValue));\r\n      } else if (filter.textarea) {\r\n        formFilters.setControl(filter.textarea.formControlName, new FormControl(filter.textarea.defaultValue));\r\n      } else if (filter.select) {\r\n        formFilters.setControl(filter.select.formControlName, new FormControl(filter.select.defaultValue));\r\n      } else if (filter.number) {\r\n        formFilters.setControl(filter.number.formControlName, new FormControl(filter.number.defaultValue));\r\n      } else if (filter.date) {\r\n        formFilters.setControl(filter.date.formControlName, new FormControl(filter.date.defaultValue));\r\n      } else if (filter.dateRange) {\r\n        formFilters.setControl(filter.dateRange.formControlNameFrom, new FormControl(filter.dateRange.defaultValueFrom));\r\n        formFilters.setControl(filter.dateRange.formControlNameTo, new FormControl(filter.dateRange.defaultValueTo));\r\n      } else if (filter.autocompleteLocal) {\r\n        formFilters.setControl(filter.autocompleteLocal.formControlName, new FormControl(filter.autocompleteLocal.defaultValue));\r\n      } else if (filter.autocompleteServer) {\r\n        formFilters.setControl(filter.autocompleteServer.formControlName, new FormControl(filter.autocompleteServer.defaultValue));\r\n      } else if (filter.checkbox) {\r\n        formFilters.setControl(filter.checkbox.formControlName, new FormControl(filter.checkbox.defaultValue));\r\n      } else if (filter.switch) {\r\n        formFilters.setControl(filter.switch.formControlName, new FormControl(filter.switch.defaultValue));\r\n      }\r\n    });\r\n    this.formFilters = formFilters;\r\n  }\r\n\r\n  public getControlFormFilter(name: string): FormControl {\r\n    return this.formFilters!.get(name) as FormControl;\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private updateLoadingStatusItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.map((item: ListItemExtended, i) => {\r\n      if (i == index) item.__loading_status__ = status;\r\n      return item;\r\n    }));\r\n  }\r\n\r\n  public deleteItem = async (id: number | string) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}`;\r\n    try {\r\n      await this.fetch.delete(url);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public restoreItem = async (id: string | number) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}/restore`;\r\n    const config = { afterAlert: { description: 'Restaurando ítem de la lista' } }\r\n    try {\r\n      await this.fetch.put(url, config);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public updateChangesItem = (index: number, item: any) => {\r\n    this.configuration.data!.update(items => items.toSpliced(index, 1, item));\r\n  }\r\n\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "Omit"
            ]
        },
        {
            "name": "RouterLinkCreateButton",
            "id": "interface-RouterLinkCreateButton-edc9a2c085d669b062640c6d2a97876fe56bb34f5ae23612a12a67b2af6f44bb5d3316d9f28e50d8c8d522c0e6ce8fc3245f639ec16593bc1c325c3c460a4296",
            "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule, DatePipe, Location, NgOptimizedImage } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, ViewChild, Input, ContentChild, TemplateRef, ElementRef, Renderer2, ViewEncapsulation, signal, WritableSignal, computed, inject, Inject, Optional, InjectionToken, EventEmitter, RendererStyleFlags2 } from '@angular/core';\r\nimport { MatCheckboxChange, MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSort, MatSortModule } from '@angular/material/sort';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from 'src/app/shared/utilities/queryParams';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { IndexListPipe } from '@pipe/index-list.pipe';\r\nimport { SpinnerDefaultComponent } from '@component/spinner-default/spinner-default.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { debounceTime } from 'rxjs';\r\nimport { DiffDatePipe } from '@pipe/diff-date.pipe';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { HiddenOptionButtonRowPipe } from '@pipe/hidden-option-button-row.pipe';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { GetUserByIdPipe } from '@pipe/get-user-by-id.pipe';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ListFormatPipe } from '@pipe/list-format.pipe';\r\nimport { LoadImagePrivateDirective } from '@directive/load-image-private.directive';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MatPseudoCheckboxModule } from '@angular/material/core';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { EventGlobalSearch, NAME_EVENT_GLOBAL_SEARCH } from 'src/app/sidenav/sidenav/sidenav.component';\r\nimport { ExecuteFunctionListPipe } from './execute-function-list.pipe';\r\nimport { FormInput, dateRangeFormInput, switchFormInput } from '@component/item-form-template/item-form-template.component';\r\nimport { RenameTitleColumnListPipe } from './rename-title-column-list.pipe';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DateFnsAdapter } from '@angular/material-date-fns-adapter';\r\nimport { MyDateAdapter } from '@utility/myDateAdapter';\r\nimport { MY_DATE_FORMATS } from '@utility/myDateFormat';\r\n\r\nexport const DATA_TYPE_LIST = new InjectionToken<'array' | 'paginator'>('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST');\r\n\r\nexport interface ItemListConfiguration<T = any> {\r\n  readonly dataType?: 'array' | 'paginator';\r\n  readonly keyGetItemsPaginator?: string;\r\n  readonly keyGetTotalItemsPaginator?: string;\r\n\r\n  readonly disableFiltersInQueryParams?: boolean;\r\n\r\n  title: string | null;\r\n\r\n  parseDataFn?: (data: T[]) => T[] | Promise<T[]>;\r\n  data?: WritableSignal<T[]>;\r\n  updateListEvent?: EventEmitter<void>;\r\n\r\n  defaultOrder?: {\r\n    key: string,\r\n    order: 'ASC' | 'DESC'\r\n  };\r\n\r\n  backButton?: boolean;\r\n\r\n  updateButton?: boolean;\r\n\r\n  server: {\r\n    readonly url: string,\r\n    queryParams?: { [key: string]: any } | string;\r\n  }\r\n\r\n  createButton?: {\r\n    text?: string,\r\n    routerLink: RouterLinkCreateButton\r\n  } | false;\r\n\r\n  filters?: FormInput[] | false;\r\n\r\n  rows?: {\r\n    selectable?: {\r\n      actions: SelectableActionButton<T>[];\r\n    };\r\n    index?: false | ({ title: string });\r\n    cssClass?: string | ((item: T) => string);\r\n    actions?: ActionButton<T>[];\r\n    options?: ActionButton<T>[] | false;\r\n  },\r\n\r\n  columns: WritableSignal<ListColumn<T>[]>;\r\n}\r\n\r\nexport interface RouterLinkCreateButton {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any;\r\n}\r\nexport interface RouterLinkItem<T> {\r\n  url: ((item: T, index: number) => string) | string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: ((item: T, index: number) => (string | { [key: string]: any } | any[] | number | null)) | string | { [key: string]: any } | any[] | number | null;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\ndeclare type ActionButtonActionsType = 'clickEvent' | 'routerLink';\r\ninterface ActionButton<T> {\r\n  type: 'clickEvent' | 'routerLink';\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((item: T, index: number) => boolean);\r\n  disabled?: boolean | ((item: T, index: number) => boolean);\r\n  cssClass?: string | ((item: T, index: number) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((item: T, index: number) => ({ [key: string]: any }));\r\n  fn?: (item: T, index: number, fns: {\r\n    deleteItemFn: (id: number | string) => Promise<void>,\r\n    restoreItemFn: (id: number | string) => Promise<void>,\r\n    updateChangesItemFn: (index: number, item: T) => void,\r\n  }) => void;\r\n  routerLink?: RouterLinkItem<T>;\r\n}\r\ninterface ClickEventActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'fn'>> & ActionButton<T>, 'type' | 'routerLink'> { }\r\nexport const clickEventActionButton = <T = any>(config: ClickEventActionButton<T>): ActionButton<T> => ({ type: 'clickEvent', ...config });\r\ninterface RouterLinkActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'routerLink'>> & ActionButton<T>, 'type' | 'clickEvent'> { }\r\nexport const routerLinkActionButton = <T = any>(config: RouterLinkActionButton<T>): ActionButton<T> => ({ type: 'routerLink', ...config });\r\ninterface SelectableActionButton<T> {\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((selectedItems: T[]) => boolean);\r\n  disabled?: boolean | ((selectedItems: T[]) => boolean);\r\n  cssClass?: string | ((selectedItems: T[]) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((selectedItems: T[]) => ({ [key: string]: any }));\r\n  fn: (selectedItems: T[]) => void;\r\n}\r\nexport const selectableActionButton = <T = any>(config: SelectableActionButton<T>): SelectableActionButton<T> => ({ ...config });\r\n\r\nexport interface ListItemExtended {\r\n  __selected__?: boolean;\r\n  __loading_status__?: boolean;\r\n}\r\n\r\nexport type TypeValueKeyItem = 'text' | 'diff-date' | 'date' | 'number' | 'email' | 'phone' | 'user' | 'uppercase' | 'lowercase' | 'titlecase' | 'first-letter-uppercase' | 'list-format' | 'currency';\r\n\r\nexport interface ListColumn<T> {\r\n  /**\r\n   * @description\r\n   * Agrega clases css al contenedor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   */\r\n  align?: 'left' | 'center' | 'right';\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor adicional de la celda de la columna\r\n   * @example\r\n   * clickEventAdditionalValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventAdditionalValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor de la celda de la columna\r\n   * @example\r\n   * clickEventValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css a la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClass: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClass?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor adicional de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayAdditionalValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo fecha (type: 'date')\r\n   * @example\r\n   * ...\r\n   * dateFormat: 'yyyy-MM-dd'\r\n   * ...\r\n   * dateFormat: 'dd/MM/yyyy' // Por defecto\r\n   * ...\r\n   */\r\n  dateFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor adicional a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.name\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayAdditionalValueFn?: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayValueFn: (item) => item.name\r\n   * ...\r\n   * displayValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * If you want to display a value in the column that is not in the item, you can use this function\r\n   * @example\r\n   * ...\r\n   * gridColumn: '1fr'\r\n   * ...\r\n   * gridColumn: '200px'\r\n   * ...\r\n   * gridColumn: 'max-content'\r\n   * ...\r\n   * gridColumn: 'fit-content(200px)'\r\n   * ...\r\n   */\r\n  gridColumn?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones > Columnas\r\n   * @example\r\n   * ...\r\n   * hidden: true\r\n   * ...\r\n   * hidden: false // Por defecto\r\n   * ...\r\n   */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo número (type: 'number')\r\n   * @example\r\n   * ...\r\n   * numberFormat: '2.2-2'\r\n   * ...\r\n   * numberFormat: '0.2-2' // Por defecto\r\n   * ...\r\n   */\r\n  numberFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor adicional de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkAdditionalValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Sortable column espicif key in object configuration\r\n   * @example\r\n   * sort: { key: 'name' }\r\n   */\r\n  sort?: { key: string };\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display additional value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: { color: 'green' }\r\n   * ...\r\n   * @param item\r\n   * @returns string | number | null | undefined | string[] | number[]\r\n   */\r\n  cssStyleDisplayAdditionalValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayValue: { color: 'green' }\r\n   * ...\r\n   */\r\n  cssStyleDisplayValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Title column\r\n   * @example\r\n   * title: 'Nombre'\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * @description\r\n   * To display a tooltip in the column on hover\r\n   * @example\r\n   * tooltip: 'Ver detalle'\r\n   */\r\n  tooltip?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * For show type value in cell\r\n   * @example\r\n   * ...\r\n   * type: 'number',\r\n   * displayValueFn: (item) => item.price, // output: 2,000.00\r\n   * ...\r\n   * type: 'date',\r\n   * displayValueFn: (item) => item.created_at, // output 12/12/2020\r\n   * ...\r\n   */\r\n  type?: TypeValueKeyItem | 'image' | 'html';\r\n\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface SimpleListColumn<T> extends Omit<ListColumn<T>, 'type' | 'displayAdditionalValueFn' | 'displayValueFn' | 'dateFormat' | 'numberFormat' | 'image'> { }\r\ninterface SimpleListColumn2<T> extends Omit<SimpleListColumn<T>, 'cssStyleDisplayAdditionalValue' | 'routerLinkAdditionalValue' | 'cssClassDisplayAdditionalValue' | 'clickEventAdditionalValue'> { }\r\ninterface ListFormatListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string[];\r\n  displayValueFn: (item: T, index: number) => string[];\r\n}\r\n\r\ninterface NumberListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => number | null | undefined;\r\n  numberFormat?: string;\r\n}\r\n\r\ninterface StringListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => string | number | null | undefined;\r\n}\r\n\r\ninterface DateListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined;\r\n  dateFormat?: string;\r\n}\r\n\r\ninterface ImageListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface HtmlListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n}\r\n\r\nexport const numberColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'number', ...config });\r\n\r\nexport const listFormatColumn = <T = any>(config: ListFormatListColumn<T>): ListColumn<T> => ({ type: 'list-format', ...config });\r\n\r\nexport const dateColumn = <T = any>(config: DateListColumn<T>): ListColumn<T> => ({ type: 'date', ...config });\r\n\r\nexport const diffDateColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'diff-date', ...config });\r\n\r\nexport const htmlColumn = <T = any>(config: HtmlListColumn<T>): ListColumn<T> => ({ type: 'html', ...config });\r\n\r\nexport const textColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'text', ...config });\r\n\r\nexport const uppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'uppercase', ...config });\r\n\r\nexport const lowercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'lowercase', ...config });\r\n\r\nexport const titlecaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'titlecase', ...config });\r\n\r\nexport const firstLetterUppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'first-letter-uppercase', ...config });\r\n\r\nexport const phoneColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'phone', ...config });\r\n\r\nexport const emailColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'email', ...config });\r\n\r\nexport const userColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'user', ...config });\r\n\r\nexport const imageColumn = <T = any>(config: ImageListColumn<T>): ListColumn<T> => ({ type: 'image', ...config });\r\n\r\n\r\nexport const itemNameAndDescriptionColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  title: 'Nombre',\r\n  gridColumn: '1fr',\r\n  sort: { key: 'name' },\r\n  routerLinkValue: { url: (item: any) => `../detail/${item.id}` },\r\n  displayValueFn: (item: any) => item.name,\r\n  displayAdditionalValueFn: (item: any) => item.description,\r\n  ...config,\r\n});\r\nexport const itemStatusColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'cssClassDisplayValue' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'first-letter-uppercase',\r\n  title: 'Estado',\r\n  sort: { key: 'status' },\r\n  align: 'center',\r\n  displayValueFn: (item: any) => item.status,\r\n  cssClassDisplayValue: (item: any) => `status-chip ${item.status}`,\r\n  ...config,\r\n});\r\nexport const itemCreatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Creado',\r\n  sort: { key: 'created_at' },\r\n  displayValueFn: (item: any) => item.created_at,\r\n  ...config,\r\n});\r\nexport const itemUpdatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Actualizado',\r\n  sort: { key: 'updated_at' },\r\n  hidden: true,\r\n  displayValueFn: (item: any) => item.updated_at,\r\n  ...config,\r\n});\r\nexport const simpleListColumns = (): ListColumn<any>[] => ([\r\n  itemNameAndDescriptionColumn(),\r\n  itemUpdatedAtColumn(),\r\n  itemCreatedAtColumn(),\r\n  itemStatusColumn(),\r\n]);\r\n\r\n\r\nexport const defaultListFilterInputs = (): FormInput[] => [\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de creación',\r\n    formControlNameFrom: 'created_at_from',\r\n    formControlNameTo: 'created_at_to',\r\n  }),\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de actualización',\r\n    formControlNameFrom: 'updated_at_from',\r\n    formControlNameTo: 'updated_at_to',\r\n  }),\r\n  switchFormInput({\r\n    textLabel: 'Registros inactivos',\r\n    formControlName: 'inactive',\r\n  }),\r\n];\r\n\r\nexport const deleteItemActionButton = () => clickEventActionButton({\r\n  icon: 'delete',\r\n  text: 'Eliminar',\r\n  fn: async ({ id }, _, { deleteItemFn }) => deleteItemFn(id),\r\n  hidden: (item) => item.deleted_at,\r\n});\r\n\r\nexport const restoreItemActionButton = () => clickEventActionButton({\r\n  icon: 'restore',\r\n  text: 'Restaurar',\r\n  fn: async ({ id }, _, { restoreItemFn }) => restoreItemFn(id),\r\n  hidden: (item) => !item.deleted_at,\r\n})\r\n\r\nexport const viewItemActionButton = () => routerLinkActionButton({\r\n  icon: 'visibility',\r\n  text: 'Ver',\r\n  routerLink: { url: (item) => `../view/${item.id}` },\r\n});\r\n\r\nexport const editItemActionButton = () => routerLinkActionButton({\r\n  icon: 'edit',\r\n  text: 'Editar',\r\n  routerLink: { url: (item) => `../edit/${item.id}` },\r\n})\r\n\r\n@Component({\r\n  selector: 'app-item-list-template',\r\n  standalone: true,\r\n  templateUrl: './item-list-template.component.html',\r\n  styleUrl: './item-list-template.component.css',\r\n  imports: [\r\n    CommonModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatSortModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatTooltipModule,\r\n    MatPseudoCheckboxModule,\r\n    IndexListPipe,\r\n    GetKeyItemPipe,\r\n    RouterLink,\r\n    DiffDatePipe,\r\n    HiddenOptionButtonRowPipe,\r\n    NgOptimizedImage,\r\n    ScrollingModule,\r\n    GetUserByIdPipe,\r\n    PathFilesServerPipe,\r\n    ListFormatPipe,\r\n    LoadImagePrivateDirective,\r\n    FirstLetterUppercasePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n    ExecuteFunctionListPipe,\r\n    RenameTitleColumnListPipe,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    FirstLetterUppercasePipe,\r\n    GetKeyItemPipe,\r\n    RenameTitleColumnListPipe,\r\n    BrowserAnimationsModule,\r\n    DateFnsAdapter,\r\n  ],\r\n})\r\nexport class ItemListTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemListConfiguration;\r\n\r\n  // @ContentChild('headers') headers!: TemplateRef<any>;\r\n  @ContentChild('rowList') rowList!: TemplateRef<any>;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  @ViewChild('divListItems', { static: true }) private divList!: ElementRef;\r\n\r\n  private _dataTypeList: 'array' | 'paginator' = 'array';\r\n  private _keyForGetItems: string;\r\n  private _keyForGetTotalItems: string;\r\n\r\n  private fetch = inject(FetchService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  private renderer = inject(Renderer2);\r\n  private eventsService = inject(EventsService);\r\n  public location = inject(Location);\r\n\r\n  // private datePipe = inject(DatePipe);\r\n  public firstLetterUppercasePipe = inject(FirstLetterUppercasePipe);\r\n  public getKeyItemPipe = inject(GetKeyItemPipe);\r\n  public renameTitleColumnListPipe = inject(RenameTitleColumnListPipe);\r\n\r\n  public lengthData = computed(() => this.data().length)\r\n\r\n  public searchCtrl: FormControl = new FormControl('');\r\n  public formFilters: FormGroup<any> | null = null;\r\n\r\n  public loading = signal(true);\r\n  public font: WritableSignal<'small' | 'medium' | 'large'> = signal('medium');\r\n  public headerListStyle: WritableSignal<'simple' | 'color'> = signal('simple');\r\n\r\n  private abortController = new AbortController();\r\n\r\n  private unsubscribe$: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(DATA_TYPE_LIST) _dataTypeList: 'array' | 'paginator',\r\n    @Optional() @Inject(KEY_GET_ITEMS_PAGINATOR_LIST) _keyForGetItems: string,\r\n    @Optional() @Inject(KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST) _keyForGetTotalItems: string\r\n  ) {\r\n    this._dataTypeList = _dataTypeList ?? 'paginator';\r\n    this._keyForGetItems = _keyForGetItems || 'data';\r\n    this._keyForGetTotalItems = _keyForGetTotalItems || 'total';\r\n  }\r\n\r\n  get data(): WritableSignal<any[]> {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  get defaultOrder(): string {\r\n    return this.configuration.defaultOrder ? `${this.configuration.defaultOrder?.key}|${this.configuration.defaultOrder?.order}` : 'id|DESC';\r\n  }\r\n\r\n  get dataTypeList(): 'array' | 'paginator' {\r\n    return this.configuration.dataType ?? this._dataTypeList;\r\n  }\r\n\r\n  get keyForGetItems(): string {\r\n    return this.configuration.keyGetItemsPaginator ?? this._keyForGetItems;\r\n  }\r\n\r\n  get keyForGetTotalItems(): string {\r\n    return this.configuration.keyGetTotalItemsPaginator ?? this._keyForGetTotalItems;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.configuration.data = signal([]);\r\n    this.configuration.updateListEvent = new EventEmitter();\r\n    if (this.configuration.rows?.options != false && !this.configuration.rows?.options?.length) {\r\n      this.configuration.rows = {\r\n        ...(this.configuration.rows ?? {}),\r\n        options: [\r\n          viewItemActionButton(),\r\n          editItemActionButton(),\r\n          deleteItemActionButton(),\r\n          restoreItemActionButton(),\r\n        ]\r\n      };\r\n    }\r\n    this.generateFormControlsFromFilterInputs();\r\n    this.generateColumnsCss();\r\n\r\n    this.eventsService\r\n      .eventsFiltered<EventGlobalSearch>([NAME_EVENT_GLOBAL_SEARCH])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(({ data }: any) => {\r\n        const type = data.type;\r\n        if (type == 'enter') this.searchCtrl.setValue(data.value);\r\n      })\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.paginator.pageIndex = 0;\r\n    this.paginator.pageSize = 20;\r\n\r\n    this.verifyQueryParams();\r\n\r\n    this.activatedRoute.queryParams.subscribe(() => this.callGetData());\r\n\r\n    this.sort.sortChange.subscribe(({ active, direction }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (this.defaultOrder == `${active}|${direction}` || !active || !direction) queryParams['order'] = null;\r\n      else queryParams['order'] = `${active}|${direction}`;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.searchCtrl.valueChanges.pipe(debounceTime(250)).subscribe((value: string) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (value) queryParams['search'] = value;\r\n      else queryParams['search'] = null;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.paginator.page.subscribe(({ pageIndex, pageSize }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (pageIndex == 0 || (queryParams['page'] ?? null) == pageIndex + 1) queryParams['page'] = null;\r\n      else queryParams['page'] = pageIndex + 1;\r\n      if (pageSize == 20 || (queryParams['per_page'] ?? null) == pageSize) queryParams['per_page'] = null;\r\n      else queryParams['per_page'] = pageSize;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.eventsService\r\n      .eventsFiltered([\r\n        `${this.configuration.server.url}_created`,\r\n        `${this.configuration.server.url}_updated`\r\n      ])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(() => this.callGetData());\r\n\r\n    // this.configuration.updateListEvent!.subscribe(() => this.callGetData({}));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n    if (this.abortController) this.abortController.abort();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private async generateColumnsCss(): Promise<void> {\r\n    const grid_cols: string[] = [];\r\n    const grid_areas: string[] = []\r\n    if (this.configuration.rows?.selectable) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('selected');\r\n    }\r\n    if (this.configuration.rows?.index != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('index');\r\n    }\r\n    for await (const column of this.configuration.columns()) {\r\n      if (!column.hidden) {\r\n        grid_cols.push(column.gridColumn ?? 'auto');\r\n        grid_areas.push(this.renameTitleColumnListPipe.transform(column.title));\r\n      }\r\n    }\r\n    if (this.configuration.rows?.actions) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('actions');\r\n    }\r\n    if (this.configuration.rows?.options != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('options');\r\n    }\r\n    this.renderer.setStyle(this.divList.nativeElement, 'grid-template-columns', grid_cols.join(' '));\r\n    this.renderer.setStyle(this.divList.nativeElement, '--items-list-grid-template-areas', `\"${grid_areas.join(' ')}\"`, RendererStyleFlags2.DashCase);\r\n    grid_areas.forEach((area, index) => this.renderer.setStyle(this.divList.nativeElement, `--items-list-grid-area-${index + 1}`, area, RendererStyleFlags2.DashCase));\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private getQueryParams(): { [key: string]: any } {\r\n    return !this.configuration.disableFiltersInQueryParams ? JSON.parse(JSON.stringify(this.activatedRoute.snapshot.queryParams)) : {\r\n      ...this.formFilters?.value ?? {},\r\n      page: this.paginator.pageIndex + 1,\r\n      per_page: this.paginator.pageSize,\r\n      order: this.sort.active ? `${this.sort.active}|${this.sort.direction}` : null,\r\n      search: this.searchCtrl.value ? this.searchCtrl.value : null,\r\n    }\r\n  }\r\n\r\n  private navigateOrCallGetData(params: any): void {\r\n    if (this.configuration.disableFiltersInQueryParams) this.callGetData(params);\r\n    else this.router.navigate([], { queryParams: params });\r\n  }\r\n\r\n  private verifyQueryParams(): void {\r\n    const queryParams = {} as any;\r\n    const { page, per_page, order, search, ...filters } = queryParams;\r\n    this.paginator.pageIndex = Number(page ?? 1) - 1;\r\n    this.paginator.pageSize = Number(per_page) ?? 20;\r\n    this.sort.active = order?.split('|')[0] ?? '';\r\n    this.sort.direction = order?.split('|')[1] == 'asc' ? 'asc' : 'desc';\r\n    this.sort.sortChange.emit();\r\n    this.searchCtrl.setValue(search ?? null, { emitEvent: false });\r\n  }\r\n\r\n  public callGetData(queryParams: any = {}): void {\r\n    const params = objectToURLSearchParams(queryParams);\r\n    if (!params.has('page')) params.set('page', String(this.paginator.pageIndex + 1));\r\n    if (!params.has('per_page')) params.set('per_page', String(this.paginator.pageSize));\r\n    if (!params.has('order')) params.set('order', this.defaultOrder);\r\n    this.getData(params);\r\n  }\r\n\r\n  private async getData(searchParams: URLSearchParams = new URLSearchParams()): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const serverUrl = this.configuration.server.url;\r\n    let queryParams = this.configuration.server.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const url = `${serverUrl}?${searchParams.toString()}&${queryParams ?? ''}`;\r\n    const config = { signal: this.abortController.signal };\r\n    try {\r\n      let items = [];\r\n      let totalItems = 0;\r\n      if (this.dataTypeList == 'array') {\r\n        items = await this.fetch.get<any[]>(url, config);\r\n        totalItems = items.length;\r\n      } else {\r\n        const paginatorData = await this.fetch.get<PaginatorData<any>>(url, config);\r\n        items = this.getKeyItemPipe.transform(paginatorData, this.keyForGetItems);\r\n        totalItems = this.getKeyItemPipe.transform(paginatorData, this.keyForGetTotalItems);\r\n      }\r\n      const { parseDataFn } = this.configuration;\r\n      const parseData = await parseDataFn?.(items) ?? items;\r\n      this.paginator.length = totalItems;\r\n      this.data.set(parseData);\r\n      this.loading.set(false);\r\n      this.checkSelectedItems();\r\n    } catch (err: any) {\r\n      if (err.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n  }\r\n\r\n  public hiddenToggleColumn($event: MatCheckboxChange, index: number): void {\r\n    this.configuration.columns.update((columns) => {\r\n      columns[index]['hidden'] = !$event.checked\r\n      return columns;\r\n    })\r\n    this.generateColumnsCss();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public navigateCreateView(): void {\r\n    this.router.navigate(['../create'], { relativeTo: this.activatedRoute });\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public allSelectedItems = signal(false);\r\n  public someSelectedItems = signal(false);\r\n  public selectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__));\r\n  public lengthSelectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__).length);\r\n\r\n  public selectedItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.toSpliced(index, 1, { ...data[index], __selected__: status }));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public selectedAllItems(status: boolean): void {\r\n    this.data.update((data) => data.map((e) => ({ ...e, __selected__: status })));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public someSelected(): boolean {\r\n    return this.data().length > 0 && this.data().some((e: ListItemExtended) => e.__selected__) && !this.allSelectedItems();\r\n  }\r\n\r\n  private checkSelectedItems(): void {\r\n    this.allSelectedItems.set(this.data().length > 0 && this.data().every((e: ListItemExtended) => e.__selected__));\r\n    this.someSelectedItems.set(this.someSelected());\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private generateFormControlsFromFilterInputs(): void {\r\n    if (this.configuration.filters == false) return;\r\n    if (!this.configuration.filters?.length) this.configuration.filters = defaultListFilterInputs();\r\n    const formFilters = new FormGroup({});\r\n    this.configuration.filters?.forEach((filter) => {\r\n      if (filter.text) {\r\n        formFilters.setControl(filter.text.formControlName, new FormControl(filter.text.defaultValue));\r\n      } else if (filter.textarea) {\r\n        formFilters.setControl(filter.textarea.formControlName, new FormControl(filter.textarea.defaultValue));\r\n      } else if (filter.select) {\r\n        formFilters.setControl(filter.select.formControlName, new FormControl(filter.select.defaultValue));\r\n      } else if (filter.number) {\r\n        formFilters.setControl(filter.number.formControlName, new FormControl(filter.number.defaultValue));\r\n      } else if (filter.date) {\r\n        formFilters.setControl(filter.date.formControlName, new FormControl(filter.date.defaultValue));\r\n      } else if (filter.dateRange) {\r\n        formFilters.setControl(filter.dateRange.formControlNameFrom, new FormControl(filter.dateRange.defaultValueFrom));\r\n        formFilters.setControl(filter.dateRange.formControlNameTo, new FormControl(filter.dateRange.defaultValueTo));\r\n      } else if (filter.autocompleteLocal) {\r\n        formFilters.setControl(filter.autocompleteLocal.formControlName, new FormControl(filter.autocompleteLocal.defaultValue));\r\n      } else if (filter.autocompleteServer) {\r\n        formFilters.setControl(filter.autocompleteServer.formControlName, new FormControl(filter.autocompleteServer.defaultValue));\r\n      } else if (filter.checkbox) {\r\n        formFilters.setControl(filter.checkbox.formControlName, new FormControl(filter.checkbox.defaultValue));\r\n      } else if (filter.switch) {\r\n        formFilters.setControl(filter.switch.formControlName, new FormControl(filter.switch.defaultValue));\r\n      }\r\n    });\r\n    this.formFilters = formFilters;\r\n  }\r\n\r\n  public getControlFormFilter(name: string): FormControl {\r\n    return this.formFilters!.get(name) as FormControl;\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private updateLoadingStatusItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.map((item: ListItemExtended, i) => {\r\n      if (i == index) item.__loading_status__ = status;\r\n      return item;\r\n    }));\r\n  }\r\n\r\n  public deleteItem = async (id: number | string) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}`;\r\n    try {\r\n      await this.fetch.delete(url);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public restoreItem = async (id: string | number) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}/restore`;\r\n    const config = { afterAlert: { description: 'Restaurando ítem de la lista' } }\r\n    try {\r\n      await this.fetch.put(url, config);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public updateChangesItem = (index: number, item: any) => {\r\n    this.configuration.data!.update(items => items.toSpliced(index, 1, item));\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "outlet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"route-lateral\" | \"principal\"",
                    "optional": true,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 97
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RouterLinkInputAutocomplete",
            "id": "interface-RouterLinkInputAutocomplete-bd14b6266fa4cf3ac6d1c8ba2983660e710be52a4a04554bf38570c6a3d8a191246f43a725132d4ede61012ec5736f74f6ee8c6537f174970a9ec098ba910dd0",
            "file": "src/app/shared/components/input-autocomplete-template/input-autocomplete-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NgStyle } from '@angular/common';\r\nimport { Component, ElementRef, Input, Renderer2, ViewChild, WritableSignal, inject, signal } from '@angular/core';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { RouterLink } from '@angular/router';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { DatabaseStorageService, NameModuleDatabase } from \"@service/database-storage.service\";\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { debounceTime, tap } from 'rxjs/operators';\r\n\r\nexport interface InputAutocompleteConfiguration<T = any> {\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  cssClassOption?: string | ((item: T) => string);\r\n  cssStyleOption?: ({ [key: string]: any }) | ((item: T) => ({ [key: string]: any }));\r\n  disableOptionFn?: (item: T) => boolean;\r\n  conditionFilterFn?: (item: T, value: string) => boolean;\r\n  displayValueFn?: (item: T) => string | number | { [key: string]: any };\r\n  displayTextFn?: (item: T) => string | number;\r\n  parseDataFn?: (data: T[]) => (T[] | Promise<T[]>);\r\n  data?: T[];\r\n  addButton?: RouterLinkInputAutocomplete;\r\n}\r\n\r\nexport interface InputAutocompleteServerConfiguration<T = any> extends InputAutocompleteConfiguration<T> {\r\n  server: {\r\n    url: string;\r\n    searchKey?: string;\r\n    queryParams?: string | { [key: string]: any };\r\n  }\r\n}\r\n\r\nexport interface InputAutocompleteLocalConfiguration<T = any> extends InputAutocompleteConfiguration<T> {\r\n  local: {\r\n    readonly nameModuleDatabase: NameModuleDatabase;\r\n  }\r\n}\r\n\r\nexport interface ButtonAddInputAutocomplete {\r\n  label?: string;\r\n  routerLink: string;\r\n  function?: () => void;\r\n  outlet: 'route-lateral' | 'principal';\r\n}\r\n\r\ninterface RouterLinkInputAutocomplete {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any\r\n}\r\n@Component({\r\n  selector: 'app-input-autocomplete-template',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    NgStyle,\r\n    MatFormFieldModule,\r\n    MatAutocompleteModule,\r\n    MatInputModule,\r\n    GetMixedValuePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    RouterLink,\r\n  ],\r\n  templateUrl: './input-autocomplete-template.component.html',\r\n  styleUrl: './input-autocomplete-template.component.scss'\r\n})\r\nexport class InputAutocompleteTemplateComponent {\r\n  @Input({ required: true }) configuration!: InputAutocompleteConfiguration | InputAutocompleteLocalConfiguration | InputAutocompleteServerConfiguration;\r\n  @Input({ required: true }) idControl!: FormControl;\r\n  @Input() autocompleteControl: FormControl = new FormControl();\r\n\r\n  @ViewChild('inputHtml', { static: true })\r\n  inputHtml!: ElementRef<HTMLInputElement>;\r\n\r\n  private databaseStorage = inject(DatabaseStorageService);\r\n  private fetch = inject(FetchService);\r\n  private renderer = inject(Renderer2);\r\n\r\n  public filterData: WritableSignal<any[]> = signal([]);\r\n  public loading: WritableSignal<boolean> = signal(false);\r\n  public init: WritableSignal<boolean> = signal(false);\r\n  private abortController = new AbortController();\r\n\r\n  get conditionFilterFn(): (item: any, value: string) => boolean {\r\n    return this.configuration.conditionFilterFn ?? ((item, value) => (item.name ?? '').trim().toLowerCase().includes(value.trim().toLowerCase()));\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if((this.configuration as InputAutocompleteLocalConfiguration).local) {\r\n      if(this.idControl.value) {\r\n        this.findLocalItem(this.idControl.value);\r\n      };\r\n    }\r\n    this.autocompleteControl.valueChanges.pipe(tap(() => this.loading.set(true)), debounceTime(250))\r\n      .subscribe((data: (string | { [key: string]: any })) => {\r\n        this.init.set(true);\r\n        if (data instanceof Object) {\r\n          const value = this.configuration.displayValueFn ? this.configuration.displayValueFn(data) : data['id'];\r\n          this.idControl.setValue(value, { emitEvent: false });\r\n          this.renderer.setAttribute(this.inputHtml.nativeElement, 'readonly', 'readonly');\r\n        } else if (data !== null && data !== undefined) {\r\n          if (this.idControl.value) this.idControl.setValue(null, { emitEvent: false });\r\n          if (this.configuration.data) this.getItemsFromData(data);\r\n          else if ((this.configuration as InputAutocompleteLocalConfiguration).local) this.getItemsLocal(data);\r\n          else if ((this.configuration as InputAutocompleteServerConfiguration).server) this.getItemsServer(data);\r\n        }\r\n      });\r\n  }\r\n\r\n  private async findLocalItem(value: number | string): Promise<void> {\r\n    const data = await this.databaseStorage.getData<any>((this.configuration as InputAutocompleteLocalConfiguration).local!.nameModuleDatabase);\r\n    const item = data.find((item) => {\r\n      const id = this.configuration.displayValueFn ? this.configuration.displayValueFn(data) : item['id']\r\n      return id == value\r\n    });\r\n    this.autocompleteControl.setValue(item);\r\n  }\r\n\r\n  private async getItemsFromData(value: string): Promise<void> {\r\n    let data = this.configuration.data!;\r\n    const { parseDataFn } = this.configuration;\r\n    if (parseDataFn) data = await parseDataFn(data);\r\n    this.filterData.set(data.filter((item) => this.conditionFilterFn(item, value)));\r\n    this.loading.set(false);\r\n  }\r\n\r\n  private async getItemsLocal(value: string): Promise<void> {\r\n    const { nameModuleDatabase } = (this.configuration as InputAutocompleteLocalConfiguration).local!;\r\n    let data = await this.databaseStorage.getData(nameModuleDatabase);\r\n    const { parseDataFn } = this.configuration;\r\n    if (parseDataFn) data = await parseDataFn(data);\r\n    this.filterData.set(data.filter((item) => this.conditionFilterFn(item, value)));\r\n    this.loading.set(false);\r\n  }\r\n\r\n  private async getItemsServer(value: string): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const { url, searchKey } = (this.configuration as InputAutocompleteServerConfiguration).server!;\r\n    let queryParams = (this.configuration as InputAutocompleteServerConfiguration).server!.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    try {\r\n      const endpoint = `${url}?${searchKey ?? 'search'}=${value}&${queryParams ? queryParams : ''}`;\r\n      const response = await this.fetch.get<PaginatorData<any> | any[]>(endpoint, { signal: this.abortController.signal });\r\n      let data = response instanceof Array ? response : response.data;\r\n      const { parseDataFn } = this.configuration;\r\n      if (parseDataFn) data = await parseDataFn(data);\r\n      this.filterData.set(data);\r\n      this.loading.set(false);\r\n    } catch (error: any) {\r\n      if (error.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n    this.loading.set(false);\r\n  }\r\n\r\n  public displayFn = (value: any) => {\r\n    return value instanceof Object ? value.name : ''\r\n  }\r\n\r\n  public clearInput() {\r\n    this.autocompleteControl.setValue(null);\r\n    this.idControl.setValue(null, { emitEvent: false });\r\n    this.renderer.removeAttribute(this.inputHtml.nativeElement, 'readonly');\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "outlet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"route-lateral\" | \"principal\"",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RouterLinkItem",
            "id": "interface-RouterLinkItem-75a719ba2c59e83e75c0e546e67e91ecd288a8eaae523955cca2535e665d2b945fef6327af9bd30cfdda606a531003ff10652cb2b8d6d62e22e9d189f1037fca",
            "file": "src/app/shared/interfaces/itemDetail.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TypeValueKeyItem } from \"@component/item-list-template/item-list-template.component\";\r\nimport { FetchErrorResponse } from \"./fetch\";\r\nimport { EventEmitter, TemplateRef, WritableSignal } from \"@angular/core\";\r\n\r\nexport interface ItemDetailConfiguration<T = any> {\r\n    title: string;\r\n\r\n    subtitle?: ((item: T) => string | number | null | undefined) | false;\r\n\r\n    itemId?: string;\r\n\r\n    server: {\r\n        url: string;\r\n        queryParams?: { [key: string]: any };\r\n    }\r\n\r\n    loading?: boolean;\r\n\r\n    groups: ItemDetailGroup<T>[];\r\n\r\n    dataItem?: WritableSignal<T | null>;\r\n\r\n    parseItemFn?: (item: T) => (T | Promise<T>);\r\n    afterSetItemFn?: (item: T) => void;\r\n    afterDeleteItemFn?: (item: T) => void;\r\n    afterRestoreItemFn?: (item: T) => void;\r\n\r\n    editButton?: {\r\n        text?: string;\r\n        routerLink?: RouterLinkItem<T>\r\n    } | false;\r\n\r\n    deleteButton?: boolean;\r\n    restoreButton?: boolean;\r\n    backButton?: boolean;\r\n\r\n    actionButtons?: ActionButton<T, ActionButtonType>[];\r\n\r\n    ignoreShowError?: boolean;\r\n    interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n    httpError?: FetchErrorResponse;\r\n\r\n    hiddeHeader?: boolean;\r\n\r\n    updateItemEvent?: EventEmitter<boolean>;\r\n}\r\n\r\nexport interface ItemDetailGroup<T> {\r\n    icon?: string,\r\n    title?: string,\r\n    details: ItemDetail<T>[]\r\n    template?: {\r\n        ref: TemplateRef<any>,\r\n        position?: 'before' | 'after',\r\n    },\r\n    actions?: ActionButton<T>[]\r\n}\r\n\r\nexport interface ItemDetail<T> {\r\n    clickEvent?: (item: T) => void;\r\n    cssClass?: ((item: T) => string) | string;\r\n    dateFormat?: string;\r\n    displayValueFn: (item: T) => string | number | null | undefined | string[];\r\n    key?: string;\r\n    title: string;\r\n    numberFormat?: string;\r\n    routerLink?: RouterLinkItem<T>\r\n    tooltip?: ((item: T) => string) | string;\r\n    type?: TypeValueKeyItem | 'image' | 'image-server' | 'private-image-server' | 'html';\r\n}\r\n\r\nexport interface ActionButton<T, Type = 'clickEvent'> {\r\n    id: number | string;\r\n    type?: Type;\r\n    style: StyleButton;\r\n    icon?: string;\r\n    text?: string;\r\n    title?: string;\r\n    clickEvent: (item: T) => void;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\nexport type ActionButtonType = 'clickEvent' | 'update' | 'delete' | 'restore';\r\n\r\nexport interface RouterLinkItem<T> {\r\n    url: ((item: T) => string) | string;\r\n    outlet?: 'route-lateral' | 'principal';\r\n    queryParams?: { [key: string]: any },\r\n    state?: ((item: T) => (string | {[key: string]: any} | any[] | number | null)) | string | {[key: string]: any} | any[] | number | null;\r\n}\r\n",
            "properties": [
                {
                    "name": "outlet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"route-lateral\" | \"principal\"",
                    "optional": true,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | string | literal type | any[] | number | null",
                    "optional": true,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | string",
                    "optional": false,
                    "description": "",
                    "line": 87
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RouterLinkItem",
            "id": "interface-RouterLinkItem-edc9a2c085d669b062640c6d2a97876fe56bb34f5ae23612a12a67b2af6f44bb5d3316d9f28e50d8c8d522c0e6ce8fc3245f639ec16593bc1c325c3c460a4296-1",
            "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule, DatePipe, Location, NgOptimizedImage } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, ViewChild, Input, ContentChild, TemplateRef, ElementRef, Renderer2, ViewEncapsulation, signal, WritableSignal, computed, inject, Inject, Optional, InjectionToken, EventEmitter, RendererStyleFlags2 } from '@angular/core';\r\nimport { MatCheckboxChange, MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSort, MatSortModule } from '@angular/material/sort';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from 'src/app/shared/utilities/queryParams';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { IndexListPipe } from '@pipe/index-list.pipe';\r\nimport { SpinnerDefaultComponent } from '@component/spinner-default/spinner-default.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { debounceTime } from 'rxjs';\r\nimport { DiffDatePipe } from '@pipe/diff-date.pipe';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { HiddenOptionButtonRowPipe } from '@pipe/hidden-option-button-row.pipe';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { GetUserByIdPipe } from '@pipe/get-user-by-id.pipe';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ListFormatPipe } from '@pipe/list-format.pipe';\r\nimport { LoadImagePrivateDirective } from '@directive/load-image-private.directive';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MatPseudoCheckboxModule } from '@angular/material/core';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { EventGlobalSearch, NAME_EVENT_GLOBAL_SEARCH } from 'src/app/sidenav/sidenav/sidenav.component';\r\nimport { ExecuteFunctionListPipe } from './execute-function-list.pipe';\r\nimport { FormInput, dateRangeFormInput, switchFormInput } from '@component/item-form-template/item-form-template.component';\r\nimport { RenameTitleColumnListPipe } from './rename-title-column-list.pipe';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DateFnsAdapter } from '@angular/material-date-fns-adapter';\r\nimport { MyDateAdapter } from '@utility/myDateAdapter';\r\nimport { MY_DATE_FORMATS } from '@utility/myDateFormat';\r\n\r\nexport const DATA_TYPE_LIST = new InjectionToken<'array' | 'paginator'>('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST');\r\n\r\nexport interface ItemListConfiguration<T = any> {\r\n  readonly dataType?: 'array' | 'paginator';\r\n  readonly keyGetItemsPaginator?: string;\r\n  readonly keyGetTotalItemsPaginator?: string;\r\n\r\n  readonly disableFiltersInQueryParams?: boolean;\r\n\r\n  title: string | null;\r\n\r\n  parseDataFn?: (data: T[]) => T[] | Promise<T[]>;\r\n  data?: WritableSignal<T[]>;\r\n  updateListEvent?: EventEmitter<void>;\r\n\r\n  defaultOrder?: {\r\n    key: string,\r\n    order: 'ASC' | 'DESC'\r\n  };\r\n\r\n  backButton?: boolean;\r\n\r\n  updateButton?: boolean;\r\n\r\n  server: {\r\n    readonly url: string,\r\n    queryParams?: { [key: string]: any } | string;\r\n  }\r\n\r\n  createButton?: {\r\n    text?: string,\r\n    routerLink: RouterLinkCreateButton\r\n  } | false;\r\n\r\n  filters?: FormInput[] | false;\r\n\r\n  rows?: {\r\n    selectable?: {\r\n      actions: SelectableActionButton<T>[];\r\n    };\r\n    index?: false | ({ title: string });\r\n    cssClass?: string | ((item: T) => string);\r\n    actions?: ActionButton<T>[];\r\n    options?: ActionButton<T>[] | false;\r\n  },\r\n\r\n  columns: WritableSignal<ListColumn<T>[]>;\r\n}\r\n\r\nexport interface RouterLinkCreateButton {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any;\r\n}\r\nexport interface RouterLinkItem<T> {\r\n  url: ((item: T, index: number) => string) | string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: ((item: T, index: number) => (string | { [key: string]: any } | any[] | number | null)) | string | { [key: string]: any } | any[] | number | null;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\ndeclare type ActionButtonActionsType = 'clickEvent' | 'routerLink';\r\ninterface ActionButton<T> {\r\n  type: 'clickEvent' | 'routerLink';\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((item: T, index: number) => boolean);\r\n  disabled?: boolean | ((item: T, index: number) => boolean);\r\n  cssClass?: string | ((item: T, index: number) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((item: T, index: number) => ({ [key: string]: any }));\r\n  fn?: (item: T, index: number, fns: {\r\n    deleteItemFn: (id: number | string) => Promise<void>,\r\n    restoreItemFn: (id: number | string) => Promise<void>,\r\n    updateChangesItemFn: (index: number, item: T) => void,\r\n  }) => void;\r\n  routerLink?: RouterLinkItem<T>;\r\n}\r\ninterface ClickEventActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'fn'>> & ActionButton<T>, 'type' | 'routerLink'> { }\r\nexport const clickEventActionButton = <T = any>(config: ClickEventActionButton<T>): ActionButton<T> => ({ type: 'clickEvent', ...config });\r\ninterface RouterLinkActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'routerLink'>> & ActionButton<T>, 'type' | 'clickEvent'> { }\r\nexport const routerLinkActionButton = <T = any>(config: RouterLinkActionButton<T>): ActionButton<T> => ({ type: 'routerLink', ...config });\r\ninterface SelectableActionButton<T> {\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((selectedItems: T[]) => boolean);\r\n  disabled?: boolean | ((selectedItems: T[]) => boolean);\r\n  cssClass?: string | ((selectedItems: T[]) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((selectedItems: T[]) => ({ [key: string]: any }));\r\n  fn: (selectedItems: T[]) => void;\r\n}\r\nexport const selectableActionButton = <T = any>(config: SelectableActionButton<T>): SelectableActionButton<T> => ({ ...config });\r\n\r\nexport interface ListItemExtended {\r\n  __selected__?: boolean;\r\n  __loading_status__?: boolean;\r\n}\r\n\r\nexport type TypeValueKeyItem = 'text' | 'diff-date' | 'date' | 'number' | 'email' | 'phone' | 'user' | 'uppercase' | 'lowercase' | 'titlecase' | 'first-letter-uppercase' | 'list-format' | 'currency';\r\n\r\nexport interface ListColumn<T> {\r\n  /**\r\n   * @description\r\n   * Agrega clases css al contenedor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   */\r\n  align?: 'left' | 'center' | 'right';\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor adicional de la celda de la columna\r\n   * @example\r\n   * clickEventAdditionalValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventAdditionalValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor de la celda de la columna\r\n   * @example\r\n   * clickEventValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css a la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClass: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClass?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor adicional de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayAdditionalValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo fecha (type: 'date')\r\n   * @example\r\n   * ...\r\n   * dateFormat: 'yyyy-MM-dd'\r\n   * ...\r\n   * dateFormat: 'dd/MM/yyyy' // Por defecto\r\n   * ...\r\n   */\r\n  dateFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor adicional a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.name\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayAdditionalValueFn?: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayValueFn: (item) => item.name\r\n   * ...\r\n   * displayValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * If you want to display a value in the column that is not in the item, you can use this function\r\n   * @example\r\n   * ...\r\n   * gridColumn: '1fr'\r\n   * ...\r\n   * gridColumn: '200px'\r\n   * ...\r\n   * gridColumn: 'max-content'\r\n   * ...\r\n   * gridColumn: 'fit-content(200px)'\r\n   * ...\r\n   */\r\n  gridColumn?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones > Columnas\r\n   * @example\r\n   * ...\r\n   * hidden: true\r\n   * ...\r\n   * hidden: false // Por defecto\r\n   * ...\r\n   */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo número (type: 'number')\r\n   * @example\r\n   * ...\r\n   * numberFormat: '2.2-2'\r\n   * ...\r\n   * numberFormat: '0.2-2' // Por defecto\r\n   * ...\r\n   */\r\n  numberFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor adicional de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkAdditionalValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Sortable column espicif key in object configuration\r\n   * @example\r\n   * sort: { key: 'name' }\r\n   */\r\n  sort?: { key: string };\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display additional value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: { color: 'green' }\r\n   * ...\r\n   * @param item\r\n   * @returns string | number | null | undefined | string[] | number[]\r\n   */\r\n  cssStyleDisplayAdditionalValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayValue: { color: 'green' }\r\n   * ...\r\n   */\r\n  cssStyleDisplayValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Title column\r\n   * @example\r\n   * title: 'Nombre'\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * @description\r\n   * To display a tooltip in the column on hover\r\n   * @example\r\n   * tooltip: 'Ver detalle'\r\n   */\r\n  tooltip?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * For show type value in cell\r\n   * @example\r\n   * ...\r\n   * type: 'number',\r\n   * displayValueFn: (item) => item.price, // output: 2,000.00\r\n   * ...\r\n   * type: 'date',\r\n   * displayValueFn: (item) => item.created_at, // output 12/12/2020\r\n   * ...\r\n   */\r\n  type?: TypeValueKeyItem | 'image' | 'html';\r\n\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface SimpleListColumn<T> extends Omit<ListColumn<T>, 'type' | 'displayAdditionalValueFn' | 'displayValueFn' | 'dateFormat' | 'numberFormat' | 'image'> { }\r\ninterface SimpleListColumn2<T> extends Omit<SimpleListColumn<T>, 'cssStyleDisplayAdditionalValue' | 'routerLinkAdditionalValue' | 'cssClassDisplayAdditionalValue' | 'clickEventAdditionalValue'> { }\r\ninterface ListFormatListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string[];\r\n  displayValueFn: (item: T, index: number) => string[];\r\n}\r\n\r\ninterface NumberListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => number | null | undefined;\r\n  numberFormat?: string;\r\n}\r\n\r\ninterface StringListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => string | number | null | undefined;\r\n}\r\n\r\ninterface DateListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined;\r\n  dateFormat?: string;\r\n}\r\n\r\ninterface ImageListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface HtmlListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n}\r\n\r\nexport const numberColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'number', ...config });\r\n\r\nexport const listFormatColumn = <T = any>(config: ListFormatListColumn<T>): ListColumn<T> => ({ type: 'list-format', ...config });\r\n\r\nexport const dateColumn = <T = any>(config: DateListColumn<T>): ListColumn<T> => ({ type: 'date', ...config });\r\n\r\nexport const diffDateColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'diff-date', ...config });\r\n\r\nexport const htmlColumn = <T = any>(config: HtmlListColumn<T>): ListColumn<T> => ({ type: 'html', ...config });\r\n\r\nexport const textColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'text', ...config });\r\n\r\nexport const uppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'uppercase', ...config });\r\n\r\nexport const lowercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'lowercase', ...config });\r\n\r\nexport const titlecaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'titlecase', ...config });\r\n\r\nexport const firstLetterUppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'first-letter-uppercase', ...config });\r\n\r\nexport const phoneColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'phone', ...config });\r\n\r\nexport const emailColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'email', ...config });\r\n\r\nexport const userColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'user', ...config });\r\n\r\nexport const imageColumn = <T = any>(config: ImageListColumn<T>): ListColumn<T> => ({ type: 'image', ...config });\r\n\r\n\r\nexport const itemNameAndDescriptionColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  title: 'Nombre',\r\n  gridColumn: '1fr',\r\n  sort: { key: 'name' },\r\n  routerLinkValue: { url: (item: any) => `../detail/${item.id}` },\r\n  displayValueFn: (item: any) => item.name,\r\n  displayAdditionalValueFn: (item: any) => item.description,\r\n  ...config,\r\n});\r\nexport const itemStatusColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'cssClassDisplayValue' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'first-letter-uppercase',\r\n  title: 'Estado',\r\n  sort: { key: 'status' },\r\n  align: 'center',\r\n  displayValueFn: (item: any) => item.status,\r\n  cssClassDisplayValue: (item: any) => `status-chip ${item.status}`,\r\n  ...config,\r\n});\r\nexport const itemCreatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Creado',\r\n  sort: { key: 'created_at' },\r\n  displayValueFn: (item: any) => item.created_at,\r\n  ...config,\r\n});\r\nexport const itemUpdatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Actualizado',\r\n  sort: { key: 'updated_at' },\r\n  hidden: true,\r\n  displayValueFn: (item: any) => item.updated_at,\r\n  ...config,\r\n});\r\nexport const simpleListColumns = (): ListColumn<any>[] => ([\r\n  itemNameAndDescriptionColumn(),\r\n  itemUpdatedAtColumn(),\r\n  itemCreatedAtColumn(),\r\n  itemStatusColumn(),\r\n]);\r\n\r\n\r\nexport const defaultListFilterInputs = (): FormInput[] => [\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de creación',\r\n    formControlNameFrom: 'created_at_from',\r\n    formControlNameTo: 'created_at_to',\r\n  }),\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de actualización',\r\n    formControlNameFrom: 'updated_at_from',\r\n    formControlNameTo: 'updated_at_to',\r\n  }),\r\n  switchFormInput({\r\n    textLabel: 'Registros inactivos',\r\n    formControlName: 'inactive',\r\n  }),\r\n];\r\n\r\nexport const deleteItemActionButton = () => clickEventActionButton({\r\n  icon: 'delete',\r\n  text: 'Eliminar',\r\n  fn: async ({ id }, _, { deleteItemFn }) => deleteItemFn(id),\r\n  hidden: (item) => item.deleted_at,\r\n});\r\n\r\nexport const restoreItemActionButton = () => clickEventActionButton({\r\n  icon: 'restore',\r\n  text: 'Restaurar',\r\n  fn: async ({ id }, _, { restoreItemFn }) => restoreItemFn(id),\r\n  hidden: (item) => !item.deleted_at,\r\n})\r\n\r\nexport const viewItemActionButton = () => routerLinkActionButton({\r\n  icon: 'visibility',\r\n  text: 'Ver',\r\n  routerLink: { url: (item) => `../view/${item.id}` },\r\n});\r\n\r\nexport const editItemActionButton = () => routerLinkActionButton({\r\n  icon: 'edit',\r\n  text: 'Editar',\r\n  routerLink: { url: (item) => `../edit/${item.id}` },\r\n})\r\n\r\n@Component({\r\n  selector: 'app-item-list-template',\r\n  standalone: true,\r\n  templateUrl: './item-list-template.component.html',\r\n  styleUrl: './item-list-template.component.css',\r\n  imports: [\r\n    CommonModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatSortModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatTooltipModule,\r\n    MatPseudoCheckboxModule,\r\n    IndexListPipe,\r\n    GetKeyItemPipe,\r\n    RouterLink,\r\n    DiffDatePipe,\r\n    HiddenOptionButtonRowPipe,\r\n    NgOptimizedImage,\r\n    ScrollingModule,\r\n    GetUserByIdPipe,\r\n    PathFilesServerPipe,\r\n    ListFormatPipe,\r\n    LoadImagePrivateDirective,\r\n    FirstLetterUppercasePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n    ExecuteFunctionListPipe,\r\n    RenameTitleColumnListPipe,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    FirstLetterUppercasePipe,\r\n    GetKeyItemPipe,\r\n    RenameTitleColumnListPipe,\r\n    BrowserAnimationsModule,\r\n    DateFnsAdapter,\r\n  ],\r\n})\r\nexport class ItemListTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemListConfiguration;\r\n\r\n  // @ContentChild('headers') headers!: TemplateRef<any>;\r\n  @ContentChild('rowList') rowList!: TemplateRef<any>;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  @ViewChild('divListItems', { static: true }) private divList!: ElementRef;\r\n\r\n  private _dataTypeList: 'array' | 'paginator' = 'array';\r\n  private _keyForGetItems: string;\r\n  private _keyForGetTotalItems: string;\r\n\r\n  private fetch = inject(FetchService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  private renderer = inject(Renderer2);\r\n  private eventsService = inject(EventsService);\r\n  public location = inject(Location);\r\n\r\n  // private datePipe = inject(DatePipe);\r\n  public firstLetterUppercasePipe = inject(FirstLetterUppercasePipe);\r\n  public getKeyItemPipe = inject(GetKeyItemPipe);\r\n  public renameTitleColumnListPipe = inject(RenameTitleColumnListPipe);\r\n\r\n  public lengthData = computed(() => this.data().length)\r\n\r\n  public searchCtrl: FormControl = new FormControl('');\r\n  public formFilters: FormGroup<any> | null = null;\r\n\r\n  public loading = signal(true);\r\n  public font: WritableSignal<'small' | 'medium' | 'large'> = signal('medium');\r\n  public headerListStyle: WritableSignal<'simple' | 'color'> = signal('simple');\r\n\r\n  private abortController = new AbortController();\r\n\r\n  private unsubscribe$: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(DATA_TYPE_LIST) _dataTypeList: 'array' | 'paginator',\r\n    @Optional() @Inject(KEY_GET_ITEMS_PAGINATOR_LIST) _keyForGetItems: string,\r\n    @Optional() @Inject(KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST) _keyForGetTotalItems: string\r\n  ) {\r\n    this._dataTypeList = _dataTypeList ?? 'paginator';\r\n    this._keyForGetItems = _keyForGetItems || 'data';\r\n    this._keyForGetTotalItems = _keyForGetTotalItems || 'total';\r\n  }\r\n\r\n  get data(): WritableSignal<any[]> {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  get defaultOrder(): string {\r\n    return this.configuration.defaultOrder ? `${this.configuration.defaultOrder?.key}|${this.configuration.defaultOrder?.order}` : 'id|DESC';\r\n  }\r\n\r\n  get dataTypeList(): 'array' | 'paginator' {\r\n    return this.configuration.dataType ?? this._dataTypeList;\r\n  }\r\n\r\n  get keyForGetItems(): string {\r\n    return this.configuration.keyGetItemsPaginator ?? this._keyForGetItems;\r\n  }\r\n\r\n  get keyForGetTotalItems(): string {\r\n    return this.configuration.keyGetTotalItemsPaginator ?? this._keyForGetTotalItems;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.configuration.data = signal([]);\r\n    this.configuration.updateListEvent = new EventEmitter();\r\n    if (this.configuration.rows?.options != false && !this.configuration.rows?.options?.length) {\r\n      this.configuration.rows = {\r\n        ...(this.configuration.rows ?? {}),\r\n        options: [\r\n          viewItemActionButton(),\r\n          editItemActionButton(),\r\n          deleteItemActionButton(),\r\n          restoreItemActionButton(),\r\n        ]\r\n      };\r\n    }\r\n    this.generateFormControlsFromFilterInputs();\r\n    this.generateColumnsCss();\r\n\r\n    this.eventsService\r\n      .eventsFiltered<EventGlobalSearch>([NAME_EVENT_GLOBAL_SEARCH])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(({ data }: any) => {\r\n        const type = data.type;\r\n        if (type == 'enter') this.searchCtrl.setValue(data.value);\r\n      })\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.paginator.pageIndex = 0;\r\n    this.paginator.pageSize = 20;\r\n\r\n    this.verifyQueryParams();\r\n\r\n    this.activatedRoute.queryParams.subscribe(() => this.callGetData());\r\n\r\n    this.sort.sortChange.subscribe(({ active, direction }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (this.defaultOrder == `${active}|${direction}` || !active || !direction) queryParams['order'] = null;\r\n      else queryParams['order'] = `${active}|${direction}`;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.searchCtrl.valueChanges.pipe(debounceTime(250)).subscribe((value: string) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (value) queryParams['search'] = value;\r\n      else queryParams['search'] = null;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.paginator.page.subscribe(({ pageIndex, pageSize }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (pageIndex == 0 || (queryParams['page'] ?? null) == pageIndex + 1) queryParams['page'] = null;\r\n      else queryParams['page'] = pageIndex + 1;\r\n      if (pageSize == 20 || (queryParams['per_page'] ?? null) == pageSize) queryParams['per_page'] = null;\r\n      else queryParams['per_page'] = pageSize;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.eventsService\r\n      .eventsFiltered([\r\n        `${this.configuration.server.url}_created`,\r\n        `${this.configuration.server.url}_updated`\r\n      ])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(() => this.callGetData());\r\n\r\n    // this.configuration.updateListEvent!.subscribe(() => this.callGetData({}));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n    if (this.abortController) this.abortController.abort();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private async generateColumnsCss(): Promise<void> {\r\n    const grid_cols: string[] = [];\r\n    const grid_areas: string[] = []\r\n    if (this.configuration.rows?.selectable) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('selected');\r\n    }\r\n    if (this.configuration.rows?.index != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('index');\r\n    }\r\n    for await (const column of this.configuration.columns()) {\r\n      if (!column.hidden) {\r\n        grid_cols.push(column.gridColumn ?? 'auto');\r\n        grid_areas.push(this.renameTitleColumnListPipe.transform(column.title));\r\n      }\r\n    }\r\n    if (this.configuration.rows?.actions) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('actions');\r\n    }\r\n    if (this.configuration.rows?.options != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('options');\r\n    }\r\n    this.renderer.setStyle(this.divList.nativeElement, 'grid-template-columns', grid_cols.join(' '));\r\n    this.renderer.setStyle(this.divList.nativeElement, '--items-list-grid-template-areas', `\"${grid_areas.join(' ')}\"`, RendererStyleFlags2.DashCase);\r\n    grid_areas.forEach((area, index) => this.renderer.setStyle(this.divList.nativeElement, `--items-list-grid-area-${index + 1}`, area, RendererStyleFlags2.DashCase));\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private getQueryParams(): { [key: string]: any } {\r\n    return !this.configuration.disableFiltersInQueryParams ? JSON.parse(JSON.stringify(this.activatedRoute.snapshot.queryParams)) : {\r\n      ...this.formFilters?.value ?? {},\r\n      page: this.paginator.pageIndex + 1,\r\n      per_page: this.paginator.pageSize,\r\n      order: this.sort.active ? `${this.sort.active}|${this.sort.direction}` : null,\r\n      search: this.searchCtrl.value ? this.searchCtrl.value : null,\r\n    }\r\n  }\r\n\r\n  private navigateOrCallGetData(params: any): void {\r\n    if (this.configuration.disableFiltersInQueryParams) this.callGetData(params);\r\n    else this.router.navigate([], { queryParams: params });\r\n  }\r\n\r\n  private verifyQueryParams(): void {\r\n    const queryParams = {} as any;\r\n    const { page, per_page, order, search, ...filters } = queryParams;\r\n    this.paginator.pageIndex = Number(page ?? 1) - 1;\r\n    this.paginator.pageSize = Number(per_page) ?? 20;\r\n    this.sort.active = order?.split('|')[0] ?? '';\r\n    this.sort.direction = order?.split('|')[1] == 'asc' ? 'asc' : 'desc';\r\n    this.sort.sortChange.emit();\r\n    this.searchCtrl.setValue(search ?? null, { emitEvent: false });\r\n  }\r\n\r\n  public callGetData(queryParams: any = {}): void {\r\n    const params = objectToURLSearchParams(queryParams);\r\n    if (!params.has('page')) params.set('page', String(this.paginator.pageIndex + 1));\r\n    if (!params.has('per_page')) params.set('per_page', String(this.paginator.pageSize));\r\n    if (!params.has('order')) params.set('order', this.defaultOrder);\r\n    this.getData(params);\r\n  }\r\n\r\n  private async getData(searchParams: URLSearchParams = new URLSearchParams()): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const serverUrl = this.configuration.server.url;\r\n    let queryParams = this.configuration.server.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const url = `${serverUrl}?${searchParams.toString()}&${queryParams ?? ''}`;\r\n    const config = { signal: this.abortController.signal };\r\n    try {\r\n      let items = [];\r\n      let totalItems = 0;\r\n      if (this.dataTypeList == 'array') {\r\n        items = await this.fetch.get<any[]>(url, config);\r\n        totalItems = items.length;\r\n      } else {\r\n        const paginatorData = await this.fetch.get<PaginatorData<any>>(url, config);\r\n        items = this.getKeyItemPipe.transform(paginatorData, this.keyForGetItems);\r\n        totalItems = this.getKeyItemPipe.transform(paginatorData, this.keyForGetTotalItems);\r\n      }\r\n      const { parseDataFn } = this.configuration;\r\n      const parseData = await parseDataFn?.(items) ?? items;\r\n      this.paginator.length = totalItems;\r\n      this.data.set(parseData);\r\n      this.loading.set(false);\r\n      this.checkSelectedItems();\r\n    } catch (err: any) {\r\n      if (err.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n  }\r\n\r\n  public hiddenToggleColumn($event: MatCheckboxChange, index: number): void {\r\n    this.configuration.columns.update((columns) => {\r\n      columns[index]['hidden'] = !$event.checked\r\n      return columns;\r\n    })\r\n    this.generateColumnsCss();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public navigateCreateView(): void {\r\n    this.router.navigate(['../create'], { relativeTo: this.activatedRoute });\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public allSelectedItems = signal(false);\r\n  public someSelectedItems = signal(false);\r\n  public selectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__));\r\n  public lengthSelectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__).length);\r\n\r\n  public selectedItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.toSpliced(index, 1, { ...data[index], __selected__: status }));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public selectedAllItems(status: boolean): void {\r\n    this.data.update((data) => data.map((e) => ({ ...e, __selected__: status })));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public someSelected(): boolean {\r\n    return this.data().length > 0 && this.data().some((e: ListItemExtended) => e.__selected__) && !this.allSelectedItems();\r\n  }\r\n\r\n  private checkSelectedItems(): void {\r\n    this.allSelectedItems.set(this.data().length > 0 && this.data().every((e: ListItemExtended) => e.__selected__));\r\n    this.someSelectedItems.set(this.someSelected());\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private generateFormControlsFromFilterInputs(): void {\r\n    if (this.configuration.filters == false) return;\r\n    if (!this.configuration.filters?.length) this.configuration.filters = defaultListFilterInputs();\r\n    const formFilters = new FormGroup({});\r\n    this.configuration.filters?.forEach((filter) => {\r\n      if (filter.text) {\r\n        formFilters.setControl(filter.text.formControlName, new FormControl(filter.text.defaultValue));\r\n      } else if (filter.textarea) {\r\n        formFilters.setControl(filter.textarea.formControlName, new FormControl(filter.textarea.defaultValue));\r\n      } else if (filter.select) {\r\n        formFilters.setControl(filter.select.formControlName, new FormControl(filter.select.defaultValue));\r\n      } else if (filter.number) {\r\n        formFilters.setControl(filter.number.formControlName, new FormControl(filter.number.defaultValue));\r\n      } else if (filter.date) {\r\n        formFilters.setControl(filter.date.formControlName, new FormControl(filter.date.defaultValue));\r\n      } else if (filter.dateRange) {\r\n        formFilters.setControl(filter.dateRange.formControlNameFrom, new FormControl(filter.dateRange.defaultValueFrom));\r\n        formFilters.setControl(filter.dateRange.formControlNameTo, new FormControl(filter.dateRange.defaultValueTo));\r\n      } else if (filter.autocompleteLocal) {\r\n        formFilters.setControl(filter.autocompleteLocal.formControlName, new FormControl(filter.autocompleteLocal.defaultValue));\r\n      } else if (filter.autocompleteServer) {\r\n        formFilters.setControl(filter.autocompleteServer.formControlName, new FormControl(filter.autocompleteServer.defaultValue));\r\n      } else if (filter.checkbox) {\r\n        formFilters.setControl(filter.checkbox.formControlName, new FormControl(filter.checkbox.defaultValue));\r\n      } else if (filter.switch) {\r\n        formFilters.setControl(filter.switch.formControlName, new FormControl(filter.switch.defaultValue));\r\n      }\r\n    });\r\n    this.formFilters = formFilters;\r\n  }\r\n\r\n  public getControlFormFilter(name: string): FormControl {\r\n    return this.formFilters!.get(name) as FormControl;\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private updateLoadingStatusItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.map((item: ListItemExtended, i) => {\r\n      if (i == index) item.__loading_status__ = status;\r\n      return item;\r\n    }));\r\n  }\r\n\r\n  public deleteItem = async (id: number | string) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}`;\r\n    try {\r\n      await this.fetch.delete(url);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public restoreItem = async (id: string | number) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}/restore`;\r\n    const config = { afterAlert: { description: 'Restaurando ítem de la lista' } }\r\n    try {\r\n      await this.fetch.put(url, config);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public updateChangesItem = (index: number, item: any) => {\r\n    this.configuration.data!.update(items => items.toSpliced(index, 1, item));\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "outlet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"route-lateral\" | \"principal\"",
                    "optional": true,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 105
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | string | literal type | any[] | number | null",
                    "optional": true,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | string",
                    "optional": false,
                    "description": "",
                    "line": 103
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "RouterLinkItem-1"
        },
        {
            "name": "SelectableActionButton",
            "id": "interface-SelectableActionButton-edc9a2c085d669b062640c6d2a97876fe56bb34f5ae23612a12a67b2af6f44bb5d3316d9f28e50d8c8d522c0e6ce8fc3245f639ec16593bc1c325c3c460a4296",
            "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule, DatePipe, Location, NgOptimizedImage } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, ViewChild, Input, ContentChild, TemplateRef, ElementRef, Renderer2, ViewEncapsulation, signal, WritableSignal, computed, inject, Inject, Optional, InjectionToken, EventEmitter, RendererStyleFlags2 } from '@angular/core';\r\nimport { MatCheckboxChange, MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSort, MatSortModule } from '@angular/material/sort';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from 'src/app/shared/utilities/queryParams';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { IndexListPipe } from '@pipe/index-list.pipe';\r\nimport { SpinnerDefaultComponent } from '@component/spinner-default/spinner-default.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { debounceTime } from 'rxjs';\r\nimport { DiffDatePipe } from '@pipe/diff-date.pipe';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { HiddenOptionButtonRowPipe } from '@pipe/hidden-option-button-row.pipe';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { GetUserByIdPipe } from '@pipe/get-user-by-id.pipe';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ListFormatPipe } from '@pipe/list-format.pipe';\r\nimport { LoadImagePrivateDirective } from '@directive/load-image-private.directive';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MatPseudoCheckboxModule } from '@angular/material/core';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { EventGlobalSearch, NAME_EVENT_GLOBAL_SEARCH } from 'src/app/sidenav/sidenav/sidenav.component';\r\nimport { ExecuteFunctionListPipe } from './execute-function-list.pipe';\r\nimport { FormInput, dateRangeFormInput, switchFormInput } from '@component/item-form-template/item-form-template.component';\r\nimport { RenameTitleColumnListPipe } from './rename-title-column-list.pipe';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DateFnsAdapter } from '@angular/material-date-fns-adapter';\r\nimport { MyDateAdapter } from '@utility/myDateAdapter';\r\nimport { MY_DATE_FORMATS } from '@utility/myDateFormat';\r\n\r\nexport const DATA_TYPE_LIST = new InjectionToken<'array' | 'paginator'>('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST');\r\n\r\nexport interface ItemListConfiguration<T = any> {\r\n  readonly dataType?: 'array' | 'paginator';\r\n  readonly keyGetItemsPaginator?: string;\r\n  readonly keyGetTotalItemsPaginator?: string;\r\n\r\n  readonly disableFiltersInQueryParams?: boolean;\r\n\r\n  title: string | null;\r\n\r\n  parseDataFn?: (data: T[]) => T[] | Promise<T[]>;\r\n  data?: WritableSignal<T[]>;\r\n  updateListEvent?: EventEmitter<void>;\r\n\r\n  defaultOrder?: {\r\n    key: string,\r\n    order: 'ASC' | 'DESC'\r\n  };\r\n\r\n  backButton?: boolean;\r\n\r\n  updateButton?: boolean;\r\n\r\n  server: {\r\n    readonly url: string,\r\n    queryParams?: { [key: string]: any } | string;\r\n  }\r\n\r\n  createButton?: {\r\n    text?: string,\r\n    routerLink: RouterLinkCreateButton\r\n  } | false;\r\n\r\n  filters?: FormInput[] | false;\r\n\r\n  rows?: {\r\n    selectable?: {\r\n      actions: SelectableActionButton<T>[];\r\n    };\r\n    index?: false | ({ title: string });\r\n    cssClass?: string | ((item: T) => string);\r\n    actions?: ActionButton<T>[];\r\n    options?: ActionButton<T>[] | false;\r\n  },\r\n\r\n  columns: WritableSignal<ListColumn<T>[]>;\r\n}\r\n\r\nexport interface RouterLinkCreateButton {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any;\r\n}\r\nexport interface RouterLinkItem<T> {\r\n  url: ((item: T, index: number) => string) | string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: ((item: T, index: number) => (string | { [key: string]: any } | any[] | number | null)) | string | { [key: string]: any } | any[] | number | null;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\ndeclare type ActionButtonActionsType = 'clickEvent' | 'routerLink';\r\ninterface ActionButton<T> {\r\n  type: 'clickEvent' | 'routerLink';\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((item: T, index: number) => boolean);\r\n  disabled?: boolean | ((item: T, index: number) => boolean);\r\n  cssClass?: string | ((item: T, index: number) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((item: T, index: number) => ({ [key: string]: any }));\r\n  fn?: (item: T, index: number, fns: {\r\n    deleteItemFn: (id: number | string) => Promise<void>,\r\n    restoreItemFn: (id: number | string) => Promise<void>,\r\n    updateChangesItemFn: (index: number, item: T) => void,\r\n  }) => void;\r\n  routerLink?: RouterLinkItem<T>;\r\n}\r\ninterface ClickEventActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'fn'>> & ActionButton<T>, 'type' | 'routerLink'> { }\r\nexport const clickEventActionButton = <T = any>(config: ClickEventActionButton<T>): ActionButton<T> => ({ type: 'clickEvent', ...config });\r\ninterface RouterLinkActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'routerLink'>> & ActionButton<T>, 'type' | 'clickEvent'> { }\r\nexport const routerLinkActionButton = <T = any>(config: RouterLinkActionButton<T>): ActionButton<T> => ({ type: 'routerLink', ...config });\r\ninterface SelectableActionButton<T> {\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((selectedItems: T[]) => boolean);\r\n  disabled?: boolean | ((selectedItems: T[]) => boolean);\r\n  cssClass?: string | ((selectedItems: T[]) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((selectedItems: T[]) => ({ [key: string]: any }));\r\n  fn: (selectedItems: T[]) => void;\r\n}\r\nexport const selectableActionButton = <T = any>(config: SelectableActionButton<T>): SelectableActionButton<T> => ({ ...config });\r\n\r\nexport interface ListItemExtended {\r\n  __selected__?: boolean;\r\n  __loading_status__?: boolean;\r\n}\r\n\r\nexport type TypeValueKeyItem = 'text' | 'diff-date' | 'date' | 'number' | 'email' | 'phone' | 'user' | 'uppercase' | 'lowercase' | 'titlecase' | 'first-letter-uppercase' | 'list-format' | 'currency';\r\n\r\nexport interface ListColumn<T> {\r\n  /**\r\n   * @description\r\n   * Agrega clases css al contenedor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   */\r\n  align?: 'left' | 'center' | 'right';\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor adicional de la celda de la columna\r\n   * @example\r\n   * clickEventAdditionalValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventAdditionalValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor de la celda de la columna\r\n   * @example\r\n   * clickEventValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css a la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClass: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClass?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor adicional de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayAdditionalValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo fecha (type: 'date')\r\n   * @example\r\n   * ...\r\n   * dateFormat: 'yyyy-MM-dd'\r\n   * ...\r\n   * dateFormat: 'dd/MM/yyyy' // Por defecto\r\n   * ...\r\n   */\r\n  dateFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor adicional a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.name\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayAdditionalValueFn?: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayValueFn: (item) => item.name\r\n   * ...\r\n   * displayValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * If you want to display a value in the column that is not in the item, you can use this function\r\n   * @example\r\n   * ...\r\n   * gridColumn: '1fr'\r\n   * ...\r\n   * gridColumn: '200px'\r\n   * ...\r\n   * gridColumn: 'max-content'\r\n   * ...\r\n   * gridColumn: 'fit-content(200px)'\r\n   * ...\r\n   */\r\n  gridColumn?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones > Columnas\r\n   * @example\r\n   * ...\r\n   * hidden: true\r\n   * ...\r\n   * hidden: false // Por defecto\r\n   * ...\r\n   */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo número (type: 'number')\r\n   * @example\r\n   * ...\r\n   * numberFormat: '2.2-2'\r\n   * ...\r\n   * numberFormat: '0.2-2' // Por defecto\r\n   * ...\r\n   */\r\n  numberFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor adicional de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkAdditionalValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Sortable column espicif key in object configuration\r\n   * @example\r\n   * sort: { key: 'name' }\r\n   */\r\n  sort?: { key: string };\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display additional value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: { color: 'green' }\r\n   * ...\r\n   * @param item\r\n   * @returns string | number | null | undefined | string[] | number[]\r\n   */\r\n  cssStyleDisplayAdditionalValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayValue: { color: 'green' }\r\n   * ...\r\n   */\r\n  cssStyleDisplayValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Title column\r\n   * @example\r\n   * title: 'Nombre'\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * @description\r\n   * To display a tooltip in the column on hover\r\n   * @example\r\n   * tooltip: 'Ver detalle'\r\n   */\r\n  tooltip?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * For show type value in cell\r\n   * @example\r\n   * ...\r\n   * type: 'number',\r\n   * displayValueFn: (item) => item.price, // output: 2,000.00\r\n   * ...\r\n   * type: 'date',\r\n   * displayValueFn: (item) => item.created_at, // output 12/12/2020\r\n   * ...\r\n   */\r\n  type?: TypeValueKeyItem | 'image' | 'html';\r\n\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface SimpleListColumn<T> extends Omit<ListColumn<T>, 'type' | 'displayAdditionalValueFn' | 'displayValueFn' | 'dateFormat' | 'numberFormat' | 'image'> { }\r\ninterface SimpleListColumn2<T> extends Omit<SimpleListColumn<T>, 'cssStyleDisplayAdditionalValue' | 'routerLinkAdditionalValue' | 'cssClassDisplayAdditionalValue' | 'clickEventAdditionalValue'> { }\r\ninterface ListFormatListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string[];\r\n  displayValueFn: (item: T, index: number) => string[];\r\n}\r\n\r\ninterface NumberListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => number | null | undefined;\r\n  numberFormat?: string;\r\n}\r\n\r\ninterface StringListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => string | number | null | undefined;\r\n}\r\n\r\ninterface DateListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined;\r\n  dateFormat?: string;\r\n}\r\n\r\ninterface ImageListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface HtmlListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n}\r\n\r\nexport const numberColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'number', ...config });\r\n\r\nexport const listFormatColumn = <T = any>(config: ListFormatListColumn<T>): ListColumn<T> => ({ type: 'list-format', ...config });\r\n\r\nexport const dateColumn = <T = any>(config: DateListColumn<T>): ListColumn<T> => ({ type: 'date', ...config });\r\n\r\nexport const diffDateColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'diff-date', ...config });\r\n\r\nexport const htmlColumn = <T = any>(config: HtmlListColumn<T>): ListColumn<T> => ({ type: 'html', ...config });\r\n\r\nexport const textColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'text', ...config });\r\n\r\nexport const uppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'uppercase', ...config });\r\n\r\nexport const lowercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'lowercase', ...config });\r\n\r\nexport const titlecaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'titlecase', ...config });\r\n\r\nexport const firstLetterUppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'first-letter-uppercase', ...config });\r\n\r\nexport const phoneColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'phone', ...config });\r\n\r\nexport const emailColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'email', ...config });\r\n\r\nexport const userColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'user', ...config });\r\n\r\nexport const imageColumn = <T = any>(config: ImageListColumn<T>): ListColumn<T> => ({ type: 'image', ...config });\r\n\r\n\r\nexport const itemNameAndDescriptionColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  title: 'Nombre',\r\n  gridColumn: '1fr',\r\n  sort: { key: 'name' },\r\n  routerLinkValue: { url: (item: any) => `../detail/${item.id}` },\r\n  displayValueFn: (item: any) => item.name,\r\n  displayAdditionalValueFn: (item: any) => item.description,\r\n  ...config,\r\n});\r\nexport const itemStatusColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'cssClassDisplayValue' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'first-letter-uppercase',\r\n  title: 'Estado',\r\n  sort: { key: 'status' },\r\n  align: 'center',\r\n  displayValueFn: (item: any) => item.status,\r\n  cssClassDisplayValue: (item: any) => `status-chip ${item.status}`,\r\n  ...config,\r\n});\r\nexport const itemCreatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Creado',\r\n  sort: { key: 'created_at' },\r\n  displayValueFn: (item: any) => item.created_at,\r\n  ...config,\r\n});\r\nexport const itemUpdatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Actualizado',\r\n  sort: { key: 'updated_at' },\r\n  hidden: true,\r\n  displayValueFn: (item: any) => item.updated_at,\r\n  ...config,\r\n});\r\nexport const simpleListColumns = (): ListColumn<any>[] => ([\r\n  itemNameAndDescriptionColumn(),\r\n  itemUpdatedAtColumn(),\r\n  itemCreatedAtColumn(),\r\n  itemStatusColumn(),\r\n]);\r\n\r\n\r\nexport const defaultListFilterInputs = (): FormInput[] => [\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de creación',\r\n    formControlNameFrom: 'created_at_from',\r\n    formControlNameTo: 'created_at_to',\r\n  }),\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de actualización',\r\n    formControlNameFrom: 'updated_at_from',\r\n    formControlNameTo: 'updated_at_to',\r\n  }),\r\n  switchFormInput({\r\n    textLabel: 'Registros inactivos',\r\n    formControlName: 'inactive',\r\n  }),\r\n];\r\n\r\nexport const deleteItemActionButton = () => clickEventActionButton({\r\n  icon: 'delete',\r\n  text: 'Eliminar',\r\n  fn: async ({ id }, _, { deleteItemFn }) => deleteItemFn(id),\r\n  hidden: (item) => item.deleted_at,\r\n});\r\n\r\nexport const restoreItemActionButton = () => clickEventActionButton({\r\n  icon: 'restore',\r\n  text: 'Restaurar',\r\n  fn: async ({ id }, _, { restoreItemFn }) => restoreItemFn(id),\r\n  hidden: (item) => !item.deleted_at,\r\n})\r\n\r\nexport const viewItemActionButton = () => routerLinkActionButton({\r\n  icon: 'visibility',\r\n  text: 'Ver',\r\n  routerLink: { url: (item) => `../view/${item.id}` },\r\n});\r\n\r\nexport const editItemActionButton = () => routerLinkActionButton({\r\n  icon: 'edit',\r\n  text: 'Editar',\r\n  routerLink: { url: (item) => `../edit/${item.id}` },\r\n})\r\n\r\n@Component({\r\n  selector: 'app-item-list-template',\r\n  standalone: true,\r\n  templateUrl: './item-list-template.component.html',\r\n  styleUrl: './item-list-template.component.css',\r\n  imports: [\r\n    CommonModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatSortModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatTooltipModule,\r\n    MatPseudoCheckboxModule,\r\n    IndexListPipe,\r\n    GetKeyItemPipe,\r\n    RouterLink,\r\n    DiffDatePipe,\r\n    HiddenOptionButtonRowPipe,\r\n    NgOptimizedImage,\r\n    ScrollingModule,\r\n    GetUserByIdPipe,\r\n    PathFilesServerPipe,\r\n    ListFormatPipe,\r\n    LoadImagePrivateDirective,\r\n    FirstLetterUppercasePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n    ExecuteFunctionListPipe,\r\n    RenameTitleColumnListPipe,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    FirstLetterUppercasePipe,\r\n    GetKeyItemPipe,\r\n    RenameTitleColumnListPipe,\r\n    BrowserAnimationsModule,\r\n    DateFnsAdapter,\r\n  ],\r\n})\r\nexport class ItemListTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemListConfiguration;\r\n\r\n  // @ContentChild('headers') headers!: TemplateRef<any>;\r\n  @ContentChild('rowList') rowList!: TemplateRef<any>;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  @ViewChild('divListItems', { static: true }) private divList!: ElementRef;\r\n\r\n  private _dataTypeList: 'array' | 'paginator' = 'array';\r\n  private _keyForGetItems: string;\r\n  private _keyForGetTotalItems: string;\r\n\r\n  private fetch = inject(FetchService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  private renderer = inject(Renderer2);\r\n  private eventsService = inject(EventsService);\r\n  public location = inject(Location);\r\n\r\n  // private datePipe = inject(DatePipe);\r\n  public firstLetterUppercasePipe = inject(FirstLetterUppercasePipe);\r\n  public getKeyItemPipe = inject(GetKeyItemPipe);\r\n  public renameTitleColumnListPipe = inject(RenameTitleColumnListPipe);\r\n\r\n  public lengthData = computed(() => this.data().length)\r\n\r\n  public searchCtrl: FormControl = new FormControl('');\r\n  public formFilters: FormGroup<any> | null = null;\r\n\r\n  public loading = signal(true);\r\n  public font: WritableSignal<'small' | 'medium' | 'large'> = signal('medium');\r\n  public headerListStyle: WritableSignal<'simple' | 'color'> = signal('simple');\r\n\r\n  private abortController = new AbortController();\r\n\r\n  private unsubscribe$: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(DATA_TYPE_LIST) _dataTypeList: 'array' | 'paginator',\r\n    @Optional() @Inject(KEY_GET_ITEMS_PAGINATOR_LIST) _keyForGetItems: string,\r\n    @Optional() @Inject(KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST) _keyForGetTotalItems: string\r\n  ) {\r\n    this._dataTypeList = _dataTypeList ?? 'paginator';\r\n    this._keyForGetItems = _keyForGetItems || 'data';\r\n    this._keyForGetTotalItems = _keyForGetTotalItems || 'total';\r\n  }\r\n\r\n  get data(): WritableSignal<any[]> {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  get defaultOrder(): string {\r\n    return this.configuration.defaultOrder ? `${this.configuration.defaultOrder?.key}|${this.configuration.defaultOrder?.order}` : 'id|DESC';\r\n  }\r\n\r\n  get dataTypeList(): 'array' | 'paginator' {\r\n    return this.configuration.dataType ?? this._dataTypeList;\r\n  }\r\n\r\n  get keyForGetItems(): string {\r\n    return this.configuration.keyGetItemsPaginator ?? this._keyForGetItems;\r\n  }\r\n\r\n  get keyForGetTotalItems(): string {\r\n    return this.configuration.keyGetTotalItemsPaginator ?? this._keyForGetTotalItems;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.configuration.data = signal([]);\r\n    this.configuration.updateListEvent = new EventEmitter();\r\n    if (this.configuration.rows?.options != false && !this.configuration.rows?.options?.length) {\r\n      this.configuration.rows = {\r\n        ...(this.configuration.rows ?? {}),\r\n        options: [\r\n          viewItemActionButton(),\r\n          editItemActionButton(),\r\n          deleteItemActionButton(),\r\n          restoreItemActionButton(),\r\n        ]\r\n      };\r\n    }\r\n    this.generateFormControlsFromFilterInputs();\r\n    this.generateColumnsCss();\r\n\r\n    this.eventsService\r\n      .eventsFiltered<EventGlobalSearch>([NAME_EVENT_GLOBAL_SEARCH])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(({ data }: any) => {\r\n        const type = data.type;\r\n        if (type == 'enter') this.searchCtrl.setValue(data.value);\r\n      })\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.paginator.pageIndex = 0;\r\n    this.paginator.pageSize = 20;\r\n\r\n    this.verifyQueryParams();\r\n\r\n    this.activatedRoute.queryParams.subscribe(() => this.callGetData());\r\n\r\n    this.sort.sortChange.subscribe(({ active, direction }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (this.defaultOrder == `${active}|${direction}` || !active || !direction) queryParams['order'] = null;\r\n      else queryParams['order'] = `${active}|${direction}`;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.searchCtrl.valueChanges.pipe(debounceTime(250)).subscribe((value: string) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (value) queryParams['search'] = value;\r\n      else queryParams['search'] = null;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.paginator.page.subscribe(({ pageIndex, pageSize }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (pageIndex == 0 || (queryParams['page'] ?? null) == pageIndex + 1) queryParams['page'] = null;\r\n      else queryParams['page'] = pageIndex + 1;\r\n      if (pageSize == 20 || (queryParams['per_page'] ?? null) == pageSize) queryParams['per_page'] = null;\r\n      else queryParams['per_page'] = pageSize;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.eventsService\r\n      .eventsFiltered([\r\n        `${this.configuration.server.url}_created`,\r\n        `${this.configuration.server.url}_updated`\r\n      ])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(() => this.callGetData());\r\n\r\n    // this.configuration.updateListEvent!.subscribe(() => this.callGetData({}));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n    if (this.abortController) this.abortController.abort();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private async generateColumnsCss(): Promise<void> {\r\n    const grid_cols: string[] = [];\r\n    const grid_areas: string[] = []\r\n    if (this.configuration.rows?.selectable) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('selected');\r\n    }\r\n    if (this.configuration.rows?.index != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('index');\r\n    }\r\n    for await (const column of this.configuration.columns()) {\r\n      if (!column.hidden) {\r\n        grid_cols.push(column.gridColumn ?? 'auto');\r\n        grid_areas.push(this.renameTitleColumnListPipe.transform(column.title));\r\n      }\r\n    }\r\n    if (this.configuration.rows?.actions) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('actions');\r\n    }\r\n    if (this.configuration.rows?.options != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('options');\r\n    }\r\n    this.renderer.setStyle(this.divList.nativeElement, 'grid-template-columns', grid_cols.join(' '));\r\n    this.renderer.setStyle(this.divList.nativeElement, '--items-list-grid-template-areas', `\"${grid_areas.join(' ')}\"`, RendererStyleFlags2.DashCase);\r\n    grid_areas.forEach((area, index) => this.renderer.setStyle(this.divList.nativeElement, `--items-list-grid-area-${index + 1}`, area, RendererStyleFlags2.DashCase));\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private getQueryParams(): { [key: string]: any } {\r\n    return !this.configuration.disableFiltersInQueryParams ? JSON.parse(JSON.stringify(this.activatedRoute.snapshot.queryParams)) : {\r\n      ...this.formFilters?.value ?? {},\r\n      page: this.paginator.pageIndex + 1,\r\n      per_page: this.paginator.pageSize,\r\n      order: this.sort.active ? `${this.sort.active}|${this.sort.direction}` : null,\r\n      search: this.searchCtrl.value ? this.searchCtrl.value : null,\r\n    }\r\n  }\r\n\r\n  private navigateOrCallGetData(params: any): void {\r\n    if (this.configuration.disableFiltersInQueryParams) this.callGetData(params);\r\n    else this.router.navigate([], { queryParams: params });\r\n  }\r\n\r\n  private verifyQueryParams(): void {\r\n    const queryParams = {} as any;\r\n    const { page, per_page, order, search, ...filters } = queryParams;\r\n    this.paginator.pageIndex = Number(page ?? 1) - 1;\r\n    this.paginator.pageSize = Number(per_page) ?? 20;\r\n    this.sort.active = order?.split('|')[0] ?? '';\r\n    this.sort.direction = order?.split('|')[1] == 'asc' ? 'asc' : 'desc';\r\n    this.sort.sortChange.emit();\r\n    this.searchCtrl.setValue(search ?? null, { emitEvent: false });\r\n  }\r\n\r\n  public callGetData(queryParams: any = {}): void {\r\n    const params = objectToURLSearchParams(queryParams);\r\n    if (!params.has('page')) params.set('page', String(this.paginator.pageIndex + 1));\r\n    if (!params.has('per_page')) params.set('per_page', String(this.paginator.pageSize));\r\n    if (!params.has('order')) params.set('order', this.defaultOrder);\r\n    this.getData(params);\r\n  }\r\n\r\n  private async getData(searchParams: URLSearchParams = new URLSearchParams()): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const serverUrl = this.configuration.server.url;\r\n    let queryParams = this.configuration.server.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const url = `${serverUrl}?${searchParams.toString()}&${queryParams ?? ''}`;\r\n    const config = { signal: this.abortController.signal };\r\n    try {\r\n      let items = [];\r\n      let totalItems = 0;\r\n      if (this.dataTypeList == 'array') {\r\n        items = await this.fetch.get<any[]>(url, config);\r\n        totalItems = items.length;\r\n      } else {\r\n        const paginatorData = await this.fetch.get<PaginatorData<any>>(url, config);\r\n        items = this.getKeyItemPipe.transform(paginatorData, this.keyForGetItems);\r\n        totalItems = this.getKeyItemPipe.transform(paginatorData, this.keyForGetTotalItems);\r\n      }\r\n      const { parseDataFn } = this.configuration;\r\n      const parseData = await parseDataFn?.(items) ?? items;\r\n      this.paginator.length = totalItems;\r\n      this.data.set(parseData);\r\n      this.loading.set(false);\r\n      this.checkSelectedItems();\r\n    } catch (err: any) {\r\n      if (err.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n  }\r\n\r\n  public hiddenToggleColumn($event: MatCheckboxChange, index: number): void {\r\n    this.configuration.columns.update((columns) => {\r\n      columns[index]['hidden'] = !$event.checked\r\n      return columns;\r\n    })\r\n    this.generateColumnsCss();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public navigateCreateView(): void {\r\n    this.router.navigate(['../create'], { relativeTo: this.activatedRoute });\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public allSelectedItems = signal(false);\r\n  public someSelectedItems = signal(false);\r\n  public selectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__));\r\n  public lengthSelectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__).length);\r\n\r\n  public selectedItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.toSpliced(index, 1, { ...data[index], __selected__: status }));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public selectedAllItems(status: boolean): void {\r\n    this.data.update((data) => data.map((e) => ({ ...e, __selected__: status })));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public someSelected(): boolean {\r\n    return this.data().length > 0 && this.data().some((e: ListItemExtended) => e.__selected__) && !this.allSelectedItems();\r\n  }\r\n\r\n  private checkSelectedItems(): void {\r\n    this.allSelectedItems.set(this.data().length > 0 && this.data().every((e: ListItemExtended) => e.__selected__));\r\n    this.someSelectedItems.set(this.someSelected());\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private generateFormControlsFromFilterInputs(): void {\r\n    if (this.configuration.filters == false) return;\r\n    if (!this.configuration.filters?.length) this.configuration.filters = defaultListFilterInputs();\r\n    const formFilters = new FormGroup({});\r\n    this.configuration.filters?.forEach((filter) => {\r\n      if (filter.text) {\r\n        formFilters.setControl(filter.text.formControlName, new FormControl(filter.text.defaultValue));\r\n      } else if (filter.textarea) {\r\n        formFilters.setControl(filter.textarea.formControlName, new FormControl(filter.textarea.defaultValue));\r\n      } else if (filter.select) {\r\n        formFilters.setControl(filter.select.formControlName, new FormControl(filter.select.defaultValue));\r\n      } else if (filter.number) {\r\n        formFilters.setControl(filter.number.formControlName, new FormControl(filter.number.defaultValue));\r\n      } else if (filter.date) {\r\n        formFilters.setControl(filter.date.formControlName, new FormControl(filter.date.defaultValue));\r\n      } else if (filter.dateRange) {\r\n        formFilters.setControl(filter.dateRange.formControlNameFrom, new FormControl(filter.dateRange.defaultValueFrom));\r\n        formFilters.setControl(filter.dateRange.formControlNameTo, new FormControl(filter.dateRange.defaultValueTo));\r\n      } else if (filter.autocompleteLocal) {\r\n        formFilters.setControl(filter.autocompleteLocal.formControlName, new FormControl(filter.autocompleteLocal.defaultValue));\r\n      } else if (filter.autocompleteServer) {\r\n        formFilters.setControl(filter.autocompleteServer.formControlName, new FormControl(filter.autocompleteServer.defaultValue));\r\n      } else if (filter.checkbox) {\r\n        formFilters.setControl(filter.checkbox.formControlName, new FormControl(filter.checkbox.defaultValue));\r\n      } else if (filter.switch) {\r\n        formFilters.setControl(filter.switch.formControlName, new FormControl(filter.switch.defaultValue));\r\n      }\r\n    });\r\n    this.formFilters = formFilters;\r\n  }\r\n\r\n  public getControlFormFilter(name: string): FormControl {\r\n    return this.formFilters!.get(name) as FormControl;\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private updateLoadingStatusItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.map((item: ListItemExtended, i) => {\r\n      if (i == index) item.__loading_status__ = status;\r\n      return item;\r\n    }));\r\n  }\r\n\r\n  public deleteItem = async (id: number | string) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}`;\r\n    try {\r\n      await this.fetch.delete(url);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public restoreItem = async (id: string | number) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}/restore`;\r\n    const config = { afterAlert: { description: 'Restaurando ítem de la lista' } }\r\n    try {\r\n      await this.fetch.put(url, config);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public updateChangesItem = (index: number, item: any) => {\r\n    this.configuration.data!.update(items => items.toSpliced(index, 1, item));\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "cssClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "cssStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | ",
                    "optional": true,
                    "description": "",
                    "line": 141
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | ",
                    "optional": true,
                    "description": "",
                    "line": 139
                },
                {
                    "name": "fn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 142
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | ",
                    "optional": true,
                    "description": "",
                    "line": 138
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 134
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StyleButton",
                    "optional": true,
                    "description": "",
                    "line": 137
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 136
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectConfigurationExt",
            "id": "interface-SelectConfigurationExt-c318b4a215c8ef742cae4789ee423f79c07102763a82acdca3a73e70fce6b013cf18d23c85dd12f649226b77bd037e42298d7e0f64fce4e298d57932521aba8a",
            "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { FetchService, RequestInitFetch, ToastForFetch } from '@service/fetch.service';\r\nimport { EventsService } from '@service/events.service';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { SpinnerDefaultComponent } from '../spinner-default/spinner-default.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { InputFileConfiguration, SelectFileComponent } from '../select-file/select-file.component';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { ErrorTemplateComponent } from '../error-template/error-template.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { ExecuteFunctionPipe } from '@pipe/execute-function.pipe';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { InputAutocompleteConfiguration, InputAutocompleteLocalConfiguration, InputAutocompleteServerConfiguration, InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectConfiguration, InputSelectLocalConfiguration, InputSelectServerConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { ConfirmDialogData } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\n\r\nexport interface ItemFormConfiguration<Item = any, Data = any> {\r\n  title?: string;\r\n  titleModule: string;\r\n\r\n  subtitle?: ((item: Item) => string | number | null | undefined) | false;\r\n\r\n  formGroup: FormGroup;\r\n  type: 'create' | 'update';\r\n\r\n  loading?: boolean;\r\n  hiddeFields?: boolean;\r\n  fields?: FormInput[];\r\n\r\n  dataItem?: WritableSignal<Item | null>,\r\n\r\n  server: {\r\n      url: string;\r\n      queryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      updateUrl?: string;\r\n      updateQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      createUrl?: string;\r\n      createQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      itemUrl?: string;\r\n      itemQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      fetch?: {\r\n        confirmDialog?: ConfirmDialogData,\r\n        toast?: ToastForFetch,\r\n      }\r\n  }\r\n\r\n  parseDataItemBeforeSendFormFn?: (data: Data) => (Data | Promise<Data>);\r\n  afterSaveFormFn?: (data: Item) => void;\r\n\r\n  itemId?: string | number\r\n  parseItemBeforePatchFormFn?: (item: Item) => (Item | Promise<Item>);\r\n\r\n  ignoreShowError?: boolean;\r\n  interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n  httpError?: FetchErrorResponse;\r\n\r\n  disableAutoBackLocation?: boolean;\r\n\r\n  saveButton?: {\r\n      text: string;\r\n      icon?: string;\r\n      iconPosition?: 'left' | 'right';\r\n  };\r\n  \r\n  cancelButton?: {\r\n      iconPosition?: 'left' | 'right';\r\n      text: string;\r\n      icon?: string;\r\n  } | false;\r\n}\r\n\r\nexport declare type InputType = 'select' | 'select-local' | 'select-server' | 'date' | 'date-range' | 'text' | 'number' | 'textarea' | 'checkbox' | 'switch' | 'autocomplete' | 'autocomplete-local' | 'autocomplete-server';\r\n\r\nexport interface FormInput {\r\n\r\n  type: InputType | 'file';\r\n\r\n  text?: TextFormInput;\r\n\r\n  number?: NumberFormInput;\r\n\r\n  textarea?: TextareaFormInput;\r\n  \r\n  date?: DateFormInput;\r\n  \r\n  dateRange?: DateRangeFormInput;\r\n  \r\n  switch?: SwitchFormInput;\r\n  \r\n  checkbox?: CheckboxFormInput;\r\n\r\n  select?: SelectConfigurationExt;\r\n\r\n  selectLocal?: SelectLocalConfigurationExt;\r\n  \r\n  selectServer?: SelectServerConfigurationExt;\r\n\r\n  autocomplete?: AutocompleteConfigurationExt;\r\n\r\n  autocompleteServer?: AutocompleteServerConfigurationExt;\r\n\r\n  autocompleteLocal?: AutocompleteLocalConfigurationExt;\r\n\r\n  file?: FileFormInput;\r\n}\r\n\r\nexport interface TextFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface NumberFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface TextareaFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  rows?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SelectFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | boolean | null;\r\n  options: { text: string, value: any }[];\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateRangeFormInput<T = any> {\r\n  formControlNameFrom: string;\r\n  formControlNameTo: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValueFrom?: Date | string | number | null;\r\n  defaultValueTo?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SwitchFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface CheckboxFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectConfigurationExt<T = any> extends InputSelectConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectLocalConfigurationExt<T = any> extends InputSelectLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectServerConfigurationExt<T = any> extends InputSelectServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteConfigurationExt<T = any> extends InputAutocompleteConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteLocalConfigurationExt<T = any> extends InputAutocompleteLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteServerConfigurationExt<T = any> extends InputAutocompleteServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface FileFormInput<T = any> extends InputFileConfiguration {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: any;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport const textFormInput = (configuration: TextFormInput): FormInput => ({\r\n  type: 'text',\r\n  text: configuration\r\n});\r\n\r\nexport const numberFormInput = (configuration: NumberFormInput): FormInput => ({\r\n  type: 'number',\r\n  number: configuration\r\n});\r\n\r\nexport const textareaFormInput = (configuration: TextareaFormInput): FormInput => ({\r\n  type: 'textarea',\r\n  textarea: configuration\r\n});\r\n\r\nexport const selectFormInput = (configuration: SelectConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectLocalFormInput = (configuration: SelectLocalConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectServerFormInput = (configuration: SelectServerConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const dateFormInput = (configuration: DateFormInput): FormInput => ({\r\n  type: 'date',\r\n  date: configuration\r\n});\r\n\r\nexport const dateRangeFormInput = (configuration: DateRangeFormInput): FormInput => ({\r\n  type: 'date-range',\r\n  dateRange: configuration\r\n});\r\n\r\nexport const switchFormInput = (configuration: SwitchFormInput): FormInput => ({\r\n  type: 'switch',\r\n  switch: configuration\r\n});\r\n\r\nexport const checkboxFormInput = (configuration: CheckboxFormInput): FormInput => ({\r\n  type: 'checkbox',\r\n  checkbox: configuration\r\n});\r\n\r\nexport const autocompleteFormInput = (configuration: AutocompleteConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocomplete: configuration\r\n});\r\n\r\nexport const autocompleteLocalFormInput = (configuration: AutocompleteLocalConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocompleteLocal: configuration\r\n});\r\n\r\nexport const autocompleteServerFormInput = (configuration: AutocompleteServerConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-server',\r\n  autocompleteServer: configuration\r\n});\r\n\r\nexport const fileFormInput = (configuration: FileFormInput): FormInput => ({\r\n  type: 'file',\r\n  file: configuration\r\n});\r\n\r\n\r\n@Component({\r\n  selector: 'app-item-form-template',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ScrollingModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    SelectFileComponent,\r\n    PathFilesServerPipe,\r\n    ScrollingModule,\r\n    ErrorTemplateComponent,\r\n    GetKeyItemPipe,\r\n    ExecuteFunctionPipe,\r\n    GetMixedValuePipe,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n  ],\r\n  templateUrl: './item-form-template.component.html',\r\n  styleUrls: ['./item-form-template.component.css']\r\n})\r\nexport class ItemFormTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemFormConfiguration;\r\n\r\n  private fetch = inject(FetchService);\r\n  private events = inject(EventsService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  public location = inject(Location);\r\n\r\n  private abortController = new AbortController();\r\n\r\n  ngOnInit() {\r\n    if (this.configuration.type == 'update') {\r\n      this.setItemId();\r\n      if (this.configuration.dataItem && this.configuration.dataItem()) {\r\n        this.configuration.loading = false;\r\n      } else {\r\n        this.configuration.dataItem = signal(null);\r\n        this.getItem();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private setItemId() {\r\n    if (!this.configuration.itemId) {\r\n      if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n        this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getControl(name: string): FormControl {\r\n    return this.configuration.formGroup.get(name) as FormControl;\r\n  }\r\n\r\n  public async submitForm() {\r\n    try {\r\n      const form = this.configuration.formGroup;\r\n      form.markAllAsTouched();\r\n      if (form.invalid || this.configuration.loading) return;\r\n      this.configuration.loading = true;\r\n\r\n      let data = form.getRawValue();\r\n      const { parseDataItemBeforeSendFormFn } = this.configuration;\r\n      data = await parseDataItemBeforeSendFormFn?.(data) ?? data;\r\n\r\n      const requestInit: RequestInitFetch = { };\r\n      if(this.configuration.server.fetch?.confirmDialog) {\r\n        requestInit.confirmDialog = this.configuration.server.fetch.confirmDialog;\r\n      }\r\n      if(this.configuration.server.fetch?.toast) {\r\n        requestInit.toast = this.configuration.server.fetch.toast;\r\n      }\r\n\r\n      let response = null;\r\n      if (this.configuration.type === 'create') {\r\n        response = await this.fetch.post(this.configuration.server.url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_created`, response);\r\n      } else {\r\n        const url = this.configuration.server.updateUrl ?? `${this.configuration.server.url}/${this.configuration.dataItem!()?.id}`;\r\n        response = await this.fetch.put(url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_updated`, response);\r\n      }\r\n\r\n      const { afterSaveFormFn } = this.configuration;\r\n      if (afterSaveFormFn) afterSaveFormFn(response);\r\n\r\n      if (!this.configuration.disableAutoBackLocation) this.location.back();\r\n    } catch { }\r\n    this.configuration.loading = false;\r\n  }\r\n\r\n  public async getItem() {\r\n    this.configuration.dataItem = signal(null)\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { itemId, server } = this.configuration;\r\n      let queryParams:any = server.itemQueryParams ?? {};\r\n      if (queryParams instanceof Object) {\r\n        queryParams = objectToURLSearchParams(queryParams);\r\n        queryParams = queryParams.toString();\r\n      }\r\n      const url = `${server.itemUrl ?? server.url}/${itemId}?${queryParams ? queryParams : ''}`;\r\n      const requestInit: RequestInitFetch = { signal: this.abortController.signal };\r\n      let item: any = await this.fetch.get(url, requestInit);\r\n      const { parseItemBeforePatchFormFn } = this.configuration;\r\n      item = await parseItemBeforePatchFormFn?.(item) ?? item;\r\n      this.configuration.formGroup.patchValue(item);\r\n      this.configuration.dataItem.set(item);\r\n      this.configuration.hiddeFields = false;\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "cssClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 196
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number | null",
                    "optional": true,
                    "description": "",
                    "line": 195
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 194
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "InputSelectConfiguration"
            ]
        },
        {
            "name": "SelectFormInput",
            "id": "interface-SelectFormInput-c318b4a215c8ef742cae4789ee423f79c07102763a82acdca3a73e70fce6b013cf18d23c85dd12f649226b77bd037e42298d7e0f64fce4e298d57932521aba8a",
            "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { FetchService, RequestInitFetch, ToastForFetch } from '@service/fetch.service';\r\nimport { EventsService } from '@service/events.service';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { SpinnerDefaultComponent } from '../spinner-default/spinner-default.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { InputFileConfiguration, SelectFileComponent } from '../select-file/select-file.component';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { ErrorTemplateComponent } from '../error-template/error-template.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { ExecuteFunctionPipe } from '@pipe/execute-function.pipe';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { InputAutocompleteConfiguration, InputAutocompleteLocalConfiguration, InputAutocompleteServerConfiguration, InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectConfiguration, InputSelectLocalConfiguration, InputSelectServerConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { ConfirmDialogData } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\n\r\nexport interface ItemFormConfiguration<Item = any, Data = any> {\r\n  title?: string;\r\n  titleModule: string;\r\n\r\n  subtitle?: ((item: Item) => string | number | null | undefined) | false;\r\n\r\n  formGroup: FormGroup;\r\n  type: 'create' | 'update';\r\n\r\n  loading?: boolean;\r\n  hiddeFields?: boolean;\r\n  fields?: FormInput[];\r\n\r\n  dataItem?: WritableSignal<Item | null>,\r\n\r\n  server: {\r\n      url: string;\r\n      queryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      updateUrl?: string;\r\n      updateQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      createUrl?: string;\r\n      createQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      itemUrl?: string;\r\n      itemQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      fetch?: {\r\n        confirmDialog?: ConfirmDialogData,\r\n        toast?: ToastForFetch,\r\n      }\r\n  }\r\n\r\n  parseDataItemBeforeSendFormFn?: (data: Data) => (Data | Promise<Data>);\r\n  afterSaveFormFn?: (data: Item) => void;\r\n\r\n  itemId?: string | number\r\n  parseItemBeforePatchFormFn?: (item: Item) => (Item | Promise<Item>);\r\n\r\n  ignoreShowError?: boolean;\r\n  interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n  httpError?: FetchErrorResponse;\r\n\r\n  disableAutoBackLocation?: boolean;\r\n\r\n  saveButton?: {\r\n      text: string;\r\n      icon?: string;\r\n      iconPosition?: 'left' | 'right';\r\n  };\r\n  \r\n  cancelButton?: {\r\n      iconPosition?: 'left' | 'right';\r\n      text: string;\r\n      icon?: string;\r\n  } | false;\r\n}\r\n\r\nexport declare type InputType = 'select' | 'select-local' | 'select-server' | 'date' | 'date-range' | 'text' | 'number' | 'textarea' | 'checkbox' | 'switch' | 'autocomplete' | 'autocomplete-local' | 'autocomplete-server';\r\n\r\nexport interface FormInput {\r\n\r\n  type: InputType | 'file';\r\n\r\n  text?: TextFormInput;\r\n\r\n  number?: NumberFormInput;\r\n\r\n  textarea?: TextareaFormInput;\r\n  \r\n  date?: DateFormInput;\r\n  \r\n  dateRange?: DateRangeFormInput;\r\n  \r\n  switch?: SwitchFormInput;\r\n  \r\n  checkbox?: CheckboxFormInput;\r\n\r\n  select?: SelectConfigurationExt;\r\n\r\n  selectLocal?: SelectLocalConfigurationExt;\r\n  \r\n  selectServer?: SelectServerConfigurationExt;\r\n\r\n  autocomplete?: AutocompleteConfigurationExt;\r\n\r\n  autocompleteServer?: AutocompleteServerConfigurationExt;\r\n\r\n  autocompleteLocal?: AutocompleteLocalConfigurationExt;\r\n\r\n  file?: FileFormInput;\r\n}\r\n\r\nexport interface TextFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface NumberFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface TextareaFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  rows?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SelectFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | boolean | null;\r\n  options: { text: string, value: any }[];\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateRangeFormInput<T = any> {\r\n  formControlNameFrom: string;\r\n  formControlNameTo: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValueFrom?: Date | string | number | null;\r\n  defaultValueTo?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SwitchFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface CheckboxFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectConfigurationExt<T = any> extends InputSelectConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectLocalConfigurationExt<T = any> extends InputSelectLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectServerConfigurationExt<T = any> extends InputSelectServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteConfigurationExt<T = any> extends InputAutocompleteConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteLocalConfigurationExt<T = any> extends InputAutocompleteLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteServerConfigurationExt<T = any> extends InputAutocompleteServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface FileFormInput<T = any> extends InputFileConfiguration {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: any;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport const textFormInput = (configuration: TextFormInput): FormInput => ({\r\n  type: 'text',\r\n  text: configuration\r\n});\r\n\r\nexport const numberFormInput = (configuration: NumberFormInput): FormInput => ({\r\n  type: 'number',\r\n  number: configuration\r\n});\r\n\r\nexport const textareaFormInput = (configuration: TextareaFormInput): FormInput => ({\r\n  type: 'textarea',\r\n  textarea: configuration\r\n});\r\n\r\nexport const selectFormInput = (configuration: SelectConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectLocalFormInput = (configuration: SelectLocalConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectServerFormInput = (configuration: SelectServerConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const dateFormInput = (configuration: DateFormInput): FormInput => ({\r\n  type: 'date',\r\n  date: configuration\r\n});\r\n\r\nexport const dateRangeFormInput = (configuration: DateRangeFormInput): FormInput => ({\r\n  type: 'date-range',\r\n  dateRange: configuration\r\n});\r\n\r\nexport const switchFormInput = (configuration: SwitchFormInput): FormInput => ({\r\n  type: 'switch',\r\n  switch: configuration\r\n});\r\n\r\nexport const checkboxFormInput = (configuration: CheckboxFormInput): FormInput => ({\r\n  type: 'checkbox',\r\n  checkbox: configuration\r\n});\r\n\r\nexport const autocompleteFormInput = (configuration: AutocompleteConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocomplete: configuration\r\n});\r\n\r\nexport const autocompleteLocalFormInput = (configuration: AutocompleteLocalConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocompleteLocal: configuration\r\n});\r\n\r\nexport const autocompleteServerFormInput = (configuration: AutocompleteServerConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-server',\r\n  autocompleteServer: configuration\r\n});\r\n\r\nexport const fileFormInput = (configuration: FileFormInput): FormInput => ({\r\n  type: 'file',\r\n  file: configuration\r\n});\r\n\r\n\r\n@Component({\r\n  selector: 'app-item-form-template',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ScrollingModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    SelectFileComponent,\r\n    PathFilesServerPipe,\r\n    ScrollingModule,\r\n    ErrorTemplateComponent,\r\n    GetKeyItemPipe,\r\n    ExecuteFunctionPipe,\r\n    GetMixedValuePipe,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n  ],\r\n  templateUrl: './item-form-template.component.html',\r\n  styleUrls: ['./item-form-template.component.css']\r\n})\r\nexport class ItemFormTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemFormConfiguration;\r\n\r\n  private fetch = inject(FetchService);\r\n  private events = inject(EventsService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  public location = inject(Location);\r\n\r\n  private abortController = new AbortController();\r\n\r\n  ngOnInit() {\r\n    if (this.configuration.type == 'update') {\r\n      this.setItemId();\r\n      if (this.configuration.dataItem && this.configuration.dataItem()) {\r\n        this.configuration.loading = false;\r\n      } else {\r\n        this.configuration.dataItem = signal(null);\r\n        this.getItem();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private setItemId() {\r\n    if (!this.configuration.itemId) {\r\n      if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n        this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getControl(name: string): FormControl {\r\n    return this.configuration.formGroup.get(name) as FormControl;\r\n  }\r\n\r\n  public async submitForm() {\r\n    try {\r\n      const form = this.configuration.formGroup;\r\n      form.markAllAsTouched();\r\n      if (form.invalid || this.configuration.loading) return;\r\n      this.configuration.loading = true;\r\n\r\n      let data = form.getRawValue();\r\n      const { parseDataItemBeforeSendFormFn } = this.configuration;\r\n      data = await parseDataItemBeforeSendFormFn?.(data) ?? data;\r\n\r\n      const requestInit: RequestInitFetch = { };\r\n      if(this.configuration.server.fetch?.confirmDialog) {\r\n        requestInit.confirmDialog = this.configuration.server.fetch.confirmDialog;\r\n      }\r\n      if(this.configuration.server.fetch?.toast) {\r\n        requestInit.toast = this.configuration.server.fetch.toast;\r\n      }\r\n\r\n      let response = null;\r\n      if (this.configuration.type === 'create') {\r\n        response = await this.fetch.post(this.configuration.server.url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_created`, response);\r\n      } else {\r\n        const url = this.configuration.server.updateUrl ?? `${this.configuration.server.url}/${this.configuration.dataItem!()?.id}`;\r\n        response = await this.fetch.put(url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_updated`, response);\r\n      }\r\n\r\n      const { afterSaveFormFn } = this.configuration;\r\n      if (afterSaveFormFn) afterSaveFormFn(response);\r\n\r\n      if (!this.configuration.disableAutoBackLocation) this.location.back();\r\n    } catch { }\r\n    this.configuration.loading = false;\r\n  }\r\n\r\n  public async getItem() {\r\n    this.configuration.dataItem = signal(null)\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { itemId, server } = this.configuration;\r\n      let queryParams:any = server.itemQueryParams ?? {};\r\n      if (queryParams instanceof Object) {\r\n        queryParams = objectToURLSearchParams(queryParams);\r\n        queryParams = queryParams.toString();\r\n      }\r\n      const url = `${server.itemUrl ?? server.url}/${itemId}?${queryParams ? queryParams : ''}`;\r\n      const requestInit: RequestInitFetch = { signal: this.abortController.signal };\r\n      let item: any = await this.fetch.get(url, requestInit);\r\n      const { parseItemBeforePatchFormFn } = this.configuration;\r\n      item = await parseItemBeforePatchFormFn?.(item) ?? item;\r\n      this.configuration.formGroup.patchValue(item);\r\n      this.configuration.dataItem.set(item);\r\n      this.configuration.hiddeFields = false;\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "cssClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 154
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number | boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 152
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 149
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 153
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 151
                },
                {
                    "name": "textLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 150
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectLocalConfigurationExt",
            "id": "interface-SelectLocalConfigurationExt-c318b4a215c8ef742cae4789ee423f79c07102763a82acdca3a73e70fce6b013cf18d23c85dd12f649226b77bd037e42298d7e0f64fce4e298d57932521aba8a",
            "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { FetchService, RequestInitFetch, ToastForFetch } from '@service/fetch.service';\r\nimport { EventsService } from '@service/events.service';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { SpinnerDefaultComponent } from '../spinner-default/spinner-default.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { InputFileConfiguration, SelectFileComponent } from '../select-file/select-file.component';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { ErrorTemplateComponent } from '../error-template/error-template.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { ExecuteFunctionPipe } from '@pipe/execute-function.pipe';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { InputAutocompleteConfiguration, InputAutocompleteLocalConfiguration, InputAutocompleteServerConfiguration, InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectConfiguration, InputSelectLocalConfiguration, InputSelectServerConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { ConfirmDialogData } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\n\r\nexport interface ItemFormConfiguration<Item = any, Data = any> {\r\n  title?: string;\r\n  titleModule: string;\r\n\r\n  subtitle?: ((item: Item) => string | number | null | undefined) | false;\r\n\r\n  formGroup: FormGroup;\r\n  type: 'create' | 'update';\r\n\r\n  loading?: boolean;\r\n  hiddeFields?: boolean;\r\n  fields?: FormInput[];\r\n\r\n  dataItem?: WritableSignal<Item | null>,\r\n\r\n  server: {\r\n      url: string;\r\n      queryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      updateUrl?: string;\r\n      updateQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      createUrl?: string;\r\n      createQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      itemUrl?: string;\r\n      itemQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      fetch?: {\r\n        confirmDialog?: ConfirmDialogData,\r\n        toast?: ToastForFetch,\r\n      }\r\n  }\r\n\r\n  parseDataItemBeforeSendFormFn?: (data: Data) => (Data | Promise<Data>);\r\n  afterSaveFormFn?: (data: Item) => void;\r\n\r\n  itemId?: string | number\r\n  parseItemBeforePatchFormFn?: (item: Item) => (Item | Promise<Item>);\r\n\r\n  ignoreShowError?: boolean;\r\n  interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n  httpError?: FetchErrorResponse;\r\n\r\n  disableAutoBackLocation?: boolean;\r\n\r\n  saveButton?: {\r\n      text: string;\r\n      icon?: string;\r\n      iconPosition?: 'left' | 'right';\r\n  };\r\n  \r\n  cancelButton?: {\r\n      iconPosition?: 'left' | 'right';\r\n      text: string;\r\n      icon?: string;\r\n  } | false;\r\n}\r\n\r\nexport declare type InputType = 'select' | 'select-local' | 'select-server' | 'date' | 'date-range' | 'text' | 'number' | 'textarea' | 'checkbox' | 'switch' | 'autocomplete' | 'autocomplete-local' | 'autocomplete-server';\r\n\r\nexport interface FormInput {\r\n\r\n  type: InputType | 'file';\r\n\r\n  text?: TextFormInput;\r\n\r\n  number?: NumberFormInput;\r\n\r\n  textarea?: TextareaFormInput;\r\n  \r\n  date?: DateFormInput;\r\n  \r\n  dateRange?: DateRangeFormInput;\r\n  \r\n  switch?: SwitchFormInput;\r\n  \r\n  checkbox?: CheckboxFormInput;\r\n\r\n  select?: SelectConfigurationExt;\r\n\r\n  selectLocal?: SelectLocalConfigurationExt;\r\n  \r\n  selectServer?: SelectServerConfigurationExt;\r\n\r\n  autocomplete?: AutocompleteConfigurationExt;\r\n\r\n  autocompleteServer?: AutocompleteServerConfigurationExt;\r\n\r\n  autocompleteLocal?: AutocompleteLocalConfigurationExt;\r\n\r\n  file?: FileFormInput;\r\n}\r\n\r\nexport interface TextFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface NumberFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface TextareaFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  rows?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SelectFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | boolean | null;\r\n  options: { text: string, value: any }[];\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateRangeFormInput<T = any> {\r\n  formControlNameFrom: string;\r\n  formControlNameTo: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValueFrom?: Date | string | number | null;\r\n  defaultValueTo?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SwitchFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface CheckboxFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectConfigurationExt<T = any> extends InputSelectConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectLocalConfigurationExt<T = any> extends InputSelectLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectServerConfigurationExt<T = any> extends InputSelectServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteConfigurationExt<T = any> extends InputAutocompleteConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteLocalConfigurationExt<T = any> extends InputAutocompleteLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteServerConfigurationExt<T = any> extends InputAutocompleteServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface FileFormInput<T = any> extends InputFileConfiguration {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: any;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport const textFormInput = (configuration: TextFormInput): FormInput => ({\r\n  type: 'text',\r\n  text: configuration\r\n});\r\n\r\nexport const numberFormInput = (configuration: NumberFormInput): FormInput => ({\r\n  type: 'number',\r\n  number: configuration\r\n});\r\n\r\nexport const textareaFormInput = (configuration: TextareaFormInput): FormInput => ({\r\n  type: 'textarea',\r\n  textarea: configuration\r\n});\r\n\r\nexport const selectFormInput = (configuration: SelectConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectLocalFormInput = (configuration: SelectLocalConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectServerFormInput = (configuration: SelectServerConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const dateFormInput = (configuration: DateFormInput): FormInput => ({\r\n  type: 'date',\r\n  date: configuration\r\n});\r\n\r\nexport const dateRangeFormInput = (configuration: DateRangeFormInput): FormInput => ({\r\n  type: 'date-range',\r\n  dateRange: configuration\r\n});\r\n\r\nexport const switchFormInput = (configuration: SwitchFormInput): FormInput => ({\r\n  type: 'switch',\r\n  switch: configuration\r\n});\r\n\r\nexport const checkboxFormInput = (configuration: CheckboxFormInput): FormInput => ({\r\n  type: 'checkbox',\r\n  checkbox: configuration\r\n});\r\n\r\nexport const autocompleteFormInput = (configuration: AutocompleteConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocomplete: configuration\r\n});\r\n\r\nexport const autocompleteLocalFormInput = (configuration: AutocompleteLocalConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocompleteLocal: configuration\r\n});\r\n\r\nexport const autocompleteServerFormInput = (configuration: AutocompleteServerConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-server',\r\n  autocompleteServer: configuration\r\n});\r\n\r\nexport const fileFormInput = (configuration: FileFormInput): FormInput => ({\r\n  type: 'file',\r\n  file: configuration\r\n});\r\n\r\n\r\n@Component({\r\n  selector: 'app-item-form-template',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ScrollingModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    SelectFileComponent,\r\n    PathFilesServerPipe,\r\n    ScrollingModule,\r\n    ErrorTemplateComponent,\r\n    GetKeyItemPipe,\r\n    ExecuteFunctionPipe,\r\n    GetMixedValuePipe,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n  ],\r\n  templateUrl: './item-form-template.component.html',\r\n  styleUrls: ['./item-form-template.component.css']\r\n})\r\nexport class ItemFormTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemFormConfiguration;\r\n\r\n  private fetch = inject(FetchService);\r\n  private events = inject(EventsService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  public location = inject(Location);\r\n\r\n  private abortController = new AbortController();\r\n\r\n  ngOnInit() {\r\n    if (this.configuration.type == 'update') {\r\n      this.setItemId();\r\n      if (this.configuration.dataItem && this.configuration.dataItem()) {\r\n        this.configuration.loading = false;\r\n      } else {\r\n        this.configuration.dataItem = signal(null);\r\n        this.getItem();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private setItemId() {\r\n    if (!this.configuration.itemId) {\r\n      if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n        this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getControl(name: string): FormControl {\r\n    return this.configuration.formGroup.get(name) as FormControl;\r\n  }\r\n\r\n  public async submitForm() {\r\n    try {\r\n      const form = this.configuration.formGroup;\r\n      form.markAllAsTouched();\r\n      if (form.invalid || this.configuration.loading) return;\r\n      this.configuration.loading = true;\r\n\r\n      let data = form.getRawValue();\r\n      const { parseDataItemBeforeSendFormFn } = this.configuration;\r\n      data = await parseDataItemBeforeSendFormFn?.(data) ?? data;\r\n\r\n      const requestInit: RequestInitFetch = { };\r\n      if(this.configuration.server.fetch?.confirmDialog) {\r\n        requestInit.confirmDialog = this.configuration.server.fetch.confirmDialog;\r\n      }\r\n      if(this.configuration.server.fetch?.toast) {\r\n        requestInit.toast = this.configuration.server.fetch.toast;\r\n      }\r\n\r\n      let response = null;\r\n      if (this.configuration.type === 'create') {\r\n        response = await this.fetch.post(this.configuration.server.url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_created`, response);\r\n      } else {\r\n        const url = this.configuration.server.updateUrl ?? `${this.configuration.server.url}/${this.configuration.dataItem!()?.id}`;\r\n        response = await this.fetch.put(url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_updated`, response);\r\n      }\r\n\r\n      const { afterSaveFormFn } = this.configuration;\r\n      if (afterSaveFormFn) afterSaveFormFn(response);\r\n\r\n      if (!this.configuration.disableAutoBackLocation) this.location.back();\r\n    } catch { }\r\n    this.configuration.loading = false;\r\n  }\r\n\r\n  public async getItem() {\r\n    this.configuration.dataItem = signal(null)\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { itemId, server } = this.configuration;\r\n      let queryParams:any = server.itemQueryParams ?? {};\r\n      if (queryParams instanceof Object) {\r\n        queryParams = objectToURLSearchParams(queryParams);\r\n        queryParams = queryParams.toString();\r\n      }\r\n      const url = `${server.itemUrl ?? server.url}/${itemId}?${queryParams ? queryParams : ''}`;\r\n      const requestInit: RequestInitFetch = { signal: this.abortController.signal };\r\n      let item: any = await this.fetch.get(url, requestInit);\r\n      const { parseItemBeforePatchFormFn } = this.configuration;\r\n      item = await parseItemBeforePatchFormFn?.(item) ?? item;\r\n      this.configuration.formGroup.patchValue(item);\r\n      this.configuration.dataItem.set(item);\r\n      this.configuration.hiddeFields = false;\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "cssClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 202
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number | null",
                    "optional": true,
                    "description": "",
                    "line": 201
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 200
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "InputSelectLocalConfiguration"
            ]
        },
        {
            "name": "SelectServerConfigurationExt",
            "id": "interface-SelectServerConfigurationExt-c318b4a215c8ef742cae4789ee423f79c07102763a82acdca3a73e70fce6b013cf18d23c85dd12f649226b77bd037e42298d7e0f64fce4e298d57932521aba8a",
            "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { FetchService, RequestInitFetch, ToastForFetch } from '@service/fetch.service';\r\nimport { EventsService } from '@service/events.service';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { SpinnerDefaultComponent } from '../spinner-default/spinner-default.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { InputFileConfiguration, SelectFileComponent } from '../select-file/select-file.component';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { ErrorTemplateComponent } from '../error-template/error-template.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { ExecuteFunctionPipe } from '@pipe/execute-function.pipe';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { InputAutocompleteConfiguration, InputAutocompleteLocalConfiguration, InputAutocompleteServerConfiguration, InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectConfiguration, InputSelectLocalConfiguration, InputSelectServerConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { ConfirmDialogData } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\n\r\nexport interface ItemFormConfiguration<Item = any, Data = any> {\r\n  title?: string;\r\n  titleModule: string;\r\n\r\n  subtitle?: ((item: Item) => string | number | null | undefined) | false;\r\n\r\n  formGroup: FormGroup;\r\n  type: 'create' | 'update';\r\n\r\n  loading?: boolean;\r\n  hiddeFields?: boolean;\r\n  fields?: FormInput[];\r\n\r\n  dataItem?: WritableSignal<Item | null>,\r\n\r\n  server: {\r\n      url: string;\r\n      queryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      updateUrl?: string;\r\n      updateQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      createUrl?: string;\r\n      createQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      itemUrl?: string;\r\n      itemQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      fetch?: {\r\n        confirmDialog?: ConfirmDialogData,\r\n        toast?: ToastForFetch,\r\n      }\r\n  }\r\n\r\n  parseDataItemBeforeSendFormFn?: (data: Data) => (Data | Promise<Data>);\r\n  afterSaveFormFn?: (data: Item) => void;\r\n\r\n  itemId?: string | number\r\n  parseItemBeforePatchFormFn?: (item: Item) => (Item | Promise<Item>);\r\n\r\n  ignoreShowError?: boolean;\r\n  interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n  httpError?: FetchErrorResponse;\r\n\r\n  disableAutoBackLocation?: boolean;\r\n\r\n  saveButton?: {\r\n      text: string;\r\n      icon?: string;\r\n      iconPosition?: 'left' | 'right';\r\n  };\r\n  \r\n  cancelButton?: {\r\n      iconPosition?: 'left' | 'right';\r\n      text: string;\r\n      icon?: string;\r\n  } | false;\r\n}\r\n\r\nexport declare type InputType = 'select' | 'select-local' | 'select-server' | 'date' | 'date-range' | 'text' | 'number' | 'textarea' | 'checkbox' | 'switch' | 'autocomplete' | 'autocomplete-local' | 'autocomplete-server';\r\n\r\nexport interface FormInput {\r\n\r\n  type: InputType | 'file';\r\n\r\n  text?: TextFormInput;\r\n\r\n  number?: NumberFormInput;\r\n\r\n  textarea?: TextareaFormInput;\r\n  \r\n  date?: DateFormInput;\r\n  \r\n  dateRange?: DateRangeFormInput;\r\n  \r\n  switch?: SwitchFormInput;\r\n  \r\n  checkbox?: CheckboxFormInput;\r\n\r\n  select?: SelectConfigurationExt;\r\n\r\n  selectLocal?: SelectLocalConfigurationExt;\r\n  \r\n  selectServer?: SelectServerConfigurationExt;\r\n\r\n  autocomplete?: AutocompleteConfigurationExt;\r\n\r\n  autocompleteServer?: AutocompleteServerConfigurationExt;\r\n\r\n  autocompleteLocal?: AutocompleteLocalConfigurationExt;\r\n\r\n  file?: FileFormInput;\r\n}\r\n\r\nexport interface TextFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface NumberFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface TextareaFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  rows?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SelectFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | boolean | null;\r\n  options: { text: string, value: any }[];\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateRangeFormInput<T = any> {\r\n  formControlNameFrom: string;\r\n  formControlNameTo: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValueFrom?: Date | string | number | null;\r\n  defaultValueTo?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SwitchFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface CheckboxFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectConfigurationExt<T = any> extends InputSelectConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectLocalConfigurationExt<T = any> extends InputSelectLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectServerConfigurationExt<T = any> extends InputSelectServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteConfigurationExt<T = any> extends InputAutocompleteConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteLocalConfigurationExt<T = any> extends InputAutocompleteLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteServerConfigurationExt<T = any> extends InputAutocompleteServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface FileFormInput<T = any> extends InputFileConfiguration {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: any;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport const textFormInput = (configuration: TextFormInput): FormInput => ({\r\n  type: 'text',\r\n  text: configuration\r\n});\r\n\r\nexport const numberFormInput = (configuration: NumberFormInput): FormInput => ({\r\n  type: 'number',\r\n  number: configuration\r\n});\r\n\r\nexport const textareaFormInput = (configuration: TextareaFormInput): FormInput => ({\r\n  type: 'textarea',\r\n  textarea: configuration\r\n});\r\n\r\nexport const selectFormInput = (configuration: SelectConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectLocalFormInput = (configuration: SelectLocalConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectServerFormInput = (configuration: SelectServerConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const dateFormInput = (configuration: DateFormInput): FormInput => ({\r\n  type: 'date',\r\n  date: configuration\r\n});\r\n\r\nexport const dateRangeFormInput = (configuration: DateRangeFormInput): FormInput => ({\r\n  type: 'date-range',\r\n  dateRange: configuration\r\n});\r\n\r\nexport const switchFormInput = (configuration: SwitchFormInput): FormInput => ({\r\n  type: 'switch',\r\n  switch: configuration\r\n});\r\n\r\nexport const checkboxFormInput = (configuration: CheckboxFormInput): FormInput => ({\r\n  type: 'checkbox',\r\n  checkbox: configuration\r\n});\r\n\r\nexport const autocompleteFormInput = (configuration: AutocompleteConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocomplete: configuration\r\n});\r\n\r\nexport const autocompleteLocalFormInput = (configuration: AutocompleteLocalConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocompleteLocal: configuration\r\n});\r\n\r\nexport const autocompleteServerFormInput = (configuration: AutocompleteServerConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-server',\r\n  autocompleteServer: configuration\r\n});\r\n\r\nexport const fileFormInput = (configuration: FileFormInput): FormInput => ({\r\n  type: 'file',\r\n  file: configuration\r\n});\r\n\r\n\r\n@Component({\r\n  selector: 'app-item-form-template',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ScrollingModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    SelectFileComponent,\r\n    PathFilesServerPipe,\r\n    ScrollingModule,\r\n    ErrorTemplateComponent,\r\n    GetKeyItemPipe,\r\n    ExecuteFunctionPipe,\r\n    GetMixedValuePipe,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n  ],\r\n  templateUrl: './item-form-template.component.html',\r\n  styleUrls: ['./item-form-template.component.css']\r\n})\r\nexport class ItemFormTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemFormConfiguration;\r\n\r\n  private fetch = inject(FetchService);\r\n  private events = inject(EventsService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  public location = inject(Location);\r\n\r\n  private abortController = new AbortController();\r\n\r\n  ngOnInit() {\r\n    if (this.configuration.type == 'update') {\r\n      this.setItemId();\r\n      if (this.configuration.dataItem && this.configuration.dataItem()) {\r\n        this.configuration.loading = false;\r\n      } else {\r\n        this.configuration.dataItem = signal(null);\r\n        this.getItem();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private setItemId() {\r\n    if (!this.configuration.itemId) {\r\n      if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n        this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getControl(name: string): FormControl {\r\n    return this.configuration.formGroup.get(name) as FormControl;\r\n  }\r\n\r\n  public async submitForm() {\r\n    try {\r\n      const form = this.configuration.formGroup;\r\n      form.markAllAsTouched();\r\n      if (form.invalid || this.configuration.loading) return;\r\n      this.configuration.loading = true;\r\n\r\n      let data = form.getRawValue();\r\n      const { parseDataItemBeforeSendFormFn } = this.configuration;\r\n      data = await parseDataItemBeforeSendFormFn?.(data) ?? data;\r\n\r\n      const requestInit: RequestInitFetch = { };\r\n      if(this.configuration.server.fetch?.confirmDialog) {\r\n        requestInit.confirmDialog = this.configuration.server.fetch.confirmDialog;\r\n      }\r\n      if(this.configuration.server.fetch?.toast) {\r\n        requestInit.toast = this.configuration.server.fetch.toast;\r\n      }\r\n\r\n      let response = null;\r\n      if (this.configuration.type === 'create') {\r\n        response = await this.fetch.post(this.configuration.server.url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_created`, response);\r\n      } else {\r\n        const url = this.configuration.server.updateUrl ?? `${this.configuration.server.url}/${this.configuration.dataItem!()?.id}`;\r\n        response = await this.fetch.put(url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_updated`, response);\r\n      }\r\n\r\n      const { afterSaveFormFn } = this.configuration;\r\n      if (afterSaveFormFn) afterSaveFormFn(response);\r\n\r\n      if (!this.configuration.disableAutoBackLocation) this.location.back();\r\n    } catch { }\r\n    this.configuration.loading = false;\r\n  }\r\n\r\n  public async getItem() {\r\n    this.configuration.dataItem = signal(null)\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { itemId, server } = this.configuration;\r\n      let queryParams:any = server.itemQueryParams ?? {};\r\n      if (queryParams instanceof Object) {\r\n        queryParams = objectToURLSearchParams(queryParams);\r\n        queryParams = queryParams.toString();\r\n      }\r\n      const url = `${server.itemUrl ?? server.url}/${itemId}?${queryParams ? queryParams : ''}`;\r\n      const requestInit: RequestInitFetch = { signal: this.abortController.signal };\r\n      let item: any = await this.fetch.get(url, requestInit);\r\n      const { parseItemBeforePatchFormFn } = this.configuration;\r\n      item = await parseItemBeforePatchFormFn?.(item) ?? item;\r\n      this.configuration.formGroup.patchValue(item);\r\n      this.configuration.dataItem.set(item);\r\n      this.configuration.hiddeFields = false;\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "cssClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 208
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number | null",
                    "optional": true,
                    "description": "",
                    "line": 207
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 206
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "InputSelectServerConfiguration"
            ]
        },
        {
            "name": "SimpleListColumn",
            "id": "interface-SimpleListColumn-edc9a2c085d669b062640c6d2a97876fe56bb34f5ae23612a12a67b2af6f44bb5d3316d9f28e50d8c8d522c0e6ce8fc3245f639ec16593bc1c325c3c460a4296",
            "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule, DatePipe, Location, NgOptimizedImage } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, ViewChild, Input, ContentChild, TemplateRef, ElementRef, Renderer2, ViewEncapsulation, signal, WritableSignal, computed, inject, Inject, Optional, InjectionToken, EventEmitter, RendererStyleFlags2 } from '@angular/core';\r\nimport { MatCheckboxChange, MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSort, MatSortModule } from '@angular/material/sort';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from 'src/app/shared/utilities/queryParams';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { IndexListPipe } from '@pipe/index-list.pipe';\r\nimport { SpinnerDefaultComponent } from '@component/spinner-default/spinner-default.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { debounceTime } from 'rxjs';\r\nimport { DiffDatePipe } from '@pipe/diff-date.pipe';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { HiddenOptionButtonRowPipe } from '@pipe/hidden-option-button-row.pipe';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { GetUserByIdPipe } from '@pipe/get-user-by-id.pipe';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ListFormatPipe } from '@pipe/list-format.pipe';\r\nimport { LoadImagePrivateDirective } from '@directive/load-image-private.directive';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MatPseudoCheckboxModule } from '@angular/material/core';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { EventGlobalSearch, NAME_EVENT_GLOBAL_SEARCH } from 'src/app/sidenav/sidenav/sidenav.component';\r\nimport { ExecuteFunctionListPipe } from './execute-function-list.pipe';\r\nimport { FormInput, dateRangeFormInput, switchFormInput } from '@component/item-form-template/item-form-template.component';\r\nimport { RenameTitleColumnListPipe } from './rename-title-column-list.pipe';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DateFnsAdapter } from '@angular/material-date-fns-adapter';\r\nimport { MyDateAdapter } from '@utility/myDateAdapter';\r\nimport { MY_DATE_FORMATS } from '@utility/myDateFormat';\r\n\r\nexport const DATA_TYPE_LIST = new InjectionToken<'array' | 'paginator'>('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST');\r\n\r\nexport interface ItemListConfiguration<T = any> {\r\n  readonly dataType?: 'array' | 'paginator';\r\n  readonly keyGetItemsPaginator?: string;\r\n  readonly keyGetTotalItemsPaginator?: string;\r\n\r\n  readonly disableFiltersInQueryParams?: boolean;\r\n\r\n  title: string | null;\r\n\r\n  parseDataFn?: (data: T[]) => T[] | Promise<T[]>;\r\n  data?: WritableSignal<T[]>;\r\n  updateListEvent?: EventEmitter<void>;\r\n\r\n  defaultOrder?: {\r\n    key: string,\r\n    order: 'ASC' | 'DESC'\r\n  };\r\n\r\n  backButton?: boolean;\r\n\r\n  updateButton?: boolean;\r\n\r\n  server: {\r\n    readonly url: string,\r\n    queryParams?: { [key: string]: any } | string;\r\n  }\r\n\r\n  createButton?: {\r\n    text?: string,\r\n    routerLink: RouterLinkCreateButton\r\n  } | false;\r\n\r\n  filters?: FormInput[] | false;\r\n\r\n  rows?: {\r\n    selectable?: {\r\n      actions: SelectableActionButton<T>[];\r\n    };\r\n    index?: false | ({ title: string });\r\n    cssClass?: string | ((item: T) => string);\r\n    actions?: ActionButton<T>[];\r\n    options?: ActionButton<T>[] | false;\r\n  },\r\n\r\n  columns: WritableSignal<ListColumn<T>[]>;\r\n}\r\n\r\nexport interface RouterLinkCreateButton {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any;\r\n}\r\nexport interface RouterLinkItem<T> {\r\n  url: ((item: T, index: number) => string) | string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: ((item: T, index: number) => (string | { [key: string]: any } | any[] | number | null)) | string | { [key: string]: any } | any[] | number | null;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\ndeclare type ActionButtonActionsType = 'clickEvent' | 'routerLink';\r\ninterface ActionButton<T> {\r\n  type: 'clickEvent' | 'routerLink';\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((item: T, index: number) => boolean);\r\n  disabled?: boolean | ((item: T, index: number) => boolean);\r\n  cssClass?: string | ((item: T, index: number) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((item: T, index: number) => ({ [key: string]: any }));\r\n  fn?: (item: T, index: number, fns: {\r\n    deleteItemFn: (id: number | string) => Promise<void>,\r\n    restoreItemFn: (id: number | string) => Promise<void>,\r\n    updateChangesItemFn: (index: number, item: T) => void,\r\n  }) => void;\r\n  routerLink?: RouterLinkItem<T>;\r\n}\r\ninterface ClickEventActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'fn'>> & ActionButton<T>, 'type' | 'routerLink'> { }\r\nexport const clickEventActionButton = <T = any>(config: ClickEventActionButton<T>): ActionButton<T> => ({ type: 'clickEvent', ...config });\r\ninterface RouterLinkActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'routerLink'>> & ActionButton<T>, 'type' | 'clickEvent'> { }\r\nexport const routerLinkActionButton = <T = any>(config: RouterLinkActionButton<T>): ActionButton<T> => ({ type: 'routerLink', ...config });\r\ninterface SelectableActionButton<T> {\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((selectedItems: T[]) => boolean);\r\n  disabled?: boolean | ((selectedItems: T[]) => boolean);\r\n  cssClass?: string | ((selectedItems: T[]) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((selectedItems: T[]) => ({ [key: string]: any }));\r\n  fn: (selectedItems: T[]) => void;\r\n}\r\nexport const selectableActionButton = <T = any>(config: SelectableActionButton<T>): SelectableActionButton<T> => ({ ...config });\r\n\r\nexport interface ListItemExtended {\r\n  __selected__?: boolean;\r\n  __loading_status__?: boolean;\r\n}\r\n\r\nexport type TypeValueKeyItem = 'text' | 'diff-date' | 'date' | 'number' | 'email' | 'phone' | 'user' | 'uppercase' | 'lowercase' | 'titlecase' | 'first-letter-uppercase' | 'list-format' | 'currency';\r\n\r\nexport interface ListColumn<T> {\r\n  /**\r\n   * @description\r\n   * Agrega clases css al contenedor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   */\r\n  align?: 'left' | 'center' | 'right';\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor adicional de la celda de la columna\r\n   * @example\r\n   * clickEventAdditionalValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventAdditionalValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor de la celda de la columna\r\n   * @example\r\n   * clickEventValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css a la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClass: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClass?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor adicional de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayAdditionalValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo fecha (type: 'date')\r\n   * @example\r\n   * ...\r\n   * dateFormat: 'yyyy-MM-dd'\r\n   * ...\r\n   * dateFormat: 'dd/MM/yyyy' // Por defecto\r\n   * ...\r\n   */\r\n  dateFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor adicional a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.name\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayAdditionalValueFn?: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayValueFn: (item) => item.name\r\n   * ...\r\n   * displayValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * If you want to display a value in the column that is not in the item, you can use this function\r\n   * @example\r\n   * ...\r\n   * gridColumn: '1fr'\r\n   * ...\r\n   * gridColumn: '200px'\r\n   * ...\r\n   * gridColumn: 'max-content'\r\n   * ...\r\n   * gridColumn: 'fit-content(200px)'\r\n   * ...\r\n   */\r\n  gridColumn?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones > Columnas\r\n   * @example\r\n   * ...\r\n   * hidden: true\r\n   * ...\r\n   * hidden: false // Por defecto\r\n   * ...\r\n   */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo número (type: 'number')\r\n   * @example\r\n   * ...\r\n   * numberFormat: '2.2-2'\r\n   * ...\r\n   * numberFormat: '0.2-2' // Por defecto\r\n   * ...\r\n   */\r\n  numberFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor adicional de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkAdditionalValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Sortable column espicif key in object configuration\r\n   * @example\r\n   * sort: { key: 'name' }\r\n   */\r\n  sort?: { key: string };\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display additional value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: { color: 'green' }\r\n   * ...\r\n   * @param item\r\n   * @returns string | number | null | undefined | string[] | number[]\r\n   */\r\n  cssStyleDisplayAdditionalValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayValue: { color: 'green' }\r\n   * ...\r\n   */\r\n  cssStyleDisplayValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Title column\r\n   * @example\r\n   * title: 'Nombre'\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * @description\r\n   * To display a tooltip in the column on hover\r\n   * @example\r\n   * tooltip: 'Ver detalle'\r\n   */\r\n  tooltip?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * For show type value in cell\r\n   * @example\r\n   * ...\r\n   * type: 'number',\r\n   * displayValueFn: (item) => item.price, // output: 2,000.00\r\n   * ...\r\n   * type: 'date',\r\n   * displayValueFn: (item) => item.created_at, // output 12/12/2020\r\n   * ...\r\n   */\r\n  type?: TypeValueKeyItem | 'image' | 'html';\r\n\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface SimpleListColumn<T> extends Omit<ListColumn<T>, 'type' | 'displayAdditionalValueFn' | 'displayValueFn' | 'dateFormat' | 'numberFormat' | 'image'> { }\r\ninterface SimpleListColumn2<T> extends Omit<SimpleListColumn<T>, 'cssStyleDisplayAdditionalValue' | 'routerLinkAdditionalValue' | 'cssClassDisplayAdditionalValue' | 'clickEventAdditionalValue'> { }\r\ninterface ListFormatListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string[];\r\n  displayValueFn: (item: T, index: number) => string[];\r\n}\r\n\r\ninterface NumberListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => number | null | undefined;\r\n  numberFormat?: string;\r\n}\r\n\r\ninterface StringListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => string | number | null | undefined;\r\n}\r\n\r\ninterface DateListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined;\r\n  dateFormat?: string;\r\n}\r\n\r\ninterface ImageListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface HtmlListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n}\r\n\r\nexport const numberColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'number', ...config });\r\n\r\nexport const listFormatColumn = <T = any>(config: ListFormatListColumn<T>): ListColumn<T> => ({ type: 'list-format', ...config });\r\n\r\nexport const dateColumn = <T = any>(config: DateListColumn<T>): ListColumn<T> => ({ type: 'date', ...config });\r\n\r\nexport const diffDateColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'diff-date', ...config });\r\n\r\nexport const htmlColumn = <T = any>(config: HtmlListColumn<T>): ListColumn<T> => ({ type: 'html', ...config });\r\n\r\nexport const textColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'text', ...config });\r\n\r\nexport const uppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'uppercase', ...config });\r\n\r\nexport const lowercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'lowercase', ...config });\r\n\r\nexport const titlecaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'titlecase', ...config });\r\n\r\nexport const firstLetterUppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'first-letter-uppercase', ...config });\r\n\r\nexport const phoneColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'phone', ...config });\r\n\r\nexport const emailColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'email', ...config });\r\n\r\nexport const userColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'user', ...config });\r\n\r\nexport const imageColumn = <T = any>(config: ImageListColumn<T>): ListColumn<T> => ({ type: 'image', ...config });\r\n\r\n\r\nexport const itemNameAndDescriptionColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  title: 'Nombre',\r\n  gridColumn: '1fr',\r\n  sort: { key: 'name' },\r\n  routerLinkValue: { url: (item: any) => `../detail/${item.id}` },\r\n  displayValueFn: (item: any) => item.name,\r\n  displayAdditionalValueFn: (item: any) => item.description,\r\n  ...config,\r\n});\r\nexport const itemStatusColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'cssClassDisplayValue' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'first-letter-uppercase',\r\n  title: 'Estado',\r\n  sort: { key: 'status' },\r\n  align: 'center',\r\n  displayValueFn: (item: any) => item.status,\r\n  cssClassDisplayValue: (item: any) => `status-chip ${item.status}`,\r\n  ...config,\r\n});\r\nexport const itemCreatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Creado',\r\n  sort: { key: 'created_at' },\r\n  displayValueFn: (item: any) => item.created_at,\r\n  ...config,\r\n});\r\nexport const itemUpdatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Actualizado',\r\n  sort: { key: 'updated_at' },\r\n  hidden: true,\r\n  displayValueFn: (item: any) => item.updated_at,\r\n  ...config,\r\n});\r\nexport const simpleListColumns = (): ListColumn<any>[] => ([\r\n  itemNameAndDescriptionColumn(),\r\n  itemUpdatedAtColumn(),\r\n  itemCreatedAtColumn(),\r\n  itemStatusColumn(),\r\n]);\r\n\r\n\r\nexport const defaultListFilterInputs = (): FormInput[] => [\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de creación',\r\n    formControlNameFrom: 'created_at_from',\r\n    formControlNameTo: 'created_at_to',\r\n  }),\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de actualización',\r\n    formControlNameFrom: 'updated_at_from',\r\n    formControlNameTo: 'updated_at_to',\r\n  }),\r\n  switchFormInput({\r\n    textLabel: 'Registros inactivos',\r\n    formControlName: 'inactive',\r\n  }),\r\n];\r\n\r\nexport const deleteItemActionButton = () => clickEventActionButton({\r\n  icon: 'delete',\r\n  text: 'Eliminar',\r\n  fn: async ({ id }, _, { deleteItemFn }) => deleteItemFn(id),\r\n  hidden: (item) => item.deleted_at,\r\n});\r\n\r\nexport const restoreItemActionButton = () => clickEventActionButton({\r\n  icon: 'restore',\r\n  text: 'Restaurar',\r\n  fn: async ({ id }, _, { restoreItemFn }) => restoreItemFn(id),\r\n  hidden: (item) => !item.deleted_at,\r\n})\r\n\r\nexport const viewItemActionButton = () => routerLinkActionButton({\r\n  icon: 'visibility',\r\n  text: 'Ver',\r\n  routerLink: { url: (item) => `../view/${item.id}` },\r\n});\r\n\r\nexport const editItemActionButton = () => routerLinkActionButton({\r\n  icon: 'edit',\r\n  text: 'Editar',\r\n  routerLink: { url: (item) => `../edit/${item.id}` },\r\n})\r\n\r\n@Component({\r\n  selector: 'app-item-list-template',\r\n  standalone: true,\r\n  templateUrl: './item-list-template.component.html',\r\n  styleUrl: './item-list-template.component.css',\r\n  imports: [\r\n    CommonModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatSortModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatTooltipModule,\r\n    MatPseudoCheckboxModule,\r\n    IndexListPipe,\r\n    GetKeyItemPipe,\r\n    RouterLink,\r\n    DiffDatePipe,\r\n    HiddenOptionButtonRowPipe,\r\n    NgOptimizedImage,\r\n    ScrollingModule,\r\n    GetUserByIdPipe,\r\n    PathFilesServerPipe,\r\n    ListFormatPipe,\r\n    LoadImagePrivateDirective,\r\n    FirstLetterUppercasePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n    ExecuteFunctionListPipe,\r\n    RenameTitleColumnListPipe,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    FirstLetterUppercasePipe,\r\n    GetKeyItemPipe,\r\n    RenameTitleColumnListPipe,\r\n    BrowserAnimationsModule,\r\n    DateFnsAdapter,\r\n  ],\r\n})\r\nexport class ItemListTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemListConfiguration;\r\n\r\n  // @ContentChild('headers') headers!: TemplateRef<any>;\r\n  @ContentChild('rowList') rowList!: TemplateRef<any>;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  @ViewChild('divListItems', { static: true }) private divList!: ElementRef;\r\n\r\n  private _dataTypeList: 'array' | 'paginator' = 'array';\r\n  private _keyForGetItems: string;\r\n  private _keyForGetTotalItems: string;\r\n\r\n  private fetch = inject(FetchService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  private renderer = inject(Renderer2);\r\n  private eventsService = inject(EventsService);\r\n  public location = inject(Location);\r\n\r\n  // private datePipe = inject(DatePipe);\r\n  public firstLetterUppercasePipe = inject(FirstLetterUppercasePipe);\r\n  public getKeyItemPipe = inject(GetKeyItemPipe);\r\n  public renameTitleColumnListPipe = inject(RenameTitleColumnListPipe);\r\n\r\n  public lengthData = computed(() => this.data().length)\r\n\r\n  public searchCtrl: FormControl = new FormControl('');\r\n  public formFilters: FormGroup<any> | null = null;\r\n\r\n  public loading = signal(true);\r\n  public font: WritableSignal<'small' | 'medium' | 'large'> = signal('medium');\r\n  public headerListStyle: WritableSignal<'simple' | 'color'> = signal('simple');\r\n\r\n  private abortController = new AbortController();\r\n\r\n  private unsubscribe$: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(DATA_TYPE_LIST) _dataTypeList: 'array' | 'paginator',\r\n    @Optional() @Inject(KEY_GET_ITEMS_PAGINATOR_LIST) _keyForGetItems: string,\r\n    @Optional() @Inject(KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST) _keyForGetTotalItems: string\r\n  ) {\r\n    this._dataTypeList = _dataTypeList ?? 'paginator';\r\n    this._keyForGetItems = _keyForGetItems || 'data';\r\n    this._keyForGetTotalItems = _keyForGetTotalItems || 'total';\r\n  }\r\n\r\n  get data(): WritableSignal<any[]> {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  get defaultOrder(): string {\r\n    return this.configuration.defaultOrder ? `${this.configuration.defaultOrder?.key}|${this.configuration.defaultOrder?.order}` : 'id|DESC';\r\n  }\r\n\r\n  get dataTypeList(): 'array' | 'paginator' {\r\n    return this.configuration.dataType ?? this._dataTypeList;\r\n  }\r\n\r\n  get keyForGetItems(): string {\r\n    return this.configuration.keyGetItemsPaginator ?? this._keyForGetItems;\r\n  }\r\n\r\n  get keyForGetTotalItems(): string {\r\n    return this.configuration.keyGetTotalItemsPaginator ?? this._keyForGetTotalItems;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.configuration.data = signal([]);\r\n    this.configuration.updateListEvent = new EventEmitter();\r\n    if (this.configuration.rows?.options != false && !this.configuration.rows?.options?.length) {\r\n      this.configuration.rows = {\r\n        ...(this.configuration.rows ?? {}),\r\n        options: [\r\n          viewItemActionButton(),\r\n          editItemActionButton(),\r\n          deleteItemActionButton(),\r\n          restoreItemActionButton(),\r\n        ]\r\n      };\r\n    }\r\n    this.generateFormControlsFromFilterInputs();\r\n    this.generateColumnsCss();\r\n\r\n    this.eventsService\r\n      .eventsFiltered<EventGlobalSearch>([NAME_EVENT_GLOBAL_SEARCH])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(({ data }: any) => {\r\n        const type = data.type;\r\n        if (type == 'enter') this.searchCtrl.setValue(data.value);\r\n      })\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.paginator.pageIndex = 0;\r\n    this.paginator.pageSize = 20;\r\n\r\n    this.verifyQueryParams();\r\n\r\n    this.activatedRoute.queryParams.subscribe(() => this.callGetData());\r\n\r\n    this.sort.sortChange.subscribe(({ active, direction }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (this.defaultOrder == `${active}|${direction}` || !active || !direction) queryParams['order'] = null;\r\n      else queryParams['order'] = `${active}|${direction}`;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.searchCtrl.valueChanges.pipe(debounceTime(250)).subscribe((value: string) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (value) queryParams['search'] = value;\r\n      else queryParams['search'] = null;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.paginator.page.subscribe(({ pageIndex, pageSize }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (pageIndex == 0 || (queryParams['page'] ?? null) == pageIndex + 1) queryParams['page'] = null;\r\n      else queryParams['page'] = pageIndex + 1;\r\n      if (pageSize == 20 || (queryParams['per_page'] ?? null) == pageSize) queryParams['per_page'] = null;\r\n      else queryParams['per_page'] = pageSize;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.eventsService\r\n      .eventsFiltered([\r\n        `${this.configuration.server.url}_created`,\r\n        `${this.configuration.server.url}_updated`\r\n      ])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(() => this.callGetData());\r\n\r\n    // this.configuration.updateListEvent!.subscribe(() => this.callGetData({}));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n    if (this.abortController) this.abortController.abort();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private async generateColumnsCss(): Promise<void> {\r\n    const grid_cols: string[] = [];\r\n    const grid_areas: string[] = []\r\n    if (this.configuration.rows?.selectable) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('selected');\r\n    }\r\n    if (this.configuration.rows?.index != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('index');\r\n    }\r\n    for await (const column of this.configuration.columns()) {\r\n      if (!column.hidden) {\r\n        grid_cols.push(column.gridColumn ?? 'auto');\r\n        grid_areas.push(this.renameTitleColumnListPipe.transform(column.title));\r\n      }\r\n    }\r\n    if (this.configuration.rows?.actions) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('actions');\r\n    }\r\n    if (this.configuration.rows?.options != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('options');\r\n    }\r\n    this.renderer.setStyle(this.divList.nativeElement, 'grid-template-columns', grid_cols.join(' '));\r\n    this.renderer.setStyle(this.divList.nativeElement, '--items-list-grid-template-areas', `\"${grid_areas.join(' ')}\"`, RendererStyleFlags2.DashCase);\r\n    grid_areas.forEach((area, index) => this.renderer.setStyle(this.divList.nativeElement, `--items-list-grid-area-${index + 1}`, area, RendererStyleFlags2.DashCase));\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private getQueryParams(): { [key: string]: any } {\r\n    return !this.configuration.disableFiltersInQueryParams ? JSON.parse(JSON.stringify(this.activatedRoute.snapshot.queryParams)) : {\r\n      ...this.formFilters?.value ?? {},\r\n      page: this.paginator.pageIndex + 1,\r\n      per_page: this.paginator.pageSize,\r\n      order: this.sort.active ? `${this.sort.active}|${this.sort.direction}` : null,\r\n      search: this.searchCtrl.value ? this.searchCtrl.value : null,\r\n    }\r\n  }\r\n\r\n  private navigateOrCallGetData(params: any): void {\r\n    if (this.configuration.disableFiltersInQueryParams) this.callGetData(params);\r\n    else this.router.navigate([], { queryParams: params });\r\n  }\r\n\r\n  private verifyQueryParams(): void {\r\n    const queryParams = {} as any;\r\n    const { page, per_page, order, search, ...filters } = queryParams;\r\n    this.paginator.pageIndex = Number(page ?? 1) - 1;\r\n    this.paginator.pageSize = Number(per_page) ?? 20;\r\n    this.sort.active = order?.split('|')[0] ?? '';\r\n    this.sort.direction = order?.split('|')[1] == 'asc' ? 'asc' : 'desc';\r\n    this.sort.sortChange.emit();\r\n    this.searchCtrl.setValue(search ?? null, { emitEvent: false });\r\n  }\r\n\r\n  public callGetData(queryParams: any = {}): void {\r\n    const params = objectToURLSearchParams(queryParams);\r\n    if (!params.has('page')) params.set('page', String(this.paginator.pageIndex + 1));\r\n    if (!params.has('per_page')) params.set('per_page', String(this.paginator.pageSize));\r\n    if (!params.has('order')) params.set('order', this.defaultOrder);\r\n    this.getData(params);\r\n  }\r\n\r\n  private async getData(searchParams: URLSearchParams = new URLSearchParams()): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const serverUrl = this.configuration.server.url;\r\n    let queryParams = this.configuration.server.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const url = `${serverUrl}?${searchParams.toString()}&${queryParams ?? ''}`;\r\n    const config = { signal: this.abortController.signal };\r\n    try {\r\n      let items = [];\r\n      let totalItems = 0;\r\n      if (this.dataTypeList == 'array') {\r\n        items = await this.fetch.get<any[]>(url, config);\r\n        totalItems = items.length;\r\n      } else {\r\n        const paginatorData = await this.fetch.get<PaginatorData<any>>(url, config);\r\n        items = this.getKeyItemPipe.transform(paginatorData, this.keyForGetItems);\r\n        totalItems = this.getKeyItemPipe.transform(paginatorData, this.keyForGetTotalItems);\r\n      }\r\n      const { parseDataFn } = this.configuration;\r\n      const parseData = await parseDataFn?.(items) ?? items;\r\n      this.paginator.length = totalItems;\r\n      this.data.set(parseData);\r\n      this.loading.set(false);\r\n      this.checkSelectedItems();\r\n    } catch (err: any) {\r\n      if (err.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n  }\r\n\r\n  public hiddenToggleColumn($event: MatCheckboxChange, index: number): void {\r\n    this.configuration.columns.update((columns) => {\r\n      columns[index]['hidden'] = !$event.checked\r\n      return columns;\r\n    })\r\n    this.generateColumnsCss();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public navigateCreateView(): void {\r\n    this.router.navigate(['../create'], { relativeTo: this.activatedRoute });\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public allSelectedItems = signal(false);\r\n  public someSelectedItems = signal(false);\r\n  public selectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__));\r\n  public lengthSelectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__).length);\r\n\r\n  public selectedItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.toSpliced(index, 1, { ...data[index], __selected__: status }));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public selectedAllItems(status: boolean): void {\r\n    this.data.update((data) => data.map((e) => ({ ...e, __selected__: status })));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public someSelected(): boolean {\r\n    return this.data().length > 0 && this.data().some((e: ListItemExtended) => e.__selected__) && !this.allSelectedItems();\r\n  }\r\n\r\n  private checkSelectedItems(): void {\r\n    this.allSelectedItems.set(this.data().length > 0 && this.data().every((e: ListItemExtended) => e.__selected__));\r\n    this.someSelectedItems.set(this.someSelected());\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private generateFormControlsFromFilterInputs(): void {\r\n    if (this.configuration.filters == false) return;\r\n    if (!this.configuration.filters?.length) this.configuration.filters = defaultListFilterInputs();\r\n    const formFilters = new FormGroup({});\r\n    this.configuration.filters?.forEach((filter) => {\r\n      if (filter.text) {\r\n        formFilters.setControl(filter.text.formControlName, new FormControl(filter.text.defaultValue));\r\n      } else if (filter.textarea) {\r\n        formFilters.setControl(filter.textarea.formControlName, new FormControl(filter.textarea.defaultValue));\r\n      } else if (filter.select) {\r\n        formFilters.setControl(filter.select.formControlName, new FormControl(filter.select.defaultValue));\r\n      } else if (filter.number) {\r\n        formFilters.setControl(filter.number.formControlName, new FormControl(filter.number.defaultValue));\r\n      } else if (filter.date) {\r\n        formFilters.setControl(filter.date.formControlName, new FormControl(filter.date.defaultValue));\r\n      } else if (filter.dateRange) {\r\n        formFilters.setControl(filter.dateRange.formControlNameFrom, new FormControl(filter.dateRange.defaultValueFrom));\r\n        formFilters.setControl(filter.dateRange.formControlNameTo, new FormControl(filter.dateRange.defaultValueTo));\r\n      } else if (filter.autocompleteLocal) {\r\n        formFilters.setControl(filter.autocompleteLocal.formControlName, new FormControl(filter.autocompleteLocal.defaultValue));\r\n      } else if (filter.autocompleteServer) {\r\n        formFilters.setControl(filter.autocompleteServer.formControlName, new FormControl(filter.autocompleteServer.defaultValue));\r\n      } else if (filter.checkbox) {\r\n        formFilters.setControl(filter.checkbox.formControlName, new FormControl(filter.checkbox.defaultValue));\r\n      } else if (filter.switch) {\r\n        formFilters.setControl(filter.switch.formControlName, new FormControl(filter.switch.defaultValue));\r\n      }\r\n    });\r\n    this.formFilters = formFilters;\r\n  }\r\n\r\n  public getControlFormFilter(name: string): FormControl {\r\n    return this.formFilters!.get(name) as FormControl;\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private updateLoadingStatusItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.map((item: ListItemExtended, i) => {\r\n      if (i == index) item.__loading_status__ = status;\r\n      return item;\r\n    }));\r\n  }\r\n\r\n  public deleteItem = async (id: number | string) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}`;\r\n    try {\r\n      await this.fetch.delete(url);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public restoreItem = async (id: string | number) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}/restore`;\r\n    const config = { afterAlert: { description: 'Restaurando ítem de la lista' } }\r\n    try {\r\n      await this.fetch.put(url, config);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public updateChangesItem = (index: number, item: any) => {\r\n    this.configuration.data!.update(items => items.toSpliced(index, 1, item));\r\n  }\r\n\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "Omit"
            ]
        },
        {
            "name": "SimpleListColumn2",
            "id": "interface-SimpleListColumn2-edc9a2c085d669b062640c6d2a97876fe56bb34f5ae23612a12a67b2af6f44bb5d3316d9f28e50d8c8d522c0e6ce8fc3245f639ec16593bc1c325c3c460a4296",
            "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule, DatePipe, Location, NgOptimizedImage } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, ViewChild, Input, ContentChild, TemplateRef, ElementRef, Renderer2, ViewEncapsulation, signal, WritableSignal, computed, inject, Inject, Optional, InjectionToken, EventEmitter, RendererStyleFlags2 } from '@angular/core';\r\nimport { MatCheckboxChange, MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSort, MatSortModule } from '@angular/material/sort';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from 'src/app/shared/utilities/queryParams';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { IndexListPipe } from '@pipe/index-list.pipe';\r\nimport { SpinnerDefaultComponent } from '@component/spinner-default/spinner-default.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { debounceTime } from 'rxjs';\r\nimport { DiffDatePipe } from '@pipe/diff-date.pipe';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { HiddenOptionButtonRowPipe } from '@pipe/hidden-option-button-row.pipe';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { GetUserByIdPipe } from '@pipe/get-user-by-id.pipe';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ListFormatPipe } from '@pipe/list-format.pipe';\r\nimport { LoadImagePrivateDirective } from '@directive/load-image-private.directive';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MatPseudoCheckboxModule } from '@angular/material/core';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { EventGlobalSearch, NAME_EVENT_GLOBAL_SEARCH } from 'src/app/sidenav/sidenav/sidenav.component';\r\nimport { ExecuteFunctionListPipe } from './execute-function-list.pipe';\r\nimport { FormInput, dateRangeFormInput, switchFormInput } from '@component/item-form-template/item-form-template.component';\r\nimport { RenameTitleColumnListPipe } from './rename-title-column-list.pipe';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DateFnsAdapter } from '@angular/material-date-fns-adapter';\r\nimport { MyDateAdapter } from '@utility/myDateAdapter';\r\nimport { MY_DATE_FORMATS } from '@utility/myDateFormat';\r\n\r\nexport const DATA_TYPE_LIST = new InjectionToken<'array' | 'paginator'>('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST');\r\n\r\nexport interface ItemListConfiguration<T = any> {\r\n  readonly dataType?: 'array' | 'paginator';\r\n  readonly keyGetItemsPaginator?: string;\r\n  readonly keyGetTotalItemsPaginator?: string;\r\n\r\n  readonly disableFiltersInQueryParams?: boolean;\r\n\r\n  title: string | null;\r\n\r\n  parseDataFn?: (data: T[]) => T[] | Promise<T[]>;\r\n  data?: WritableSignal<T[]>;\r\n  updateListEvent?: EventEmitter<void>;\r\n\r\n  defaultOrder?: {\r\n    key: string,\r\n    order: 'ASC' | 'DESC'\r\n  };\r\n\r\n  backButton?: boolean;\r\n\r\n  updateButton?: boolean;\r\n\r\n  server: {\r\n    readonly url: string,\r\n    queryParams?: { [key: string]: any } | string;\r\n  }\r\n\r\n  createButton?: {\r\n    text?: string,\r\n    routerLink: RouterLinkCreateButton\r\n  } | false;\r\n\r\n  filters?: FormInput[] | false;\r\n\r\n  rows?: {\r\n    selectable?: {\r\n      actions: SelectableActionButton<T>[];\r\n    };\r\n    index?: false | ({ title: string });\r\n    cssClass?: string | ((item: T) => string);\r\n    actions?: ActionButton<T>[];\r\n    options?: ActionButton<T>[] | false;\r\n  },\r\n\r\n  columns: WritableSignal<ListColumn<T>[]>;\r\n}\r\n\r\nexport interface RouterLinkCreateButton {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any;\r\n}\r\nexport interface RouterLinkItem<T> {\r\n  url: ((item: T, index: number) => string) | string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: ((item: T, index: number) => (string | { [key: string]: any } | any[] | number | null)) | string | { [key: string]: any } | any[] | number | null;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\ndeclare type ActionButtonActionsType = 'clickEvent' | 'routerLink';\r\ninterface ActionButton<T> {\r\n  type: 'clickEvent' | 'routerLink';\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((item: T, index: number) => boolean);\r\n  disabled?: boolean | ((item: T, index: number) => boolean);\r\n  cssClass?: string | ((item: T, index: number) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((item: T, index: number) => ({ [key: string]: any }));\r\n  fn?: (item: T, index: number, fns: {\r\n    deleteItemFn: (id: number | string) => Promise<void>,\r\n    restoreItemFn: (id: number | string) => Promise<void>,\r\n    updateChangesItemFn: (index: number, item: T) => void,\r\n  }) => void;\r\n  routerLink?: RouterLinkItem<T>;\r\n}\r\ninterface ClickEventActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'fn'>> & ActionButton<T>, 'type' | 'routerLink'> { }\r\nexport const clickEventActionButton = <T = any>(config: ClickEventActionButton<T>): ActionButton<T> => ({ type: 'clickEvent', ...config });\r\ninterface RouterLinkActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'routerLink'>> & ActionButton<T>, 'type' | 'clickEvent'> { }\r\nexport const routerLinkActionButton = <T = any>(config: RouterLinkActionButton<T>): ActionButton<T> => ({ type: 'routerLink', ...config });\r\ninterface SelectableActionButton<T> {\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((selectedItems: T[]) => boolean);\r\n  disabled?: boolean | ((selectedItems: T[]) => boolean);\r\n  cssClass?: string | ((selectedItems: T[]) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((selectedItems: T[]) => ({ [key: string]: any }));\r\n  fn: (selectedItems: T[]) => void;\r\n}\r\nexport const selectableActionButton = <T = any>(config: SelectableActionButton<T>): SelectableActionButton<T> => ({ ...config });\r\n\r\nexport interface ListItemExtended {\r\n  __selected__?: boolean;\r\n  __loading_status__?: boolean;\r\n}\r\n\r\nexport type TypeValueKeyItem = 'text' | 'diff-date' | 'date' | 'number' | 'email' | 'phone' | 'user' | 'uppercase' | 'lowercase' | 'titlecase' | 'first-letter-uppercase' | 'list-format' | 'currency';\r\n\r\nexport interface ListColumn<T> {\r\n  /**\r\n   * @description\r\n   * Agrega clases css al contenedor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   */\r\n  align?: 'left' | 'center' | 'right';\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor adicional de la celda de la columna\r\n   * @example\r\n   * clickEventAdditionalValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventAdditionalValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor de la celda de la columna\r\n   * @example\r\n   * clickEventValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css a la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClass: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClass?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor adicional de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayAdditionalValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo fecha (type: 'date')\r\n   * @example\r\n   * ...\r\n   * dateFormat: 'yyyy-MM-dd'\r\n   * ...\r\n   * dateFormat: 'dd/MM/yyyy' // Por defecto\r\n   * ...\r\n   */\r\n  dateFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor adicional a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.name\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayAdditionalValueFn?: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayValueFn: (item) => item.name\r\n   * ...\r\n   * displayValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * If you want to display a value in the column that is not in the item, you can use this function\r\n   * @example\r\n   * ...\r\n   * gridColumn: '1fr'\r\n   * ...\r\n   * gridColumn: '200px'\r\n   * ...\r\n   * gridColumn: 'max-content'\r\n   * ...\r\n   * gridColumn: 'fit-content(200px)'\r\n   * ...\r\n   */\r\n  gridColumn?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones > Columnas\r\n   * @example\r\n   * ...\r\n   * hidden: true\r\n   * ...\r\n   * hidden: false // Por defecto\r\n   * ...\r\n   */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo número (type: 'number')\r\n   * @example\r\n   * ...\r\n   * numberFormat: '2.2-2'\r\n   * ...\r\n   * numberFormat: '0.2-2' // Por defecto\r\n   * ...\r\n   */\r\n  numberFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor adicional de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkAdditionalValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Sortable column espicif key in object configuration\r\n   * @example\r\n   * sort: { key: 'name' }\r\n   */\r\n  sort?: { key: string };\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display additional value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: { color: 'green' }\r\n   * ...\r\n   * @param item\r\n   * @returns string | number | null | undefined | string[] | number[]\r\n   */\r\n  cssStyleDisplayAdditionalValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayValue: { color: 'green' }\r\n   * ...\r\n   */\r\n  cssStyleDisplayValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Title column\r\n   * @example\r\n   * title: 'Nombre'\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * @description\r\n   * To display a tooltip in the column on hover\r\n   * @example\r\n   * tooltip: 'Ver detalle'\r\n   */\r\n  tooltip?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * For show type value in cell\r\n   * @example\r\n   * ...\r\n   * type: 'number',\r\n   * displayValueFn: (item) => item.price, // output: 2,000.00\r\n   * ...\r\n   * type: 'date',\r\n   * displayValueFn: (item) => item.created_at, // output 12/12/2020\r\n   * ...\r\n   */\r\n  type?: TypeValueKeyItem | 'image' | 'html';\r\n\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface SimpleListColumn<T> extends Omit<ListColumn<T>, 'type' | 'displayAdditionalValueFn' | 'displayValueFn' | 'dateFormat' | 'numberFormat' | 'image'> { }\r\ninterface SimpleListColumn2<T> extends Omit<SimpleListColumn<T>, 'cssStyleDisplayAdditionalValue' | 'routerLinkAdditionalValue' | 'cssClassDisplayAdditionalValue' | 'clickEventAdditionalValue'> { }\r\ninterface ListFormatListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string[];\r\n  displayValueFn: (item: T, index: number) => string[];\r\n}\r\n\r\ninterface NumberListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => number | null | undefined;\r\n  numberFormat?: string;\r\n}\r\n\r\ninterface StringListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => string | number | null | undefined;\r\n}\r\n\r\ninterface DateListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined;\r\n  dateFormat?: string;\r\n}\r\n\r\ninterface ImageListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface HtmlListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n}\r\n\r\nexport const numberColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'number', ...config });\r\n\r\nexport const listFormatColumn = <T = any>(config: ListFormatListColumn<T>): ListColumn<T> => ({ type: 'list-format', ...config });\r\n\r\nexport const dateColumn = <T = any>(config: DateListColumn<T>): ListColumn<T> => ({ type: 'date', ...config });\r\n\r\nexport const diffDateColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'diff-date', ...config });\r\n\r\nexport const htmlColumn = <T = any>(config: HtmlListColumn<T>): ListColumn<T> => ({ type: 'html', ...config });\r\n\r\nexport const textColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'text', ...config });\r\n\r\nexport const uppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'uppercase', ...config });\r\n\r\nexport const lowercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'lowercase', ...config });\r\n\r\nexport const titlecaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'titlecase', ...config });\r\n\r\nexport const firstLetterUppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'first-letter-uppercase', ...config });\r\n\r\nexport const phoneColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'phone', ...config });\r\n\r\nexport const emailColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'email', ...config });\r\n\r\nexport const userColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'user', ...config });\r\n\r\nexport const imageColumn = <T = any>(config: ImageListColumn<T>): ListColumn<T> => ({ type: 'image', ...config });\r\n\r\n\r\nexport const itemNameAndDescriptionColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  title: 'Nombre',\r\n  gridColumn: '1fr',\r\n  sort: { key: 'name' },\r\n  routerLinkValue: { url: (item: any) => `../detail/${item.id}` },\r\n  displayValueFn: (item: any) => item.name,\r\n  displayAdditionalValueFn: (item: any) => item.description,\r\n  ...config,\r\n});\r\nexport const itemStatusColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'cssClassDisplayValue' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'first-letter-uppercase',\r\n  title: 'Estado',\r\n  sort: { key: 'status' },\r\n  align: 'center',\r\n  displayValueFn: (item: any) => item.status,\r\n  cssClassDisplayValue: (item: any) => `status-chip ${item.status}`,\r\n  ...config,\r\n});\r\nexport const itemCreatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Creado',\r\n  sort: { key: 'created_at' },\r\n  displayValueFn: (item: any) => item.created_at,\r\n  ...config,\r\n});\r\nexport const itemUpdatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Actualizado',\r\n  sort: { key: 'updated_at' },\r\n  hidden: true,\r\n  displayValueFn: (item: any) => item.updated_at,\r\n  ...config,\r\n});\r\nexport const simpleListColumns = (): ListColumn<any>[] => ([\r\n  itemNameAndDescriptionColumn(),\r\n  itemUpdatedAtColumn(),\r\n  itemCreatedAtColumn(),\r\n  itemStatusColumn(),\r\n]);\r\n\r\n\r\nexport const defaultListFilterInputs = (): FormInput[] => [\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de creación',\r\n    formControlNameFrom: 'created_at_from',\r\n    formControlNameTo: 'created_at_to',\r\n  }),\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de actualización',\r\n    formControlNameFrom: 'updated_at_from',\r\n    formControlNameTo: 'updated_at_to',\r\n  }),\r\n  switchFormInput({\r\n    textLabel: 'Registros inactivos',\r\n    formControlName: 'inactive',\r\n  }),\r\n];\r\n\r\nexport const deleteItemActionButton = () => clickEventActionButton({\r\n  icon: 'delete',\r\n  text: 'Eliminar',\r\n  fn: async ({ id }, _, { deleteItemFn }) => deleteItemFn(id),\r\n  hidden: (item) => item.deleted_at,\r\n});\r\n\r\nexport const restoreItemActionButton = () => clickEventActionButton({\r\n  icon: 'restore',\r\n  text: 'Restaurar',\r\n  fn: async ({ id }, _, { restoreItemFn }) => restoreItemFn(id),\r\n  hidden: (item) => !item.deleted_at,\r\n})\r\n\r\nexport const viewItemActionButton = () => routerLinkActionButton({\r\n  icon: 'visibility',\r\n  text: 'Ver',\r\n  routerLink: { url: (item) => `../view/${item.id}` },\r\n});\r\n\r\nexport const editItemActionButton = () => routerLinkActionButton({\r\n  icon: 'edit',\r\n  text: 'Editar',\r\n  routerLink: { url: (item) => `../edit/${item.id}` },\r\n})\r\n\r\n@Component({\r\n  selector: 'app-item-list-template',\r\n  standalone: true,\r\n  templateUrl: './item-list-template.component.html',\r\n  styleUrl: './item-list-template.component.css',\r\n  imports: [\r\n    CommonModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatSortModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatTooltipModule,\r\n    MatPseudoCheckboxModule,\r\n    IndexListPipe,\r\n    GetKeyItemPipe,\r\n    RouterLink,\r\n    DiffDatePipe,\r\n    HiddenOptionButtonRowPipe,\r\n    NgOptimizedImage,\r\n    ScrollingModule,\r\n    GetUserByIdPipe,\r\n    PathFilesServerPipe,\r\n    ListFormatPipe,\r\n    LoadImagePrivateDirective,\r\n    FirstLetterUppercasePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n    ExecuteFunctionListPipe,\r\n    RenameTitleColumnListPipe,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    FirstLetterUppercasePipe,\r\n    GetKeyItemPipe,\r\n    RenameTitleColumnListPipe,\r\n    BrowserAnimationsModule,\r\n    DateFnsAdapter,\r\n  ],\r\n})\r\nexport class ItemListTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemListConfiguration;\r\n\r\n  // @ContentChild('headers') headers!: TemplateRef<any>;\r\n  @ContentChild('rowList') rowList!: TemplateRef<any>;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  @ViewChild('divListItems', { static: true }) private divList!: ElementRef;\r\n\r\n  private _dataTypeList: 'array' | 'paginator' = 'array';\r\n  private _keyForGetItems: string;\r\n  private _keyForGetTotalItems: string;\r\n\r\n  private fetch = inject(FetchService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  private renderer = inject(Renderer2);\r\n  private eventsService = inject(EventsService);\r\n  public location = inject(Location);\r\n\r\n  // private datePipe = inject(DatePipe);\r\n  public firstLetterUppercasePipe = inject(FirstLetterUppercasePipe);\r\n  public getKeyItemPipe = inject(GetKeyItemPipe);\r\n  public renameTitleColumnListPipe = inject(RenameTitleColumnListPipe);\r\n\r\n  public lengthData = computed(() => this.data().length)\r\n\r\n  public searchCtrl: FormControl = new FormControl('');\r\n  public formFilters: FormGroup<any> | null = null;\r\n\r\n  public loading = signal(true);\r\n  public font: WritableSignal<'small' | 'medium' | 'large'> = signal('medium');\r\n  public headerListStyle: WritableSignal<'simple' | 'color'> = signal('simple');\r\n\r\n  private abortController = new AbortController();\r\n\r\n  private unsubscribe$: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(DATA_TYPE_LIST) _dataTypeList: 'array' | 'paginator',\r\n    @Optional() @Inject(KEY_GET_ITEMS_PAGINATOR_LIST) _keyForGetItems: string,\r\n    @Optional() @Inject(KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST) _keyForGetTotalItems: string\r\n  ) {\r\n    this._dataTypeList = _dataTypeList ?? 'paginator';\r\n    this._keyForGetItems = _keyForGetItems || 'data';\r\n    this._keyForGetTotalItems = _keyForGetTotalItems || 'total';\r\n  }\r\n\r\n  get data(): WritableSignal<any[]> {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  get defaultOrder(): string {\r\n    return this.configuration.defaultOrder ? `${this.configuration.defaultOrder?.key}|${this.configuration.defaultOrder?.order}` : 'id|DESC';\r\n  }\r\n\r\n  get dataTypeList(): 'array' | 'paginator' {\r\n    return this.configuration.dataType ?? this._dataTypeList;\r\n  }\r\n\r\n  get keyForGetItems(): string {\r\n    return this.configuration.keyGetItemsPaginator ?? this._keyForGetItems;\r\n  }\r\n\r\n  get keyForGetTotalItems(): string {\r\n    return this.configuration.keyGetTotalItemsPaginator ?? this._keyForGetTotalItems;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.configuration.data = signal([]);\r\n    this.configuration.updateListEvent = new EventEmitter();\r\n    if (this.configuration.rows?.options != false && !this.configuration.rows?.options?.length) {\r\n      this.configuration.rows = {\r\n        ...(this.configuration.rows ?? {}),\r\n        options: [\r\n          viewItemActionButton(),\r\n          editItemActionButton(),\r\n          deleteItemActionButton(),\r\n          restoreItemActionButton(),\r\n        ]\r\n      };\r\n    }\r\n    this.generateFormControlsFromFilterInputs();\r\n    this.generateColumnsCss();\r\n\r\n    this.eventsService\r\n      .eventsFiltered<EventGlobalSearch>([NAME_EVENT_GLOBAL_SEARCH])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(({ data }: any) => {\r\n        const type = data.type;\r\n        if (type == 'enter') this.searchCtrl.setValue(data.value);\r\n      })\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.paginator.pageIndex = 0;\r\n    this.paginator.pageSize = 20;\r\n\r\n    this.verifyQueryParams();\r\n\r\n    this.activatedRoute.queryParams.subscribe(() => this.callGetData());\r\n\r\n    this.sort.sortChange.subscribe(({ active, direction }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (this.defaultOrder == `${active}|${direction}` || !active || !direction) queryParams['order'] = null;\r\n      else queryParams['order'] = `${active}|${direction}`;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.searchCtrl.valueChanges.pipe(debounceTime(250)).subscribe((value: string) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (value) queryParams['search'] = value;\r\n      else queryParams['search'] = null;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.paginator.page.subscribe(({ pageIndex, pageSize }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (pageIndex == 0 || (queryParams['page'] ?? null) == pageIndex + 1) queryParams['page'] = null;\r\n      else queryParams['page'] = pageIndex + 1;\r\n      if (pageSize == 20 || (queryParams['per_page'] ?? null) == pageSize) queryParams['per_page'] = null;\r\n      else queryParams['per_page'] = pageSize;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.eventsService\r\n      .eventsFiltered([\r\n        `${this.configuration.server.url}_created`,\r\n        `${this.configuration.server.url}_updated`\r\n      ])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(() => this.callGetData());\r\n\r\n    // this.configuration.updateListEvent!.subscribe(() => this.callGetData({}));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n    if (this.abortController) this.abortController.abort();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private async generateColumnsCss(): Promise<void> {\r\n    const grid_cols: string[] = [];\r\n    const grid_areas: string[] = []\r\n    if (this.configuration.rows?.selectable) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('selected');\r\n    }\r\n    if (this.configuration.rows?.index != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('index');\r\n    }\r\n    for await (const column of this.configuration.columns()) {\r\n      if (!column.hidden) {\r\n        grid_cols.push(column.gridColumn ?? 'auto');\r\n        grid_areas.push(this.renameTitleColumnListPipe.transform(column.title));\r\n      }\r\n    }\r\n    if (this.configuration.rows?.actions) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('actions');\r\n    }\r\n    if (this.configuration.rows?.options != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('options');\r\n    }\r\n    this.renderer.setStyle(this.divList.nativeElement, 'grid-template-columns', grid_cols.join(' '));\r\n    this.renderer.setStyle(this.divList.nativeElement, '--items-list-grid-template-areas', `\"${grid_areas.join(' ')}\"`, RendererStyleFlags2.DashCase);\r\n    grid_areas.forEach((area, index) => this.renderer.setStyle(this.divList.nativeElement, `--items-list-grid-area-${index + 1}`, area, RendererStyleFlags2.DashCase));\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private getQueryParams(): { [key: string]: any } {\r\n    return !this.configuration.disableFiltersInQueryParams ? JSON.parse(JSON.stringify(this.activatedRoute.snapshot.queryParams)) : {\r\n      ...this.formFilters?.value ?? {},\r\n      page: this.paginator.pageIndex + 1,\r\n      per_page: this.paginator.pageSize,\r\n      order: this.sort.active ? `${this.sort.active}|${this.sort.direction}` : null,\r\n      search: this.searchCtrl.value ? this.searchCtrl.value : null,\r\n    }\r\n  }\r\n\r\n  private navigateOrCallGetData(params: any): void {\r\n    if (this.configuration.disableFiltersInQueryParams) this.callGetData(params);\r\n    else this.router.navigate([], { queryParams: params });\r\n  }\r\n\r\n  private verifyQueryParams(): void {\r\n    const queryParams = {} as any;\r\n    const { page, per_page, order, search, ...filters } = queryParams;\r\n    this.paginator.pageIndex = Number(page ?? 1) - 1;\r\n    this.paginator.pageSize = Number(per_page) ?? 20;\r\n    this.sort.active = order?.split('|')[0] ?? '';\r\n    this.sort.direction = order?.split('|')[1] == 'asc' ? 'asc' : 'desc';\r\n    this.sort.sortChange.emit();\r\n    this.searchCtrl.setValue(search ?? null, { emitEvent: false });\r\n  }\r\n\r\n  public callGetData(queryParams: any = {}): void {\r\n    const params = objectToURLSearchParams(queryParams);\r\n    if (!params.has('page')) params.set('page', String(this.paginator.pageIndex + 1));\r\n    if (!params.has('per_page')) params.set('per_page', String(this.paginator.pageSize));\r\n    if (!params.has('order')) params.set('order', this.defaultOrder);\r\n    this.getData(params);\r\n  }\r\n\r\n  private async getData(searchParams: URLSearchParams = new URLSearchParams()): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const serverUrl = this.configuration.server.url;\r\n    let queryParams = this.configuration.server.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const url = `${serverUrl}?${searchParams.toString()}&${queryParams ?? ''}`;\r\n    const config = { signal: this.abortController.signal };\r\n    try {\r\n      let items = [];\r\n      let totalItems = 0;\r\n      if (this.dataTypeList == 'array') {\r\n        items = await this.fetch.get<any[]>(url, config);\r\n        totalItems = items.length;\r\n      } else {\r\n        const paginatorData = await this.fetch.get<PaginatorData<any>>(url, config);\r\n        items = this.getKeyItemPipe.transform(paginatorData, this.keyForGetItems);\r\n        totalItems = this.getKeyItemPipe.transform(paginatorData, this.keyForGetTotalItems);\r\n      }\r\n      const { parseDataFn } = this.configuration;\r\n      const parseData = await parseDataFn?.(items) ?? items;\r\n      this.paginator.length = totalItems;\r\n      this.data.set(parseData);\r\n      this.loading.set(false);\r\n      this.checkSelectedItems();\r\n    } catch (err: any) {\r\n      if (err.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n  }\r\n\r\n  public hiddenToggleColumn($event: MatCheckboxChange, index: number): void {\r\n    this.configuration.columns.update((columns) => {\r\n      columns[index]['hidden'] = !$event.checked\r\n      return columns;\r\n    })\r\n    this.generateColumnsCss();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public navigateCreateView(): void {\r\n    this.router.navigate(['../create'], { relativeTo: this.activatedRoute });\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public allSelectedItems = signal(false);\r\n  public someSelectedItems = signal(false);\r\n  public selectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__));\r\n  public lengthSelectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__).length);\r\n\r\n  public selectedItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.toSpliced(index, 1, { ...data[index], __selected__: status }));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public selectedAllItems(status: boolean): void {\r\n    this.data.update((data) => data.map((e) => ({ ...e, __selected__: status })));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public someSelected(): boolean {\r\n    return this.data().length > 0 && this.data().some((e: ListItemExtended) => e.__selected__) && !this.allSelectedItems();\r\n  }\r\n\r\n  private checkSelectedItems(): void {\r\n    this.allSelectedItems.set(this.data().length > 0 && this.data().every((e: ListItemExtended) => e.__selected__));\r\n    this.someSelectedItems.set(this.someSelected());\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private generateFormControlsFromFilterInputs(): void {\r\n    if (this.configuration.filters == false) return;\r\n    if (!this.configuration.filters?.length) this.configuration.filters = defaultListFilterInputs();\r\n    const formFilters = new FormGroup({});\r\n    this.configuration.filters?.forEach((filter) => {\r\n      if (filter.text) {\r\n        formFilters.setControl(filter.text.formControlName, new FormControl(filter.text.defaultValue));\r\n      } else if (filter.textarea) {\r\n        formFilters.setControl(filter.textarea.formControlName, new FormControl(filter.textarea.defaultValue));\r\n      } else if (filter.select) {\r\n        formFilters.setControl(filter.select.formControlName, new FormControl(filter.select.defaultValue));\r\n      } else if (filter.number) {\r\n        formFilters.setControl(filter.number.formControlName, new FormControl(filter.number.defaultValue));\r\n      } else if (filter.date) {\r\n        formFilters.setControl(filter.date.formControlName, new FormControl(filter.date.defaultValue));\r\n      } else if (filter.dateRange) {\r\n        formFilters.setControl(filter.dateRange.formControlNameFrom, new FormControl(filter.dateRange.defaultValueFrom));\r\n        formFilters.setControl(filter.dateRange.formControlNameTo, new FormControl(filter.dateRange.defaultValueTo));\r\n      } else if (filter.autocompleteLocal) {\r\n        formFilters.setControl(filter.autocompleteLocal.formControlName, new FormControl(filter.autocompleteLocal.defaultValue));\r\n      } else if (filter.autocompleteServer) {\r\n        formFilters.setControl(filter.autocompleteServer.formControlName, new FormControl(filter.autocompleteServer.defaultValue));\r\n      } else if (filter.checkbox) {\r\n        formFilters.setControl(filter.checkbox.formControlName, new FormControl(filter.checkbox.defaultValue));\r\n      } else if (filter.switch) {\r\n        formFilters.setControl(filter.switch.formControlName, new FormControl(filter.switch.defaultValue));\r\n      }\r\n    });\r\n    this.formFilters = formFilters;\r\n  }\r\n\r\n  public getControlFormFilter(name: string): FormControl {\r\n    return this.formFilters!.get(name) as FormControl;\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private updateLoadingStatusItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.map((item: ListItemExtended, i) => {\r\n      if (i == index) item.__loading_status__ = status;\r\n      return item;\r\n    }));\r\n  }\r\n\r\n  public deleteItem = async (id: number | string) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}`;\r\n    try {\r\n      await this.fetch.delete(url);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public restoreItem = async (id: string | number) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}/restore`;\r\n    const config = { afterAlert: { description: 'Restaurando ítem de la lista' } }\r\n    try {\r\n      await this.fetch.put(url, config);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public updateChangesItem = (index: number, item: any) => {\r\n    this.configuration.data!.update(items => items.toSpliced(index, 1, item));\r\n  }\r\n\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "Omit"
            ]
        },
        {
            "name": "StorageConfiguration",
            "id": "interface-StorageConfiguration-6823f4b66151be0a931670a7cb2aebdb3a3319ddb11882225005b85b95c687bcd559d92ac1b969acbaccbe533e10f9301e27919cfba6fb85fc8b7087d56d5613",
            "file": "src/app/core/services/database-storage.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\r\nimport { StorageMap } from '@ngx-pwa/local-storage';\r\nimport { FetchService } from './fetch.service';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { getWeek } from 'date-fns';\r\n\r\nconst SAL_LONG = 16;\r\nconst INITIALIZATION_VECTOR_LONG = SAL_LONG;\r\n\r\nconst bufferABase64 = (buffer: any) => btoa(String.fromCharCode(...new Uint8Array(buffer)));\r\nconst base64ABuffer = (buffer: any) => Uint8Array.from(atob(buffer), c => c.charCodeAt(0));\r\n\r\nconst passwordBasedKeyDerivation = async (password: string, sal: any, iterations: number, long: number, hash: any, algoritmo = 'AES-CBC') => {\r\n    const encoder = new TextEncoder();\r\n    let key = await window.crypto.subtle.importKey('raw', encoder.encode(password), { name: 'PBKDF2' }, false, ['deriveKey']);\r\n    return await window.crypto.subtle.deriveKey(\r\n        {\r\n            name: 'PBKDF2',\r\n            salt: encoder.encode(sal),\r\n            iterations,\r\n            hash\r\n        },\r\n        key,\r\n        { name: algoritmo, length: long },\r\n        false,\r\n        ['encrypt', 'decrypt'],\r\n    );\r\n}\r\n\r\nconst encrypt = async (password: string, textoPlano: any) => {\r\n    const encoder = new TextEncoder();\r\n    const sal = window.crypto.getRandomValues(new Uint8Array(SAL_LONG));\r\n    const initializationVector = window.crypto.getRandomValues(new Uint8Array(INITIALIZATION_VECTOR_LONG));\r\n    const textPlainBuffer = encoder.encode(textoPlano);\r\n    const clave = await passwordBasedKeyDerivation(password, sal, 100000, 256, 'SHA-256');\r\n    const encrypted = await window.crypto.subtle.encrypt({ name: \"AES-CBC\", iv: initializationVector }, clave, textPlainBuffer);\r\n    return bufferABase64([...sal, ...initializationVector, ...new Uint8Array(encrypted)]);\r\n};\r\n\r\nconst decrypt = async (password: string, encriptadoEnBase64: any) => {\r\n    const decoder = new TextDecoder();\r\n    const encryptData = base64ABuffer(encriptadoEnBase64);\r\n    const sal = encryptData.slice(0, SAL_LONG);\r\n    const initializationVector = encryptData.slice(0 + SAL_LONG, SAL_LONG + INITIALIZATION_VECTOR_LONG);\r\n    const clave = await passwordBasedKeyDerivation(password, sal, 100000, 256, 'SHA-256');\r\n    const decryptDataBuffer = await window.crypto.subtle.decrypt({ name: \"AES-CBC\", iv: initializationVector }, clave, encryptData.slice(SAL_LONG + INITIALIZATION_VECTOR_LONG));\r\n    return decoder.decode(decryptDataBuffer);\r\n}\r\n\r\nexport enum NameModuleDatabase {\r\n    BoxOpenings = 'boxOpenings',\r\n    Banks = 'banks',\r\n    Users = 'users',\r\n    Taxes = 'taxes',\r\n    DocumentTypes = 'documentTypes',\r\n    Plans = 'plans',\r\n    VehicleTypes = 'vehicleTypes',\r\n}\r\n\r\nenum Recurrent {\r\n    Hourly = 'hourly',\r\n    Daily = 'daily',\r\n    Weekly = 'weekly',\r\n    Monthly = 'monthly',\r\n    Yearly = 'yearly',\r\n}\r\n\r\ninterface StorageConfiguration<T = any> {\r\n    data: any;\r\n    recurrent: Recurrent;\r\n    lastUpdate: Date;\r\n}\r\n\r\ninterface ModuleConfiguration {\r\n    readonly key: NameModuleDatabase;\r\n    readonly recurrent: Recurrent;\r\n    readonly name: string;\r\n    readonly config: {\r\n        url: string;\r\n        queryParams?: string;\r\n    };\r\n    lastUpdate?: Date;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DatabaseStorageService {\r\n\r\n    private storageMap = inject(StorageMap);\r\n    private fetch = inject(FetchService);\r\n    public readonly modules: ModuleConfiguration[] = [\r\n        {\r\n            name: 'Aperturas de caja',\r\n            key: NameModuleDatabase.BoxOpenings,\r\n            recurrent: Recurrent.Hourly,\r\n            config: {\r\n                url: 'box-opening',\r\n                queryParams: 'relations=box.account.bank&box_status=abierto&limit=100'\r\n            },\r\n        },\r\n        {\r\n            name: 'Bancos',\r\n            key: NameModuleDatabase.Banks,\r\n            recurrent: Recurrent.Daily,\r\n            config: {\r\n                url: 'database-storage/banks'\r\n            },\r\n        },\r\n        {\r\n            name: 'Usuarios',\r\n            key: NameModuleDatabase.Users,\r\n            recurrent: Recurrent.Hourly,\r\n            config: {\r\n                url: 'database-storage/users'\r\n            },\r\n        },\r\n        {\r\n            name: 'Valores de impuestos',\r\n            key: NameModuleDatabase.Taxes,\r\n            recurrent: Recurrent.Hourly,\r\n            config: {\r\n                url: 'database-storage/taxes'\r\n            },\r\n        },\r\n        {\r\n            name: 'Tipos de documento',\r\n            key: NameModuleDatabase.DocumentTypes,\r\n            recurrent: Recurrent.Daily,\r\n            config: {\r\n                url: 'database-storage/document-types'\r\n            },\r\n        },\r\n        {\r\n            name: 'Planes',\r\n            key: NameModuleDatabase.Plans,\r\n            recurrent: Recurrent.Daily,\r\n            config: {\r\n                url: 'database-storage/plans'\r\n            },\r\n        },\r\n        {\r\n            name: 'Tipos de vehículo',\r\n            key: NameModuleDatabase.VehicleTypes,\r\n            recurrent: Recurrent.Daily,\r\n            config: {\r\n                url: 'database-storage/vehicle-types'\r\n            },\r\n        },\r\n    ];\r\n\r\n    constructor() {\r\n        this.modules.forEach(module => {\r\n            this.storageMap.get(module.key).subscribe((response) => {\r\n                if(response) module.lastUpdate = (response as StorageConfiguration).lastUpdate;\r\n            })\r\n        });\r\n    }\r\n\r\n    public async getOne<T = any>(key: NameModuleDatabase, id: number): Promise<T | undefined> {\r\n        return (await this.getData<any>(key)).find((item) => item.id == id);\r\n    }\r\n\r\n    public async getData<T>(key: NameModuleDatabase): Promise<T[]> {\r\n        const module = this.modules.find((e) => e.key == key)!;\r\n        return new Promise(async (resolve) => {\r\n            this.storageMap.get(key).subscribe(async (response) => {\r\n                if (response) {\r\n                    const { recurrent, lastUpdate } = response as StorageConfiguration<T>;\r\n\r\n                    const c_year = new Date().getFullYear();\r\n                    const c_month = new Date().getMonth();\r\n                    const c_date = new Date().getDate();\r\n                    const c_week = getWeek(new Date(), { weekStartsOn: 1 });\r\n                    const c_hour = new Date().getHours();\r\n                    \r\n                    const u_year = lastUpdate.getFullYear();\r\n                    const u_month = lastUpdate.getMonth();\r\n                    const u_date = lastUpdate.getDate();\r\n                    const u_week = getWeek(lastUpdate, { weekStartsOn: 1 });\r\n                    const u_hour = lastUpdate.getHours();\r\n\r\n                    if (recurrent == Recurrent.Hourly && (c_year != u_year || c_month != u_month || c_date != u_date || c_hour != u_hour)) resolve(await this.getDataServer(module));\r\n                    else if (recurrent == Recurrent.Daily && (c_year != u_year || c_month != u_month || c_date != u_date)) resolve(await this.getDataServer(module));\r\n                    else if (recurrent == Recurrent.Weekly && (c_year != u_year || c_week != u_week)) resolve(await this.getDataServer(module));\r\n                    else if (recurrent == Recurrent.Monthly && (c_year != u_year || c_month != u_month)) resolve(await this.getDataServer(module));\r\n                    else if (recurrent == Recurrent.Yearly && c_year != u_year) resolve(await this.getDataServer(module));\r\n\r\n                    const decode = await decrypt('0123456', (response as StorageConfiguration<T>).data);\r\n                    resolve(JSON.parse(decode));\r\n                } else {\r\n                    resolve(this.getDataServer(module));\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public updateDataLocal(key: NameModuleDatabase): void {\r\n        const config = this.modules.find((e) => e.key == key);\r\n        if (!config) return;\r\n        this.getDataServer(config);\r\n    }\r\n\r\n    private async getDataServer<T>(module: ModuleConfiguration): Promise<T[]> {\r\n        const { config, key, recurrent } = module;\r\n        const url = `${config.url}?${config.queryParams ? config.queryParams : ''}`;\r\n        const result = await this.fetch.get<T[] | PaginatorData<T>>(url);\r\n        const data = result instanceof Array ? result : result.data;\r\n        module.lastUpdate = new Date();\r\n        const storageConfig: StorageConfiguration<T> = {\r\n            data: await encrypt('0123456', JSON.stringify(data)),\r\n            recurrent,\r\n            lastUpdate: module.lastUpdate,\r\n        }\r\n        this.storageMap.set(key, storageConfig).subscribe(() => { });\r\n        return data;\r\n    }\r\n\r\n}",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "lastUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "recurrent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Recurrent",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "StringListColumn",
            "id": "interface-StringListColumn-edc9a2c085d669b062640c6d2a97876fe56bb34f5ae23612a12a67b2af6f44bb5d3316d9f28e50d8c8d522c0e6ce8fc3245f639ec16593bc1c325c3c460a4296",
            "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule, DatePipe, Location, NgOptimizedImage } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, ViewChild, Input, ContentChild, TemplateRef, ElementRef, Renderer2, ViewEncapsulation, signal, WritableSignal, computed, inject, Inject, Optional, InjectionToken, EventEmitter, RendererStyleFlags2 } from '@angular/core';\r\nimport { MatCheckboxChange, MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSort, MatSortModule } from '@angular/material/sort';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from 'src/app/shared/utilities/queryParams';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { IndexListPipe } from '@pipe/index-list.pipe';\r\nimport { SpinnerDefaultComponent } from '@component/spinner-default/spinner-default.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { debounceTime } from 'rxjs';\r\nimport { DiffDatePipe } from '@pipe/diff-date.pipe';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { HiddenOptionButtonRowPipe } from '@pipe/hidden-option-button-row.pipe';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { GetUserByIdPipe } from '@pipe/get-user-by-id.pipe';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ListFormatPipe } from '@pipe/list-format.pipe';\r\nimport { LoadImagePrivateDirective } from '@directive/load-image-private.directive';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MatPseudoCheckboxModule } from '@angular/material/core';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { EventGlobalSearch, NAME_EVENT_GLOBAL_SEARCH } from 'src/app/sidenav/sidenav/sidenav.component';\r\nimport { ExecuteFunctionListPipe } from './execute-function-list.pipe';\r\nimport { FormInput, dateRangeFormInput, switchFormInput } from '@component/item-form-template/item-form-template.component';\r\nimport { RenameTitleColumnListPipe } from './rename-title-column-list.pipe';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DateFnsAdapter } from '@angular/material-date-fns-adapter';\r\nimport { MyDateAdapter } from '@utility/myDateAdapter';\r\nimport { MY_DATE_FORMATS } from '@utility/myDateFormat';\r\n\r\nexport const DATA_TYPE_LIST = new InjectionToken<'array' | 'paginator'>('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST');\r\n\r\nexport interface ItemListConfiguration<T = any> {\r\n  readonly dataType?: 'array' | 'paginator';\r\n  readonly keyGetItemsPaginator?: string;\r\n  readonly keyGetTotalItemsPaginator?: string;\r\n\r\n  readonly disableFiltersInQueryParams?: boolean;\r\n\r\n  title: string | null;\r\n\r\n  parseDataFn?: (data: T[]) => T[] | Promise<T[]>;\r\n  data?: WritableSignal<T[]>;\r\n  updateListEvent?: EventEmitter<void>;\r\n\r\n  defaultOrder?: {\r\n    key: string,\r\n    order: 'ASC' | 'DESC'\r\n  };\r\n\r\n  backButton?: boolean;\r\n\r\n  updateButton?: boolean;\r\n\r\n  server: {\r\n    readonly url: string,\r\n    queryParams?: { [key: string]: any } | string;\r\n  }\r\n\r\n  createButton?: {\r\n    text?: string,\r\n    routerLink: RouterLinkCreateButton\r\n  } | false;\r\n\r\n  filters?: FormInput[] | false;\r\n\r\n  rows?: {\r\n    selectable?: {\r\n      actions: SelectableActionButton<T>[];\r\n    };\r\n    index?: false | ({ title: string });\r\n    cssClass?: string | ((item: T) => string);\r\n    actions?: ActionButton<T>[];\r\n    options?: ActionButton<T>[] | false;\r\n  },\r\n\r\n  columns: WritableSignal<ListColumn<T>[]>;\r\n}\r\n\r\nexport interface RouterLinkCreateButton {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any;\r\n}\r\nexport interface RouterLinkItem<T> {\r\n  url: ((item: T, index: number) => string) | string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: ((item: T, index: number) => (string | { [key: string]: any } | any[] | number | null)) | string | { [key: string]: any } | any[] | number | null;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\ndeclare type ActionButtonActionsType = 'clickEvent' | 'routerLink';\r\ninterface ActionButton<T> {\r\n  type: 'clickEvent' | 'routerLink';\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((item: T, index: number) => boolean);\r\n  disabled?: boolean | ((item: T, index: number) => boolean);\r\n  cssClass?: string | ((item: T, index: number) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((item: T, index: number) => ({ [key: string]: any }));\r\n  fn?: (item: T, index: number, fns: {\r\n    deleteItemFn: (id: number | string) => Promise<void>,\r\n    restoreItemFn: (id: number | string) => Promise<void>,\r\n    updateChangesItemFn: (index: number, item: T) => void,\r\n  }) => void;\r\n  routerLink?: RouterLinkItem<T>;\r\n}\r\ninterface ClickEventActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'fn'>> & ActionButton<T>, 'type' | 'routerLink'> { }\r\nexport const clickEventActionButton = <T = any>(config: ClickEventActionButton<T>): ActionButton<T> => ({ type: 'clickEvent', ...config });\r\ninterface RouterLinkActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'routerLink'>> & ActionButton<T>, 'type' | 'clickEvent'> { }\r\nexport const routerLinkActionButton = <T = any>(config: RouterLinkActionButton<T>): ActionButton<T> => ({ type: 'routerLink', ...config });\r\ninterface SelectableActionButton<T> {\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((selectedItems: T[]) => boolean);\r\n  disabled?: boolean | ((selectedItems: T[]) => boolean);\r\n  cssClass?: string | ((selectedItems: T[]) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((selectedItems: T[]) => ({ [key: string]: any }));\r\n  fn: (selectedItems: T[]) => void;\r\n}\r\nexport const selectableActionButton = <T = any>(config: SelectableActionButton<T>): SelectableActionButton<T> => ({ ...config });\r\n\r\nexport interface ListItemExtended {\r\n  __selected__?: boolean;\r\n  __loading_status__?: boolean;\r\n}\r\n\r\nexport type TypeValueKeyItem = 'text' | 'diff-date' | 'date' | 'number' | 'email' | 'phone' | 'user' | 'uppercase' | 'lowercase' | 'titlecase' | 'first-letter-uppercase' | 'list-format' | 'currency';\r\n\r\nexport interface ListColumn<T> {\r\n  /**\r\n   * @description\r\n   * Agrega clases css al contenedor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   */\r\n  align?: 'left' | 'center' | 'right';\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor adicional de la celda de la columna\r\n   * @example\r\n   * clickEventAdditionalValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventAdditionalValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor de la celda de la columna\r\n   * @example\r\n   * clickEventValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css a la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClass: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClass?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor adicional de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayAdditionalValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo fecha (type: 'date')\r\n   * @example\r\n   * ...\r\n   * dateFormat: 'yyyy-MM-dd'\r\n   * ...\r\n   * dateFormat: 'dd/MM/yyyy' // Por defecto\r\n   * ...\r\n   */\r\n  dateFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor adicional a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.name\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayAdditionalValueFn?: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayValueFn: (item) => item.name\r\n   * ...\r\n   * displayValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * If you want to display a value in the column that is not in the item, you can use this function\r\n   * @example\r\n   * ...\r\n   * gridColumn: '1fr'\r\n   * ...\r\n   * gridColumn: '200px'\r\n   * ...\r\n   * gridColumn: 'max-content'\r\n   * ...\r\n   * gridColumn: 'fit-content(200px)'\r\n   * ...\r\n   */\r\n  gridColumn?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones > Columnas\r\n   * @example\r\n   * ...\r\n   * hidden: true\r\n   * ...\r\n   * hidden: false // Por defecto\r\n   * ...\r\n   */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo número (type: 'number')\r\n   * @example\r\n   * ...\r\n   * numberFormat: '2.2-2'\r\n   * ...\r\n   * numberFormat: '0.2-2' // Por defecto\r\n   * ...\r\n   */\r\n  numberFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor adicional de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkAdditionalValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Sortable column espicif key in object configuration\r\n   * @example\r\n   * sort: { key: 'name' }\r\n   */\r\n  sort?: { key: string };\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display additional value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: { color: 'green' }\r\n   * ...\r\n   * @param item\r\n   * @returns string | number | null | undefined | string[] | number[]\r\n   */\r\n  cssStyleDisplayAdditionalValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayValue: { color: 'green' }\r\n   * ...\r\n   */\r\n  cssStyleDisplayValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Title column\r\n   * @example\r\n   * title: 'Nombre'\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * @description\r\n   * To display a tooltip in the column on hover\r\n   * @example\r\n   * tooltip: 'Ver detalle'\r\n   */\r\n  tooltip?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * For show type value in cell\r\n   * @example\r\n   * ...\r\n   * type: 'number',\r\n   * displayValueFn: (item) => item.price, // output: 2,000.00\r\n   * ...\r\n   * type: 'date',\r\n   * displayValueFn: (item) => item.created_at, // output 12/12/2020\r\n   * ...\r\n   */\r\n  type?: TypeValueKeyItem | 'image' | 'html';\r\n\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface SimpleListColumn<T> extends Omit<ListColumn<T>, 'type' | 'displayAdditionalValueFn' | 'displayValueFn' | 'dateFormat' | 'numberFormat' | 'image'> { }\r\ninterface SimpleListColumn2<T> extends Omit<SimpleListColumn<T>, 'cssStyleDisplayAdditionalValue' | 'routerLinkAdditionalValue' | 'cssClassDisplayAdditionalValue' | 'clickEventAdditionalValue'> { }\r\ninterface ListFormatListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string[];\r\n  displayValueFn: (item: T, index: number) => string[];\r\n}\r\n\r\ninterface NumberListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => number | null | undefined;\r\n  numberFormat?: string;\r\n}\r\n\r\ninterface StringListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => string | number | null | undefined;\r\n}\r\n\r\ninterface DateListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined;\r\n  dateFormat?: string;\r\n}\r\n\r\ninterface ImageListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface HtmlListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n}\r\n\r\nexport const numberColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'number', ...config });\r\n\r\nexport const listFormatColumn = <T = any>(config: ListFormatListColumn<T>): ListColumn<T> => ({ type: 'list-format', ...config });\r\n\r\nexport const dateColumn = <T = any>(config: DateListColumn<T>): ListColumn<T> => ({ type: 'date', ...config });\r\n\r\nexport const diffDateColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'diff-date', ...config });\r\n\r\nexport const htmlColumn = <T = any>(config: HtmlListColumn<T>): ListColumn<T> => ({ type: 'html', ...config });\r\n\r\nexport const textColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'text', ...config });\r\n\r\nexport const uppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'uppercase', ...config });\r\n\r\nexport const lowercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'lowercase', ...config });\r\n\r\nexport const titlecaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'titlecase', ...config });\r\n\r\nexport const firstLetterUppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'first-letter-uppercase', ...config });\r\n\r\nexport const phoneColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'phone', ...config });\r\n\r\nexport const emailColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'email', ...config });\r\n\r\nexport const userColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'user', ...config });\r\n\r\nexport const imageColumn = <T = any>(config: ImageListColumn<T>): ListColumn<T> => ({ type: 'image', ...config });\r\n\r\n\r\nexport const itemNameAndDescriptionColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  title: 'Nombre',\r\n  gridColumn: '1fr',\r\n  sort: { key: 'name' },\r\n  routerLinkValue: { url: (item: any) => `../detail/${item.id}` },\r\n  displayValueFn: (item: any) => item.name,\r\n  displayAdditionalValueFn: (item: any) => item.description,\r\n  ...config,\r\n});\r\nexport const itemStatusColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'cssClassDisplayValue' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'first-letter-uppercase',\r\n  title: 'Estado',\r\n  sort: { key: 'status' },\r\n  align: 'center',\r\n  displayValueFn: (item: any) => item.status,\r\n  cssClassDisplayValue: (item: any) => `status-chip ${item.status}`,\r\n  ...config,\r\n});\r\nexport const itemCreatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Creado',\r\n  sort: { key: 'created_at' },\r\n  displayValueFn: (item: any) => item.created_at,\r\n  ...config,\r\n});\r\nexport const itemUpdatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Actualizado',\r\n  sort: { key: 'updated_at' },\r\n  hidden: true,\r\n  displayValueFn: (item: any) => item.updated_at,\r\n  ...config,\r\n});\r\nexport const simpleListColumns = (): ListColumn<any>[] => ([\r\n  itemNameAndDescriptionColumn(),\r\n  itemUpdatedAtColumn(),\r\n  itemCreatedAtColumn(),\r\n  itemStatusColumn(),\r\n]);\r\n\r\n\r\nexport const defaultListFilterInputs = (): FormInput[] => [\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de creación',\r\n    formControlNameFrom: 'created_at_from',\r\n    formControlNameTo: 'created_at_to',\r\n  }),\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de actualización',\r\n    formControlNameFrom: 'updated_at_from',\r\n    formControlNameTo: 'updated_at_to',\r\n  }),\r\n  switchFormInput({\r\n    textLabel: 'Registros inactivos',\r\n    formControlName: 'inactive',\r\n  }),\r\n];\r\n\r\nexport const deleteItemActionButton = () => clickEventActionButton({\r\n  icon: 'delete',\r\n  text: 'Eliminar',\r\n  fn: async ({ id }, _, { deleteItemFn }) => deleteItemFn(id),\r\n  hidden: (item) => item.deleted_at,\r\n});\r\n\r\nexport const restoreItemActionButton = () => clickEventActionButton({\r\n  icon: 'restore',\r\n  text: 'Restaurar',\r\n  fn: async ({ id }, _, { restoreItemFn }) => restoreItemFn(id),\r\n  hidden: (item) => !item.deleted_at,\r\n})\r\n\r\nexport const viewItemActionButton = () => routerLinkActionButton({\r\n  icon: 'visibility',\r\n  text: 'Ver',\r\n  routerLink: { url: (item) => `../view/${item.id}` },\r\n});\r\n\r\nexport const editItemActionButton = () => routerLinkActionButton({\r\n  icon: 'edit',\r\n  text: 'Editar',\r\n  routerLink: { url: (item) => `../edit/${item.id}` },\r\n})\r\n\r\n@Component({\r\n  selector: 'app-item-list-template',\r\n  standalone: true,\r\n  templateUrl: './item-list-template.component.html',\r\n  styleUrl: './item-list-template.component.css',\r\n  imports: [\r\n    CommonModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatSortModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatTooltipModule,\r\n    MatPseudoCheckboxModule,\r\n    IndexListPipe,\r\n    GetKeyItemPipe,\r\n    RouterLink,\r\n    DiffDatePipe,\r\n    HiddenOptionButtonRowPipe,\r\n    NgOptimizedImage,\r\n    ScrollingModule,\r\n    GetUserByIdPipe,\r\n    PathFilesServerPipe,\r\n    ListFormatPipe,\r\n    LoadImagePrivateDirective,\r\n    FirstLetterUppercasePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n    ExecuteFunctionListPipe,\r\n    RenameTitleColumnListPipe,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    FirstLetterUppercasePipe,\r\n    GetKeyItemPipe,\r\n    RenameTitleColumnListPipe,\r\n    BrowserAnimationsModule,\r\n    DateFnsAdapter,\r\n  ],\r\n})\r\nexport class ItemListTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemListConfiguration;\r\n\r\n  // @ContentChild('headers') headers!: TemplateRef<any>;\r\n  @ContentChild('rowList') rowList!: TemplateRef<any>;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  @ViewChild('divListItems', { static: true }) private divList!: ElementRef;\r\n\r\n  private _dataTypeList: 'array' | 'paginator' = 'array';\r\n  private _keyForGetItems: string;\r\n  private _keyForGetTotalItems: string;\r\n\r\n  private fetch = inject(FetchService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  private renderer = inject(Renderer2);\r\n  private eventsService = inject(EventsService);\r\n  public location = inject(Location);\r\n\r\n  // private datePipe = inject(DatePipe);\r\n  public firstLetterUppercasePipe = inject(FirstLetterUppercasePipe);\r\n  public getKeyItemPipe = inject(GetKeyItemPipe);\r\n  public renameTitleColumnListPipe = inject(RenameTitleColumnListPipe);\r\n\r\n  public lengthData = computed(() => this.data().length)\r\n\r\n  public searchCtrl: FormControl = new FormControl('');\r\n  public formFilters: FormGroup<any> | null = null;\r\n\r\n  public loading = signal(true);\r\n  public font: WritableSignal<'small' | 'medium' | 'large'> = signal('medium');\r\n  public headerListStyle: WritableSignal<'simple' | 'color'> = signal('simple');\r\n\r\n  private abortController = new AbortController();\r\n\r\n  private unsubscribe$: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(DATA_TYPE_LIST) _dataTypeList: 'array' | 'paginator',\r\n    @Optional() @Inject(KEY_GET_ITEMS_PAGINATOR_LIST) _keyForGetItems: string,\r\n    @Optional() @Inject(KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST) _keyForGetTotalItems: string\r\n  ) {\r\n    this._dataTypeList = _dataTypeList ?? 'paginator';\r\n    this._keyForGetItems = _keyForGetItems || 'data';\r\n    this._keyForGetTotalItems = _keyForGetTotalItems || 'total';\r\n  }\r\n\r\n  get data(): WritableSignal<any[]> {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  get defaultOrder(): string {\r\n    return this.configuration.defaultOrder ? `${this.configuration.defaultOrder?.key}|${this.configuration.defaultOrder?.order}` : 'id|DESC';\r\n  }\r\n\r\n  get dataTypeList(): 'array' | 'paginator' {\r\n    return this.configuration.dataType ?? this._dataTypeList;\r\n  }\r\n\r\n  get keyForGetItems(): string {\r\n    return this.configuration.keyGetItemsPaginator ?? this._keyForGetItems;\r\n  }\r\n\r\n  get keyForGetTotalItems(): string {\r\n    return this.configuration.keyGetTotalItemsPaginator ?? this._keyForGetTotalItems;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.configuration.data = signal([]);\r\n    this.configuration.updateListEvent = new EventEmitter();\r\n    if (this.configuration.rows?.options != false && !this.configuration.rows?.options?.length) {\r\n      this.configuration.rows = {\r\n        ...(this.configuration.rows ?? {}),\r\n        options: [\r\n          viewItemActionButton(),\r\n          editItemActionButton(),\r\n          deleteItemActionButton(),\r\n          restoreItemActionButton(),\r\n        ]\r\n      };\r\n    }\r\n    this.generateFormControlsFromFilterInputs();\r\n    this.generateColumnsCss();\r\n\r\n    this.eventsService\r\n      .eventsFiltered<EventGlobalSearch>([NAME_EVENT_GLOBAL_SEARCH])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(({ data }: any) => {\r\n        const type = data.type;\r\n        if (type == 'enter') this.searchCtrl.setValue(data.value);\r\n      })\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.paginator.pageIndex = 0;\r\n    this.paginator.pageSize = 20;\r\n\r\n    this.verifyQueryParams();\r\n\r\n    this.activatedRoute.queryParams.subscribe(() => this.callGetData());\r\n\r\n    this.sort.sortChange.subscribe(({ active, direction }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (this.defaultOrder == `${active}|${direction}` || !active || !direction) queryParams['order'] = null;\r\n      else queryParams['order'] = `${active}|${direction}`;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.searchCtrl.valueChanges.pipe(debounceTime(250)).subscribe((value: string) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (value) queryParams['search'] = value;\r\n      else queryParams['search'] = null;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.paginator.page.subscribe(({ pageIndex, pageSize }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (pageIndex == 0 || (queryParams['page'] ?? null) == pageIndex + 1) queryParams['page'] = null;\r\n      else queryParams['page'] = pageIndex + 1;\r\n      if (pageSize == 20 || (queryParams['per_page'] ?? null) == pageSize) queryParams['per_page'] = null;\r\n      else queryParams['per_page'] = pageSize;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.eventsService\r\n      .eventsFiltered([\r\n        `${this.configuration.server.url}_created`,\r\n        `${this.configuration.server.url}_updated`\r\n      ])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(() => this.callGetData());\r\n\r\n    // this.configuration.updateListEvent!.subscribe(() => this.callGetData({}));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n    if (this.abortController) this.abortController.abort();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private async generateColumnsCss(): Promise<void> {\r\n    const grid_cols: string[] = [];\r\n    const grid_areas: string[] = []\r\n    if (this.configuration.rows?.selectable) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('selected');\r\n    }\r\n    if (this.configuration.rows?.index != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('index');\r\n    }\r\n    for await (const column of this.configuration.columns()) {\r\n      if (!column.hidden) {\r\n        grid_cols.push(column.gridColumn ?? 'auto');\r\n        grid_areas.push(this.renameTitleColumnListPipe.transform(column.title));\r\n      }\r\n    }\r\n    if (this.configuration.rows?.actions) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('actions');\r\n    }\r\n    if (this.configuration.rows?.options != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('options');\r\n    }\r\n    this.renderer.setStyle(this.divList.nativeElement, 'grid-template-columns', grid_cols.join(' '));\r\n    this.renderer.setStyle(this.divList.nativeElement, '--items-list-grid-template-areas', `\"${grid_areas.join(' ')}\"`, RendererStyleFlags2.DashCase);\r\n    grid_areas.forEach((area, index) => this.renderer.setStyle(this.divList.nativeElement, `--items-list-grid-area-${index + 1}`, area, RendererStyleFlags2.DashCase));\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private getQueryParams(): { [key: string]: any } {\r\n    return !this.configuration.disableFiltersInQueryParams ? JSON.parse(JSON.stringify(this.activatedRoute.snapshot.queryParams)) : {\r\n      ...this.formFilters?.value ?? {},\r\n      page: this.paginator.pageIndex + 1,\r\n      per_page: this.paginator.pageSize,\r\n      order: this.sort.active ? `${this.sort.active}|${this.sort.direction}` : null,\r\n      search: this.searchCtrl.value ? this.searchCtrl.value : null,\r\n    }\r\n  }\r\n\r\n  private navigateOrCallGetData(params: any): void {\r\n    if (this.configuration.disableFiltersInQueryParams) this.callGetData(params);\r\n    else this.router.navigate([], { queryParams: params });\r\n  }\r\n\r\n  private verifyQueryParams(): void {\r\n    const queryParams = {} as any;\r\n    const { page, per_page, order, search, ...filters } = queryParams;\r\n    this.paginator.pageIndex = Number(page ?? 1) - 1;\r\n    this.paginator.pageSize = Number(per_page) ?? 20;\r\n    this.sort.active = order?.split('|')[0] ?? '';\r\n    this.sort.direction = order?.split('|')[1] == 'asc' ? 'asc' : 'desc';\r\n    this.sort.sortChange.emit();\r\n    this.searchCtrl.setValue(search ?? null, { emitEvent: false });\r\n  }\r\n\r\n  public callGetData(queryParams: any = {}): void {\r\n    const params = objectToURLSearchParams(queryParams);\r\n    if (!params.has('page')) params.set('page', String(this.paginator.pageIndex + 1));\r\n    if (!params.has('per_page')) params.set('per_page', String(this.paginator.pageSize));\r\n    if (!params.has('order')) params.set('order', this.defaultOrder);\r\n    this.getData(params);\r\n  }\r\n\r\n  private async getData(searchParams: URLSearchParams = new URLSearchParams()): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const serverUrl = this.configuration.server.url;\r\n    let queryParams = this.configuration.server.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const url = `${serverUrl}?${searchParams.toString()}&${queryParams ?? ''}`;\r\n    const config = { signal: this.abortController.signal };\r\n    try {\r\n      let items = [];\r\n      let totalItems = 0;\r\n      if (this.dataTypeList == 'array') {\r\n        items = await this.fetch.get<any[]>(url, config);\r\n        totalItems = items.length;\r\n      } else {\r\n        const paginatorData = await this.fetch.get<PaginatorData<any>>(url, config);\r\n        items = this.getKeyItemPipe.transform(paginatorData, this.keyForGetItems);\r\n        totalItems = this.getKeyItemPipe.transform(paginatorData, this.keyForGetTotalItems);\r\n      }\r\n      const { parseDataFn } = this.configuration;\r\n      const parseData = await parseDataFn?.(items) ?? items;\r\n      this.paginator.length = totalItems;\r\n      this.data.set(parseData);\r\n      this.loading.set(false);\r\n      this.checkSelectedItems();\r\n    } catch (err: any) {\r\n      if (err.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n  }\r\n\r\n  public hiddenToggleColumn($event: MatCheckboxChange, index: number): void {\r\n    this.configuration.columns.update((columns) => {\r\n      columns[index]['hidden'] = !$event.checked\r\n      return columns;\r\n    })\r\n    this.generateColumnsCss();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public navigateCreateView(): void {\r\n    this.router.navigate(['../create'], { relativeTo: this.activatedRoute });\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public allSelectedItems = signal(false);\r\n  public someSelectedItems = signal(false);\r\n  public selectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__));\r\n  public lengthSelectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__).length);\r\n\r\n  public selectedItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.toSpliced(index, 1, { ...data[index], __selected__: status }));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public selectedAllItems(status: boolean): void {\r\n    this.data.update((data) => data.map((e) => ({ ...e, __selected__: status })));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public someSelected(): boolean {\r\n    return this.data().length > 0 && this.data().some((e: ListItemExtended) => e.__selected__) && !this.allSelectedItems();\r\n  }\r\n\r\n  private checkSelectedItems(): void {\r\n    this.allSelectedItems.set(this.data().length > 0 && this.data().every((e: ListItemExtended) => e.__selected__));\r\n    this.someSelectedItems.set(this.someSelected());\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private generateFormControlsFromFilterInputs(): void {\r\n    if (this.configuration.filters == false) return;\r\n    if (!this.configuration.filters?.length) this.configuration.filters = defaultListFilterInputs();\r\n    const formFilters = new FormGroup({});\r\n    this.configuration.filters?.forEach((filter) => {\r\n      if (filter.text) {\r\n        formFilters.setControl(filter.text.formControlName, new FormControl(filter.text.defaultValue));\r\n      } else if (filter.textarea) {\r\n        formFilters.setControl(filter.textarea.formControlName, new FormControl(filter.textarea.defaultValue));\r\n      } else if (filter.select) {\r\n        formFilters.setControl(filter.select.formControlName, new FormControl(filter.select.defaultValue));\r\n      } else if (filter.number) {\r\n        formFilters.setControl(filter.number.formControlName, new FormControl(filter.number.defaultValue));\r\n      } else if (filter.date) {\r\n        formFilters.setControl(filter.date.formControlName, new FormControl(filter.date.defaultValue));\r\n      } else if (filter.dateRange) {\r\n        formFilters.setControl(filter.dateRange.formControlNameFrom, new FormControl(filter.dateRange.defaultValueFrom));\r\n        formFilters.setControl(filter.dateRange.formControlNameTo, new FormControl(filter.dateRange.defaultValueTo));\r\n      } else if (filter.autocompleteLocal) {\r\n        formFilters.setControl(filter.autocompleteLocal.formControlName, new FormControl(filter.autocompleteLocal.defaultValue));\r\n      } else if (filter.autocompleteServer) {\r\n        formFilters.setControl(filter.autocompleteServer.formControlName, new FormControl(filter.autocompleteServer.defaultValue));\r\n      } else if (filter.checkbox) {\r\n        formFilters.setControl(filter.checkbox.formControlName, new FormControl(filter.checkbox.defaultValue));\r\n      } else if (filter.switch) {\r\n        formFilters.setControl(filter.switch.formControlName, new FormControl(filter.switch.defaultValue));\r\n      }\r\n    });\r\n    this.formFilters = formFilters;\r\n  }\r\n\r\n  public getControlFormFilter(name: string): FormControl {\r\n    return this.formFilters!.get(name) as FormControl;\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private updateLoadingStatusItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.map((item: ListItemExtended, i) => {\r\n      if (i == index) item.__loading_status__ = status;\r\n      return item;\r\n    }));\r\n  }\r\n\r\n  public deleteItem = async (id: number | string) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}`;\r\n    try {\r\n      await this.fetch.delete(url);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public restoreItem = async (id: string | number) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}/restore`;\r\n    const config = { afterAlert: { description: 'Restaurando ítem de la lista' } }\r\n    try {\r\n      await this.fetch.put(url, config);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public updateChangesItem = (index: number, item: any) => {\r\n    this.configuration.data!.update(items => items.toSpliced(index, 1, item));\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "displayAdditionalValueFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 427
                },
                {
                    "name": "displayValueFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 428
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "SimpleListColumn"
            ]
        },
        {
            "name": "SwitchFormInput",
            "id": "interface-SwitchFormInput-c318b4a215c8ef742cae4789ee423f79c07102763a82acdca3a73e70fce6b013cf18d23c85dd12f649226b77bd037e42298d7e0f64fce4e298d57932521aba8a",
            "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { FetchService, RequestInitFetch, ToastForFetch } from '@service/fetch.service';\r\nimport { EventsService } from '@service/events.service';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { SpinnerDefaultComponent } from '../spinner-default/spinner-default.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { InputFileConfiguration, SelectFileComponent } from '../select-file/select-file.component';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { ErrorTemplateComponent } from '../error-template/error-template.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { ExecuteFunctionPipe } from '@pipe/execute-function.pipe';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { InputAutocompleteConfiguration, InputAutocompleteLocalConfiguration, InputAutocompleteServerConfiguration, InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectConfiguration, InputSelectLocalConfiguration, InputSelectServerConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { ConfirmDialogData } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\n\r\nexport interface ItemFormConfiguration<Item = any, Data = any> {\r\n  title?: string;\r\n  titleModule: string;\r\n\r\n  subtitle?: ((item: Item) => string | number | null | undefined) | false;\r\n\r\n  formGroup: FormGroup;\r\n  type: 'create' | 'update';\r\n\r\n  loading?: boolean;\r\n  hiddeFields?: boolean;\r\n  fields?: FormInput[];\r\n\r\n  dataItem?: WritableSignal<Item | null>,\r\n\r\n  server: {\r\n      url: string;\r\n      queryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      updateUrl?: string;\r\n      updateQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      createUrl?: string;\r\n      createQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      itemUrl?: string;\r\n      itemQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      fetch?: {\r\n        confirmDialog?: ConfirmDialogData,\r\n        toast?: ToastForFetch,\r\n      }\r\n  }\r\n\r\n  parseDataItemBeforeSendFormFn?: (data: Data) => (Data | Promise<Data>);\r\n  afterSaveFormFn?: (data: Item) => void;\r\n\r\n  itemId?: string | number\r\n  parseItemBeforePatchFormFn?: (item: Item) => (Item | Promise<Item>);\r\n\r\n  ignoreShowError?: boolean;\r\n  interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n  httpError?: FetchErrorResponse;\r\n\r\n  disableAutoBackLocation?: boolean;\r\n\r\n  saveButton?: {\r\n      text: string;\r\n      icon?: string;\r\n      iconPosition?: 'left' | 'right';\r\n  };\r\n  \r\n  cancelButton?: {\r\n      iconPosition?: 'left' | 'right';\r\n      text: string;\r\n      icon?: string;\r\n  } | false;\r\n}\r\n\r\nexport declare type InputType = 'select' | 'select-local' | 'select-server' | 'date' | 'date-range' | 'text' | 'number' | 'textarea' | 'checkbox' | 'switch' | 'autocomplete' | 'autocomplete-local' | 'autocomplete-server';\r\n\r\nexport interface FormInput {\r\n\r\n  type: InputType | 'file';\r\n\r\n  text?: TextFormInput;\r\n\r\n  number?: NumberFormInput;\r\n\r\n  textarea?: TextareaFormInput;\r\n  \r\n  date?: DateFormInput;\r\n  \r\n  dateRange?: DateRangeFormInput;\r\n  \r\n  switch?: SwitchFormInput;\r\n  \r\n  checkbox?: CheckboxFormInput;\r\n\r\n  select?: SelectConfigurationExt;\r\n\r\n  selectLocal?: SelectLocalConfigurationExt;\r\n  \r\n  selectServer?: SelectServerConfigurationExt;\r\n\r\n  autocomplete?: AutocompleteConfigurationExt;\r\n\r\n  autocompleteServer?: AutocompleteServerConfigurationExt;\r\n\r\n  autocompleteLocal?: AutocompleteLocalConfigurationExt;\r\n\r\n  file?: FileFormInput;\r\n}\r\n\r\nexport interface TextFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface NumberFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface TextareaFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  rows?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SelectFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | boolean | null;\r\n  options: { text: string, value: any }[];\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateRangeFormInput<T = any> {\r\n  formControlNameFrom: string;\r\n  formControlNameTo: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValueFrom?: Date | string | number | null;\r\n  defaultValueTo?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SwitchFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface CheckboxFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectConfigurationExt<T = any> extends InputSelectConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectLocalConfigurationExt<T = any> extends InputSelectLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectServerConfigurationExt<T = any> extends InputSelectServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteConfigurationExt<T = any> extends InputAutocompleteConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteLocalConfigurationExt<T = any> extends InputAutocompleteLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteServerConfigurationExt<T = any> extends InputAutocompleteServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface FileFormInput<T = any> extends InputFileConfiguration {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: any;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport const textFormInput = (configuration: TextFormInput): FormInput => ({\r\n  type: 'text',\r\n  text: configuration\r\n});\r\n\r\nexport const numberFormInput = (configuration: NumberFormInput): FormInput => ({\r\n  type: 'number',\r\n  number: configuration\r\n});\r\n\r\nexport const textareaFormInput = (configuration: TextareaFormInput): FormInput => ({\r\n  type: 'textarea',\r\n  textarea: configuration\r\n});\r\n\r\nexport const selectFormInput = (configuration: SelectConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectLocalFormInput = (configuration: SelectLocalConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectServerFormInput = (configuration: SelectServerConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const dateFormInput = (configuration: DateFormInput): FormInput => ({\r\n  type: 'date',\r\n  date: configuration\r\n});\r\n\r\nexport const dateRangeFormInput = (configuration: DateRangeFormInput): FormInput => ({\r\n  type: 'date-range',\r\n  dateRange: configuration\r\n});\r\n\r\nexport const switchFormInput = (configuration: SwitchFormInput): FormInput => ({\r\n  type: 'switch',\r\n  switch: configuration\r\n});\r\n\r\nexport const checkboxFormInput = (configuration: CheckboxFormInput): FormInput => ({\r\n  type: 'checkbox',\r\n  checkbox: configuration\r\n});\r\n\r\nexport const autocompleteFormInput = (configuration: AutocompleteConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocomplete: configuration\r\n});\r\n\r\nexport const autocompleteLocalFormInput = (configuration: AutocompleteLocalConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocompleteLocal: configuration\r\n});\r\n\r\nexport const autocompleteServerFormInput = (configuration: AutocompleteServerConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-server',\r\n  autocompleteServer: configuration\r\n});\r\n\r\nexport const fileFormInput = (configuration: FileFormInput): FormInput => ({\r\n  type: 'file',\r\n  file: configuration\r\n});\r\n\r\n\r\n@Component({\r\n  selector: 'app-item-form-template',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ScrollingModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    SelectFileComponent,\r\n    PathFilesServerPipe,\r\n    ScrollingModule,\r\n    ErrorTemplateComponent,\r\n    GetKeyItemPipe,\r\n    ExecuteFunctionPipe,\r\n    GetMixedValuePipe,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n  ],\r\n  templateUrl: './item-form-template.component.html',\r\n  styleUrls: ['./item-form-template.component.css']\r\n})\r\nexport class ItemFormTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemFormConfiguration;\r\n\r\n  private fetch = inject(FetchService);\r\n  private events = inject(EventsService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  public location = inject(Location);\r\n\r\n  private abortController = new AbortController();\r\n\r\n  ngOnInit() {\r\n    if (this.configuration.type == 'update') {\r\n      this.setItemId();\r\n      if (this.configuration.dataItem && this.configuration.dataItem()) {\r\n        this.configuration.loading = false;\r\n      } else {\r\n        this.configuration.dataItem = signal(null);\r\n        this.getItem();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private setItemId() {\r\n    if (!this.configuration.itemId) {\r\n      if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n        this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getControl(name: string): FormControl {\r\n    return this.configuration.formGroup.get(name) as FormControl;\r\n  }\r\n\r\n  public async submitForm() {\r\n    try {\r\n      const form = this.configuration.formGroup;\r\n      form.markAllAsTouched();\r\n      if (form.invalid || this.configuration.loading) return;\r\n      this.configuration.loading = true;\r\n\r\n      let data = form.getRawValue();\r\n      const { parseDataItemBeforeSendFormFn } = this.configuration;\r\n      data = await parseDataItemBeforeSendFormFn?.(data) ?? data;\r\n\r\n      const requestInit: RequestInitFetch = { };\r\n      if(this.configuration.server.fetch?.confirmDialog) {\r\n        requestInit.confirmDialog = this.configuration.server.fetch.confirmDialog;\r\n      }\r\n      if(this.configuration.server.fetch?.toast) {\r\n        requestInit.toast = this.configuration.server.fetch.toast;\r\n      }\r\n\r\n      let response = null;\r\n      if (this.configuration.type === 'create') {\r\n        response = await this.fetch.post(this.configuration.server.url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_created`, response);\r\n      } else {\r\n        const url = this.configuration.server.updateUrl ?? `${this.configuration.server.url}/${this.configuration.dataItem!()?.id}`;\r\n        response = await this.fetch.put(url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_updated`, response);\r\n      }\r\n\r\n      const { afterSaveFormFn } = this.configuration;\r\n      if (afterSaveFormFn) afterSaveFormFn(response);\r\n\r\n      if (!this.configuration.disableAutoBackLocation) this.location.back();\r\n    } catch { }\r\n    this.configuration.loading = false;\r\n  }\r\n\r\n  public async getItem() {\r\n    this.configuration.dataItem = signal(null)\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { itemId, server } = this.configuration;\r\n      let queryParams:any = server.itemQueryParams ?? {};\r\n      if (queryParams instanceof Object) {\r\n        queryParams = objectToURLSearchParams(queryParams);\r\n        queryParams = queryParams.toString();\r\n      }\r\n      const url = `${server.itemUrl ?? server.url}/${itemId}?${queryParams ? queryParams : ''}`;\r\n      const requestInit: RequestInitFetch = { signal: this.abortController.signal };\r\n      let item: any = await this.fetch.get(url, requestInit);\r\n      const { parseItemBeforePatchFormFn } = this.configuration;\r\n      item = await parseItemBeforePatchFormFn?.(item) ?? item;\r\n      this.configuration.formGroup.patchValue(item);\r\n      this.configuration.dataItem.set(item);\r\n      this.configuration.hiddeFields = false;\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "cssClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 183
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 182
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 180
                },
                {
                    "name": "textLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 181
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Taxe",
            "id": "interface-Taxe-8cde64785121793e7fb531caeb0c0c18879c74a43f9e94537fbf832191beb2caf0db9d5207555e8e96f3f4dd29860ec3d96a573daa260f8a150e619eb59fb315",
            "file": "src/app/shared/interfaces/taxe.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel } from \"./baseModel\";\r\n\r\nexport interface Taxe extends BaseModel {\r\n  name: TaxeName;\r\n  description: string;\r\n  value: number\r\n}\r\n\r\nexport enum TaxeName {\r\n  Igv = 'IGV',\r\n  TipoDeCambio = 'TIPO DE CAMBIO',\r\n  Renta = 'RENTA'\r\n}",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaxeName",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "TextareaFormInput",
            "id": "interface-TextareaFormInput-c318b4a215c8ef742cae4789ee423f79c07102763a82acdca3a73e70fce6b013cf18d23c85dd12f649226b77bd037e42298d7e0f64fce4e298d57932521aba8a",
            "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { FetchService, RequestInitFetch, ToastForFetch } from '@service/fetch.service';\r\nimport { EventsService } from '@service/events.service';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { SpinnerDefaultComponent } from '../spinner-default/spinner-default.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { InputFileConfiguration, SelectFileComponent } from '../select-file/select-file.component';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { ErrorTemplateComponent } from '../error-template/error-template.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { ExecuteFunctionPipe } from '@pipe/execute-function.pipe';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { InputAutocompleteConfiguration, InputAutocompleteLocalConfiguration, InputAutocompleteServerConfiguration, InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectConfiguration, InputSelectLocalConfiguration, InputSelectServerConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { ConfirmDialogData } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\n\r\nexport interface ItemFormConfiguration<Item = any, Data = any> {\r\n  title?: string;\r\n  titleModule: string;\r\n\r\n  subtitle?: ((item: Item) => string | number | null | undefined) | false;\r\n\r\n  formGroup: FormGroup;\r\n  type: 'create' | 'update';\r\n\r\n  loading?: boolean;\r\n  hiddeFields?: boolean;\r\n  fields?: FormInput[];\r\n\r\n  dataItem?: WritableSignal<Item | null>,\r\n\r\n  server: {\r\n      url: string;\r\n      queryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      updateUrl?: string;\r\n      updateQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      createUrl?: string;\r\n      createQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      itemUrl?: string;\r\n      itemQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      fetch?: {\r\n        confirmDialog?: ConfirmDialogData,\r\n        toast?: ToastForFetch,\r\n      }\r\n  }\r\n\r\n  parseDataItemBeforeSendFormFn?: (data: Data) => (Data | Promise<Data>);\r\n  afterSaveFormFn?: (data: Item) => void;\r\n\r\n  itemId?: string | number\r\n  parseItemBeforePatchFormFn?: (item: Item) => (Item | Promise<Item>);\r\n\r\n  ignoreShowError?: boolean;\r\n  interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n  httpError?: FetchErrorResponse;\r\n\r\n  disableAutoBackLocation?: boolean;\r\n\r\n  saveButton?: {\r\n      text: string;\r\n      icon?: string;\r\n      iconPosition?: 'left' | 'right';\r\n  };\r\n  \r\n  cancelButton?: {\r\n      iconPosition?: 'left' | 'right';\r\n      text: string;\r\n      icon?: string;\r\n  } | false;\r\n}\r\n\r\nexport declare type InputType = 'select' | 'select-local' | 'select-server' | 'date' | 'date-range' | 'text' | 'number' | 'textarea' | 'checkbox' | 'switch' | 'autocomplete' | 'autocomplete-local' | 'autocomplete-server';\r\n\r\nexport interface FormInput {\r\n\r\n  type: InputType | 'file';\r\n\r\n  text?: TextFormInput;\r\n\r\n  number?: NumberFormInput;\r\n\r\n  textarea?: TextareaFormInput;\r\n  \r\n  date?: DateFormInput;\r\n  \r\n  dateRange?: DateRangeFormInput;\r\n  \r\n  switch?: SwitchFormInput;\r\n  \r\n  checkbox?: CheckboxFormInput;\r\n\r\n  select?: SelectConfigurationExt;\r\n\r\n  selectLocal?: SelectLocalConfigurationExt;\r\n  \r\n  selectServer?: SelectServerConfigurationExt;\r\n\r\n  autocomplete?: AutocompleteConfigurationExt;\r\n\r\n  autocompleteServer?: AutocompleteServerConfigurationExt;\r\n\r\n  autocompleteLocal?: AutocompleteLocalConfigurationExt;\r\n\r\n  file?: FileFormInput;\r\n}\r\n\r\nexport interface TextFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface NumberFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface TextareaFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  rows?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SelectFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | boolean | null;\r\n  options: { text: string, value: any }[];\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateRangeFormInput<T = any> {\r\n  formControlNameFrom: string;\r\n  formControlNameTo: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValueFrom?: Date | string | number | null;\r\n  defaultValueTo?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SwitchFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface CheckboxFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectConfigurationExt<T = any> extends InputSelectConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectLocalConfigurationExt<T = any> extends InputSelectLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectServerConfigurationExt<T = any> extends InputSelectServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteConfigurationExt<T = any> extends InputAutocompleteConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteLocalConfigurationExt<T = any> extends InputAutocompleteLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteServerConfigurationExt<T = any> extends InputAutocompleteServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface FileFormInput<T = any> extends InputFileConfiguration {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: any;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport const textFormInput = (configuration: TextFormInput): FormInput => ({\r\n  type: 'text',\r\n  text: configuration\r\n});\r\n\r\nexport const numberFormInput = (configuration: NumberFormInput): FormInput => ({\r\n  type: 'number',\r\n  number: configuration\r\n});\r\n\r\nexport const textareaFormInput = (configuration: TextareaFormInput): FormInput => ({\r\n  type: 'textarea',\r\n  textarea: configuration\r\n});\r\n\r\nexport const selectFormInput = (configuration: SelectConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectLocalFormInput = (configuration: SelectLocalConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectServerFormInput = (configuration: SelectServerConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const dateFormInput = (configuration: DateFormInput): FormInput => ({\r\n  type: 'date',\r\n  date: configuration\r\n});\r\n\r\nexport const dateRangeFormInput = (configuration: DateRangeFormInput): FormInput => ({\r\n  type: 'date-range',\r\n  dateRange: configuration\r\n});\r\n\r\nexport const switchFormInput = (configuration: SwitchFormInput): FormInput => ({\r\n  type: 'switch',\r\n  switch: configuration\r\n});\r\n\r\nexport const checkboxFormInput = (configuration: CheckboxFormInput): FormInput => ({\r\n  type: 'checkbox',\r\n  checkbox: configuration\r\n});\r\n\r\nexport const autocompleteFormInput = (configuration: AutocompleteConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocomplete: configuration\r\n});\r\n\r\nexport const autocompleteLocalFormInput = (configuration: AutocompleteLocalConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocompleteLocal: configuration\r\n});\r\n\r\nexport const autocompleteServerFormInput = (configuration: AutocompleteServerConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-server',\r\n  autocompleteServer: configuration\r\n});\r\n\r\nexport const fileFormInput = (configuration: FileFormInput): FormInput => ({\r\n  type: 'file',\r\n  file: configuration\r\n});\r\n\r\n\r\n@Component({\r\n  selector: 'app-item-form-template',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ScrollingModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    SelectFileComponent,\r\n    PathFilesServerPipe,\r\n    ScrollingModule,\r\n    ErrorTemplateComponent,\r\n    GetKeyItemPipe,\r\n    ExecuteFunctionPipe,\r\n    GetMixedValuePipe,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n  ],\r\n  templateUrl: './item-form-template.component.html',\r\n  styleUrls: ['./item-form-template.component.css']\r\n})\r\nexport class ItemFormTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemFormConfiguration;\r\n\r\n  private fetch = inject(FetchService);\r\n  private events = inject(EventsService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  public location = inject(Location);\r\n\r\n  private abortController = new AbortController();\r\n\r\n  ngOnInit() {\r\n    if (this.configuration.type == 'update') {\r\n      this.setItemId();\r\n      if (this.configuration.dataItem && this.configuration.dataItem()) {\r\n        this.configuration.loading = false;\r\n      } else {\r\n        this.configuration.dataItem = signal(null);\r\n        this.getItem();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private setItemId() {\r\n    if (!this.configuration.itemId) {\r\n      if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n        this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getControl(name: string): FormControl {\r\n    return this.configuration.formGroup.get(name) as FormControl;\r\n  }\r\n\r\n  public async submitForm() {\r\n    try {\r\n      const form = this.configuration.formGroup;\r\n      form.markAllAsTouched();\r\n      if (form.invalid || this.configuration.loading) return;\r\n      this.configuration.loading = true;\r\n\r\n      let data = form.getRawValue();\r\n      const { parseDataItemBeforeSendFormFn } = this.configuration;\r\n      data = await parseDataItemBeforeSendFormFn?.(data) ?? data;\r\n\r\n      const requestInit: RequestInitFetch = { };\r\n      if(this.configuration.server.fetch?.confirmDialog) {\r\n        requestInit.confirmDialog = this.configuration.server.fetch.confirmDialog;\r\n      }\r\n      if(this.configuration.server.fetch?.toast) {\r\n        requestInit.toast = this.configuration.server.fetch.toast;\r\n      }\r\n\r\n      let response = null;\r\n      if (this.configuration.type === 'create') {\r\n        response = await this.fetch.post(this.configuration.server.url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_created`, response);\r\n      } else {\r\n        const url = this.configuration.server.updateUrl ?? `${this.configuration.server.url}/${this.configuration.dataItem!()?.id}`;\r\n        response = await this.fetch.put(url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_updated`, response);\r\n      }\r\n\r\n      const { afterSaveFormFn } = this.configuration;\r\n      if (afterSaveFormFn) afterSaveFormFn(response);\r\n\r\n      if (!this.configuration.disableAutoBackLocation) this.location.back();\r\n    } catch { }\r\n    this.configuration.loading = false;\r\n  }\r\n\r\n  public async getItem() {\r\n    this.configuration.dataItem = signal(null)\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { itemId, server } = this.configuration;\r\n      let queryParams:any = server.itemQueryParams ?? {};\r\n      if (queryParams instanceof Object) {\r\n        queryParams = objectToURLSearchParams(queryParams);\r\n        queryParams = queryParams.toString();\r\n      }\r\n      const url = `${server.itemUrl ?? server.url}/${itemId}?${queryParams ? queryParams : ''}`;\r\n      const requestInit: RequestInitFetch = { signal: this.abortController.signal };\r\n      let item: any = await this.fetch.get(url, requestInit);\r\n      const { parseItemBeforePatchFormFn } = this.configuration;\r\n      item = await parseItemBeforePatchFormFn?.(item) ?? item;\r\n      this.configuration.formGroup.patchValue(item);\r\n      this.configuration.dataItem.set(item);\r\n      this.configuration.hiddeFields = false;\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "cssClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 145
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number | null",
                    "optional": true,
                    "description": "",
                    "line": 141
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 138
                },
                {
                    "name": "maxLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 143
                },
                {
                    "name": "minLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 142
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 144
                },
                {
                    "name": "textLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 139
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TextDetail",
            "id": "interface-TextDetail-4eb06c323f65c7c563743bdd99660c7cce6c74cdad0242792a84f0a4071de8558528f7cf28bd5ea34c0cf9bf02ff3171185f2722fb46841db3beebdfb8e0bed9",
            "file": "src/app/shared/components/item-detail-template/item-detail-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    Component,\r\n    Input,\r\n    ViewEncapsulation,\r\n    inject,\r\n    signal,\r\n} from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport {\r\n    ItemDetail,\r\n    ItemDetailConfiguration,\r\n    ItemDetailGroup,\r\n} from 'src/app/shared/interfaces/itemDetail';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { SpinnerDefaultComponent } from '../spinner-default/spinner-default.component';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { GetUserByIdPipe } from '@pipe/get-user-by-id.pipe';\r\nimport { DiffDatePipe } from '@pipe/diff-date.pipe';\r\nimport { ErrorTemplateComponent } from '../error-template/error-template.component';\r\nimport { FetchErrorResponse, RequestInitFetch } from 'src/app/shared/interfaces/fetch';\r\nimport { ListFormatPipe } from '@pipe/list-format.pipe';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { GeneratePathUrlPipe } from '@pipe/generate-path-url.pipe';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { ExecuteFunctionPipe } from '@pipe/execute-function.pipe';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { ConfirmDialogData } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\n\r\nexport const registerDataGroupDetail = (): ItemDetailGroup<any> => {\r\n    return {\r\n        title: 'Datos del registro',\r\n        icon: 'app_registration',\r\n        details: [\r\n            {\r\n                title: 'Estado',\r\n                key: 'status',\r\n                type: 'titlecase',\r\n                cssClass: (item) => item.status ?? '',\r\n                displayValueFn: (item) => item.status,\r\n            },\r\n            {\r\n                title: 'Creado',\r\n                key: 'created_at',\r\n                type: 'diff-date',\r\n                displayValueFn: (item) => item.created_at,\r\n            },\r\n            {\r\n                title: 'Creado por',\r\n                key: 'create_user_id',\r\n                type: 'user',\r\n                displayValueFn: (item) => item.create_user_id,\r\n            },\r\n            {\r\n                title: 'Actualizado',\r\n                key: 'updated_at',\r\n                type: 'diff-date',\r\n                displayValueFn: (item) => item.updated_at,\r\n            },\r\n            {\r\n                title: 'Actualizado por',\r\n                key: 'update_user_id',\r\n                type: 'user',\r\n                displayValueFn: (item) => item.update_user_id,\r\n            },\r\n            {\r\n                title: 'Eliminado',\r\n                key: 'deleted_at',\r\n                type: 'diff-date',\r\n                displayValueFn: (item) => item.deleted_at,\r\n            },\r\n            {\r\n                title: 'Eliminado por',\r\n                key: 'delete_user_id',\r\n                type: 'user',\r\n                displayValueFn: (item) => item.delete_user_id,\r\n            },\r\n            {\r\n                title: 'Restaurado por',\r\n                key: 'restore_user_id',\r\n                type: 'user',\r\n                displayValueFn: (item) => item.restore_user_id,\r\n            },\r\n        ],\r\n    };\r\n};\r\ninterface TextDetail<T = any> extends ItemDetail<T> {\r\n\r\n}\r\nexport const textDetail = () => {}\r\n\r\n@Component({\r\n    selector: 'app-item-detail-template',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        SpinnerDefaultComponent,\r\n        RouterLink,\r\n        PathFilesServerPipe,\r\n        GetUserByIdPipe,\r\n        DiffDatePipe,\r\n        ErrorTemplateComponent,\r\n        ListFormatPipe,\r\n        FirstLetterUppercasePipe,\r\n        ScrollingModule,\r\n        NavigateLateralPanelOutletDirective,\r\n        MatMenuModule,\r\n        GeneratePathUrlPipe,\r\n        MatTooltipModule,\r\n        ExecuteFunctionPipe,\r\n        GetMixedValuePipe,\r\n    ],\r\n    templateUrl: './item-detail-template.component.html',\r\n    styleUrls: ['./item-detail-template.component.css'],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class ItemDetailTemplateComponent {\r\n    @Input({ required: true }) configuration!: ItemDetailConfiguration;\r\n\r\n    public location = inject(Location);\r\n    private fetch = inject(FetchService);\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n\r\n    private abortController = new AbortController();\r\n\r\n    ngOnInit(): void {\r\n        this.setItemId();\r\n        \r\n        if (this.configuration.dataItem && this.configuration.dataItem()) {\r\n            this.configuration.loading = false;\r\n        } else {\r\n            this.configuration.dataItem = signal(null);\r\n            this.getItem();\r\n        }\r\n        \r\n        if (this.configuration.updateItemEvent) this.configuration.updateItemEvent.subscribe(() => this.getItem());\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.abortController.abort();\r\n    }\r\n\r\n\r\n    private setItemId() {\r\n        if (!this.configuration.itemId) {\r\n            if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n                this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n            } else if (this.activatedRoute.parent?.snapshot.paramMap.get('id')) {\r\n                this.configuration.itemId = this.activatedRoute.parent?.snapshot.paramMap.get('id')!;\r\n            } else if (this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id')) {\r\n                this.configuration.itemId = this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id')!;\r\n            }\r\n        }\r\n    }\r\n\r\n    public navigateEdit() {\r\n        if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n            this.router.navigate([`../../edit/${this.configuration.itemId}`], { relativeTo: this.activatedRoute });\r\n        } else if (this.activatedRoute.parent?.snapshot.paramMap.get('id')) {\r\n            this.router.navigate([`./edit`], { relativeTo: this.activatedRoute });\r\n        } else if (this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id')) {\r\n            this.router.navigate([`./edit`], { relativeTo: this.activatedRoute });\r\n        }\r\n    }\r\n\r\n\r\n    public async getItem<T = any>() {\r\n        this.configuration.loading = true;\r\n        try {\r\n            const { server, ignoreShowError } = this.configuration;\r\n            const queryParams = objectToURLSearchParams(server.queryParams ?? {}).toString();\r\n\r\n            const url = `${server.url}/${this.configuration.itemId}?${queryParams ? queryParams : ''}`;\r\n            const requestInit: RequestInitFetch = { signal: this.abortController.signal };\r\n            if (ignoreShowError) requestInit.ignoreInterceptErrors = true;\r\n            let response: T = await this.fetch.get<T>(url, requestInit);\r\n            \r\n            const { parseItemFn } = this.configuration;\r\n            this.configuration.dataItem!.set((await parseItemFn?.(response)) ?? response);\r\n\r\n            const { afterSetItemFn } = this.configuration;\r\n            if (afterSetItemFn) afterSetItemFn(this.configuration.dataItem!()!); \r\n        } catch (error) {\r\n            this.configuration.httpError = error as FetchErrorResponse;\r\n            const { interceptHttpErrorItemFn } = this.configuration;\r\n            if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n        }\r\n        this.configuration.loading = false;\r\n    }\r\n\r\n    public async deleteItem() {\r\n        const url = `${this.configuration.server.url}/${this.configuration.itemId}`;\r\n        const response = await this.fetch.delete(url);\r\n        const { afterDeleteItemFn } = this.configuration;\r\n        if (afterDeleteItemFn) afterDeleteItemFn(response);\r\n        this.location.back();\r\n    }\r\n\r\n    public async restoreItem() {\r\n        const url = `${this.configuration.server.url}/${this.configuration.itemId}/restore`;\r\n        const confirmDialog: ConfirmDialogData = {\r\n            icon: 'autorenew',\r\n            title: '¿Deseas restaurar este registro?',\r\n            description: 'Esta acción restaurará el registro eliminado. Una vez que se haya completado la restauración, el registro volverá a estar visible en la lista principal y se podrá acceder a él como antes.',\r\n        };\r\n        const response = await this.fetch.put<any>(url, {}, { confirmDialog });\r\n        const { afterRestoreItemFn } = this.configuration;\r\n        if (afterRestoreItemFn) afterRestoreItemFn(response);\r\n        this.configuration.dataItem?.update(item => ({...item!, ...response}));\r\n    }\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "ItemDetail"
            ]
        },
        {
            "name": "TextFormInput",
            "id": "interface-TextFormInput-c318b4a215c8ef742cae4789ee423f79c07102763a82acdca3a73e70fce6b013cf18d23c85dd12f649226b77bd037e42298d7e0f64fce4e298d57932521aba8a",
            "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { FetchService, RequestInitFetch, ToastForFetch } from '@service/fetch.service';\r\nimport { EventsService } from '@service/events.service';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { SpinnerDefaultComponent } from '../spinner-default/spinner-default.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { InputFileConfiguration, SelectFileComponent } from '../select-file/select-file.component';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { ErrorTemplateComponent } from '../error-template/error-template.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { ExecuteFunctionPipe } from '@pipe/execute-function.pipe';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { InputAutocompleteConfiguration, InputAutocompleteLocalConfiguration, InputAutocompleteServerConfiguration, InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectConfiguration, InputSelectLocalConfiguration, InputSelectServerConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { ConfirmDialogData } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\n\r\nexport interface ItemFormConfiguration<Item = any, Data = any> {\r\n  title?: string;\r\n  titleModule: string;\r\n\r\n  subtitle?: ((item: Item) => string | number | null | undefined) | false;\r\n\r\n  formGroup: FormGroup;\r\n  type: 'create' | 'update';\r\n\r\n  loading?: boolean;\r\n  hiddeFields?: boolean;\r\n  fields?: FormInput[];\r\n\r\n  dataItem?: WritableSignal<Item | null>,\r\n\r\n  server: {\r\n      url: string;\r\n      queryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      updateUrl?: string;\r\n      updateQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      createUrl?: string;\r\n      createQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      itemUrl?: string;\r\n      itemQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      fetch?: {\r\n        confirmDialog?: ConfirmDialogData,\r\n        toast?: ToastForFetch,\r\n      }\r\n  }\r\n\r\n  parseDataItemBeforeSendFormFn?: (data: Data) => (Data | Promise<Data>);\r\n  afterSaveFormFn?: (data: Item) => void;\r\n\r\n  itemId?: string | number\r\n  parseItemBeforePatchFormFn?: (item: Item) => (Item | Promise<Item>);\r\n\r\n  ignoreShowError?: boolean;\r\n  interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n  httpError?: FetchErrorResponse;\r\n\r\n  disableAutoBackLocation?: boolean;\r\n\r\n  saveButton?: {\r\n      text: string;\r\n      icon?: string;\r\n      iconPosition?: 'left' | 'right';\r\n  };\r\n  \r\n  cancelButton?: {\r\n      iconPosition?: 'left' | 'right';\r\n      text: string;\r\n      icon?: string;\r\n  } | false;\r\n}\r\n\r\nexport declare type InputType = 'select' | 'select-local' | 'select-server' | 'date' | 'date-range' | 'text' | 'number' | 'textarea' | 'checkbox' | 'switch' | 'autocomplete' | 'autocomplete-local' | 'autocomplete-server';\r\n\r\nexport interface FormInput {\r\n\r\n  type: InputType | 'file';\r\n\r\n  text?: TextFormInput;\r\n\r\n  number?: NumberFormInput;\r\n\r\n  textarea?: TextareaFormInput;\r\n  \r\n  date?: DateFormInput;\r\n  \r\n  dateRange?: DateRangeFormInput;\r\n  \r\n  switch?: SwitchFormInput;\r\n  \r\n  checkbox?: CheckboxFormInput;\r\n\r\n  select?: SelectConfigurationExt;\r\n\r\n  selectLocal?: SelectLocalConfigurationExt;\r\n  \r\n  selectServer?: SelectServerConfigurationExt;\r\n\r\n  autocomplete?: AutocompleteConfigurationExt;\r\n\r\n  autocompleteServer?: AutocompleteServerConfigurationExt;\r\n\r\n  autocompleteLocal?: AutocompleteLocalConfigurationExt;\r\n\r\n  file?: FileFormInput;\r\n}\r\n\r\nexport interface TextFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface NumberFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface TextareaFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  rows?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SelectFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | boolean | null;\r\n  options: { text: string, value: any }[];\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateRangeFormInput<T = any> {\r\n  formControlNameFrom: string;\r\n  formControlNameTo: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValueFrom?: Date | string | number | null;\r\n  defaultValueTo?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SwitchFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface CheckboxFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectConfigurationExt<T = any> extends InputSelectConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectLocalConfigurationExt<T = any> extends InputSelectLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectServerConfigurationExt<T = any> extends InputSelectServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteConfigurationExt<T = any> extends InputAutocompleteConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteLocalConfigurationExt<T = any> extends InputAutocompleteLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteServerConfigurationExt<T = any> extends InputAutocompleteServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface FileFormInput<T = any> extends InputFileConfiguration {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: any;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport const textFormInput = (configuration: TextFormInput): FormInput => ({\r\n  type: 'text',\r\n  text: configuration\r\n});\r\n\r\nexport const numberFormInput = (configuration: NumberFormInput): FormInput => ({\r\n  type: 'number',\r\n  number: configuration\r\n});\r\n\r\nexport const textareaFormInput = (configuration: TextareaFormInput): FormInput => ({\r\n  type: 'textarea',\r\n  textarea: configuration\r\n});\r\n\r\nexport const selectFormInput = (configuration: SelectConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectLocalFormInput = (configuration: SelectLocalConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectServerFormInput = (configuration: SelectServerConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const dateFormInput = (configuration: DateFormInput): FormInput => ({\r\n  type: 'date',\r\n  date: configuration\r\n});\r\n\r\nexport const dateRangeFormInput = (configuration: DateRangeFormInput): FormInput => ({\r\n  type: 'date-range',\r\n  dateRange: configuration\r\n});\r\n\r\nexport const switchFormInput = (configuration: SwitchFormInput): FormInput => ({\r\n  type: 'switch',\r\n  switch: configuration\r\n});\r\n\r\nexport const checkboxFormInput = (configuration: CheckboxFormInput): FormInput => ({\r\n  type: 'checkbox',\r\n  checkbox: configuration\r\n});\r\n\r\nexport const autocompleteFormInput = (configuration: AutocompleteConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocomplete: configuration\r\n});\r\n\r\nexport const autocompleteLocalFormInput = (configuration: AutocompleteLocalConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocompleteLocal: configuration\r\n});\r\n\r\nexport const autocompleteServerFormInput = (configuration: AutocompleteServerConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-server',\r\n  autocompleteServer: configuration\r\n});\r\n\r\nexport const fileFormInput = (configuration: FileFormInput): FormInput => ({\r\n  type: 'file',\r\n  file: configuration\r\n});\r\n\r\n\r\n@Component({\r\n  selector: 'app-item-form-template',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ScrollingModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    SelectFileComponent,\r\n    PathFilesServerPipe,\r\n    ScrollingModule,\r\n    ErrorTemplateComponent,\r\n    GetKeyItemPipe,\r\n    ExecuteFunctionPipe,\r\n    GetMixedValuePipe,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n  ],\r\n  templateUrl: './item-form-template.component.html',\r\n  styleUrls: ['./item-form-template.component.css']\r\n})\r\nexport class ItemFormTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemFormConfiguration;\r\n\r\n  private fetch = inject(FetchService);\r\n  private events = inject(EventsService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  public location = inject(Location);\r\n\r\n  private abortController = new AbortController();\r\n\r\n  ngOnInit() {\r\n    if (this.configuration.type == 'update') {\r\n      this.setItemId();\r\n      if (this.configuration.dataItem && this.configuration.dataItem()) {\r\n        this.configuration.loading = false;\r\n      } else {\r\n        this.configuration.dataItem = signal(null);\r\n        this.getItem();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private setItemId() {\r\n    if (!this.configuration.itemId) {\r\n      if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n        this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getControl(name: string): FormControl {\r\n    return this.configuration.formGroup.get(name) as FormControl;\r\n  }\r\n\r\n  public async submitForm() {\r\n    try {\r\n      const form = this.configuration.formGroup;\r\n      form.markAllAsTouched();\r\n      if (form.invalid || this.configuration.loading) return;\r\n      this.configuration.loading = true;\r\n\r\n      let data = form.getRawValue();\r\n      const { parseDataItemBeforeSendFormFn } = this.configuration;\r\n      data = await parseDataItemBeforeSendFormFn?.(data) ?? data;\r\n\r\n      const requestInit: RequestInitFetch = { };\r\n      if(this.configuration.server.fetch?.confirmDialog) {\r\n        requestInit.confirmDialog = this.configuration.server.fetch.confirmDialog;\r\n      }\r\n      if(this.configuration.server.fetch?.toast) {\r\n        requestInit.toast = this.configuration.server.fetch.toast;\r\n      }\r\n\r\n      let response = null;\r\n      if (this.configuration.type === 'create') {\r\n        response = await this.fetch.post(this.configuration.server.url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_created`, response);\r\n      } else {\r\n        const url = this.configuration.server.updateUrl ?? `${this.configuration.server.url}/${this.configuration.dataItem!()?.id}`;\r\n        response = await this.fetch.put(url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_updated`, response);\r\n      }\r\n\r\n      const { afterSaveFormFn } = this.configuration;\r\n      if (afterSaveFormFn) afterSaveFormFn(response);\r\n\r\n      if (!this.configuration.disableAutoBackLocation) this.location.back();\r\n    } catch { }\r\n    this.configuration.loading = false;\r\n  }\r\n\r\n  public async getItem() {\r\n    this.configuration.dataItem = signal(null)\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { itemId, server } = this.configuration;\r\n      let queryParams:any = server.itemQueryParams ?? {};\r\n      if (queryParams instanceof Object) {\r\n        queryParams = objectToURLSearchParams(queryParams);\r\n        queryParams = queryParams.toString();\r\n      }\r\n      const url = `${server.itemUrl ?? server.url}/${itemId}?${queryParams ? queryParams : ''}`;\r\n      const requestInit: RequestInitFetch = { signal: this.abortController.signal };\r\n      let item: any = await this.fetch.get(url, requestInit);\r\n      const { parseItemBeforePatchFormFn } = this.configuration;\r\n      item = await parseItemBeforePatchFormFn?.(item) ?? item;\r\n      this.configuration.formGroup.patchValue(item);\r\n      this.configuration.dataItem.set(item);\r\n      this.configuration.hiddeFields = false;\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "cssClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number | null",
                    "optional": true,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "maxLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "minLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "textLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 118
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ToastDataPromise",
            "id": "interface-ToastDataPromise-2a613ac4a4266acbb2b0c713e18f56bd11e686f101500b2e52890e6f752a45bde5892572ac4de1ee03abea964801f9155f35448bc1f7491555f7aafb5402517c",
            "file": "src/app/shared/interfaces/toast.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MatSnackBarRef } from \"@angular/material/snack-bar\";\r\n\r\nexport interface ToastDataSimple {\r\n  title?: string;\r\n  icon?: string;\r\n  message: string;\r\n  duration?: number;\r\n  data?: any;\r\n  autoCloseFn?: (data: any) => void;\r\n  action?: {\r\n    text: string;\r\n    fn: (data: any) => void;\r\n  }\r\n}\r\n\r\nexport interface ToastStatusPromise {\r\n  message: string;\r\n  icon: string;\r\n}\r\n\r\nexport interface ToastDataPromise {\r\n    promise: Promise<any>;\r\n    loading: string | ToastStatusPromise;\r\n    success: string | ToastStatusPromise | ((data: any, snackbarRef: MatSnackBarRef<any>, currentMessage: string) => Promise<string> | string);\r\n    error: string | ToastStatusPromise | ((error: any, snackbarRef: MatSnackBarRef<any>, currentMessage: string) => Promise<string> | string);\r\n}\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ToastStatusPromise | ",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ToastStatusPromise",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "promise",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Promise<any>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ToastStatusPromise | ",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ToastDataSimple",
            "id": "interface-ToastDataSimple-2a613ac4a4266acbb2b0c713e18f56bd11e686f101500b2e52890e6f752a45bde5892572ac4de1ee03abea964801f9155f35448bc1f7491555f7aafb5402517c",
            "file": "src/app/shared/interfaces/toast.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MatSnackBarRef } from \"@angular/material/snack-bar\";\r\n\r\nexport interface ToastDataSimple {\r\n  title?: string;\r\n  icon?: string;\r\n  message: string;\r\n  duration?: number;\r\n  data?: any;\r\n  autoCloseFn?: (data: any) => void;\r\n  action?: {\r\n    text: string;\r\n    fn: (data: any) => void;\r\n  }\r\n}\r\n\r\nexport interface ToastStatusPromise {\r\n  message: string;\r\n  icon: string;\r\n}\r\n\r\nexport interface ToastDataPromise {\r\n    promise: Promise<any>;\r\n    loading: string | ToastStatusPromise;\r\n    success: string | ToastStatusPromise | ((data: any, snackbarRef: MatSnackBarRef<any>, currentMessage: string) => Promise<string> | string);\r\n    error: string | ToastStatusPromise | ((error: any, snackbarRef: MatSnackBarRef<any>, currentMessage: string) => Promise<string> | string);\r\n}\r\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "autoCloseFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ToastForFetch",
            "id": "interface-ToastForFetch-300fea7126945213019d290d02e1ab2d32d4666f59f1f436efc72062a50c74b5f27afb5b83f1f596a3e2c0b9196d744d98a2d87fc14f4e95aa654ff50d18b0de",
            "file": "src/app/core/services/fetch.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\r\nimport { FetchErrorResponse, FetchErrorType, HTTP_ERROR_CODES, NAME_TOKEN, RequestInitFetch as RequestInit, defaultMessageDialogCreateItem, defaultMessageDialogDeleteItem, defaultMessageDialogUpdateItem } from 'src/app/shared/interfaces/fetch';\r\nimport { FetchBase } from '@utility/fetchBase';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ToastService } from './toast.service';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from './auth.service';\r\nimport { ToastDataPromise } from '@interface/toast';\r\nimport { MatSnackBarRef } from '@angular/material/snack-bar';\r\nimport { ConfirmDialogData, ConfirmDialogTemplateComponent } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nexport interface ToastForFetch extends Omit<ToastDataPromise, 'promise' | 'success' | 'error'> {\r\n  success: string | ((data: any, snackbarRef: MatSnackBarRef<any>, currentMessage: string) => Promise<string> | string);\r\n  error: string | ((error: any, snackbarRef: MatSnackBarRef<any>, currentMessage: string) => Promise<string> | string);\r\n}\r\n\r\nexport interface RequestInitFetch extends Omit<RequestInit, 'confirmDialog'> {\r\n  confirmDialog?: ConfirmDialogData | false;\r\n  toast?: ToastForFetch | false;\r\n}\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FetchService extends FetchBase {\r\n  private dialog = inject(MatDialog);\r\n  private toastService = inject(ToastService);\r\n  private router = inject(Router);\r\n  private authService = inject(AuthService);\r\n\r\n  private apiUrl: string = environment.API_URL;\r\n\r\n  constructor() {\r\n    super(\r\n      {\r\n        interceptHeadersFn: (request) => this.interceptHeadersFn(request),\r\n        interceptErrorsFn: (error, request) => this.interceptErrorsFn(error, request),\r\n      }\r\n    )\r\n  }\r\n\r\n  /* -------------------------------------------------------------------------------------- */\r\n  /* -----------------------------------    INTERCEPTORS   -------------------------------- */\r\n  /* -------------------------------------------------------------------------------------- */\r\n  private interceptHeadersFn(requestInit: RequestInitFetch): { [Key: string]: string } {\r\n    const headers = requestInit?.headers || {};\r\n    const token = localStorage.getItem(NAME_TOKEN);\r\n    if (token && !requestInit?.ignoreAuthorization) headers['Authorization'] = `Bearer ${token}`;\r\n    return headers;\r\n  }\r\n\r\n  private async interceptErrorsFn(error: FetchErrorResponse, request: RequestInitFetch): Promise<void> {    \r\n    if (request.ignoreInterceptErrors) return; // if ignore intercept errors\r\n\r\n    const errorName = error.name;\r\n\r\n    if (errorName == FetchErrorType.ABORT) return;\r\n\r\n    if (errorName == FetchErrorType.HTTP && error.status == 401 && error.statusText?.includes('Unauthorized')) {\r\n      this.toastService.open('Su sesión ha expirado');\r\n      this.authService.removeToken();\r\n      this.router.navigate(['/login']);\r\n      return;\r\n    }\r\n\r\n    this.toastService.open(this.getNameError(error) ?? 'Error desconocido');\r\n  }\r\n\r\n  private getNameError(error: FetchErrorResponse): string | undefined {\r\n    const errorHttp = HTTP_ERROR_CODES.find((httpError) => httpError.status == error.status);\r\n    return errorHttp?.description;\r\n  }\r\n\r\n  /* -------------------------------------------------------------------------------------- */\r\n  /* ------------------------------------   METHODS    ------------------------------------ */\r\n  /* -------------------------------------------------------------------------------------- */\r\n\r\n  public async get<T>(url: string, requestInit?: RequestInitFetch, baseUrl: string = this.apiUrl): Promise<T> {\r\n    const { toast, confirmDialog, ...request} = { ...requestInit ?? {} };\r\n\r\n    if (confirmDialog) await this.confirmDialog(confirmDialog);\r\n\r\n    if (toast) {\r\n      request.ignoreInterceptErrors = true;\r\n      const promise = this._get(`${baseUrl}/${url}`, request);\r\n      return this.resolveToastPromise<T>(promise, toast);\r\n    }\r\n\r\n    return this._get(`${baseUrl}/${url}`, request);\r\n  }\r\n\r\n  public async post<T>(url: string, body: any, requestInit?: RequestInitFetch, baseUrl: string = this.apiUrl): Promise<T> {\r\n    const { toast, confirmDialog, ...request} = { ...requestInit ?? {} };\r\n\r\n    if (confirmDialog != false) await this.confirmDialog(confirmDialog ?? defaultMessageDialogCreateItem());\r\n\r\n    if (toast != false) {\r\n      request.ignoreInterceptErrors = true;\r\n      const promise = this._post(`${baseUrl}/${url}`, body, request);\r\n      const toastDataPromise = toast ? toast : {\r\n        loading: 'Guardando registro...',\r\n        success: 'Registro guardado',\r\n        error: (error: any) => `Error al guardar registro: ${error.error?.message ?? 'Error desconocido'}`,\r\n      };\r\n      return this.resolveToastPromise<T>(promise, toastDataPromise, requestInit);\r\n    }\r\n\r\n    return this._post(`${baseUrl}/${url}`, body, request);\r\n  }\r\n\r\n  public async put<T>(url: string, body: any, requestInit?: RequestInitFetch, baseUrl: string = this.apiUrl): Promise<T> {\r\n    const { toast, confirmDialog, ...request} = { ...requestInit ?? {} };\r\n\r\n    if (confirmDialog != false) await this.confirmDialog(confirmDialog ?? defaultMessageDialogUpdateItem());\r\n\r\n    if (toast != false) {\r\n      request.ignoreInterceptErrors = true;\r\n      const promise = this._put(`${baseUrl}/${url}`, body, request);\r\n      const toastDataPromise = toast ? toast : {\r\n        loading: 'Actualizando registro...',\r\n        success: 'Registro actualizado',\r\n        error: (error: any) => `Error al actualizar registro: ${error.error?.message ?? 'Error desconocido'}`,\r\n      };\r\n      return this.resolveToastPromise<T>(promise, toastDataPromise, requestInit);\r\n    }\r\n\r\n    return this._put(`${baseUrl}/${url}`, body, request);\r\n  }\r\n\r\n  public async patch<T>(url: string, body: any, requestInit?: RequestInitFetch, baseUrl: string = this.apiUrl): Promise<T> {\r\n    const { toast, confirmDialog, ...request} = { ...requestInit ?? {} };\r\n\r\n    if (confirmDialog != false) await this.confirmDialog(confirmDialog ?? defaultMessageDialogUpdateItem());\r\n    \r\n    if (toast != false) {\r\n      request.ignoreInterceptErrors = true;\r\n      const promise = this._patch(`${baseUrl}/${url}`, body, request);\r\n      const toastDataPromise = toast ? toast : {\r\n        loading: 'Actualizando registro...',\r\n        success: 'Registro actualizado',\r\n        error: 'Error al actualizar registro',\r\n      };\r\n      return this.resolveToastPromise<T>(promise, toastDataPromise, requestInit);\r\n    }\r\n\r\n    return this._patch(`${baseUrl}/${url}`, body, request);\r\n  }\r\n\r\n  public async delete<T>(url: string, requestInit?: RequestInitFetch, baseUrl: string = this.apiUrl): Promise<T> {\r\n    const { toast, confirmDialog, ...request} = { ...requestInit ?? {} };\r\n\r\n    if (confirmDialog != false) await this.confirmDialog(confirmDialog ?? defaultMessageDialogDeleteItem());\r\n\r\n    if (toast != false) {\r\n      request.ignoreInterceptErrors = true;\r\n      const promise = this._delete(`${baseUrl}/${url}`, request);\r\n      const toastDataPromise = toast ? toast : {\r\n        loading: 'Eliminando registro...',\r\n        success: 'Registro eliminado',\r\n        error: 'Error al eliminar registro',\r\n      };\r\n      return this.resolveToastPromise<T>(promise, toastDataPromise, requestInit);\r\n    }\r\n\r\n    return this._delete(`${baseUrl}/${url}`, request);\r\n  }\r\n\r\n  public async blob(url: string, requestInit?: RequestInitFetch, baseUrl: string = this.apiUrl): Promise<Blob> {\r\n    const { toast, confirmDialog, ...request} = { ...requestInit ?? {} };\r\n\r\n    if (confirmDialog) await this.confirmDialog(confirmDialog);\r\n\r\n    if (toast) {\r\n      request.ignoreInterceptErrors = true;\r\n      const promise = this._blob<Blob>(`${baseUrl}/${url}`, request);\r\n      return this.resolveToastPromise<Blob>(promise, toast, requestInit);\r\n    }\r\n\r\n    return this._blob<Blob>(`${baseUrl}/${url}`, request);\r\n  }\r\n\r\n  /* -------------------------------------------------------------------------------------- */\r\n  /* ------------------------------------   ACTIONS   ------------------------------------- */\r\n  /* -------------------------------------------------------------------------------------- */\r\n  private confirmDialog(data: ConfirmDialogData): Promise<boolean> {\r\n    return new Promise((resolve, reject) => {\r\n      this.dialog\r\n        .open(ConfirmDialogTemplateComponent, { data })\r\n        .afterClosed()\r\n        .subscribe((res: boolean) => {\r\n          if (res) resolve(true);\r\n          reject({ name: FetchErrorType.CONFIRMATION_DIALOG, message: 'Abort confirmation dialog' });\r\n        });\r\n    });\r\n  }\r\n\r\n  private resolveToastPromise<T>(promise: Promise<T>, toastDataPromise: ToastForFetch, requestInit?: RequestInitFetch): Promise<T> {\r\n    return new Promise(async (resolve, reject) => {\r\n      this.toastService.promise(promise, {\r\n        loading: toastDataPromise.loading ?? 'Cargando...',\r\n        success: async (data, snackBarRef, currentMessage) => {\r\n          resolve(data);\r\n          return toastDataPromise.success instanceof Function ? await toastDataPromise.success(data, snackBarRef, currentMessage) : toastDataPromise.success;\r\n        },\r\n\r\n        error: (error: FetchErrorResponse, snackBarRef, currentMessage) => {\r\n          if (error.name == FetchErrorType.ABORT) {\r\n            snackBarRef.dismiss();\r\n            reject(error);\r\n            return currentMessage;\r\n          } else if (error.name == FetchErrorType.HTTP && error.status == 401 && error.statusText?.includes('Unauthorized') && !requestInit?.ignoreAuthorization) {\r\n            this.authService.removeToken();\r\n            this.router.navigate(['/login']);\r\n            return 'Su sesión ha expirado, vuelva a iniciar';\r\n          }\r\n          reject(error);\r\n          return toastDataPromise.error instanceof Function ? toastDataPromise.error(error, snackBarRef, currentMessage) : toastDataPromise.error;\r\n        },\r\n      });\r\n    });\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "Omit"
            ]
        },
        {
            "name": "ToastStatusPromise",
            "id": "interface-ToastStatusPromise-2a613ac4a4266acbb2b0c713e18f56bd11e686f101500b2e52890e6f752a45bde5892572ac4de1ee03abea964801f9155f35448bc1f7491555f7aafb5402517c",
            "file": "src/app/shared/interfaces/toast.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MatSnackBarRef } from \"@angular/material/snack-bar\";\r\n\r\nexport interface ToastDataSimple {\r\n  title?: string;\r\n  icon?: string;\r\n  message: string;\r\n  duration?: number;\r\n  data?: any;\r\n  autoCloseFn?: (data: any) => void;\r\n  action?: {\r\n    text: string;\r\n    fn: (data: any) => void;\r\n  }\r\n}\r\n\r\nexport interface ToastStatusPromise {\r\n  message: string;\r\n  icon: string;\r\n}\r\n\r\nexport interface ToastDataPromise {\r\n    promise: Promise<any>;\r\n    loading: string | ToastStatusPromise;\r\n    success: string | ToastStatusPromise | ((data: any, snackbarRef: MatSnackBarRef<any>, currentMessage: string) => Promise<string> | string);\r\n    error: string | ToastStatusPromise | ((error: any, snackbarRef: MatSnackBarRef<any>, currentMessage: string) => Promise<string> | string);\r\n}\r\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-57e21dc3a4de99cb9583a6a25624df912d51575b4c315d2e77ec559b7cf222ef75519170e88759a1677ebdc844dd563d0426c594f56003948002b584e1adeeb9",
            "file": "src/app/shared/interfaces/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel, DocumentTypeEnum } from \"./baseModel\";\r\n\r\nexport interface User extends BaseModel {\r\n    id: number;\r\n    document_number: string;\r\n    document_type: DocumentTypeEnum;\r\n    name: string;\r\n    email: string;\r\n    role: UserRoleEnum;\r\n    code: string;\r\n    address: string;\r\n    phone: string;\r\n    cellphone: string;\r\n    birth_date: string;\r\n    image?: string\r\n    email_verified_at?: string;\r\n\r\n    level: UserlevelEnum;\r\n\r\n}\r\n\r\nexport interface DataRUC {\r\n    document_type_id: number;\r\n    direccion: string;\r\n    direccion_completa: string;\r\n    ruc: string;\r\n    nombre_o_razon_social: string;\r\n    estado: string;\r\n    condicion: string;\r\n    departamento: string;\r\n    provincia: string;\r\n    distrito: string;\r\n    ubigeo_sunat: string;\r\n    ubigeo: [string, string, string],\r\n    es_agente_de_retencion: 'SI' | 'NO',\r\n    representantes_legales: RepresentanteLegal[]\r\n\r\n}\r\n\r\nexport enum UserRoleEnum {\r\n    PM = 'pm',\r\n    KAM = 'kam',\r\n    MASTER = 'master',\r\n    COMPRAS = 'compras',\r\n    ALMACEN = 'almacén',\r\n    TESORERÍA = 'tesorería',\r\n    CONTABILIDAD = 'contabilidad',\r\n    ADMINISTRACIÓN = 'administración',\r\n    GESTIÓN = 'gestión',\r\n}\r\n\r\nexport enum UserlevelEnum {\r\n    Master = 1,\r\n    Full = 2,\r\n    Standar = 3,\r\n    Basic = 4,\r\n}\r\n\r\nexport interface RepresentanteLegal {\r\n    tipodoc: string;\r\n    numdoc: string;\r\n    nombre: string;\r\n    cargo: string;\r\n    desde: string;\r\n}\r\n\r\n\r\nexport interface DataDNI {\r\n    dni: string;\r\n    nombres: string;\r\n    apellidoPaterno: string;\r\n    apellidoMaterno: string;\r\n    codVerifica: string;\r\n    document_type_id: number;\r\n\r\n}\r\n\r\nexport interface UserToken {\r\n    id: number;\r\n    name: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n    last_used_at: string;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "birth_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "cellphone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "document_number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "document_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DocumentTypeEnum",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "email_verified_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserlevelEnum",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserRoleEnum",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "UserToken",
            "id": "interface-UserToken-57e21dc3a4de99cb9583a6a25624df912d51575b4c315d2e77ec559b7cf222ef75519170e88759a1677ebdc844dd563d0426c594f56003948002b584e1adeeb9",
            "file": "src/app/shared/interfaces/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel, DocumentTypeEnum } from \"./baseModel\";\r\n\r\nexport interface User extends BaseModel {\r\n    id: number;\r\n    document_number: string;\r\n    document_type: DocumentTypeEnum;\r\n    name: string;\r\n    email: string;\r\n    role: UserRoleEnum;\r\n    code: string;\r\n    address: string;\r\n    phone: string;\r\n    cellphone: string;\r\n    birth_date: string;\r\n    image?: string\r\n    email_verified_at?: string;\r\n\r\n    level: UserlevelEnum;\r\n\r\n}\r\n\r\nexport interface DataRUC {\r\n    document_type_id: number;\r\n    direccion: string;\r\n    direccion_completa: string;\r\n    ruc: string;\r\n    nombre_o_razon_social: string;\r\n    estado: string;\r\n    condicion: string;\r\n    departamento: string;\r\n    provincia: string;\r\n    distrito: string;\r\n    ubigeo_sunat: string;\r\n    ubigeo: [string, string, string],\r\n    es_agente_de_retencion: 'SI' | 'NO',\r\n    representantes_legales: RepresentanteLegal[]\r\n\r\n}\r\n\r\nexport enum UserRoleEnum {\r\n    PM = 'pm',\r\n    KAM = 'kam',\r\n    MASTER = 'master',\r\n    COMPRAS = 'compras',\r\n    ALMACEN = 'almacén',\r\n    TESORERÍA = 'tesorería',\r\n    CONTABILIDAD = 'contabilidad',\r\n    ADMINISTRACIÓN = 'administración',\r\n    GESTIÓN = 'gestión',\r\n}\r\n\r\nexport enum UserlevelEnum {\r\n    Master = 1,\r\n    Full = 2,\r\n    Standar = 3,\r\n    Basic = 4,\r\n}\r\n\r\nexport interface RepresentanteLegal {\r\n    tipodoc: string;\r\n    numdoc: string;\r\n    nombre: string;\r\n    cargo: string;\r\n    desde: string;\r\n}\r\n\r\n\r\nexport interface DataDNI {\r\n    dni: string;\r\n    nombres: string;\r\n    apellidoPaterno: string;\r\n    apellidoMaterno: string;\r\n    codVerifica: string;\r\n    document_type_id: number;\r\n\r\n}\r\n\r\nexport interface UserToken {\r\n    id: number;\r\n    name: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n    last_used_at: string;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "created_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "last_used_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "updated_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 82
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Vehicle",
            "id": "interface-Vehicle-ea74e980ea878c8a18cbfee8089fbdbcb6f58c5d16008361fcf2303df51f0753f41e3f981e9c4aab893815532eb3c7589edb89000facd318cdec8c9c6e9a2a71",
            "file": "src/app/shared/interfaces/vehicle.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel } from \"./baseModel\";\r\nimport { Client } from \"./client\";\r\nimport { ContractVehicle } from \"./contractVehicle\";\r\nimport { VehicleType } from \"./vehicleType\";\r\n\r\nexport interface Vehicle extends BaseModel {\r\n    vehicle_type_id: number;\r\n    client_id: number;\r\n    plate: string;\r\n    color: string;\r\n    brand: string;\r\n    model: string;\r\n    year: string;\r\n    image: string;\r\n    file: string;\r\n    description: string;\r\n\r\n    client?: Client;\r\n    vehicle_type?: VehicleType;\r\n    latest_contract_vehicle?: ContractVehicle;\r\n    contract_vehicles?: ContractVehicle[];\r\n}\r\n",
            "properties": [
                {
                    "name": "brand",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "client",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Client",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "client_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "contract_vehicles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContractVehicle[]",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "latest_contract_vehicle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContractVehicle",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "plate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "vehicle_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VehicleType",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "vehicle_type_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "VehicleType",
            "id": "interface-VehicleType-81902a1e4c8cf08aa487d7c1beae391c729abab2325e1388aae1ed2873fca855a8bbc6074abd8b7bd664789719b3e76eac45f3ef805b41f6764cd55679056fc1",
            "file": "src/app/shared/interfaces/vehicleType.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseModel } from \"./baseModel\";\r\n\r\nexport interface VehicleType extends BaseModel {\r\n    name: string;\r\n    description: string;\r\n    image: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        },
        {
            "name": "VehicleUnsubscribe",
            "id": "interface-VehicleUnsubscribe-ec8f855effc5a17b726815b4d1d5da5655190c264c3882c48beca67ce72516d1cb9fe973ba5b8e17a3603d786c14c87c6e82c8643f8bed842aaca7f9d7221a43",
            "file": "src/app/shared/interfaces/vehicleUnsubscribe.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl, FormGroup, Validators } from \"@angular/forms\";\r\nimport { BaseModel } from \"./baseModel\";\r\nimport { User } from \"./user\";\r\nimport { Vehicle } from \"./vehicle\";\r\n\r\nexport interface VehicleUnsubscribe extends BaseModel {\r\n    vehicle_id: number;\r\n    user_id: number;\r\n    programming_type: VehicleUnsubscribeProgrammingType;\r\n    reason: string;\r\n    observations: string;\r\n    start_date: string;\r\n    end_date: string;\r\n    cancellation_user_id: number;\r\n    cancellation_date: string;\r\n\r\n    vehicle?: Vehicle;\r\n    user?: User;\r\n    cancellation_user?: User;\r\n}\r\n\r\nexport enum VehicleUnsubscribeProgrammingType {\r\n    FinDeContrato = 'fin de contrato',\r\n    fechaFija = 'fecha fija',\r\n    indefinida = 'indefinida',\r\n}\r\nexport const VEHICLE_UNSUBSCRIBE_PROGRAMMING_TYPE = Object.values(VehicleUnsubscribeProgrammingType);\r\n",
            "properties": [
                {
                    "name": "cancellation_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "cancellation_user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "cancellation_user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "end_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "observations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "programming_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VehicleUnsubscribeProgrammingType",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "reason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "start_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "vehicle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Vehicle",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "vehicle_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseModel"
            ]
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-43ba30c2feee2a30939b6d0c8cdf3904792249fd91a219733787f0e1fe49328a65efcf7b6d839d139f167388fdcb57f38b33dd4455c23385744ced7f7c37522e",
            "file": "src/app/core/services/auth.service.ts",
            "properties": [
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "signal(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<User | null>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isLogged",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "redirectToLogin",
                    "args": [
                        {
                            "name": "routeLogin",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'/login'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "routeLogin",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'/login'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectToPrincipalRoute",
                    "args": [
                        {
                            "name": "principalRoute",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'/'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "principalRoute",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'/'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "setToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject, WritableSignal, signal } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { NAME_TOKEN } from 'src/app/shared/interfaces/fetch';\r\nimport { User } from '@interface/user';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n    private router = inject(Router);\r\n\r\n    public user: WritableSignal<User | null> = signal(null);\r\n\r\n    public setUser(user: User): void {\r\n        this.user.set(user);\r\n    }\r\n\r\n    public setToken(token: string): void {\r\n        localStorage.setItem(NAME_TOKEN, token);\r\n    }\r\n\r\n    public getToken(): string | null {\r\n        return localStorage.getItem(NAME_TOKEN);\r\n    }\r\n\r\n    public removeToken(): void {\r\n        localStorage.removeItem(NAME_TOKEN);\r\n    }\r\n\r\n    public isLogged(): boolean {\r\n        return !!this.getToken();\r\n    }\r\n\r\n    public logout(): void {\r\n        this.removeToken();\r\n        this.user.set(null);\r\n        this.router.navigate(['/login']);\r\n    }\r\n\r\n    public redirectToLogin(routeLogin: string = '/login'): void {\r\n        this.router.navigate([routeLogin]);\r\n    }\r\n\r\n    public redirectToPrincipalRoute(principalRoute: string = '/'): void {\r\n        this.router.navigate([principalRoute]);\r\n    }\r\n\r\n\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CustomPaginator",
            "id": "injectable-CustomPaginator-302a7e3b7364e2d3eb5d612d80d2d9b69bdf2105c302c4ea3da824682f6bf673e6718a8bd207f98d12862818ba1accfbe26e705c1b2f9e08317af53953fb8068",
            "file": "src/app/paginator.intl.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatPaginatorIntl } from '@angular/material/paginator';\r\n\r\n@Injectable()\r\nexport class CustomPaginator extends MatPaginatorIntl {\r\n    constructor() {\r\n        super();\r\n        this.nextPageLabel = 'Siguiente';\r\n        this.previousPageLabel = 'Anterior';\r\n        this.itemsPerPageLabel = 'Items por página:';\r\n        this.firstPageLabel = 'Primera';\r\n        this.lastPageLabel = 'Última';\r\n        this.getRangeLabel = (page, pageSize, length) => {\r\n            if (length === 0 || pageSize === 0) return '0 de ' + length;\r\n            length = Math.max(length, 0);\r\n            const startIndex = page * pageSize;\r\n            // If the start index exceeds the list length, do not try and fix the end index to the end.\r\n            const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\r\n            return startIndex + 1 + ' - ' + endIndex + ' de ' + length;\r\n        };\r\n    }\r\n\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 5
            },
            "extends": [
                "MatPaginatorIntl"
            ],
            "type": "injectable"
        },
        {
            "name": "DatabaseStorageService",
            "id": "injectable-DatabaseStorageService-6823f4b66151be0a931670a7cb2aebdb3a3319ddb11882225005b85b95c687bcd559d92ac1b969acbaccbe533e10f9301e27919cfba6fb85fc8b7087d56d5613",
            "file": "src/app/core/services/database-storage.service.ts",
            "properties": [
                {
                    "name": "fetch",
                    "defaultValue": "inject(FetchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "modules",
                    "defaultValue": "[\r\n        {\r\n            name: 'Aperturas de caja',\r\n            key: NameModuleDatabase.BoxOpenings,\r\n            recurrent: Recurrent.Hourly,\r\n            config: {\r\n                url: 'box-opening',\r\n                queryParams: 'relations=box.account.bank&box_status=abierto&limit=100'\r\n            },\r\n        },\r\n        {\r\n            name: 'Bancos',\r\n            key: NameModuleDatabase.Banks,\r\n            recurrent: Recurrent.Daily,\r\n            config: {\r\n                url: 'database-storage/banks'\r\n            },\r\n        },\r\n        {\r\n            name: 'Usuarios',\r\n            key: NameModuleDatabase.Users,\r\n            recurrent: Recurrent.Hourly,\r\n            config: {\r\n                url: 'database-storage/users'\r\n            },\r\n        },\r\n        {\r\n            name: 'Valores de impuestos',\r\n            key: NameModuleDatabase.Taxes,\r\n            recurrent: Recurrent.Hourly,\r\n            config: {\r\n                url: 'database-storage/taxes'\r\n            },\r\n        },\r\n        {\r\n            name: 'Tipos de documento',\r\n            key: NameModuleDatabase.DocumentTypes,\r\n            recurrent: Recurrent.Daily,\r\n            config: {\r\n                url: 'database-storage/document-types'\r\n            },\r\n        },\r\n        {\r\n            name: 'Planes',\r\n            key: NameModuleDatabase.Plans,\r\n            recurrent: Recurrent.Daily,\r\n            config: {\r\n                url: 'database-storage/plans'\r\n            },\r\n        },\r\n        {\r\n            name: 'Tipos de vehículo',\r\n            key: NameModuleDatabase.VehicleTypes,\r\n            recurrent: Recurrent.Daily,\r\n            config: {\r\n                url: 'database-storage/vehicle-types'\r\n            },\r\n        },\r\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModuleConfiguration[]",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "storageMap",
                    "defaultValue": "inject(StorageMap)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getData",
                    "args": [
                        {
                            "name": "key",
                            "type": "NameModuleDatabase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T[]>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "NameModuleDatabase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataServer",
                    "args": [
                        {
                            "name": "module",
                            "type": "ModuleConfiguration",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T[]>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "module",
                            "type": "ModuleConfiguration",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOne",
                    "args": [
                        {
                            "name": "key",
                            "type": "NameModuleDatabase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T | undefined>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "NameModuleDatabase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDataLocal",
                    "args": [
                        {
                            "name": "key",
                            "type": "NameModuleDatabase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "NameModuleDatabase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\r\nimport { StorageMap } from '@ngx-pwa/local-storage';\r\nimport { FetchService } from './fetch.service';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { getWeek } from 'date-fns';\r\n\r\nconst SAL_LONG = 16;\r\nconst INITIALIZATION_VECTOR_LONG = SAL_LONG;\r\n\r\nconst bufferABase64 = (buffer: any) => btoa(String.fromCharCode(...new Uint8Array(buffer)));\r\nconst base64ABuffer = (buffer: any) => Uint8Array.from(atob(buffer), c => c.charCodeAt(0));\r\n\r\nconst passwordBasedKeyDerivation = async (password: string, sal: any, iterations: number, long: number, hash: any, algoritmo = 'AES-CBC') => {\r\n    const encoder = new TextEncoder();\r\n    let key = await window.crypto.subtle.importKey('raw', encoder.encode(password), { name: 'PBKDF2' }, false, ['deriveKey']);\r\n    return await window.crypto.subtle.deriveKey(\r\n        {\r\n            name: 'PBKDF2',\r\n            salt: encoder.encode(sal),\r\n            iterations,\r\n            hash\r\n        },\r\n        key,\r\n        { name: algoritmo, length: long },\r\n        false,\r\n        ['encrypt', 'decrypt'],\r\n    );\r\n}\r\n\r\nconst encrypt = async (password: string, textoPlano: any) => {\r\n    const encoder = new TextEncoder();\r\n    const sal = window.crypto.getRandomValues(new Uint8Array(SAL_LONG));\r\n    const initializationVector = window.crypto.getRandomValues(new Uint8Array(INITIALIZATION_VECTOR_LONG));\r\n    const textPlainBuffer = encoder.encode(textoPlano);\r\n    const clave = await passwordBasedKeyDerivation(password, sal, 100000, 256, 'SHA-256');\r\n    const encrypted = await window.crypto.subtle.encrypt({ name: \"AES-CBC\", iv: initializationVector }, clave, textPlainBuffer);\r\n    return bufferABase64([...sal, ...initializationVector, ...new Uint8Array(encrypted)]);\r\n};\r\n\r\nconst decrypt = async (password: string, encriptadoEnBase64: any) => {\r\n    const decoder = new TextDecoder();\r\n    const encryptData = base64ABuffer(encriptadoEnBase64);\r\n    const sal = encryptData.slice(0, SAL_LONG);\r\n    const initializationVector = encryptData.slice(0 + SAL_LONG, SAL_LONG + INITIALIZATION_VECTOR_LONG);\r\n    const clave = await passwordBasedKeyDerivation(password, sal, 100000, 256, 'SHA-256');\r\n    const decryptDataBuffer = await window.crypto.subtle.decrypt({ name: \"AES-CBC\", iv: initializationVector }, clave, encryptData.slice(SAL_LONG + INITIALIZATION_VECTOR_LONG));\r\n    return decoder.decode(decryptDataBuffer);\r\n}\r\n\r\nexport enum NameModuleDatabase {\r\n    BoxOpenings = 'boxOpenings',\r\n    Banks = 'banks',\r\n    Users = 'users',\r\n    Taxes = 'taxes',\r\n    DocumentTypes = 'documentTypes',\r\n    Plans = 'plans',\r\n    VehicleTypes = 'vehicleTypes',\r\n}\r\n\r\nenum Recurrent {\r\n    Hourly = 'hourly',\r\n    Daily = 'daily',\r\n    Weekly = 'weekly',\r\n    Monthly = 'monthly',\r\n    Yearly = 'yearly',\r\n}\r\n\r\ninterface StorageConfiguration<T = any> {\r\n    data: any;\r\n    recurrent: Recurrent;\r\n    lastUpdate: Date;\r\n}\r\n\r\ninterface ModuleConfiguration {\r\n    readonly key: NameModuleDatabase;\r\n    readonly recurrent: Recurrent;\r\n    readonly name: string;\r\n    readonly config: {\r\n        url: string;\r\n        queryParams?: string;\r\n    };\r\n    lastUpdate?: Date;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DatabaseStorageService {\r\n\r\n    private storageMap = inject(StorageMap);\r\n    private fetch = inject(FetchService);\r\n    public readonly modules: ModuleConfiguration[] = [\r\n        {\r\n            name: 'Aperturas de caja',\r\n            key: NameModuleDatabase.BoxOpenings,\r\n            recurrent: Recurrent.Hourly,\r\n            config: {\r\n                url: 'box-opening',\r\n                queryParams: 'relations=box.account.bank&box_status=abierto&limit=100'\r\n            },\r\n        },\r\n        {\r\n            name: 'Bancos',\r\n            key: NameModuleDatabase.Banks,\r\n            recurrent: Recurrent.Daily,\r\n            config: {\r\n                url: 'database-storage/banks'\r\n            },\r\n        },\r\n        {\r\n            name: 'Usuarios',\r\n            key: NameModuleDatabase.Users,\r\n            recurrent: Recurrent.Hourly,\r\n            config: {\r\n                url: 'database-storage/users'\r\n            },\r\n        },\r\n        {\r\n            name: 'Valores de impuestos',\r\n            key: NameModuleDatabase.Taxes,\r\n            recurrent: Recurrent.Hourly,\r\n            config: {\r\n                url: 'database-storage/taxes'\r\n            },\r\n        },\r\n        {\r\n            name: 'Tipos de documento',\r\n            key: NameModuleDatabase.DocumentTypes,\r\n            recurrent: Recurrent.Daily,\r\n            config: {\r\n                url: 'database-storage/document-types'\r\n            },\r\n        },\r\n        {\r\n            name: 'Planes',\r\n            key: NameModuleDatabase.Plans,\r\n            recurrent: Recurrent.Daily,\r\n            config: {\r\n                url: 'database-storage/plans'\r\n            },\r\n        },\r\n        {\r\n            name: 'Tipos de vehículo',\r\n            key: NameModuleDatabase.VehicleTypes,\r\n            recurrent: Recurrent.Daily,\r\n            config: {\r\n                url: 'database-storage/vehicle-types'\r\n            },\r\n        },\r\n    ];\r\n\r\n    constructor() {\r\n        this.modules.forEach(module => {\r\n            this.storageMap.get(module.key).subscribe((response) => {\r\n                if(response) module.lastUpdate = (response as StorageConfiguration).lastUpdate;\r\n            })\r\n        });\r\n    }\r\n\r\n    public async getOne<T = any>(key: NameModuleDatabase, id: number): Promise<T | undefined> {\r\n        return (await this.getData<any>(key)).find((item) => item.id == id);\r\n    }\r\n\r\n    public async getData<T>(key: NameModuleDatabase): Promise<T[]> {\r\n        const module = this.modules.find((e) => e.key == key)!;\r\n        return new Promise(async (resolve) => {\r\n            this.storageMap.get(key).subscribe(async (response) => {\r\n                if (response) {\r\n                    const { recurrent, lastUpdate } = response as StorageConfiguration<T>;\r\n\r\n                    const c_year = new Date().getFullYear();\r\n                    const c_month = new Date().getMonth();\r\n                    const c_date = new Date().getDate();\r\n                    const c_week = getWeek(new Date(), { weekStartsOn: 1 });\r\n                    const c_hour = new Date().getHours();\r\n                    \r\n                    const u_year = lastUpdate.getFullYear();\r\n                    const u_month = lastUpdate.getMonth();\r\n                    const u_date = lastUpdate.getDate();\r\n                    const u_week = getWeek(lastUpdate, { weekStartsOn: 1 });\r\n                    const u_hour = lastUpdate.getHours();\r\n\r\n                    if (recurrent == Recurrent.Hourly && (c_year != u_year || c_month != u_month || c_date != u_date || c_hour != u_hour)) resolve(await this.getDataServer(module));\r\n                    else if (recurrent == Recurrent.Daily && (c_year != u_year || c_month != u_month || c_date != u_date)) resolve(await this.getDataServer(module));\r\n                    else if (recurrent == Recurrent.Weekly && (c_year != u_year || c_week != u_week)) resolve(await this.getDataServer(module));\r\n                    else if (recurrent == Recurrent.Monthly && (c_year != u_year || c_month != u_month)) resolve(await this.getDataServer(module));\r\n                    else if (recurrent == Recurrent.Yearly && c_year != u_year) resolve(await this.getDataServer(module));\r\n\r\n                    const decode = await decrypt('0123456', (response as StorageConfiguration<T>).data);\r\n                    resolve(JSON.parse(decode));\r\n                } else {\r\n                    resolve(this.getDataServer(module));\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public updateDataLocal(key: NameModuleDatabase): void {\r\n        const config = this.modules.find((e) => e.key == key);\r\n        if (!config) return;\r\n        this.getDataServer(config);\r\n    }\r\n\r\n    private async getDataServer<T>(module: ModuleConfiguration): Promise<T[]> {\r\n        const { config, key, recurrent } = module;\r\n        const url = `${config.url}?${config.queryParams ? config.queryParams : ''}`;\r\n        const result = await this.fetch.get<T[] | PaginatorData<T>>(url);\r\n        const data = result instanceof Array ? result : result.data;\r\n        module.lastUpdate = new Date();\r\n        const storageConfig: StorageConfiguration<T> = {\r\n            data: await encrypt('0123456', JSON.stringify(data)),\r\n            recurrent,\r\n            lastUpdate: module.lastUpdate,\r\n        }\r\n        this.storageMap.set(key, storageConfig).subscribe(() => { });\r\n        return data;\r\n    }\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 148
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "EventsService",
            "id": "injectable-EventsService-28c3bbbafaa93b7093bdecfb202397a849588bdfa34c14ace3ed824b53b6284350ba15cbfbd5eb96a6b472f0ac56b95f40f4aef23ce5f250f662f78d70297e2b",
            "file": "src/app/core/services/events.service.ts",
            "properties": [
                {
                    "name": "event$",
                    "defaultValue": "new Subject<IEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<IEvent>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "emitEvent",
                    "args": [
                        {
                            "name": "nameEvent",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "nameEvent",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "eventsFiltered",
                    "args": [
                        {
                            "name": "nameEvents",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IEvent<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "nameEvents",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, Subject, filter } from 'rxjs';\r\n\r\ninterface IEvent<T = any> {\r\n    name: string;\r\n    data: T;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class EventsService {\r\n\r\n    private event$: Subject<IEvent> = new Subject<IEvent>();\r\n\r\n    constructor() { }\r\n\r\n    public eventsFiltered<T = any>(nameEvents: string[]): Observable<IEvent<T>> {\r\n        return this.event$.asObservable().pipe(filter(event => nameEvents.some((name) => name == event.name)));\r\n    }\r\n\r\n    get getEventObservable(): Observable<IEvent> {\r\n        return this.event$.asObservable();\r\n    }\r\n\r\n    public emitEvent<T = any>(nameEvent: string, data: T): void {\r\n        return this.event$.next({ name: nameEvent, data });\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "accessors": {
                "getEventObservable": {
                    "name": "getEventObservable",
                    "getSignature": {
                        "name": "getEventObservable",
                        "type": "",
                        "returnType": "Observable<IEvent>",
                        "line": 22
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "FetchService",
            "id": "injectable-FetchService-300fea7126945213019d290d02e1ab2d32d4666f59f1f436efc72062a50c74b5f27afb5b83f1f596a3e2c0b9196d744d98a2d87fc14f4e95aa654ff50d18b0de",
            "file": "src/app/core/services/fetch.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.API_URL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialog",
                    "defaultValue": "inject(MatDialog)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toastService",
                    "defaultValue": "inject(ToastService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "blob",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "baseUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.apiUrl"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Blob>",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "baseUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.apiUrl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmDialog",
                    "args": [
                        {
                            "name": "data",
                            "type": "ConfirmDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "ConfirmDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "baseUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.apiUrl"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "baseUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.apiUrl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "baseUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.apiUrl"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "baseUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.apiUrl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNameError",
                    "args": [
                        {
                            "name": "error",
                            "type": "FetchErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "FetchErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "interceptErrorsFn",
                    "args": [
                        {
                            "name": "error",
                            "type": "FetchErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "request",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "FetchErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "request",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "interceptHeadersFn",
                    "args": [
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "baseUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.apiUrl"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "baseUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.apiUrl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "baseUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.apiUrl"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "baseUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.apiUrl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "baseUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.apiUrl"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "baseUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.apiUrl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resolveToastPromise",
                    "args": [
                        {
                            "name": "promise",
                            "type": "Promise<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "toastDataPromise",
                            "type": "ToastForFetch",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "promise",
                            "type": "Promise<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toastDataPromise",
                            "type": "ToastForFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_blob",
                    "args": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FetchBase"
                    }
                },
                {
                    "name": "_delete",
                    "args": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FetchBase"
                    }
                },
                {
                    "name": "_get",
                    "args": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FetchBase"
                    }
                },
                {
                    "name": "_patch",
                    "args": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FetchBase"
                    }
                },
                {
                    "name": "_post",
                    "args": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FetchBase"
                    }
                },
                {
                    "name": "_put",
                    "args": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FetchBase"
                    }
                },
                {
                    "name": "call",
                    "args": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "request",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "blob",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "request",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blob",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FetchBase"
                    }
                },
                {
                    "name": "executeRequest",
                    "args": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "request",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "blob",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "request",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blob",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FetchBase"
                    }
                },
                {
                    "name": "setDefaultHeaders",
                    "args": [
                        {
                            "name": "headers",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "headers",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FetchBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\r\nimport { FetchErrorResponse, FetchErrorType, HTTP_ERROR_CODES, NAME_TOKEN, RequestInitFetch as RequestInit, defaultMessageDialogCreateItem, defaultMessageDialogDeleteItem, defaultMessageDialogUpdateItem } from 'src/app/shared/interfaces/fetch';\r\nimport { FetchBase } from '@utility/fetchBase';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ToastService } from './toast.service';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from './auth.service';\r\nimport { ToastDataPromise } from '@interface/toast';\r\nimport { MatSnackBarRef } from '@angular/material/snack-bar';\r\nimport { ConfirmDialogData, ConfirmDialogTemplateComponent } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nexport interface ToastForFetch extends Omit<ToastDataPromise, 'promise' | 'success' | 'error'> {\r\n  success: string | ((data: any, snackbarRef: MatSnackBarRef<any>, currentMessage: string) => Promise<string> | string);\r\n  error: string | ((error: any, snackbarRef: MatSnackBarRef<any>, currentMessage: string) => Promise<string> | string);\r\n}\r\n\r\nexport interface RequestInitFetch extends Omit<RequestInit, 'confirmDialog'> {\r\n  confirmDialog?: ConfirmDialogData | false;\r\n  toast?: ToastForFetch | false;\r\n}\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FetchService extends FetchBase {\r\n  private dialog = inject(MatDialog);\r\n  private toastService = inject(ToastService);\r\n  private router = inject(Router);\r\n  private authService = inject(AuthService);\r\n\r\n  private apiUrl: string = environment.API_URL;\r\n\r\n  constructor() {\r\n    super(\r\n      {\r\n        interceptHeadersFn: (request) => this.interceptHeadersFn(request),\r\n        interceptErrorsFn: (error, request) => this.interceptErrorsFn(error, request),\r\n      }\r\n    )\r\n  }\r\n\r\n  /* -------------------------------------------------------------------------------------- */\r\n  /* -----------------------------------    INTERCEPTORS   -------------------------------- */\r\n  /* -------------------------------------------------------------------------------------- */\r\n  private interceptHeadersFn(requestInit: RequestInitFetch): { [Key: string]: string } {\r\n    const headers = requestInit?.headers || {};\r\n    const token = localStorage.getItem(NAME_TOKEN);\r\n    if (token && !requestInit?.ignoreAuthorization) headers['Authorization'] = `Bearer ${token}`;\r\n    return headers;\r\n  }\r\n\r\n  private async interceptErrorsFn(error: FetchErrorResponse, request: RequestInitFetch): Promise<void> {    \r\n    if (request.ignoreInterceptErrors) return; // if ignore intercept errors\r\n\r\n    const errorName = error.name;\r\n\r\n    if (errorName == FetchErrorType.ABORT) return;\r\n\r\n    if (errorName == FetchErrorType.HTTP && error.status == 401 && error.statusText?.includes('Unauthorized')) {\r\n      this.toastService.open('Su sesión ha expirado');\r\n      this.authService.removeToken();\r\n      this.router.navigate(['/login']);\r\n      return;\r\n    }\r\n\r\n    this.toastService.open(this.getNameError(error) ?? 'Error desconocido');\r\n  }\r\n\r\n  private getNameError(error: FetchErrorResponse): string | undefined {\r\n    const errorHttp = HTTP_ERROR_CODES.find((httpError) => httpError.status == error.status);\r\n    return errorHttp?.description;\r\n  }\r\n\r\n  /* -------------------------------------------------------------------------------------- */\r\n  /* ------------------------------------   METHODS    ------------------------------------ */\r\n  /* -------------------------------------------------------------------------------------- */\r\n\r\n  public async get<T>(url: string, requestInit?: RequestInitFetch, baseUrl: string = this.apiUrl): Promise<T> {\r\n    const { toast, confirmDialog, ...request} = { ...requestInit ?? {} };\r\n\r\n    if (confirmDialog) await this.confirmDialog(confirmDialog);\r\n\r\n    if (toast) {\r\n      request.ignoreInterceptErrors = true;\r\n      const promise = this._get(`${baseUrl}/${url}`, request);\r\n      return this.resolveToastPromise<T>(promise, toast);\r\n    }\r\n\r\n    return this._get(`${baseUrl}/${url}`, request);\r\n  }\r\n\r\n  public async post<T>(url: string, body: any, requestInit?: RequestInitFetch, baseUrl: string = this.apiUrl): Promise<T> {\r\n    const { toast, confirmDialog, ...request} = { ...requestInit ?? {} };\r\n\r\n    if (confirmDialog != false) await this.confirmDialog(confirmDialog ?? defaultMessageDialogCreateItem());\r\n\r\n    if (toast != false) {\r\n      request.ignoreInterceptErrors = true;\r\n      const promise = this._post(`${baseUrl}/${url}`, body, request);\r\n      const toastDataPromise = toast ? toast : {\r\n        loading: 'Guardando registro...',\r\n        success: 'Registro guardado',\r\n        error: (error: any) => `Error al guardar registro: ${error.error?.message ?? 'Error desconocido'}`,\r\n      };\r\n      return this.resolveToastPromise<T>(promise, toastDataPromise, requestInit);\r\n    }\r\n\r\n    return this._post(`${baseUrl}/${url}`, body, request);\r\n  }\r\n\r\n  public async put<T>(url: string, body: any, requestInit?: RequestInitFetch, baseUrl: string = this.apiUrl): Promise<T> {\r\n    const { toast, confirmDialog, ...request} = { ...requestInit ?? {} };\r\n\r\n    if (confirmDialog != false) await this.confirmDialog(confirmDialog ?? defaultMessageDialogUpdateItem());\r\n\r\n    if (toast != false) {\r\n      request.ignoreInterceptErrors = true;\r\n      const promise = this._put(`${baseUrl}/${url}`, body, request);\r\n      const toastDataPromise = toast ? toast : {\r\n        loading: 'Actualizando registro...',\r\n        success: 'Registro actualizado',\r\n        error: (error: any) => `Error al actualizar registro: ${error.error?.message ?? 'Error desconocido'}`,\r\n      };\r\n      return this.resolveToastPromise<T>(promise, toastDataPromise, requestInit);\r\n    }\r\n\r\n    return this._put(`${baseUrl}/${url}`, body, request);\r\n  }\r\n\r\n  public async patch<T>(url: string, body: any, requestInit?: RequestInitFetch, baseUrl: string = this.apiUrl): Promise<T> {\r\n    const { toast, confirmDialog, ...request} = { ...requestInit ?? {} };\r\n\r\n    if (confirmDialog != false) await this.confirmDialog(confirmDialog ?? defaultMessageDialogUpdateItem());\r\n    \r\n    if (toast != false) {\r\n      request.ignoreInterceptErrors = true;\r\n      const promise = this._patch(`${baseUrl}/${url}`, body, request);\r\n      const toastDataPromise = toast ? toast : {\r\n        loading: 'Actualizando registro...',\r\n        success: 'Registro actualizado',\r\n        error: 'Error al actualizar registro',\r\n      };\r\n      return this.resolveToastPromise<T>(promise, toastDataPromise, requestInit);\r\n    }\r\n\r\n    return this._patch(`${baseUrl}/${url}`, body, request);\r\n  }\r\n\r\n  public async delete<T>(url: string, requestInit?: RequestInitFetch, baseUrl: string = this.apiUrl): Promise<T> {\r\n    const { toast, confirmDialog, ...request} = { ...requestInit ?? {} };\r\n\r\n    if (confirmDialog != false) await this.confirmDialog(confirmDialog ?? defaultMessageDialogDeleteItem());\r\n\r\n    if (toast != false) {\r\n      request.ignoreInterceptErrors = true;\r\n      const promise = this._delete(`${baseUrl}/${url}`, request);\r\n      const toastDataPromise = toast ? toast : {\r\n        loading: 'Eliminando registro...',\r\n        success: 'Registro eliminado',\r\n        error: 'Error al eliminar registro',\r\n      };\r\n      return this.resolveToastPromise<T>(promise, toastDataPromise, requestInit);\r\n    }\r\n\r\n    return this._delete(`${baseUrl}/${url}`, request);\r\n  }\r\n\r\n  public async blob(url: string, requestInit?: RequestInitFetch, baseUrl: string = this.apiUrl): Promise<Blob> {\r\n    const { toast, confirmDialog, ...request} = { ...requestInit ?? {} };\r\n\r\n    if (confirmDialog) await this.confirmDialog(confirmDialog);\r\n\r\n    if (toast) {\r\n      request.ignoreInterceptErrors = true;\r\n      const promise = this._blob<Blob>(`${baseUrl}/${url}`, request);\r\n      return this.resolveToastPromise<Blob>(promise, toast, requestInit);\r\n    }\r\n\r\n    return this._blob<Blob>(`${baseUrl}/${url}`, request);\r\n  }\r\n\r\n  /* -------------------------------------------------------------------------------------- */\r\n  /* ------------------------------------   ACTIONS   ------------------------------------- */\r\n  /* -------------------------------------------------------------------------------------- */\r\n  private confirmDialog(data: ConfirmDialogData): Promise<boolean> {\r\n    return new Promise((resolve, reject) => {\r\n      this.dialog\r\n        .open(ConfirmDialogTemplateComponent, { data })\r\n        .afterClosed()\r\n        .subscribe((res: boolean) => {\r\n          if (res) resolve(true);\r\n          reject({ name: FetchErrorType.CONFIRMATION_DIALOG, message: 'Abort confirmation dialog' });\r\n        });\r\n    });\r\n  }\r\n\r\n  private resolveToastPromise<T>(promise: Promise<T>, toastDataPromise: ToastForFetch, requestInit?: RequestInitFetch): Promise<T> {\r\n    return new Promise(async (resolve, reject) => {\r\n      this.toastService.promise(promise, {\r\n        loading: toastDataPromise.loading ?? 'Cargando...',\r\n        success: async (data, snackBarRef, currentMessage) => {\r\n          resolve(data);\r\n          return toastDataPromise.success instanceof Function ? await toastDataPromise.success(data, snackBarRef, currentMessage) : toastDataPromise.success;\r\n        },\r\n\r\n        error: (error: FetchErrorResponse, snackBarRef, currentMessage) => {\r\n          if (error.name == FetchErrorType.ABORT) {\r\n            snackBarRef.dismiss();\r\n            reject(error);\r\n            return currentMessage;\r\n          } else if (error.name == FetchErrorType.HTTP && error.status == 401 && error.statusText?.includes('Unauthorized') && !requestInit?.ignoreAuthorization) {\r\n            this.authService.removeToken();\r\n            this.router.navigate(['/login']);\r\n            return 'Su sesión ha expirado, vuelva a iniciar';\r\n          }\r\n          reject(error);\r\n          return toastDataPromise.error instanceof Function ? toastDataPromise.error(error, snackBarRef, currentMessage) : toastDataPromise.error;\r\n        },\r\n      });\r\n    });\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 33
            },
            "extends": [
                "FetchBase"
            ],
            "type": "injectable"
        },
        {
            "name": "ToastService",
            "id": "injectable-ToastService-b3722c782bb798502bd2e5a05b69d535aa6e5b8bd185a6f3d7a518a0cc9586b3d8fa61cc45b784360e7ecc30622cdbe3aeb456c5c0733065cea3dd12752cc870",
            "file": "src/app/core/services/toast.service.ts",
            "properties": [
                {
                    "name": "horizontalPosition",
                    "defaultValue": "'start'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSnackBarHorizontalPosition",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "snackBar",
                    "defaultValue": "inject(MatSnackBar)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "verticalPosition",
                    "defaultValue": "'bottom'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSnackBarVerticalPosition",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "Omit<ToastDataSimple | message>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "Omit<ToastDataSimple | message>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "promise",
                    "args": [
                        {
                            "name": "promise",
                            "type": "Promise<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "configuration",
                            "type": "Partial<Omit<ToastDataPromise, promise>>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "promise",
                            "type": "Promise<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "configuration",
                            "type": "Partial<Omit<ToastDataPromise, promise>>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\r\nimport { MatSnackBar, MatSnackBarHorizontalPosition, MatSnackBarVerticalPosition } from '@angular/material/snack-bar';\r\nimport { ToastDataPromise, ToastDataSimple } from '@interface/toast';\r\nimport { SnackbarTemplateComponent } from 'src/app/shared/components/snackbar-template/snackbar-template.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ToastService {\r\n\r\n  private snackBar = inject(MatSnackBar);\r\n  private readonly horizontalPosition: MatSnackBarHorizontalPosition = 'start';\r\n  private readonly verticalPosition: MatSnackBarVerticalPosition = 'bottom';\r\n\r\n  public open(message: string, data?: Omit<ToastDataSimple, 'message'>) {\r\n    const snackbar = this.snackBar.openFromComponent(SnackbarTemplateComponent, {\r\n      horizontalPosition: this.horizontalPosition,\r\n      verticalPosition: this.verticalPosition,\r\n      duration: (data?.duration ?? 10) * 1000,\r\n      data: { simple: { ...data, message } },\r\n    });\r\n\r\n    if (data?.action) snackbar.onAction().subscribe(() => data.action?.fn(data.data ?? null));\r\n\r\n    if (data?.autoCloseFn) snackbar.afterDismissed().subscribe(() => data.autoCloseFn?.(data.data ?? null));\r\n\r\n  }\r\n\r\n  public promise<T = any>(promise: Promise<T>, configuration?: Partial<Omit<ToastDataPromise, 'promise'>>): void {\r\n    const data: ToastDataPromise = {\r\n      promise,\r\n      loading: configuration?.loading ?? 'Cargando...',\r\n      success: configuration?.success ?? 'Completado',\r\n      error: configuration?.error ?? 'Error al realizar la operación',\r\n    }\r\n\r\n    this.snackBar.openFromComponent(SnackbarTemplateComponent, {\r\n      horizontalPosition: this.horizontalPosition,\r\n      verticalPosition: this.verticalPosition,\r\n      duration: 60 * 1000,\r\n      data: { promise: data }\r\n    });\r\n  }\r\n\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "FetchBase",
            "id": "class-FetchBase-d864b952a9b034302ca850ad0e6f2dba1e2e1d11ed9d94535d72ad8ab644bc41dfe8076a19eeda3caf558edd82ec76de504a285a19397d3b604b86dd9148e88d",
            "file": "src/app/shared/utilities/fetchBase.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FetchErrorResponse, FetchErrorType, RequestInitFetch } from \"src/app/shared/interfaces/fetch\";\r\n\r\ndeclare type ProcessBeforeCallRequest = (apiUrl: string, request: RequestInitFetch) => Promise<void> | void;\r\n\r\ndeclare type ProcessAfterCallRequest<T> = (response: Response, request: RequestInitFetch) => Promise<void> | void;\r\n\r\ndeclare type InterceptErrors = (error: FetchErrorResponse, request: RequestInitFetch) => Promise<void> | void;\r\n\r\ndeclare type InterceptHeaders = (request: RequestInitFetch) => Promise<{ [Key: string]: string }> | { [Key: string]: string };\r\n\r\nexport class FetchBase {\r\n    constructor(\r\n        private configurations: {\r\n            beforeCallRequestFn?: ProcessBeforeCallRequest,\r\n            afterCallRequestFn?: ProcessAfterCallRequest<any>,\r\n            interceptErrorsFn?: InterceptErrors,\r\n            interceptHeadersFn?: InterceptHeaders,\r\n        } = {}\r\n    ) { }\r\n\r\n    private setDefaultHeaders(headers: any = {}): any {\r\n        if (!headers['Content-Type']) headers['Content-Type'] = 'application/json';\r\n        if (!headers['Accept']) headers['Accept'] = 'application/json';\r\n        return { ...headers };\r\n    }\r\n\r\n    private async executeRequest<T>(apiUrl: string, request?: RequestInitFetch, blob: boolean = false): Promise<T> {\r\n        try {\r\n            const { interceptHeadersFn } = this.configurations;\r\n            const headers = interceptHeadersFn ? await interceptHeadersFn(request as any) : request?.headers; // intercept headers\r\n\r\n            const { beforeCallRequestFn } = this.configurations;\r\n            if (beforeCallRequestFn) await beforeCallRequestFn(apiUrl, request!); // intercept before call request\r\n\r\n            const response = await fetch(apiUrl, { ...request, headers: this.setDefaultHeaders(headers) });\r\n\r\n            if(response.ok) {\r\n                const data = blob ? await response.blob() as any : await response.json();\r\n                \r\n                const { afterCallRequestFn } = this.configurations;\r\n                if (afterCallRequestFn) await afterCallRequestFn(response, request!); // intercept after call request\r\n\r\n                return data;\r\n            }\r\n\r\n\r\n            const messageError = await response.json();\r\n            const fetchError: FetchErrorResponse = {\r\n                status: response.status,\r\n                url: response.url,\r\n                headers: response.headers,\r\n                statusText: response.statusText,\r\n                ok: response.ok,\r\n                error: messageError,\r\n                message: `Http failure response for ${apiUrl}: ${response.status} ${response.statusText}`,\r\n                name: FetchErrorType.HTTP,\r\n                method: request?.method as any || 'GET',\r\n            }\r\n            \r\n            throw fetchError;\r\n        } catch (error:any) {\r\n            const errorName = error.name as FetchErrorType;\r\n            if(errorName === FetchErrorType.HTTP) throw error;\r\n            const fetchError: FetchErrorResponse = {\r\n                status: 0,\r\n                url: apiUrl,\r\n                ok: false,\r\n                error: errorName,\r\n                message: error.message ?? `Http failure response for ${apiUrl}: ${errorName}`,\r\n                name: errorName,\r\n                method: request?.method as any || 'GET',\r\n            }\r\n            throw fetchError;\r\n        }\r\n    }\r\n\r\n    private async call<T>(apiUrl: string, request?: RequestInitFetch, blob?: boolean): Promise<T> {\r\n        try {\r\n            return await this.executeRequest<T>(apiUrl, request, blob);\r\n        } catch (error) {\r\n            const { interceptErrorsFn } = this.configurations;\r\n            if (interceptErrorsFn) await interceptErrorsFn(error as FetchErrorResponse, request ?? {});\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    protected _get<T = any>(apiUrl: string, requestInit?: RequestInitFetch): Promise<T> {\r\n        return this.call<T>(apiUrl, { ...requestInit, method: 'GET' });\r\n    }\r\n\r\n    protected _post<T = any>(apiUrl: string, body: any, requestInit?: RequestInitFetch): Promise<T> {\r\n        return this.call<T>(apiUrl, { ...requestInit,body: JSON.stringify(body), method: 'POST' });\r\n    }\r\n\r\n    protected _put<T = any>(apiUrl: string, body: any, requestInit?: RequestInitFetch): Promise<T> {\r\n        return this.call<T>(apiUrl, { ...requestInit,body: JSON.stringify(body), method: 'PUT' });\r\n    }\r\n\r\n    protected _delete<T = any>(apiUrl: string, requestInit?: RequestInitFetch): Promise<T> {\r\n        return this.call<T>(apiUrl, { ...requestInit, method: 'DELETE' });\r\n    }\r\n\r\n    protected _patch<T = any>(apiUrl: string, body: any, requestInit?: RequestInitFetch): Promise<T> {\r\n        return this.call<T>(apiUrl, { ...requestInit,body: JSON.stringify(body), method: 'PATCH' });\r\n    }\r\n\r\n    protected _blob<T = any>(apiUrl: string, requestInit?: RequestInitFetch): Promise<T> {\r\n        return this.call<T>(apiUrl, { ...requestInit, method: 'GET' }, true);\r\n    }\r\n\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "configurations",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "configurations",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "_blob",
                    "args": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_delete",
                    "args": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_get",
                    "args": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_patch",
                    "args": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_post",
                    "args": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_put",
                    "args": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestInit",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "call",
                    "args": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "request",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "blob",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "request",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blob",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "executeRequest",
                    "args": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "request",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "blob",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "request",
                            "type": "RequestInitFetch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blob",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDefaultHeaders",
                    "args": [
                        {
                            "name": "headers",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "headers",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MockActivatedRoute",
            "id": "class-MockActivatedRoute-fd8ba841910c081c9b25d956894ceee1b43863e3966ae8d411be2603181c23f04124a869fbfb0b68c5b26c4f7684f44ec11bc22ec4563621179b476dc6e177b3",
            "file": "src/stories/itemListTemplate.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Meta, StoryObj, applicationConfig, moduleMetadata } from \"@storybook/angular\";\r\nimport { signal } from \"@angular/core\";\r\nimport { ItemListConfiguration, ItemListTemplateComponent, emailColumn, phoneColumn, selectableActionButton, textColumn } from \"@component/item-list-template/item-list-template.component\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { of } from \"rxjs\";\r\nimport { BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\r\nimport { MatNativeDateModule } from \"@angular/material/core\";\r\nimport { MAT_PAGINATOR_DEFAULT_OPTIONS } from \"@angular/material/paginator\";\r\n\r\n\r\nclass MockActivatedRoute {\r\n    // Puedes agregar propiedades u observables necesarios para tu historia de Storybook\r\n    params = of({ id: '1' }); // Por ejemplo, simula los parámetros de ruta\r\n    queryParams = of({ id: '1' }); // Por ejemplo, simula los parámetros de consulta\r\n    snapshot = {\r\n        paramMap: {\r\n            get(name: string) {\r\n                return '1';\r\n            }\r\n        },\r\n        queryParamMap: {\r\n            get(name: string) {\r\n                return '1';\r\n            }\r\n        },\r\n        params: {},\r\n        queryParams: {},\r\n    };\r\n}\r\n\r\nconst meta: Meta<ItemListTemplateComponent> = {\r\n    title: 'ItemList',\r\n    component: ItemListTemplateComponent,\r\n    tags: ['autodocs'],\r\n    decorators: [\r\n        moduleMetadata({\r\n            imports: [BrowserAnimationsModule, MatNativeDateModule],\r\n            providers: [\r\n                { provide: ActivatedRoute, useClass: MockActivatedRoute },\r\n                { provide: MAT_PAGINATOR_DEFAULT_OPTIONS, useValue: { formFieldAppearance: 'outline', showFirstLastButtons: true, pageSizeOptions: [4, 8, 12], pageSize: 4, pageIndex: 0, } },\r\n            ],\r\n        }),\r\n    ],\r\n    argTypes: {\r\n        configuration: {\r\n            control: 'object',\r\n        }\r\n    }\r\n};\r\n\r\nexport default meta;\r\n\r\ntype Story = StoryObj<ItemListTemplateComponent>;\r\n\r\nexport const Simple: Story = {\r\n    args: {\r\n        configuration: {\r\n            title: 'Usuarios',\r\n            server: {\r\n                url: 'public/user',\r\n            },\r\n            columns: signal([\r\n                textColumn({\r\n                    title: 'Usuario / N° Documento',\r\n                    sort: { key: 'name' },\r\n                    routerLinkValue: { url: (item) => `../view/${item.id}` },\r\n                    gridColumn: '1fr',\r\n                    displayValueFn: (item) => item?.name ? item.name : '--',\r\n                    displayAdditionalValueFn: (item) => item?.document_number.length >= 11 ? 'RUC: ' + item?.document_number : item?.document_number.length == 8 ? 'DNI: ' + item?.document_number : 'OTRO: ' + item?.document_number,\r\n                }),\r\n                emailColumn({\r\n                    title: 'Email',\r\n                    sort: { key: 'email' },\r\n                    gridColumn: 'auto',\r\n                    displayValueFn: (item) => item.email,\r\n                }),\r\n                textColumn({\r\n                    title: 'Rol',\r\n                    sort: { key: 'role' },\r\n                    gridColumn: 'fit-content(120px)',\r\n                    displayValueFn: (item) => item.role,\r\n                }),\r\n                phoneColumn({\r\n                    title: 'Celular',\r\n                    sort: { key: 'cellphone' },\r\n                    gridColumn: 'fit-content(120px)',\r\n                    displayValueFn: (item) => item.cellphone,\r\n                }),\r\n                textColumn({\r\n                    title: 'Dirección',\r\n                    sort: { key: 'address' },\r\n                    gridColumn: 'fit-content(120px)',\r\n                    displayValueFn: (item) => item.address,\r\n                }),\r\n            ]),\r\n        } as ItemListConfiguration,\r\n    },\r\n};\r\n\r\nexport const Selectable: Story = {\r\n    args: {\r\n        configuration: {\r\n            title: 'Usuarios',\r\n            server: {\r\n                url: 'public/user',\r\n            },\r\n            rows: {\r\n                selectable: {\r\n                    actions: [\r\n                        selectableActionButton({\r\n                            icon: 'delete',\r\n                            fn: (selectedItems) => alert(`items seleccionados: ${selectedItems.length}`),\r\n                        })\r\n                    ]\r\n                }\r\n            },\r\n            columns: signal([\r\n                textColumn({\r\n                    title: 'Usuario / N° Documento',\r\n                    sort: { key: 'name' },\r\n                    routerLinkValue: { url: (item) => `../view/${item.id}` },\r\n                    gridColumn: '1fr',\r\n                    displayValueFn: (item) => item?.name ? item.name : '--',\r\n                    displayAdditionalValueFn: (item) => item?.document_number.length >= 11 ? 'RUC: ' + item?.document_number : item?.document_number.length == 8 ? 'DNI: ' + item?.document_number : 'OTRO: ' + item?.document_number,\r\n                }),\r\n                emailColumn({\r\n                    title: 'Email',\r\n                    sort: { key: 'email' },\r\n                    gridColumn: 'auto',\r\n                    displayValueFn: (item) => item.email,\r\n                }),\r\n                textColumn({\r\n                    title: 'Rol',\r\n                    sort: { key: 'role' },\r\n                    gridColumn: 'fit-content(120px)',\r\n                    displayValueFn: (item) => item.role,\r\n                }),\r\n                phoneColumn({\r\n                    title: 'Celular',\r\n                    sort: { key: 'cellphone' },\r\n                    gridColumn: 'fit-content(120px)',\r\n                    displayValueFn: (item) => item.cellphone,\r\n                }),\r\n                textColumn({\r\n                    title: 'Dirección',\r\n                    sort: { key: 'address' },\r\n                    gridColumn: 'fit-content(120px)',\r\n                    displayValueFn: (item) => item.address,\r\n                }),\r\n            ]),\r\n        } as ItemListConfiguration\r\n    },\r\n};",
            "properties": [
                {
                    "name": "params",
                    "defaultValue": "of({ id: '1' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "queryParams",
                    "defaultValue": "of({ id: '1' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "snapshot",
                    "defaultValue": "{\r\n        paramMap: {\r\n            get(name: string) {\r\n                return '1';\r\n            }\r\n        },\r\n        queryParamMap: {\r\n            get(name: string) {\r\n                return '1';\r\n            }\r\n        },\r\n        params: {},\r\n        queryParams: {},\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MyDateAdapter",
            "id": "class-MyDateAdapter-7d2c42ed1008febb25579c8755464a788836324b60522cda14352c49fc90b2d694f1dc6a0db742c28be33af781a5f6e77949b79b12d1c449eef46b7fcab89dd9",
            "file": "src/app/shared/utilities/myDateAdapter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { NativeDateAdapter } from \"@angular/material/core\";\r\nimport { DateFnsAdapter } from \"@angular/material-date-fns-adapter\";\r\n\r\n\r\nexport class MyDateAdapter extends NativeDateAdapter {\r\n  constructor(private abc: DateFnsAdapter) {\r\n    super('es-PE');\r\n  }\r\n\r\n  override format(date: Date, displayFormat: string | Intl.DateTimeFormatOptions): string {\r\n    if (displayFormat instanceof Object) {\r\n      return new Intl.DateTimeFormat('es-ES', displayFormat).format(date)\r\n    } else {\r\n      return date.toISOString();\r\n    }\r\n  }\r\n\r\n  override parse(value: any, parseFormat?: any): Date | null {\r\n    return this.abc.parse(value, parseFormat);\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "abc",
                        "type": "DateFnsAdapter",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "abc",
                        "type": "DateFnsAdapter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "format",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "displayFormat",
                            "type": "string | Intl.DateTimeFormatOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "displayFormat",
                            "type": "string | Intl.DateTimeFormatOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parse",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parseFormat",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Date | null",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parseFormat",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [
                "NativeDateAdapter"
            ],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "AutofocusDirectiveDirective",
            "id": "directive-AutofocusDirectiveDirective-7598e6716e7194ce970c92b15aa8a8b4a57e35ebb797246ea53dabb25bdfeb0db64bcedc58128033a43c9f04cf1f409f29b673756dd322db48c99ebb6cc95faa",
            "file": "src/app/shared/directives/autofocus-directive.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[appAutofocus]',\r\n    standalone: true\r\n})\r\nexport class AutofocusDirectiveDirective {\r\n\r\n    @Input() public autoFocus?: boolean;\r\n\r\n    public constructor(private el: ElementRef) {  }\r\n\r\n    public ngAfterContentInit() {\r\n        if(this.autoFocus){\r\n            setTimeout(() => {\r\n                this.el.nativeElement.focus();\r\n            }, 100);\r\n        }\r\n    }\r\n}\r\n",
            "selector": "[appAutofocus]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "autoFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "modifierKind": [
                    125
                ],
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "HandleFileInputDirective",
            "id": "directive-HandleFileInputDirective-634603a0174ace9e549ac4ac5ca499a5557e5c7ba907596f3d56e67bda389583b7a151c26f75dfa6349e631fdf0d0d031b1bfc2999b3a8d9f7dc9dbf84ca1a47",
            "file": "src/app/shared/directives/handle-file-input.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n    Directive,\r\n    Renderer2,\r\n    ElementRef,\r\n    Output,\r\n    EventEmitter,\r\n} from '@angular/core';\r\n\r\nexport interface HandleFileEvent {\r\n    base_64: string;\r\n    extension_file: string;\r\n    name_file: string;\r\n    size_file: number;\r\n    type_file: string;\r\n}\r\n\r\n@Directive({\r\n    selector: '[appHandleFileInput]',\r\n    standalone: true,\r\n})\r\nexport class HandleFileInputDirective {\r\n    @Output() handleFile: EventEmitter<HandleFileEvent | null> = new EventEmitter();\r\n\r\n    constructor(private el: ElementRef, private renderer2: Renderer2) {\r\n        this.renderer2.listen(el.nativeElement, 'input', (event) => {\r\n            this.handleFileSelect(event);\r\n        });\r\n    }\r\n\r\n    public handleFileSelect($event: InputEvent) {\r\n        const fileList: FileList = ($event.target! as HTMLInputElement).files as FileList;\r\n        if (fileList.length) {\r\n            const file = fileList[0];\r\n            const extension_file = file.name.split('.').pop()!;\r\n            const name_file = file.name;\r\n            const size_file = file.size;\r\n            const type_file = file.type;\r\n            const reader: FileReader = new FileReader();\r\n            reader.onload = (eventReader) => {\r\n                const base_64 = btoa(eventReader.target!.result as string);\r\n                this.handleFile.emit({\r\n                    base_64,\r\n                    extension_file,\r\n                    name_file,\r\n                    size_file,\r\n                    type_file,\r\n                });\r\n            };\r\n            reader.readAsBinaryString(file);\r\n        } else {\r\n            this.handleFile.emit(null);\r\n        }\r\n    }\r\n}\r\n",
            "selector": "[appHandleFileInput]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "handleFile",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter<HandleFileEvent | null>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleFileSelect",
                    "args": [
                        {
                            "name": "$event",
                            "type": "InputEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "InputEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer2",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer2",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "LoadImagePrivateDirective",
            "id": "directive-LoadImagePrivateDirective-095152bc27cc6d7b51f1878173d1b43bfe7200f4477cf65a1069c8ce62b097681109eddd1436519489930bda640d6d277e23d872b13ba3b4fd0bf5244ba4f60e",
            "file": "src/app/shared/directives/load-image-private.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, Input, Renderer2, inject } from '@angular/core';\r\nimport { FetchService } from '@service/fetch.service';\r\n\r\n@Directive({\r\n  selector: '[appLoadImagePrivate]',\r\n  standalone: true\r\n})\r\nexport class LoadImagePrivateDirective {\r\n  @Input({ required: true }) imageUrl!: string;\r\n  @Input() type: 'base-64' | 'src' = 'src';\r\n  private fetch = inject(FetchService);\r\n  // private renderer = inject(Renderer2);\r\n  private defaultImageUrl = 'assets/images/spinner-loading.gif';\r\n  private errorImageUrl = 'assets/images/robot-error.png';\r\n\r\n  constructor(private elementRef: ElementRef) { }\r\n\r\n  ngOnInit() {\r\n    this.elementRef.nativeElement.src = this.defaultImageUrl;\r\n    \r\n    this.observeImageElement();\r\n  }\r\n\r\n  private observeImageElement() {\r\n    const observer = new IntersectionObserver(entries => {\r\n      entries.forEach(entry => {\r\n        if (entry.isIntersecting) {\r\n          console.log('isIntersecting image');\r\n          this.getImage();\r\n          observer.unobserve(this.elementRef.nativeElement);\r\n        }\r\n      });\r\n    });\r\n    observer.observe(this.elementRef.nativeElement);\r\n  }\r\n\r\n  private async getImage() {\r\n    if(this.type == 'src') {\r\n      const nameLocalStorage = `image-url-${this.imageUrl}`;\r\n      const imageLocalStorage = localStorage.getItem(nameLocalStorage);\r\n      if(imageLocalStorage) {\r\n        const { url, expiration_time, loading } = JSON.parse(imageLocalStorage);\r\n        if(expiration_time && new Date().getTime() < expiration_time) {\r\n          if(loading) {\r\n            setTimeout(() => {\r\n              // console.log('setTimeout verify loading image');\r\n              this.getImage()\r\n            }, 500);\r\n            return;\r\n          } else {\r\n            this.elementRef.nativeElement.src = url;\r\n            return;\r\n          }\r\n        }\r\n      }\r\n      const minutes_to_expire = 60;\r\n      const expiration_time = new Date().getTime() + (minutes_to_expire * 60 * 1000);\r\n      localStorage.setItem(nameLocalStorage, JSON.stringify({ loading: true, expiration_time }));\r\n      let url;\r\n      try {\r\n        url = (await this.fetch.get<{ url: string }>(`image/get-temporally-url?image_url=${this.imageUrl}`)).url;\r\n      } catch (error) {\r\n        url = this.errorImageUrl;\r\n      }\r\n      localStorage.setItem(nameLocalStorage, JSON.stringify({ url, expiration_time }));\r\n      this.elementRef.nativeElement.src = url;\r\n    }\r\n    // else {\r\n    //   const nameLocalStorage = `image-base-64-${this.imageUrl}`;\r\n    //   const image = localStorage.getItem(nameLocalStorage);\r\n    //   if(image) {\r\n    //     const { data_base_64, mime_type, expiration_time } = JSON.parse(image);\r\n    //     if(new Date().getTime() < expiration_time) {\r\n    //       this.elementRef.nativeElement.src = `data:${mime_type};base64,${data_base_64}`;\r\n    //       return;\r\n    //     }\r\n    //   }\r\n\r\n    //   const expiration_time = new Date().getTime() + 300000;\r\n    //   const { data_base_64, mime_type } = await this.fetch.get<{ data_base_64: string, mime_type: string }>(`image/get-temporally-base-64?image_url=${this.imageUrl}`);\r\n    //   localStorage.setItem(nameLocalStorage, JSON.stringify({ data_base_64, mime_type, expiration_time }));\r\n    //   this.elementRef.nativeElement.src = `data:${mime_type};base64,${data_base_64}`;\r\n    // }\r\n  }\r\n\r\n}\r\n ",
            "selector": "[appLoadImagePrivate]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "required": true,
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'src'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "\"base-64\" | \"src\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "defaultImageUrl",
                    "defaultValue": "'assets/images/spinner-loading.gif'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "errorImageUrl",
                    "defaultValue": "'assets/images/robot-error.png'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fetch",
                    "defaultValue": "inject(FetchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getImage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "observeImageElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "NavigateLateralPanelOutletDirective",
            "id": "directive-NavigateLateralPanelOutletDirective-0db9d264bba875a380fda58747333bce913133d28a03370c6019e2af70026e083afed2746c1ed3ba20dcf42a6153f20b2db456a87aab687eaac042ee73241d74",
            "file": "src/app/shared/directives/navigate-lateral-panel-outlet.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AnimationPlayer } from '@angular/animations';\r\nimport { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n@Directive({\r\n  selector: '[appNavigateLateralPanelOutlet]', standalone: true\r\n})\r\nexport class NavigateLateralPanelOutletDirective {\r\n\r\n  @Input({ required: true }) navigateUrl!: string;\r\n  @Input() routeState?: any;\r\n\r\n  constructor(private el: ElementRef, private router: Router, private renderer2: Renderer2) {\r\n    this.renderer2.listen(el.nativeElement, 'click', () => {\r\n      this.navigateRoute(this.navigateUrl)\r\n    })\r\n  }\r\n\r\n  navigateRoute(url: string | null) {\r\n    this.router.navigate([{ outlets: { 'route-lateral': url } }], { state: this.routeState });\r\n  }\r\n\r\n}\r\n",
            "selector": "[appNavigateLateralPanelOutlet]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "required": true,
                    "name": "navigateUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "routeState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "navigateRoute",
                    "args": [
                        {
                            "name": "url",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer2",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer2",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "NavigateRightOutletDirective",
            "id": "directive-NavigateRightOutletDirective-ab6cfbee16e999f2d71ec6deba2db5b94b73315847a2e657c66701bcdcd6c400e3c2252cc0bfe6a27ee44d03d3dfc17850ccd3c04c86d47f74a325a10204c2c0",
            "file": "src/app/shared/directives/navigate-right-outlet.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n@Directive({\r\n  selector: '[appNavigateRightOutlet]', standalone: true\r\n})\r\nexport class NavigateRightOutletDirective {\r\n\r\n    @Input() navigateUrl! : string;\r\n\r\n  constructor(private el: ElementRef, private router: Router, private renderer2: Renderer2) {\r\n    this.renderer2.listen(el.nativeElement,'click', ()=>{\r\n        this.navigateRoute(this.navigateUrl)\r\n    })\r\n   }\r\n\r\n  navigateRoute(url: string | null) {\r\n    this.router.navigate([{ outlets: { 'route-lateral': url }}]);\r\n}\r\n\r\n}\r\n",
            "selector": "[appNavigateRightOutlet]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "navigateUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "navigateRoute",
                    "args": [
                        {
                            "name": "url",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer2",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer2",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AccountCreatePageComponent",
            "id": "component-AccountCreatePageComponent-b16d6fb95107e9252b2362568cfa34363dc6518a169bee04f11bdbe4ab4bd72be712fa4bacf50024d3b0add942b9fb87b24adb12126dff5b829ff823284b9944",
            "file": "src/app/modules/administration/accounts/pages/account-create-page/account-create-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-create-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./account-create-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n    type: 'create',\r\n    titleModule: 'cuenta',\r\n    formGroup: accountFormGroup(),\r\n    fields: DEFAULT_DISPLAY_FIELDS_FORM_ACCOUNT,\r\n    server: { url: 'account' },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemFormConfiguration, ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\nimport { DEFAULT_DISPLAY_FIELDS_FORM_ACCOUNT, accountFormGroup } from '../../helpers';\r\n\r\n@Component({\r\n  selector: 'app-account-create-page',\r\n  standalone: true,\r\n  imports: [ItemFormTemplateComponent],\r\n  templateUrl: './account-create-page.component.html',\r\n  styleUrl: './account-create-page.component.scss'\r\n})\r\nexport class AccountCreatePageComponent {\r\n  public configuration: ItemFormConfiguration = {\r\n    type: 'create',\r\n    titleModule: 'cuenta',\r\n    formGroup: accountFormGroup(),\r\n    fields: DEFAULT_DISPLAY_FIELDS_FORM_ACCOUNT,\r\n    server: { url: 'account' },\r\n  };\r\n}\r\n",
            "styleUrl": "./account-create-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "AccountDetailPageComponent",
            "id": "component-AccountDetailPageComponent-976a9ebe18bc6b63f34d6ca3a5678adfa11f4f7afcf53e7f5e0d08a4bf045a82f2f0c33c812fd6d88e402ca608b818e4e215c4ae54d36c19e661fdfa5eccaf4a",
            "file": "src/app/modules/administration/accounts/pages/account-detail-page/account-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-detail-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./account-detail-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        title: 'Detalles',\r\n        server: {\r\n            url: 'account',\r\n            queryParams: { relations: 'bank' },\r\n        },\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'Banco',\r\n                        displayValueFn: (item) => item.bank?.name\r\n                    },\r\n                    {\r\n                        title: 'Número de cuenta',\r\n                        displayValueFn: (item) => item.number\r\n                    },\r\n                    {\r\n                        title: 'Nombre',\r\n                        displayValueFn: (item) => item.name\r\n                    },\r\n                    {\r\n                        title: 'Moneda',\r\n                        displayValueFn: (item) => item.coin.toUpperCase()\r\n                    },\r\n                    {\r\n                        title: 'Descripción',\r\n                        displayValueFn: (item) => item.description\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDetailConfiguration<Account>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemDetailTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemDetailTemplateComponent, registerDataGroupDetail } from '@component/item-detail-template/item-detail-template.component';\r\nimport { Account } from '@interface/account';\r\nimport { ItemDetailConfiguration } from '@component/item-detail-template/item-detail-template.component';\r\n\r\n@Component({\r\n    selector: 'app-account-detail-page',\r\n    standalone: true,\r\n    imports: [ItemDetailTemplateComponent],\r\n    templateUrl: './account-detail-page.component.html',\r\n    styleUrl: './account-detail-page.component.scss'\r\n})\r\nexport class AccountDetailPageComponent {\r\n    public configuration: ItemDetailConfiguration<Account> = {\r\n        title: 'Detalles',\r\n        server: {\r\n            url: 'account',\r\n            queryParams: { relations: 'bank' },\r\n        },\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'Banco',\r\n                        displayValueFn: (item) => item.bank?.name\r\n                    },\r\n                    {\r\n                        title: 'Número de cuenta',\r\n                        displayValueFn: (item) => item.number\r\n                    },\r\n                    {\r\n                        title: 'Nombre',\r\n                        displayValueFn: (item) => item.name\r\n                    },\r\n                    {\r\n                        title: 'Moneda',\r\n                        displayValueFn: (item) => item.coin.toUpperCase()\r\n                    },\r\n                    {\r\n                        title: 'Descripción',\r\n                        displayValueFn: (item) => item.description\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }\r\n}\r\n",
            "styleUrl": "./account-detail-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-detail-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "AccountEditPageComponent",
            "id": "component-AccountEditPageComponent-e65910109736b78b6aa6e0c00cdbc0ec385e4846b1736771076100b90abad6a730bd4ec1d3687a7da23e34cb48de6eb11448eea0ac54592fe93e97d5bc9dd92e",
            "file": "src/app/modules/administration/accounts/pages/account-edit-page/account-edit-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-edit-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./account-edit-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n    type: 'create',\r\n    titleModule: 'cuenta',\r\n    formGroup: accountFormGroup(),\r\n    fields: DEFAULT_DISPLAY_FIELDS_FORM_ACCOUNT,\r\n    server: { url: 'account' },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "AccountCreatePageComponent"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AccountCreatePageComponent } from '../account-create-page/account-create-page.component';\r\nimport { ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\n\r\n@Component({\r\n  selector: 'app-account-edit-page',\r\n  standalone: true,\r\n  imports: [ItemFormTemplateComponent],\r\n  templateUrl: './account-edit-page.component.html',\r\n  styleUrl: './account-edit-page.component.scss'\r\n})\r\nexport class AccountEditPageComponent extends AccountCreatePageComponent{\r\n    private activatedRoute = inject(ActivatedRoute);\r\n\r\n    constructor(\r\n    ) {\r\n        super();\r\n        this.configuration.type = 'update';\r\n        this.configuration.server.itemQueryParams = {relations: 'bank'},\r\n        this.configuration.hiddeFields = true;\r\n    }\r\n}\r\n",
            "styleUrl": "./account-edit-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "extends": [
                "AccountCreatePageComponent"
            ],
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "AccountListPageComponent",
            "id": "component-AccountListPageComponent-75b0be695a8568d9f344e68149325d497fde7c38b1f9b03d24a2a5fe25567b5a2e822dec504547c579a46c4b46454fab99946585b3f584e2e8ac46161fef0818",
            "file": "src/app/modules/administration/accounts/pages/account-list-page/account-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./account-list-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configList",
                    "defaultValue": "{\r\n        title: 'Cuentas',\r\n        server: {\r\n            url: 'account',\r\n            queryParams: { relations: 'bank' },\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Nombre',\r\n                sort: { key: 'name' },\r\n                routerLinkValue: { url: (item) => `../detail/${item.id}` },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.name ? item.name : '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Número',\r\n                sort: { key: 'number' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.number,\r\n            }),\r\n            textColumn({\r\n                title: 'Banco',\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.bank?.name,\r\n            }),\r\n            textColumn({\r\n                title: 'Moneda',\r\n                sort: { key: 'coin' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.coin,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<Account>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, signal } from '@angular/core';\r\nimport { ItemListTemplateComponent } from '@component/item-list-template/item-list-template.component';\r\nimport { Account } from '@interface/account';\r\nimport { ItemListConfiguration, itemCreatedAtColumn, itemStatusColumn, itemUpdatedAtColumn, textColumn } from '@component/item-list-template/item-list-template.component';\r\n\r\n@Component({\r\n    selector: 'app-account-list-page',\r\n    standalone: true,\r\n    imports: [ItemListTemplateComponent],\r\n    templateUrl: './account-list-page.component.html',\r\n    styleUrl: './account-list-page.component.scss'\r\n})\r\nexport class AccountListPageComponent {\r\n    public configList: ItemListConfiguration<Account> = {\r\n        title: 'Cuentas',\r\n        server: {\r\n            url: 'account',\r\n            queryParams: { relations: 'bank' },\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Nombre',\r\n                sort: { key: 'name' },\r\n                routerLinkValue: { url: (item) => `../detail/${item.id}` },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.name ? item.name : '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Número',\r\n                sort: { key: 'number' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.number,\r\n            }),\r\n            textColumn({\r\n                title: 'Banco',\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.bank?.name,\r\n            }),\r\n            textColumn({\r\n                title: 'Moneda',\r\n                sort: { key: 'coin' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.coin,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }\r\n}\r\n",
            "styleUrl": "./account-list-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-list-template [configuration]=\"configList\"/>\r\n"
        },
        {
            "name": "AlertTemplateComponent",
            "id": "component-AlertTemplateComponent-ca749fd6ff34a9f62ac7fd499f99a79801bba7e8d26119fea85a16fbbe6e9c87d8f4f5e60598995a6ae74d4cab54b14d95647d2470ded586adfc91514bf6249e",
            "file": "src/app/shared/components/alert-template/alert-template.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert-template",
            "styleUrls": [
                "./alert-template.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert-template.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 25,
                    "type": "AlertConfiguration",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nexport interface AlertConfiguration {\r\n  title?: string;\r\n  description: string;\r\n  icon?: string;\r\n  showCloseButton?: boolean;\r\n  style?: 'error' | 'primary' | 'tertiary';\r\n  actionButton?: {\r\n      icon?: string;\r\n      text: string;\r\n      fn: () => void\r\n  };\r\n}\r\n\r\n@Component({\r\n  selector: 'app-alert-template',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './alert-template.component.html',\r\n  styleUrls: ['./alert-template.component.scss']\r\n})\r\nexport class AlertTemplateComponent {\r\n  @Input({required: true}) configuration!: AlertConfiguration;\r\n  @Output() close: EventEmitter<boolean> = new EventEmitter();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    display: block;\r\n}\r\n\r\n.alert {\r\n    display: flex;\r\n    gap: 16px;\r\n    padding: 16px var(--padding-x-card, 12px);\r\n    background: var(--canvas-background-alert, var(--color-surface));\r\n    position: relative;\r\n    border: var(--border-alert);\r\n}\r\n\r\n.alert[data-type=\"primary\"] {\r\n    --rgb-color-alert: var(--rgb-primary);\r\n}\r\n\r\n.alert[data-type=\"tertiary\"] {\r\n    --rgb-color-alert: var(--rgb-tertiary);\r\n}\r\n\r\n.alert::before,\r\n.alert::after {\r\n    content: '';\r\n    position: absolute;\r\n    top: 0px;\r\n    bottom: 0px;\r\n    left: 0px;\r\n    transition: background .2s ease;\r\n}\r\n\r\n.alert::before {\r\n    width: 100%;\r\n    background: rgba(var(--rgb-color-alert, var(--rgb-error)), 0.08);\r\n}\r\n\r\n.alert::after {\r\n    width: 3px;\r\n    background: linear-gradient(to top, rgb(var(--rgb-color-alert, var(--rgb-error))) 35%, rgba(var(--rgb-color-alert, var(--rgb-error)), .5));\r\n}\r\n\r\n.alert__icon {\r\n    margin-left: -4px;\r\n    margin-right: -4px;\r\n    color: rgb(var(--rgb-color-alert, var(--rgb-error)));\r\n}\r\n\r\n.alert__content {\r\n    height: 100%;\r\n    display: grid;\r\n    align-items: center;\r\n    flex: 1;\r\n}\r\n\r\n.alert__content__title {\r\n    font-family: var(--label-large-font-family-name);\r\n    font-style: var(--label-large-font-family-style);\r\n    font-weight: var(--label-large-font-weight);\r\n    font-size: var(--label-large-font-size);\r\n    letter-spacing: var(--label-large-letter-spacing);\r\n    line-height: var(--label-large-line-height);\r\n    text-transform: var(--label-large-text-transform);\r\n    text-decoration: var(--label-large-text-decoration);\r\n    color: var(--color-on-surface);\r\n}\r\n\r\n.alert__content__title+.alert__content__description {\r\n    margin-top: 4px;\r\n}\r\n\r\n.alert__content__description {\r\n    font-family: var(--body-medium-font-family-name);\r\n    font-style: var(--body-medium-font-family-style);\r\n    font-weight: var(--body-medium-font-weight);\r\n    font-size: var(--body-medium-font-size);\r\n    letter-spacing: var(--body-medium-letter-spacing);\r\n    line-height: var(--body-medium-line-height);\r\n    text-transform: var(--body-medium-text-transform);\r\n    text-decoration: var(--body-medium-text-decoration);\r\n    color: var(--color-on-surface-variant);\r\n    text-wrap: balance;\r\n}\r\n\r\n.alert__close {\r\n    margin-right: -12px !important;\r\n    margin-top: -6px !important;\r\n}\r\n\r\n.alert__close__icon {\r\n    --size-material-symbol-icon: 20px;\r\n    cursor: pointer;\r\n    color: rgb(var(--rgb-on-surface));\r\n    opacity: .75;\r\n    transition: opacity .2 ease;\r\n}\r\n\r\n.alert__close__icon:hover {\r\n    opacity: 1;\r\n}",
                    "styleUrl": "./alert-template.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"alert\" [attr.data-type]=\"configuration.style\">\r\n    @if (configuration.icon; as icon) {\r\n        <div class=\"alert__icon\">\r\n            <span class=\"material-icons icon-small\">{{icon}}</span>\r\n        </div>\r\n    }\r\n\r\n    <div class=\"alert__content\">\r\n        @if (configuration.title; as title) {\r\n            <div class=\"alert__content__title\">\r\n                {{title}}\r\n            </div>\r\n        }\r\n        <div class=\"alert__content__description\" [innerHTML]=\"configuration.description\"></div>\r\n    </div>\r\n\r\n    @if (configuration.actionButton; as actionButton) {\r\n        <div class=\"alert__action\">\r\n            <button class=\"outlined-button\" (click)=\"actionButton.fn()\">\r\n                {{actionButton.text}}\r\n            </button>\r\n        </div>\r\n    }\r\n\r\n    @if (configuration.showCloseButton) {\r\n        <button class=\"alert__close icon-button\">\r\n            <span class=\"material-icons alert__close__icon\" (click)=\"close.emit(true)\">close</span>\r\n        </button>\r\n    }\r\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-85c52b8630bf7b9c8263933f268a35eb5d9d14650dbd9b54a7f2fb5b006a6a3ecd60f1bf44566485a2c5f254b65346815e05339533c751065c729c38e4f46a76",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "template": "<router-outlet/>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "updates",
                    "defaultValue": "inject(SwUpdate)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { SwUpdate } from '@angular/service-worker';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [RouterOutlet],\r\n  template: '<router-outlet/>',\r\n  styles: ``,\r\n})\r\nexport class AppComponent {\r\n  private updates = inject(SwUpdate);\r\n  constructor() {\r\n    this.updates.versionUpdates.subscribe((evt) => {\r\n      switch (evt.type) {\r\n        case 'VERSION_DETECTED':\r\n          location.reload();\r\n          console.log(`Downloading new app version: ${evt.version.hash}`);\r\n          break;\r\n        case 'VERSION_READY':\r\n          console.log(`Current app version: ${evt.currentVersion.hash}`);\r\n          console.log(`New app version ready for use: ${evt.latestVersion.hash}`);\r\n          break;\r\n        case 'VERSION_INSTALLATION_FAILED':\r\n          console.log(`Failed to install app version '${evt.version.hash}': ${evt.error}`);\r\n          break;\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "extends": []
        },
        {
            "name": "AppsMenuComponent",
            "id": "component-AppsMenuComponent-7f906e71286c88703c7d3885abe9e0272339e512d583a06b774a2fa00c8f26532bf616d6587214f1e95b2a2af9adc8759c8a42d1029dff7145532ee670ae78f1",
            "file": "src/app/sidenav/apps-menu/apps-menu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-apps-menu",
            "styleUrls": [
                "./apps-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./apps-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatMenuModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\n\r\n@Component({\r\n  selector: 'app-apps-menu',\r\n  standalone: true,\r\n  imports: [\r\n    MatMenuModule\r\n  ],\r\n  templateUrl: './apps-menu.component.html',\r\n  styleUrls: ['./apps-menu.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class AppsMenuComponent {\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* --------------------------------------------------------------------- */\r\n/* ----------------------     APPS  MENU     --------------------------- */\r\n/* --------------------------------------------------------------------- */\r\n.apps-menu {\r\n    border-radius: var(--corner-mdc-dialog, 28px) !important;\r\n}\r\n\r\n.apps__menu__container {\r\n    min-width: 280px;\r\n    max-width: 280px;\r\n    min-height: 200px;\r\n    overflow: hidden;\r\n    overflow-y: auto;\r\n    padding: 6px;\r\n}\r\n\r\n.apps__menu__content {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(76px, 1fr));\r\n    grid-template-rows: repeat(auto-fill, 80px);\r\n    gap: 4px;\r\n    overflow: hidden;\r\n    padding: 16px 12px;\r\n    border-radius: 14px;\r\n    background: var(--color-surface);\r\n    width: 100%;\r\n}\r\n\r\n.apps__menu__content__item {\r\n    width: 76px;\r\n    height: 80px;\r\n}\r\n\r\n.apps__menu__content__item__button {\r\n    flex-direction: column;\r\n    justify-content: flex-start !important;\r\n    gap: 8px !important;\r\n    min-width: 76px !important;\r\n    width: 76px !important;\r\n    padding: 12px 6px !important;\r\n    border-radius: 8px !important;\r\n    min-height: 80px !important;\r\n    max-height: 200px !important;\r\n    height: 80px !important;\r\n    overflow: visible !important;\r\n    --bg-icon-button-hovered: rgba(var(--rgb-primary), 0.08) !important;\r\n}\r\n\r\n.apps__menu__content__item__button:hover,\r\n.apps__menu__content__item__button:focus {\r\n    height: auto !important;\r\n}\r\n\r\n.apps__menu__content__item__button__icon {\r\n    --size-material-symbol-icon: 28px;\r\n}\r\n\r\n.apps__menu__content__item__button__text {\r\n    width: 70px;\r\n    text-align: center;\r\n    word-wrap: break-word;\r\n}\r\n\r\n.apps__menu__content__item__button:not(:hover):not(:focus) .apps__menu__content__item__button__text {\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n}",
                    "styleUrl": "./apps-menu.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<button class=\"icon-button\" [matMenuTriggerFor]=\"appsMenu\">\r\n    <span class=\"material-icons\">apps</span>\r\n</button>\r\n\r\n\r\n<mat-menu class=\"apps-menu\" #appsMenu=\"matMenu\">\r\n    <div class=\"apps__menu__container\" (click)=\"$event.stopPropagation()\">\r\n        <div class=\"apps__menu__content\">\r\n            <div class=\"apps__menu__content__item\">\r\n                <button class=\"apps__menu__content__item__button icon-button\">\r\n                    <span class=\"apps__menu__content__item__button__icon material-icons\">account_circle</span>\r\n                    <p class=\"apps__menu__content__item__button__text body-small\">Usuarios</p>\r\n                </button>\r\n            </div>\r\n            <div class=\"apps__menu__content__item\">\r\n                <button class=\"apps__menu__content__item__button icon-button\">\r\n                    <span class=\"apps__menu__content__item__button__icon material-icons\">date_range</span>\r\n                    <p class=\"apps__menu__content__item__button__text body-small\">Calendario</p>\r\n                </button>\r\n            </div>\r\n            <div class=\"apps__menu__content__item\">\r\n                <button class=\"apps__menu__content__item__button icon-button\">\r\n                    <span class=\"apps__menu__content__item__button__icon material-icons\">apps</span>\r\n                    <p class=\"apps__menu__content__item__button__text body-small\">Inicio</p>\r\n                </button>\r\n            </div>\r\n            <div class=\"apps__menu__content__item\">\r\n                <button class=\"apps__menu__content__item__button icon-button\">\r\n                    <span class=\"apps__menu__content__item__button__icon material-icons\">apps</span>\r\n                    <p class=\"apps__menu__content__item__button__text body-small\">Aplicaciones</p>\r\n                </button>\r\n            </div>\r\n            <div class=\"apps__menu__content__item\">\r\n                <button class=\"apps__menu__content__item__button icon-button\">\r\n                    <span class=\"apps__menu__content__item__button__icon material-icons\">apps</span>\r\n                    <p class=\"apps__menu__content__item__button__text body-small\">Aplicaciones</p>\r\n                </button>\r\n            </div>\r\n            <div class=\"apps__menu__content__item\">\r\n                <button class=\"apps__menu__content__item__button icon-button\">\r\n                    <span class=\"apps__menu__content__item__button__icon material-icons\">apps</span>\r\n                    <p class=\"apps__menu__content__item__button__text body-small\">Aplicaciones de escritorio</p>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</mat-menu>\r\n"
        },
        {
            "name": "BankCreatePageComponent",
            "id": "component-BankCreatePageComponent-d87fc8186f0ac85c3b964c828ab9a841e5dad7942231848b3ff2a92a22b75cdb5c4e430a59ff20bd9ab91ed4ede0108a691044e4f69db1c23583fb2ed4923ddd",
            "file": "src/app/modules/configuration/banks/pages/bank-create-page/bank-create-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bank-create-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./bank-create-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n    type: 'create',\r\n    titleModule: 'banco',\r\n    formGroup: bankFormGroup(),\r\n    fields: DEFAULT_DISPLAY_FIELDS_FORM_BANK,\r\n    server: { url: 'bank' },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemFormConfiguration, ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\nimport { DEFAULT_DISPLAY_FIELDS_FORM_BANK, bankFormGroup } from '../../helpers';\r\n\r\n@Component({\r\n  selector: 'app-bank-create-page',\r\n  standalone: true,\r\n  imports: [ItemFormTemplateComponent],\r\n  templateUrl: './bank-create-page.component.html',\r\n  styleUrl: './bank-create-page.component.scss'\r\n})\r\nexport class BankCreatePageComponent {\r\n  public configuration: ItemFormConfiguration = {\r\n    type: 'create',\r\n    titleModule: 'banco',\r\n    formGroup: bankFormGroup(),\r\n    fields: DEFAULT_DISPLAY_FIELDS_FORM_BANK,\r\n    server: { url: 'bank' },\r\n  };\r\n}\r\n",
            "styleUrl": "./bank-create-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "BankDetailPageComponent",
            "id": "component-BankDetailPageComponent-89c8bc057b2e48546bc45f8ecae22af0eadb75f4ee87f8e787e555fcdd94d7d5f80a826bd2386b503a5207b254d8a432361203486eb968336978865898584f2f",
            "file": "src/app/modules/configuration/banks/pages/bank-detail-page/bank-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bank-detail-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./bank-detail-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        title: 'Detalles',\r\n        server: { url: 'bank' },\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'Código',\r\n                        displayValueFn: (item) => item.code\r\n                    },\r\n                    {\r\n                        title: 'Nombre',\r\n                        displayValueFn: (item) => item.name\r\n                    },\r\n                    {\r\n                        title: 'Descripción',\r\n                        displayValueFn: (item) => item.description\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDetailConfiguration<Bank>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemDetailTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemDetailTemplateComponent, registerDataGroupDetail } from '@component/item-detail-template/item-detail-template.component';\r\nimport { Bank } from '@interface/bank';\r\nimport { ItemDetailConfiguration } from '@component/item-detail-template/item-detail-template.component';\r\n\r\n@Component({\r\n  selector: 'app-bank-detail-page',\r\n  standalone: true,\r\n  imports: [ItemDetailTemplateComponent],\r\n  templateUrl: './bank-detail-page.component.html',\r\n  styleUrl: './bank-detail-page.component.scss'\r\n})\r\nexport class BankDetailPageComponent {\r\n    public configuration: ItemDetailConfiguration<Bank> = {\r\n        title: 'Detalles',\r\n        server: { url: 'bank' },\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'Código',\r\n                        displayValueFn: (item) => item.code\r\n                    },\r\n                    {\r\n                        title: 'Nombre',\r\n                        displayValueFn: (item) => item.name\r\n                    },\r\n                    {\r\n                        title: 'Descripción',\r\n                        displayValueFn: (item) => item.description\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }\r\n}\r\n",
            "styleUrl": "./bank-detail-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-detail-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "BankEditPageComponent",
            "id": "component-BankEditPageComponent-782a3e140ec7028cab6e86a42cecd74da8c30c8d251b666f0a7ea9252aecd88ad0119cd257e70ad6a83be8ce1a1d690a2ebb3f930a5994d0c779a330e1413dd4",
            "file": "src/app/modules/configuration/banks/pages/bank-edit-page/bank-edit-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bank-edit-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./bank-edit-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n    type: 'create',\r\n    titleModule: 'banco',\r\n    formGroup: bankFormGroup(),\r\n    fields: DEFAULT_DISPLAY_FIELDS_FORM_BANK,\r\n    server: { url: 'bank' },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "BankCreatePageComponent"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { BankCreatePageComponent } from '../bank-create-page/bank-create-page.component';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\n\r\n@Component({\r\n    selector: 'app-bank-edit-page',\r\n    standalone: true,\r\n    imports: [ItemFormTemplateComponent],\r\n    templateUrl: './bank-edit-page.component.html',\r\n    styleUrl: './bank-edit-page.component.scss'\r\n})\r\nexport class BankEditPageComponent extends BankCreatePageComponent {\r\n    private activatedRoute = inject(ActivatedRoute);\r\n\r\n    constructor(\r\n    ) {\r\n        super();\r\n        this.configuration.type = 'update';\r\n        this.configuration.hiddeFields = true;\r\n    }\r\n}\r\n",
            "styleUrl": "./bank-edit-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "extends": [
                "BankCreatePageComponent"
            ],
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "BankListPageComponent",
            "id": "component-BankListPageComponent-1ac6897c2f990c23c346875298b8f5c2648f5b21a74c60764c181c6d27c1384c1e0cb5177b66fb1084c8d929e32ada56d58c0ff4d4735d2c1e6d1bcb5fb6312b",
            "file": "src/app/modules/configuration/banks/pages/bank-list-page/bank-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bank-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./bank-list-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configList",
                    "defaultValue": "{\r\n        title: 'Bancos',\r\n        server: { url: 'bank' },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Código',\r\n                sort: { key: 'code' },\r\n                displayValueFn: (item) => item.code,\r\n            }),\r\n            textColumn({\r\n                title: 'Nombre',\r\n                gridColumn: '1fr',\r\n                sort: {\r\n                    key: 'name',\r\n                },\r\n                routerLinkValue: {\r\n                    url: (item) => `../detail/${item.id}`,\r\n                },\r\n                displayValueFn: (item) => item.name,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<Bank>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, signal } from '@angular/core';\r\nimport { ItemListTemplateComponent, ItemListConfiguration, itemCreatedAtColumn, itemStatusColumn, itemUpdatedAtColumn, textColumn } from '@component/item-list-template/item-list-template.component';\r\nimport { Bank } from '@interface/bank';\r\n\r\n@Component({\r\n    selector: 'app-bank-list-page',\r\n    standalone: true,\r\n    imports: [ItemListTemplateComponent],\r\n    templateUrl: './bank-list-page.component.html',\r\n    styleUrl: './bank-list-page.component.scss'\r\n})\r\nexport class BankListPageComponent {\r\n    public configList: ItemListConfiguration<Bank> = {\r\n        title: 'Bancos',\r\n        server: { url: 'bank' },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Código',\r\n                sort: { key: 'code' },\r\n                displayValueFn: (item) => item.code,\r\n            }),\r\n            textColumn({\r\n                title: 'Nombre',\r\n                gridColumn: '1fr',\r\n                sort: {\r\n                    key: 'name',\r\n                },\r\n                routerLinkValue: {\r\n                    url: (item) => `../detail/${item.id}`,\r\n                },\r\n                displayValueFn: (item) => item.name,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }\r\n}\r\n",
            "styleUrl": "./bank-list-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-list-template [configuration]=\"configList\"/>\r\n"
        },
        {
            "name": "BoxCreatePageComponent",
            "id": "component-BoxCreatePageComponent-60445218720f671335f91a2fd79dcd682ab83a3c5187c038348a8e4ea702cf1fe23e53cd0a44b6be2b69bd9dfa6194b4c7e12a7e3609ab2a3953a3a6ad63a9b4",
            "file": "src/app/modules/administration/boxes/pages/box-create-page/box-create-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-box-create-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./box-create-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        type: 'create',\r\n        titleModule: 'caja',\r\n        formGroup: new FormGroup({\r\n            account_id: new FormControl(''),\r\n            type: new FormControl('', [Validators.required]),\r\n            name: new FormControl('', [Validators.required]),\r\n            description: new FormControl(''),\r\n            coin: new FormControl(''),\r\n        }),\r\n        server: { url: 'box' },\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "BoxFormPageComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ItemFormConfiguration, ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\nimport { BoxFormPageComponent } from '../box-form-page/box-form-page.component';\r\n\r\n@Component({\r\n    selector: 'app-box-create-page',\r\n    standalone: true,\r\n    imports: [ItemFormTemplateComponent, BoxFormPageComponent],\r\n    templateUrl: './box-create-page.component.html',\r\n    styleUrl: './box-create-page.component.scss'\r\n})\r\nexport class BoxCreatePageComponent {\r\n    public configuration: ItemFormConfiguration = {\r\n        type: 'create',\r\n        titleModule: 'caja',\r\n        formGroup: new FormGroup({\r\n            account_id: new FormControl(''),\r\n            type: new FormControl('', [Validators.required]),\r\n            name: new FormControl('', [Validators.required]),\r\n            description: new FormControl(''),\r\n            coin: new FormControl(''),\r\n        }),\r\n        server: { url: 'box' },\r\n    };\r\n}\r\n",
            "styleUrl": "./box-create-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-form-template [configuration]=\"configuration\">\r\n    <app-box-form-page [form]=\"configuration.formGroup\"></app-box-form-page>\r\n</app-item-form-template>\r\n"
        },
        {
            "name": "BoxDetailPageComponent",
            "id": "component-BoxDetailPageComponent-cb712b4d363fa91bb5c77da7bc0444eb85c44d54ee83dde02649779b95b51c6285b25ef1611782ae70402ad610cfc48f7b9a7c078610aeaec63a6f094762cf55",
            "file": "src/app/modules/administration/boxes/pages/box-detail-page/box-detail-page.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-box-detail-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./box-detail-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        title: 'Detalle de la caja',\r\n        server: {\r\n            url: 'box',\r\n            queryParams: { \r\n                relations: 'account.bank,lastBoxOpening.openUser'\r\n            },\r\n        },\r\n        subtitle: false,\r\n        updateItemEvent: new EventEmitter(),\r\n        backButton: false,\r\n        afterSetItemFn: (item) => this.showOpenButton(item),\r\n        groups: [\r\n            {\r\n                details: [\r\n                    {\r\n                        title: 'Tipo',\r\n                        displayValueFn: (item) => item.type,\r\n                        type: 'titlecase',\r\n                    },\r\n                    {\r\n                        title: 'Nombre',\r\n                        displayValueFn: (item) => item.name,\r\n                        type: 'titlecase'\r\n                    },\r\n                    {\r\n                        title: 'Monto disponible',\r\n                        displayValueFn: (item) => item.amount,\r\n                        type: 'currency',\r\n                    },\r\n                    {\r\n                        title: 'N° de cuenta',\r\n                        displayValueFn: (item) => item.account?.number\r\n                    },\r\n                    {\r\n                        title: 'Banco',\r\n                        displayValueFn: (item) => item.account?.bank?.name\r\n                    },\r\n                    {\r\n                        title: 'Moneda',\r\n                        displayValueFn: (item) => item.coin,\r\n                        type: 'titlecase',\r\n                    },\r\n                    {\r\n                        title: 'Descripción',\r\n                        displayValueFn: (item) => item.description\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n\r\n        ]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDetailConfiguration<Box>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "databaseStorage",
                    "defaultValue": "inject(DatabaseStorageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialog",
                    "defaultValue": "inject(MatDialog)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fetch",
                    "defaultValue": "inject(FetchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeBoxOpening",
                    "args": [
                        {
                            "name": "box_opening_id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "box_opening_id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ]
                },
                {
                    "name": "openBoxOpening",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "showOpenButton",
                    "args": [
                        {
                            "name": "box",
                            "type": "Box",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "box",
                            "type": "Box",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterLink"
                },
                {
                    "name": "SpinnerDefaultComponent",
                    "type": "component"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                },
                {
                    "name": "TitleCasePipe",
                    "type": "pipe"
                },
                {
                    "name": "DatePipe",
                    "type": "pipe"
                },
                {
                    "name": "ItemDetailTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DatePipe, DecimalPipe, TitleCasePipe } from '@angular/common';\r\nimport { Component, EventEmitter, ViewEncapsulation, inject } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Router, RouterLink } from '@angular/router';\r\nimport { ItemDetailTemplateComponent, registerDataGroupDetail } from '@component/item-detail-template/item-detail-template.component';\r\nimport { SpinnerDefaultComponent } from '@component/spinner-default/spinner-default.component';\r\nimport { StatusModel } from '@interface/baseModel';\r\nimport { Box } from '@interface/box';\r\nimport { BoxOpening } from '@interface/boxOpening';\r\nimport { ItemDetailConfiguration } from '@component/item-detail-template/item-detail-template.component';\r\nimport { DatabaseStorageService, NameModuleDatabase } from '@service/database-storage.service';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { BoxOpeningCreatePageComponent } from '../../box-openings/pages/box-opening-create-page/box-opening-create-page.component';\r\n\r\n@Component({\r\n    selector: 'app-box-detail-page',\r\n    standalone: true,\r\n    imports: [\r\n        RouterLink,\r\n        SpinnerDefaultComponent,\r\n        DecimalPipe,\r\n        TitleCasePipe,\r\n        DatePipe,\r\n        ItemDetailTemplateComponent\r\n    ],\r\n    encapsulation: ViewEncapsulation.None,\r\n    templateUrl: './box-detail-page.component.html',\r\n    styleUrl: './box-detail-page.component.scss'\r\n})\r\nexport class BoxDetailPageComponent {\r\n    private fetch = inject(FetchService);\r\n    private dialog = inject(MatDialog);\r\n    private router = inject(Router);\r\n    private databaseStorage = inject(DatabaseStorageService);\r\n    public configuration: ItemDetailConfiguration<Box> = {\r\n        title: 'Detalle de la caja',\r\n        server: {\r\n            url: 'box',\r\n            queryParams: { \r\n                relations: 'account.bank,lastBoxOpening.openUser'\r\n            },\r\n        },\r\n        subtitle: false,\r\n        updateItemEvent: new EventEmitter(),\r\n        backButton: false,\r\n        afterSetItemFn: (item) => this.showOpenButton(item),\r\n        groups: [\r\n            {\r\n                details: [\r\n                    {\r\n                        title: 'Tipo',\r\n                        displayValueFn: (item) => item.type,\r\n                        type: 'titlecase',\r\n                    },\r\n                    {\r\n                        title: 'Nombre',\r\n                        displayValueFn: (item) => item.name,\r\n                        type: 'titlecase'\r\n                    },\r\n                    {\r\n                        title: 'Monto disponible',\r\n                        displayValueFn: (item) => item.amount,\r\n                        type: 'currency',\r\n                    },\r\n                    {\r\n                        title: 'N° de cuenta',\r\n                        displayValueFn: (item) => item.account?.number\r\n                    },\r\n                    {\r\n                        title: 'Banco',\r\n                        displayValueFn: (item) => item.account?.bank?.name\r\n                    },\r\n                    {\r\n                        title: 'Moneda',\r\n                        displayValueFn: (item) => item.coin,\r\n                        type: 'titlecase',\r\n                    },\r\n                    {\r\n                        title: 'Descripción',\r\n                        displayValueFn: (item) => item.description\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n\r\n        ]\r\n    }\r\n    get dataItem() {\r\n        return this.configuration.dataItem!;\r\n    }\r\n\r\n    private showOpenButton(box: Box) {\r\n        if (box.last_box_opening?.status != StatusModel.Abierto) {\r\n            this.configuration.actionButtons = [\r\n                {\r\n                    id: 'open-surrender-box',\r\n                    icon: 'lock_open',\r\n                    text: 'Apertura caja',\r\n                    type: 'clickEvent',\r\n                    clickEvent: () => this.openBoxOpening(),\r\n                    style: 'filled-button'\r\n                }\r\n            ]\r\n        } else {\r\n            this.configuration.actionButtons = [];\r\n        }\r\n    }\r\n\r\n    public openBoxOpening() {\r\n        const dialogRef = this.dialog.open(BoxOpeningCreatePageComponent, {\r\n            data: {\r\n                ...this.dataItem()!,\r\n            },\r\n        });\r\n        dialogRef.afterClosed().subscribe(async (response: BoxOpening) => {\r\n            if (response.amount_init) {\r\n                const body = {\r\n                    ...response,\r\n                    box_id: this.dataItem()!.id,\r\n                };\r\n                await this.fetch.post('box-opening', body, { confirmDialog: false });\r\n                this.databaseStorage.updateDataLocal(NameModuleDatabase.BoxOpenings);\r\n                this.configuration.updateItemEvent?.emit(true);\r\n            }\r\n        });\r\n    }\r\n\r\n    public async closeBoxOpening(box_opening_id: number) {\r\n        const response = await this.fetch.put<BoxOpening>(\r\n            `box-opening/${box_opening_id}/update-status`,\r\n            { status: StatusModel.Cerrado },\r\n            {\r\n                confirmDialog: {\r\n                    title: '¿Estás seguro de cerrar caja?',\r\n                    description: `Se efectuará el cierre de caja con el monto de ${this.dataItem()?.amount} ${this.dataItem()?.coin}`,\r\n                }\r\n            });\r\n        this.databaseStorage.updateDataLocal(NameModuleDatabase.BoxOpenings);\r\n        this.dataItem.update(item => ({\r\n            ...item!,\r\n            last_box_opening: {\r\n                ...item!.last_box_opening!,\r\n                ...response,\r\n            }\r\n        }))\r\n        this.showOpenButton(this.dataItem()!);\r\n    }\r\n\r\n    public async delete() {\r\n        await this.fetch.delete<Box>(`box/${this.dataItem()?.id}`);\r\n        this.router.navigate(['/box']);\r\n    }\r\n}\r\n",
            "styleUrl": "./box-detail-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "dataItem": {
                    "name": "dataItem",
                    "getSignature": {
                        "name": "dataItem",
                        "type": "",
                        "returnType": "",
                        "line": 88
                    }
                }
            },
            "templateData": "<app-item-detail-template [configuration]=\"configuration\">\r\n\r\n    <ng-container afterContent>\r\n        <div class=\"box-opened\">\r\n            @if (dataItem(); as item) {\r\n                @if (item?.last_box_opening; as last_box_opening) {\r\n                    <div class=\"rounded-lg p-4 bg-surface-variant\">\r\n                        <div class=\"title-medium mb-4\">\r\n                            Última apertura de caja:\r\n                        </div>\r\n                        <div class=\"text-skin-base grid grid-cols-[auto,auto,1fr] gap-x-1\">\r\n                            <div class=\"contents\">\r\n                                <span class=\"font-medium\">Usuario de apertura</span>\r\n                                <span>:</span>\r\n                                <span>{{last_box_opening.open_user?.name}}</span>\r\n                            </div>\r\n                            <div class=\"contents\">\r\n                                <span class=\"font-medium\">Fecha de apertura</span>\r\n                                <span>:</span>\r\n                                <span>{{last_box_opening.date_open | date:'dd/MM/yyyy hh:mm a'}}</span>\r\n                            </div>\r\n                            <div class=\"contents\">\r\n                                <span class=\"font-medium\">Monto inicial</span>\r\n                                <span>:</span>\r\n                                <span>{{last_box_opening.amount_init | number:'.2-2'}}</span>\r\n                            </div>\r\n                            <div class=\"contents\">\r\n                                <span class=\"font-medium\">Estado</span>\r\n                                <span>:</span>\r\n                                <span>{{last_box_opening.status |titlecase}}</span>\r\n                            </div>\r\n\r\n                            @if (last_box_opening.status == 'abierto') {\r\n                            <div class=\"col-span-full mt-2\">\r\n                                <button class=\"filled-button\" (click)=\"closeBoxOpening(last_box_opening.id)\">\r\n                                    <span class=\"material-icons\">lock</span>\r\n                                    <span>Cerrar caja</span>\r\n                                </button>\r\n                            </div>\r\n                            }\r\n                            @if (!(item?.last_box_opening?.status == 'abierto')) {\r\n                            <button class=\"filled-button\" (click)=\"openBoxOpening()\">\r\n                                <span class=\"material-icons\">lock_open</span>\r\n                                <span>Apertura caja</span>\r\n                            </button>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                }\r\n            }\r\n        </div>\r\n    </ng-container>\r\n</app-item-detail-template>\r\n"
        },
        {
            "name": "BoxEditPageComponent",
            "id": "component-BoxEditPageComponent-a1cb216fae04b98fdd5e954e65aa3fb683ddb5d990ca5a2fec8b7e1cf4dacab283f73b0a9badda5790a1218f313bb9d5083869d85f123a7e317378d661397ba4",
            "file": "src/app/modules/administration/boxes/pages/box-edit-page/box-edit-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-box-edit-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./box-edit-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        type: 'create',\r\n        titleModule: 'caja',\r\n        formGroup: new FormGroup({\r\n            account_id: new FormControl(''),\r\n            type: new FormControl('', [Validators.required]),\r\n            name: new FormControl('', [Validators.required]),\r\n            description: new FormControl(''),\r\n            coin: new FormControl(''),\r\n        }),\r\n        server: { url: 'box' },\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "BoxCreatePageComponent"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "BoxFormPageComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { BoxCreatePageComponent } from '../box-create-page/box-create-page.component';\r\nimport { ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\nimport { BoxFormPageComponent } from '../box-form-page/box-form-page.component';\r\n\r\n@Component({\r\n    selector: 'app-box-edit-page',\r\n    standalone: true,\r\n    imports: [ItemFormTemplateComponent, BoxFormPageComponent],\r\n    templateUrl: './box-edit-page.component.html',\r\n    styleUrl: './box-edit-page.component.scss'\r\n})\r\nexport class BoxEditPageComponent extends BoxCreatePageComponent {\r\n    constructor(\r\n    ) {\r\n        super();\r\n        this.configuration.type = 'update';\r\n        this.configuration.hiddeFields = true;\r\n    }\r\n}\r\n",
            "styleUrl": "./box-edit-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "extends": [
                "BoxCreatePageComponent"
            ],
            "templateData": "<app-item-form-template [configuration]=\"configuration\">\r\n    <app-box-form-page [form]=\"configuration.formGroup\"></app-box-form-page>\r\n</app-item-form-template>\r\n"
        },
        {
            "name": "BoxFormPageComponent",
            "id": "component-BoxFormPageComponent-a2609535acccc4cc6d4a29f40faf3973b611b3d8b1958e062ffd8ec320f677bda51543ec4143d402c1d4c643e649f402e5b703065b040572f85f702abb4f08d4",
            "file": "src/app/modules/administration/boxes/pages/box-form-page/box-form-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-box-form-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./box-form-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accountSelectConfiguration",
                    "defaultValue": "{\r\n        textLabel: 'Cuenta',\r\n        placeholder: 'Seleccione una cuenta',\r\n        displayTextFn: (item) => {\r\n            return `${item.number} | ${item.bank?.name} | ${item.coin.toUpperCase()}`\r\n        },\r\n        server: {\r\n            url: 'account',\r\n            queryParams: 'relations=bank&active=1'\r\n        }\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSelectServerConfiguration<Account>",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "coinSelectConfiguration",
                    "defaultValue": "{\r\n        textLabel: 'Moneda',\r\n        data: [\r\n            { id: 'soles', name: 'Soles' },\r\n            { id: 'dólares', name: 'Dólares' },\r\n        ],\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSelectConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "typeSelectConfiguration",
                    "defaultValue": "{\r\n        textLabel: 'Tipo',\r\n        data: [\r\n            { id: 'fisica', name: 'Fisica' },\r\n            { id: 'virtual', name: 'Virtual' },\r\n        ],\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSelectConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatOptionModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "UpperCasePipe",
                    "type": "pipe"
                },
                {
                    "name": "InputSelectTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgClass, UpperCasePipe } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { InputSelectConfiguration, InputSelectServerConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { Account } from '@interface/account';\r\n\r\n@Component({\r\n    selector: 'app-box-form-page',\r\n    standalone: true,\r\n    imports: [\r\n        ReactiveFormsModule,\r\n        MatFormFieldModule,\r\n        MatSelectModule,\r\n        MatOptionModule,\r\n        NgClass,\r\n        MatInputModule,\r\n        UpperCasePipe,\r\n        InputSelectTemplateComponent\r\n    ],\r\n    templateUrl: './box-form-page.component.html',\r\n    styleUrl: './box-form-page.component.scss'\r\n})\r\nexport class BoxFormPageComponent {\r\n    @Input() public form!: FormGroup;\r\n\r\n    get typeCtrl(): FormControl {\r\n        return this.form.get('type') as FormControl;\r\n    }\r\n\r\n    get accountIdCtrl(): FormControl {\r\n        return this.form.get('account_id') as FormControl;\r\n    }\r\n    get coinCtrl(): FormControl {\r\n        return this.form.get('coin') as FormControl;\r\n    }\r\n\r\n    public readonly typeSelectConfiguration: InputSelectConfiguration = {\r\n        textLabel: 'Tipo',\r\n        data: [\r\n            { id: 'fisica', name: 'Fisica' },\r\n            { id: 'virtual', name: 'Virtual' },\r\n        ],\r\n    }\r\n    public readonly coinSelectConfiguration: InputSelectConfiguration = {\r\n        textLabel: 'Moneda',\r\n        data: [\r\n            { id: 'soles', name: 'Soles' },\r\n            { id: 'dólares', name: 'Dólares' },\r\n        ],\r\n    }\r\n    public readonly accountSelectConfiguration: InputSelectServerConfiguration<Account> = {\r\n        textLabel: 'Cuenta',\r\n        placeholder: 'Seleccione una cuenta',\r\n        displayTextFn: (item) => {\r\n            return `${item.number} | ${item.bank?.name} | ${item.coin.toUpperCase()}`\r\n        },\r\n        server: {\r\n            url: 'account',\r\n            queryParams: 'relations=bank&active=1'\r\n        }\r\n    }\r\n}\r\n",
            "styleUrl": "./box-form-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "typeCtrl": {
                    "name": "typeCtrl",
                    "getSignature": {
                        "name": "typeCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 30
                    }
                },
                "accountIdCtrl": {
                    "name": "accountIdCtrl",
                    "getSignature": {
                        "name": "accountIdCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 34
                    }
                },
                "coinCtrl": {
                    "name": "coinCtrl",
                    "getSignature": {
                        "name": "coinCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 37
                    }
                }
            },
            "templateData": "<div [formGroup]=\"form\" class=\"form__content__inputs\">\r\n\r\n    <app-input-select-template class=\"col-span-6 @2xl:col-span-3\" [control]=\"typeCtrl\" [configuration]=\"typeSelectConfiguration\" />\r\n\r\n    <mat-form-field class=\"col-span-6\" [ngClass]=\"{ '@2xl:col-span-6' : typeCtrl.value, '@2xl:col-span-9' : !typeCtrl.value }\">\r\n        <mat-label>Nombre</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"name\" placeholder=\"Nombre\">\r\n        <mat-error>Campo requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n    @if (typeCtrl.value == 'virtual') {\r\n        <app-input-select-template class=\"col-span-6 @2xl:col-span-3\" [control]=\"accountIdCtrl\" [configuration]=\"accountSelectConfiguration\" />\r\n    } @else if (typeCtrl.value == 'fisica') {\r\n        <app-input-select-template class=\"col-span-6 @2xl:col-span-3\" [control]=\"coinCtrl\" [configuration]=\"coinSelectConfiguration\" />\r\n    }\r\n\r\n    <mat-form-field class=\"col-span-full\">\r\n        <mat-label>Descripción</mat-label>\r\n        <textarea matInput formControlName=\"description\" id=\"\" rows=\"2\" placeholder=\"Descripción\"></textarea>\r\n        <mat-error>Campo requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n</div>\r\n"
        },
        {
            "name": "BoxListPageComponent",
            "id": "component-BoxListPageComponent-84a67c08893a036125523e96dee18222c3aeb43ec6b26567679d35df13efc544b8d542bfd1fa89eb39b3c77a348fb6a87234301a228d26e851675cc2ca773763",
            "file": "src/app/modules/administration/boxes/pages/box-list-page/box-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-box-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./box-list-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configList",
                    "defaultValue": "{\r\n        server: {\r\n            url: 'box',\r\n            queryParams: 'relations=account,lastBoxOpening'\r\n        },\r\n        title: 'Cajas',\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Código',\r\n                sort: { key: 'code' },\r\n                displayValueFn: (item) => item.code,\r\n            }),\r\n            textColumn({\r\n                title: 'Nombre',\r\n                sort: { key: 'name' },\r\n                routerLinkValue: { url: (item) => `../view/${item.id}` },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.name ? item.name : '--',\r\n            }),\r\n            firstLetterUppercaseColumn({\r\n                title: 'Tipo',\r\n                sort: { key: 'type' },\r\n                displayValueFn: (item) => item.type,\r\n            }),\r\n            firstLetterUppercaseColumn({\r\n                title: 'Moneda',\r\n                displayValueFn: (item) => item.account ? item.account.coin : item.coin,\r\n            }),\r\n            textColumn({\r\n                title: 'Cuenta',\r\n                gridColumn: 'fit-content(160px)',\r\n                displayValueFn: (item) => item.account?.name ?? '--',\r\n            }),\r\n            numberColumn({\r\n                title: 'Monto disponible',\r\n                displayValueFn: (item) => item.amount,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<Box>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, signal } from '@angular/core';\r\nimport { ItemListConfiguration, ItemListTemplateComponent, firstLetterUppercaseColumn, itemCreatedAtColumn, itemStatusColumn, itemUpdatedAtColumn, numberColumn, textColumn } from '@component/item-list-template/item-list-template.component';\r\nimport { Box } from '@interface/box';\r\n\r\n@Component({\r\n  selector: 'app-box-list-page',\r\n  standalone: true,\r\n  imports: [ItemListTemplateComponent],\r\n  templateUrl: './box-list-page.component.html',\r\n  styleUrl: './box-list-page.component.scss'\r\n})\r\nexport class BoxListPageComponent {\r\n    public configList: ItemListConfiguration<Box> = {\r\n        server: {\r\n            url: 'box',\r\n            queryParams: 'relations=account,lastBoxOpening'\r\n        },\r\n        title: 'Cajas',\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Código',\r\n                sort: { key: 'code' },\r\n                displayValueFn: (item) => item.code,\r\n            }),\r\n            textColumn({\r\n                title: 'Nombre',\r\n                sort: { key: 'name' },\r\n                routerLinkValue: { url: (item) => `../view/${item.id}` },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.name ? item.name : '--',\r\n            }),\r\n            firstLetterUppercaseColumn({\r\n                title: 'Tipo',\r\n                sort: { key: 'type' },\r\n                displayValueFn: (item) => item.type,\r\n            }),\r\n            firstLetterUppercaseColumn({\r\n                title: 'Moneda',\r\n                displayValueFn: (item) => item.account ? item.account.coin : item.coin,\r\n            }),\r\n            textColumn({\r\n                title: 'Cuenta',\r\n                gridColumn: 'fit-content(160px)',\r\n                displayValueFn: (item) => item.account?.name ?? '--',\r\n            }),\r\n            numberColumn({\r\n                title: 'Monto disponible',\r\n                displayValueFn: (item) => item.amount,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }\r\n}\r\n",
            "styleUrl": "./box-list-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-list-template [configuration]=\"configList\"/>\r\n"
        },
        {
            "name": "BoxMovementDetailPageComponent",
            "id": "component-BoxMovementDetailPageComponent-a86d630fcd24e7fb240b8fa5b4c0f8ae2bd0f7a09abd08da0f03733e79aa236fe93a8c3f696a5a5cba2ddc0c6383f05a068252bcf9aa0185e82f3f1da7a2a959",
            "file": "src/app/modules/administration/box-movements/pages/box-movement-detail-page/box-movement-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-box-movement-detail-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./box-movement-detail-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-box-movement-detail-page',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './box-movement-detail-page.component.html',\r\n  styleUrl: './box-movement-detail-page.component.scss'\r\n})\r\nexport class BoxMovementDetailPageComponent {\r\n\r\n}\r\n",
            "styleUrl": "./box-movement-detail-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>box-movement-detail-page works!</p>\r\n"
        },
        {
            "name": "BoxMovementListPageComponent",
            "id": "component-BoxMovementListPageComponent-fef922b0e86e4a1bca1409bc5d532ff36fbdf90895238acda028f00458b76ea6ccc5b923c716f7abbd2a4f3b529135ea34d5f40a44f05cd000dd753db90f1e93",
            "file": "src/app/modules/administration/box-movements/pages/box-movement-list-page/box-movement-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-box-movement-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./box-movement-list-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configList",
                    "defaultValue": "{\r\n        server: {\r\n            url: 'box-movement',\r\n            queryParams: 'relations=boxOpening.box'\r\n        },\r\n        createButton: false,\r\n        title: 'Cajas',\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Código',\r\n                sort: { key: 'code' },\r\n                displayValueFn: (item) => item.code,\r\n            }),\r\n            textColumn({\r\n                title: 'Nombre',\r\n                routerLinkValue: {\r\n                    url: (item) => `box-movement/detail/${item.id}`,\r\n                    outlet: 'route-lateral'\r\n                },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.concept ? item.concept : '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Caja',\r\n                gridColumn: 'fit-content(160px)',\r\n                displayValueFn: (item) => item.box_opening?.box?.name ?? '--',\r\n            }),\r\n            numberColumn({\r\n                title: 'Monto',\r\n                displayValueFn: (item) => item.amount,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<BoxMovement>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, signal } from '@angular/core';\r\nimport { ItemListConfiguration, ItemListTemplateComponent, itemCreatedAtColumn, itemStatusColumn, itemUpdatedAtColumn, numberColumn, textColumn } from '@component/item-list-template/item-list-template.component';\r\nimport { BoxMovement } from '@interface/boxMovement';\r\n\r\n@Component({\r\n  selector: 'app-box-movement-list-page',\r\n  standalone: true,\r\n  imports: [ItemListTemplateComponent],\r\n  templateUrl: './box-movement-list-page.component.html',\r\n  styleUrl: './box-movement-list-page.component.scss'\r\n})\r\nexport class BoxMovementListPageComponent {\r\n    public configList: ItemListConfiguration<BoxMovement> = {\r\n        server: {\r\n            url: 'box-movement',\r\n            queryParams: 'relations=boxOpening.box'\r\n        },\r\n        createButton: false,\r\n        title: 'Cajas',\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Código',\r\n                sort: { key: 'code' },\r\n                displayValueFn: (item) => item.code,\r\n            }),\r\n            textColumn({\r\n                title: 'Nombre',\r\n                routerLinkValue: {\r\n                    url: (item) => `box-movement/detail/${item.id}`,\r\n                    outlet: 'route-lateral'\r\n                },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.concept ? item.concept : '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Caja',\r\n                gridColumn: 'fit-content(160px)',\r\n                displayValueFn: (item) => item.box_opening?.box?.name ?? '--',\r\n            }),\r\n            numberColumn({\r\n                title: 'Monto',\r\n                displayValueFn: (item) => item.amount,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }\r\n}\r\n",
            "styleUrl": "./box-movement-list-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-list-template [configuration]=\"configList\"/>\r\n"
        },
        {
            "name": "BoxOpeningCreatePageComponent",
            "id": "component-BoxOpeningCreatePageComponent-e4ddc1a392cae140c2faa2fc8f20d89455b10214f4ac25dedf74b627f1ce54fd3866b1b8e661b46ae932911c7787619aef9d9a47bcea28e500711c8239822a07",
            "file": "src/app/modules/administration/boxes/box-openings/pages/box-opening-create-page/box-opening-create-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-box-opening-create-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./box-opening-create-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data_dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Box",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\r\n        amount_init: new FormControl(0),\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "edit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogClose"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogClose, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { Box } from '@interface/box';\r\n\r\n@Component({\r\n  selector: 'app-box-opening-create-page',\r\n  standalone: true,\r\n  imports: [ReactiveFormsModule, MatFormFieldModule, MatInputModule, MatDialogClose],\r\n  templateUrl: './box-opening-create-page.component.html',\r\n  styleUrl: './box-opening-create-page.component.scss'\r\n})\r\nexport class BoxOpeningCreatePageComponent {\r\n    public loading: boolean = false;\r\n\r\n    public form: FormGroup = new FormGroup({\r\n        amount_init: new FormControl(0),\r\n    })\r\n\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public data_dialog: Box,\r\n        private dialogRef: MatDialogRef<BoxOpeningCreatePageComponent>\r\n    ) { }\r\n\r\n    get amountInitCtrl(): FormControl {\r\n        return this.form.get('amount_init') as FormControl;\r\n    }\r\n\r\n    ngOnInit() {\r\n        console.log(this.data_dialog);\r\n        if (this.data_dialog.last_box_opening) {\r\n            this.amountInitCtrl.setValue(this.data_dialog.amount);\r\n            this.amountInitCtrl.disable()\r\n        }\r\n    }\r\n\r\n    public save() {\r\n        if (this.form.value) this.dialogRef.close({ ...this.form.getRawValue() });\r\n    }\r\n\r\n    public edit() {\r\n        this.amountInitCtrl.enable()\r\n    }\r\n\r\n    public closeDialog() {\r\n        this.dialogRef.close()\r\n    }\r\n}\r\n",
            "styleUrl": "./box-opening-create-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data_dialog",
                        "type": "Box",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<BoxOpeningCreatePageComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "data_dialog",
                        "type": "Box",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<BoxOpeningCreatePageComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "amountInitCtrl": {
                    "name": "amountInitCtrl",
                    "getSignature": {
                        "name": "amountInitCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 27
                    }
                }
            },
            "templateData": "<div class=\"grid grid-rows-[auto,1fr,auto] max-h-[80vh]\">\r\n    <div class=\"dialog__title\">\r\n        Aperturar caja\r\n    </div>\r\n\r\n    <form [formGroup]=\"form\" class=\"dialog__content\">\r\n\r\n        <mat-form-field>\r\n            <mat-label>Monto inicial</mat-label>\r\n            <input matInput type=\"number\" [min]=\"0\" placeholder=\"Monto inicial...\" formControlName=\"amount_init\">\r\n            @if (form.disabled) {\r\n            <button mat-icon-button matSuffix (click)=\"edit()\">\r\n                <span class=\"material-icons\">edit</span>\r\n            </button>\r\n            }\r\n            <mat-error>Campo requerido</mat-error>\r\n        </mat-form-field>\r\n    </form>\r\n\r\n    <div class=\"dialog__actions\">\r\n        <button class=\"text-button\" mat-dialog-close type=\"button\">Cancelar</button>\r\n        <button class=\"text-button\" [mat-dialog-close]=\"true\" cdkFocusInitial (click)=\"save()\">Aperturar</button>\r\n    </div>\r\n\r\n</div>\r\n"
        },
        {
            "name": "BoxOpeningListPageComponent",
            "id": "component-BoxOpeningListPageComponent-0b70ff30f2987af66ba054ac259e3969cbfdc52ce408cc23593bd387dc9e75ff8abe27a6d32343f5c3c29a61aa967132bc30bb09811c63944cb3c118cc2b68a5",
            "file": "src/app/modules/administration/boxes/box-openings/pages/box-opening-list-page/box-opening-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-box-opening-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./box-opening-list-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configList",
                    "defaultValue": "{\r\n        server: {\r\n            url: 'box-opening',\r\n            queryParams: `box_id=${(this.activatedRoute.parent?.parent?.snapshot?.params as any)?.id}`,\r\n        },\r\n        title: 'Aperturas de caja',\r\n        createButton: false,\r\n\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Código',\r\n                sort: { key: 'code' },\r\n                displayValueFn: (item) => item.code,\r\n            }),\r\n            userColumn({\r\n                title: 'Usuario de apertura',\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item.open_user_id,\r\n            }),\r\n            userColumn({\r\n                title: 'Usuario de cierre',\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item.close_user_id,\r\n            }),\r\n            numberColumn({\r\n                title: 'Monto de apertura',\r\n                displayValueFn: (item) => item.amount_init,\r\n            }),\r\n            dateColumn({\r\n                title: 'Fecha de apertura',\r\n                dateFormat: 'dd/MM/yyyy hh:mm a',\r\n                displayValueFn: (item) => item.date_open,\r\n            }),\r\n            numberColumn({\r\n                title: 'Monto de cierre',\r\n                displayValueFn: (item) => item.amount_exit,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<BoxOpening>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "databaseStorage",
                    "defaultValue": "inject(DatabaseStorageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialog",
                    "defaultValue": "inject(MatDialog)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "events",
                    "defaultValue": "inject(EventsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fetch",
                    "defaultValue": "inject(FetchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Box",
                    "optional": true,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeBoxOpening",
                    "args": [
                        {
                            "name": "box_opening_id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "box_opening_id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBox",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openBoxOpening",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, signal } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ItemListConfiguration, ItemListTemplateComponent, dateColumn, itemCreatedAtColumn, itemStatusColumn, itemUpdatedAtColumn, numberColumn, textColumn, userColumn } from '@component/item-list-template/item-list-template.component';\r\nimport { Box } from '@interface/box';\r\nimport { BoxOpening } from '@interface/boxOpening';\r\nimport { DatabaseStorageService, NameModuleDatabase } from '@service/database-storage.service';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { BoxOpeningCreatePageComponent } from '../box-opening-create-page/box-opening-create-page.component';\r\nimport { EventsService } from '@service/events.service';\r\nimport { StatusModel } from '@interface/baseModel';\r\n\r\n@Component({\r\n  selector: 'app-box-opening-list-page',\r\n  standalone: true,\r\n  imports: [ItemListTemplateComponent],\r\n  templateUrl: './box-opening-list-page.component.html',\r\n  styleUrl: './box-opening-list-page.component.scss'\r\n})\r\nexport class BoxOpeningListPageComponent {\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private fetch = inject(FetchService);\r\n    private dialog = inject(MatDialog);\r\n    private events = inject(EventsService);\r\n    private databaseStorage = inject(DatabaseStorageService);\r\n    public configList: ItemListConfiguration<BoxOpening> = {\r\n        server: {\r\n            url: 'box-opening',\r\n            queryParams: `box_id=${(this.activatedRoute.parent?.parent?.snapshot?.params as any)?.id}`,\r\n        },\r\n        title: 'Aperturas de caja',\r\n        createButton: false,\r\n\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Código',\r\n                sort: { key: 'code' },\r\n                displayValueFn: (item) => item.code,\r\n            }),\r\n            userColumn({\r\n                title: 'Usuario de apertura',\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item.open_user_id,\r\n            }),\r\n            userColumn({\r\n                title: 'Usuario de cierre',\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item.close_user_id,\r\n            }),\r\n            numberColumn({\r\n                title: 'Monto de apertura',\r\n                displayValueFn: (item) => item.amount_init,\r\n            }),\r\n            dateColumn({\r\n                title: 'Fecha de apertura',\r\n                dateFormat: 'dd/MM/yyyy hh:mm a',\r\n                displayValueFn: (item) => item.date_open,\r\n            }),\r\n            numberColumn({\r\n                title: 'Monto de cierre',\r\n                displayValueFn: (item) => item.amount_exit,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }\r\n\r\n    public item?: Box;\r\n\r\n    ngOnInit() {\r\n        this.getBox();\r\n    }\r\n\r\n    private getBox(): void {\r\n        const id = (this.activatedRoute.parent?.parent?.snapshot.params as any).id;\r\n        this.fetch\r\n            .get<Box>(\r\n                `box/${id}?relations=lastBoxOpening.openUser`\r\n            )\r\n            .then((box) => {\r\n                this.item = box;\r\n            })\r\n            .catch((err) => { });\r\n    }\r\n\r\n    public openBoxOpening() {\r\n        const dialogRef = this.dialog.open(BoxOpeningCreatePageComponent, {\r\n            data: {\r\n                ...this.item,\r\n            },\r\n        });\r\n        dialogRef.afterClosed().subscribe(async (response: BoxOpening) => {\r\n            if (response.amount_init) {\r\n                const body = {\r\n                    ...response,\r\n                    box_id: this.item!.id,\r\n                };\r\n                await this.fetch.post('box-opening', body);\r\n                this.databaseStorage.updateDataLocal(NameModuleDatabase.BoxOpenings);\r\n                this.getBox();\r\n                this.events.emitEvent('box-opening_created', response);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    public async closeBoxOpening(box_opening_id: number) {\r\n        const response = await this.fetch.put<BoxOpening>(\r\n            `box-opening/${box_opening_id}/update-status`,\r\n            { status: StatusModel.Cerrado },\r\n            {\r\n                confirmDialog: {\r\n                    title: '¿Estás seguro de cerrar caja?',\r\n                    description: `Se efectuará el cierre de caja con el monto de ${this.item!.amount} ${this.item!.coin}`,\r\n                }\r\n            });\r\n        this.databaseStorage.updateDataLocal(NameModuleDatabase.BoxOpenings);\r\n        this.item!.last_box_opening = {\r\n            ...this.item!.last_box_opening,\r\n            ...response as BoxOpening,\r\n        }\r\n    }\r\n}\r\n",
            "styleUrl": "./box-opening-list-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-list-template [configuration]=\"configList\">\r\n    <ng-container headerButtons>\r\n        @if (item?.last_box_opening?.status == 'abierto') {\r\n        <button class=\"filled-button\" (click)=\"closeBoxOpening(item?.last_box_opening!.id)\">\r\n            <span class=\"material-icons\">lock</span>\r\n            <span>Cerrar caja</span>\r\n        </button>\r\n        } @else {\r\n        <button class=\"filled-button\" (click)=\"openBoxOpening()\">\r\n            <span class=\"material-icons\">lock_open</span>\r\n            <span>Aperturar caja</span>\r\n        </button>\r\n        }\r\n    </ng-container>\r\n</app-item-list-template>\r\n"
        },
        {
            "name": "BoxViewPageComponent",
            "id": "component-BoxViewPageComponent-f559c690520ba91142fb266cab432d2fde164bdc51f3f0dc301498f2e911e235b6f53d718e561986249f8ca457fa06df582a365f61c1f57ad149817e48615262",
            "file": "src/app/modules/administration/boxes/pages/box-view-page/box-view-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-box-view-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./box-view-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "defaultValue": "{\r\n        titleModule: 'Caja',\r\n        server: { url: 'box' },\r\n        links: [\r\n            {\r\n                routerLink: './detail',\r\n                text: 'Detalle',\r\n            },\r\n            {\r\n                routerLink: './box-opening/list',\r\n                text: 'Aperturas',\r\n            },\r\n        ]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemViewConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemViewTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemViewTemplateComponent, ItemViewConfiguration } from '@component/item-view-template/item-view-template.component';\r\n\r\n@Component({\r\n  selector: 'app-box-view-page',\r\n  standalone: true,\r\n  imports: [ItemViewTemplateComponent],\r\n  templateUrl: './box-view-page.component.html',\r\n  styleUrl: './box-view-page.component.scss'\r\n})\r\nexport class BoxViewPageComponent {\r\n    public config : ItemViewConfiguration = {\r\n        titleModule: 'Caja',\r\n        server: { url: 'box' },\r\n        links: [\r\n            {\r\n                routerLink: './detail',\r\n                text: 'Detalle',\r\n            },\r\n            {\r\n                routerLink: './box-opening/list',\r\n                text: 'Aperturas',\r\n            },\r\n        ]\r\n    }\r\n}\r\n",
            "styleUrl": "./box-view-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-view-template [configuration]=\"config\"/>\r\n"
        },
        {
            "name": "ClientAccountCreatePageComponent",
            "id": "component-ClientAccountCreatePageComponent-1e619be4ad166fc3deaa49e1d678e50cf05f43f9e59e623e0e6576a4062cf23cf786d03ca27df74f4e744310c63858bddddf8b4ea2c7dad2f7741edc755b3143",
            "file": "src/app/modules/organization/clients/client-accounts/pages/client-account-create-page/client-account-create-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-account-create-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-account-create-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        titleModule: 'cuenta',\r\n        type: 'create',\r\n        formGroup: new FormGroup({\r\n            client_id: new FormControl(this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id'), [Validators.required]),\r\n            type: new FormControl(null, [Validators.required]),\r\n            name: new FormControl(null, [Validators.required]),\r\n            coin: new FormControl(null, [Validators.required]),\r\n        }),\r\n        fields: [\r\n            selectFormInput({\r\n                formControlName: 'type',\r\n                textLabel: 'Tipo de cuenta',\r\n                data: Object.values(ClientAccountTypeEnum).map((item) => ({ name: item.toUpperCase(), id: item })),\r\n                cssClass: 'col-span-6 @2xl:col-span-3',\r\n            }),\r\n            selectFormInput({\r\n                formControlName: 'coin',\r\n                textLabel: 'Tipo de moneda',\r\n                data: COIN.map((item) => ({ name: item.toUpperCase(), id: item })),\r\n                cssClass: 'col-span-6 @2xl:col-span-3',\r\n            }),\r\n            textFormInput({\r\n                formControlName: 'name',\r\n                textLabel: 'Nombre de la cuenta',\r\n                cssClass: 'col-span-full @2xl:col-span-6',\r\n            })\r\n        ],\r\n        server: { url: 'client-account' },\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration<ClientAccount>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ItemFormConfiguration, ItemFormTemplateComponent, selectFormInput, textFormInput } from '@component/item-form-template/item-form-template.component';\r\nimport { COIN } from '@interface/baseModel';\r\nimport { ClientAccount, ClientAccountTypeEnum } from '@interface/clientAccount';\r\n\r\n@Component({\r\n    selector: 'app-client-account-create-page',\r\n    standalone: true,\r\n    imports: [ItemFormTemplateComponent],\r\n    templateUrl: './client-account-create-page.component.html',\r\n    styleUrl: './client-account-create-page.component.scss'\r\n})\r\nexport class ClientAccountCreatePageComponent {\r\n    public activatedRoute = inject(ActivatedRoute);\r\n    public configuration: ItemFormConfiguration<ClientAccount> = {\r\n        titleModule: 'cuenta',\r\n        type: 'create',\r\n        formGroup: new FormGroup({\r\n            client_id: new FormControl(this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id'), [Validators.required]),\r\n            type: new FormControl(null, [Validators.required]),\r\n            name: new FormControl(null, [Validators.required]),\r\n            coin: new FormControl(null, [Validators.required]),\r\n        }),\r\n        fields: [\r\n            selectFormInput({\r\n                formControlName: 'type',\r\n                textLabel: 'Tipo de cuenta',\r\n                data: Object.values(ClientAccountTypeEnum).map((item) => ({ name: item.toUpperCase(), id: item })),\r\n                cssClass: 'col-span-6 @2xl:col-span-3',\r\n            }),\r\n            selectFormInput({\r\n                formControlName: 'coin',\r\n                textLabel: 'Tipo de moneda',\r\n                data: COIN.map((item) => ({ name: item.toUpperCase(), id: item })),\r\n                cssClass: 'col-span-6 @2xl:col-span-3',\r\n            }),\r\n            textFormInput({\r\n                formControlName: 'name',\r\n                textLabel: 'Nombre de la cuenta',\r\n                cssClass: 'col-span-full @2xl:col-span-6',\r\n            })\r\n        ],\r\n        server: { url: 'client-account' },\r\n    }\r\n}\r\n",
            "styleUrl": "./client-account-create-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "ClientAccountDetailPageComponent",
            "id": "component-ClientAccountDetailPageComponent-dee69b09dbcf840e99c041d7f6189b0acde4972d5a96217208b3b10032d22b714fab0ae38eaa558c0a34f4a783d03f3f65ba424cc84fd087fbf7923adc61974d",
            "file": "src/app/modules/organization/clients/client-accounts/pages/client-account-detail-page/client-account-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-account-detail-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-account-detail-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        title: 'Detalles',\r\n        server: { url: 'client-account' },\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'Nombre',\r\n                        displayValueFn: (item) => item.name\r\n                    },\r\n                    {\r\n                        title: 'Tipo',\r\n                        displayValueFn: (item) => item.type.toLocaleUpperCase()\r\n                    },\r\n                    {\r\n                        title: 'Moneda',\r\n                        displayValueFn: (item) => item.coin.toLocaleUpperCase()\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDetailConfiguration<ClientAccount>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemDetailTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemDetailTemplateComponent, registerDataGroupDetail } from '@component/item-detail-template/item-detail-template.component';\r\nimport { ClientAccount } from '@interface/clientAccount';\r\nimport { ItemDetailConfiguration } from '@component/item-detail-template/item-detail-template.component';\r\n\r\n@Component({\r\n    selector: 'app-client-account-detail-page',\r\n    standalone: true,\r\n    imports: [ItemDetailTemplateComponent],\r\n    templateUrl: './client-account-detail-page.component.html',\r\n    styleUrl: './client-account-detail-page.component.scss'\r\n})\r\nexport class ClientAccountDetailPageComponent {\r\n    public configuration: ItemDetailConfiguration<ClientAccount> = {\r\n        title: 'Detalles',\r\n        server: { url: 'client-account' },\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'Nombre',\r\n                        displayValueFn: (item) => item.name\r\n                    },\r\n                    {\r\n                        title: 'Tipo',\r\n                        displayValueFn: (item) => item.type.toLocaleUpperCase()\r\n                    },\r\n                    {\r\n                        title: 'Moneda',\r\n                        displayValueFn: (item) => item.coin.toLocaleUpperCase()\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }\r\n}\r\n",
            "styleUrl": "./client-account-detail-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-detail-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "ClientAccountEditPageComponent",
            "id": "component-ClientAccountEditPageComponent-0eda538dba1dd505b05352b3011b19019a7e843d36122061098f3f9ad0c909746d6c7775f588f141a3936de5ba873856e22e9b970c519d316f368e7ee6b9400b",
            "file": "src/app/modules/organization/clients/client-accounts/pages/client-account-edit-page/client-account-edit-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-account-edit-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-account-edit-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "ClientAccountCreatePageComponent"
                    }
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        titleModule: 'cuenta',\r\n        type: 'create',\r\n        formGroup: new FormGroup({\r\n            client_id: new FormControl(this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id'), [Validators.required]),\r\n            type: new FormControl(null, [Validators.required]),\r\n            name: new FormControl(null, [Validators.required]),\r\n            coin: new FormControl(null, [Validators.required]),\r\n        }),\r\n        fields: [\r\n            selectFormInput({\r\n                formControlName: 'type',\r\n                textLabel: 'Tipo de cuenta',\r\n                data: Object.values(ClientAccountTypeEnum).map((item) => ({ name: item.toUpperCase(), id: item })),\r\n                cssClass: 'col-span-6 @2xl:col-span-3',\r\n            }),\r\n            selectFormInput({\r\n                formControlName: 'coin',\r\n                textLabel: 'Tipo de moneda',\r\n                data: COIN.map((item) => ({ name: item.toUpperCase(), id: item })),\r\n                cssClass: 'col-span-6 @2xl:col-span-3',\r\n            }),\r\n            textFormInput({\r\n                formControlName: 'name',\r\n                textLabel: 'Nombre de la cuenta',\r\n                cssClass: 'col-span-full @2xl:col-span-6',\r\n            })\r\n        ],\r\n        server: { url: 'client-account' },\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration<ClientAccount>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "ClientAccountCreatePageComponent"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ClientAccountCreatePageComponent } from '../client-account-create-page/client-account-create-page.component';\r\nimport { ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\n\r\n@Component({\r\n  selector: 'app-client-account-edit-page',\r\n  standalone: true,\r\n  imports: [ItemFormTemplateComponent],\r\n  templateUrl: './client-account-edit-page.component.html',\r\n  styleUrl: './client-account-edit-page.component.scss'\r\n})\r\nexport class ClientAccountEditPageComponent extends ClientAccountCreatePageComponent{\r\n    constructor(\r\n    ) {\r\n        super();\r\n        this.configuration.type = 'update';\r\n        this.configuration.hiddeFields = true;\r\n    }\r\n}\r\n",
            "styleUrl": "./client-account-edit-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "extends": [
                "ClientAccountCreatePageComponent"
            ],
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "ClientAccountListPageComponent",
            "id": "component-ClientAccountListPageComponent-3b33430781dc582aa1210839f1346128850f7d906b033ef06a1ddea00d581f50a95325f2335c88ecd4b172a1f964cb0b7735549e9bac865e71d87467403a6d83",
            "file": "src/app/modules/organization/clients/client-accounts/pages/client-account-list-page/client-account-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-account-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-account-list-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configList",
                    "defaultValue": "{\r\n        title: 'Cuentas del cliente',\r\n        server: {\r\n            url: 'client-account',\r\n            queryParams: {\r\n                client_id: this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id')\r\n            },\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Nombre',\r\n                sort: { key: 'name' },\r\n                routerLinkValue: { url: (item) => `../detail/${item.id}` },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.name ? item.name : '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Tipo',\r\n                sort: { key: 'type' },\r\n                gridColumn: 'auto',\r\n                displayValueFn: (item) => item?.type,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<ClientAccount>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, signal } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ItemListTemplateComponent } from '@component/item-list-template/item-list-template.component';\r\nimport { ClientAccount } from '@interface/clientAccount';\r\nimport { ItemListConfiguration, itemCreatedAtColumn, itemStatusColumn, itemUpdatedAtColumn, textColumn } from '@component/item-list-template/item-list-template.component';\r\n\r\n@Component({\r\n  selector: 'app-client-account-list-page',\r\n  standalone: true,\r\n  imports: [ItemListTemplateComponent],\r\n  templateUrl: './client-account-list-page.component.html',\r\n  styleUrl: './client-account-list-page.component.scss'\r\n})\r\nexport class ClientAccountListPageComponent {\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    public configList: ItemListConfiguration<ClientAccount> = {\r\n        title: 'Cuentas del cliente',\r\n        server: {\r\n            url: 'client-account',\r\n            queryParams: {\r\n                client_id: this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id')\r\n            },\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Nombre',\r\n                sort: { key: 'name' },\r\n                routerLinkValue: { url: (item) => `../detail/${item.id}` },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.name ? item.name : '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Tipo',\r\n                sort: { key: 'type' },\r\n                gridColumn: 'auto',\r\n                displayValueFn: (item) => item?.type,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }\r\n}\r\n",
            "styleUrl": "./client-account-list-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-list-template [configuration]=\"configList\"/>\r\n\r\n"
        },
        {
            "name": "ClientBillingOptionCreatePageComponent",
            "id": "component-ClientBillingOptionCreatePageComponent-a190999640ca43df560b3e00dca64af0759a2eafe834d842fc8b3174bb26977ca85ffd04628504812639f9d8132db0b5b15dbb710c987b4dba868394b91fe264",
            "file": "src/app/modules/organization/clients/client-billing-options/pages/client-billing-option-create-page/client-billing-option-create-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-billing-option-create-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-billing-option-create-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        titleModule: 'opciones de facturación',\r\n        type: 'create',\r\n        formGroup: clientBillingOptionFormGroup({ id: Number(this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id')!) }),\r\n        fields: [...DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_BILLING_OPTION],\r\n        server: { url: 'client-billing-option' },\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration<ClientBillingOption>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "MatSlideToggleModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, WritableSignal, inject } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_BILLING_OPTION, clientBillingOptionFormGroup } from '../../helpers';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { ItemFormConfiguration, ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { ClientBillingOption } from '@interface/clientBillingOption';\r\n\r\n@Component({\r\n    selector: 'app-client-billing-option-create-page',\r\n    standalone: true,\r\n    imports: [ItemFormTemplateComponent, MatSlideToggleModule],\r\n    templateUrl: './client-billing-option-create-page.component.html',\r\n    styleUrl: './client-billing-option-create-page.component.scss'\r\n})\r\nexport class ClientBillingOptionCreatePageComponent {\r\n    public activatedRoute = inject(ActivatedRoute);\r\n    public configuration: ItemFormConfiguration<ClientBillingOption> = {\r\n        titleModule: 'opciones de facturación',\r\n        type: 'create',\r\n        formGroup: clientBillingOptionFormGroup({ id: Number(this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id')!) }),\r\n        fields: [...DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_BILLING_OPTION],\r\n        server: { url: 'client-billing-option' },\r\n    };\r\n\r\n    get data() {\r\n        return this.configuration.dataItem!;\r\n    }\r\n\r\n    get formGroup(): FormGroup {\r\n        return this.configuration.formGroup;\r\n    }\r\n\r\n    get retentionCtrl(): FormControl {\r\n        return this.configuration.formGroup.get('retention') as FormControl;\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.retentionCtrl.valueChanges.subscribe((value) => {\r\n            if (!value) {\r\n                this.formGroup.removeControl('retention_percent');\r\n            } else {\r\n                this.formGroup.setControl('retention_percent', new FormControl(this.data()?.retention_percent ?? 3.00));\r\n            }\r\n        });\r\n    }\r\n}\r\n",
            "styleUrl": "./client-billing-option-create-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "data": {
                    "name": "data",
                    "getSignature": {
                        "name": "data",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                },
                "formGroup": {
                    "name": "formGroup",
                    "getSignature": {
                        "name": "formGroup",
                        "type": "",
                        "returnType": "FormGroup",
                        "line": 30
                    }
                },
                "retentionCtrl": {
                    "name": "retentionCtrl",
                    "getSignature": {
                        "name": "retentionCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 34
                    }
                }
            },
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "ClientBillingOptionDetailPageComponent",
            "id": "component-ClientBillingOptionDetailPageComponent-cd1eda844d23897e1d913b4cbf41ba4860e2f7014cd6efe0cf33056c795d3268b3f0c8606aed55042af9c4ef1d95593e1e6b1e31a188e6ece33c16636a117f7d",
            "file": "src/app/modules/organization/clients/client-billing-options/pages/client-billing-option-detail-page/client-billing-option-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-billing-option-detail-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-billing-option-detail-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n    title: 'Detalles de opciones de facturación',\r\n    server: { url: 'client-billing-option' },\r\n    editButton: {\r\n      routerLink: {\r\n        url: '../edit'\r\n      }\r\n    },\r\n    interceptHttpErrorItemFn: (error: FetchErrorResponse) => {\r\n      if (error.status == 404) {\r\n        this.router.navigate(['../create'], { relativeTo: this.activatedRoute });\r\n      }\r\n    },\r\n    groups: [\r\n      {\r\n        title: 'Detalles',\r\n        details: [\r\n          {\r\n            title: 'Tipo de comprobante',\r\n            displayValueFn: (item) => item.comprobant_type.toUpperCase(),\r\n          },\r\n          {\r\n            title: 'Agrupar notas en un solo voucher',\r\n            displayValueFn: (item) => item.group_notes_single_voucher ? 'SI' : 'NO',\r\n          },\r\n          {\r\n            title: 'Detracción',\r\n            displayValueFn: (item) => item.detraction ? 'SI' : 'NO',\r\n          },\r\n          {\r\n            title: 'Porcentaje de detracción',\r\n            displayValueFn: (item) => item.detraction_percent ? item.detraction_percent : 0,\r\n            type: 'number'\r\n          },\r\n          {\r\n            title: 'Retención',\r\n            displayValueFn: (item) => item.retention ? 'SI' : 'NO',\r\n          },\r\n          {\r\n            title: 'Porcentaje de retención',\r\n            displayValueFn: (item) => item.retention_percent ? item.retention_percent : 0,\r\n            type: 'number'\r\n          },\r\n        ]\r\n      },\r\n      registerDataGroupDetail(),\r\n    ],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDetailConfiguration<ClientBillingOption>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemDetailTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ItemDetailTemplateComponent, registerDataGroupDetail } from '@component/item-detail-template/item-detail-template.component';\r\nimport { ClientBillingOption } from '@interface/clientBillingOption';\r\nimport { FetchErrorResponse } from '@interface/fetch';\r\nimport { ItemDetailConfiguration } from '@component/item-detail-template/item-detail-template.component';\r\n\r\n@Component({\r\n  selector: 'app-client-billing-option-detail-page',\r\n  standalone: true,\r\n  imports: [ItemDetailTemplateComponent],\r\n  templateUrl: './client-billing-option-detail-page.component.html',\r\n  styleUrl: './client-billing-option-detail-page.component.scss'\r\n})\r\nexport class ClientBillingOptionDetailPageComponent {\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  public configuration: ItemDetailConfiguration<ClientBillingOption> = {\r\n    title: 'Detalles de opciones de facturación',\r\n    server: { url: 'client-billing-option' },\r\n    editButton: {\r\n      routerLink: {\r\n        url: '../edit'\r\n      }\r\n    },\r\n    interceptHttpErrorItemFn: (error: FetchErrorResponse) => {\r\n      if (error.status == 404) {\r\n        this.router.navigate(['../create'], { relativeTo: this.activatedRoute });\r\n      }\r\n    },\r\n    groups: [\r\n      {\r\n        title: 'Detalles',\r\n        details: [\r\n          {\r\n            title: 'Tipo de comprobante',\r\n            displayValueFn: (item) => item.comprobant_type.toUpperCase(),\r\n          },\r\n          {\r\n            title: 'Agrupar notas en un solo voucher',\r\n            displayValueFn: (item) => item.group_notes_single_voucher ? 'SI' : 'NO',\r\n          },\r\n          {\r\n            title: 'Detracción',\r\n            displayValueFn: (item) => item.detraction ? 'SI' : 'NO',\r\n          },\r\n          {\r\n            title: 'Porcentaje de detracción',\r\n            displayValueFn: (item) => item.detraction_percent ? item.detraction_percent : 0,\r\n            type: 'number'\r\n          },\r\n          {\r\n            title: 'Retención',\r\n            displayValueFn: (item) => item.retention ? 'SI' : 'NO',\r\n          },\r\n          {\r\n            title: 'Porcentaje de retención',\r\n            displayValueFn: (item) => item.retention_percent ? item.retention_percent : 0,\r\n            type: 'number'\r\n          },\r\n        ]\r\n      },\r\n      registerDataGroupDetail(),\r\n    ],\r\n  }\r\n}\r\n",
            "styleUrl": "./client-billing-option-detail-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-detail-template [configuration]=\"configuration\" />\r\n"
        },
        {
            "name": "ClientBillingOptionEditPageComponent",
            "id": "component-ClientBillingOptionEditPageComponent-112736626ad2819e258fcbeb7a513cef82dfe03086a0202ec835dfa1c83b84074616ecbf7375472ba6026b23496656e4a7f52c64d8caf62c5d6baf488f1ad1ad",
            "file": "src/app/modules/organization/clients/client-billing-options/pages/client-billing-option-edit-page/client-billing-option-edit-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-billing-option-edit-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-billing-option-edit-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "ClientBillingOptionCreatePageComponent"
                    }
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        titleModule: 'opciones de facturación',\r\n        type: 'create',\r\n        formGroup: clientBillingOptionFormGroup({ id: Number(this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id')!) }),\r\n        fields: [...DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_BILLING_OPTION],\r\n        server: { url: 'client-billing-option' },\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration<ClientBillingOption>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "ClientBillingOptionCreatePageComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ClientBillingOptionCreatePageComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ClientBillingOptionCreatePageComponent } from '../client-billing-option-create-page/client-billing-option-create-page.component';\r\nimport { ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\n\r\n@Component({\r\n    selector: 'app-client-billing-option-edit-page',\r\n    standalone: true,\r\n    imports: [ItemFormTemplateComponent],\r\n    templateUrl: './client-billing-option-edit-page.component.html',\r\n    styleUrl: './client-billing-option-edit-page.component.scss'\r\n})\r\nexport class ClientBillingOptionEditPageComponent extends ClientBillingOptionCreatePageComponent {\r\n    constructor() {\r\n        super();\r\n        this.configuration.type = 'update';\r\n        this.configuration.itemId = this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id')!;\r\n        this.configuration.hiddeFields = true;\r\n    }\r\n}\r\n",
            "styleUrl": "./client-billing-option-edit-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "extends": [
                "ClientBillingOptionCreatePageComponent"
            ],
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "ClientBusinessUnitCreatePageComponent",
            "id": "component-ClientBusinessUnitCreatePageComponent-691f20f38cb8be974898d892e6c46e5ccb0a2203a6fdf3d0090e69f7d6ee322a5e856ca9af1731f764315225643fb91c6a9e666e0f201e8d1b979ea5c9b741da",
            "file": "src/app/modules/organization/clients/client-business-units/pages/client-business-unit-create-page/client-business-unit-create-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-business-unit-create-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-business-unit-create-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n    type: 'create',\r\n    titleModule: 'unidad de negocio',\r\n    formGroup: clientBusinessUnitFormGroup({\r\n      client_id: Number(this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id')!)\r\n    }),\r\n    fields: DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_BUSINESS_UNIT,\r\n    server: { url: 'client-business-unit' },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { ItemFormConfiguration, ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\nimport { DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_BUSINESS_UNIT, clientBusinessUnitFormGroup } from '../../helpers';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-client-business-unit-create-page',\r\n  standalone: true,\r\n  imports: [ItemFormTemplateComponent],\r\n  templateUrl: './client-business-unit-create-page.component.html',\r\n  styleUrl: './client-business-unit-create-page.component.scss'\r\n})\r\nexport class ClientBusinessUnitCreatePageComponent {\r\n  public activatedRoute = inject(ActivatedRoute)\r\n  public configuration: ItemFormConfiguration = {\r\n    type: 'create',\r\n    titleModule: 'unidad de negocio',\r\n    formGroup: clientBusinessUnitFormGroup({\r\n      client_id: Number(this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id')!)\r\n    }),\r\n    fields: DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_BUSINESS_UNIT,\r\n    server: { url: 'client-business-unit' },\r\n  };\r\n}\r\n",
            "styleUrl": "./client-business-unit-create-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "ClientBusinessUnitDetailPageComponent",
            "id": "component-ClientBusinessUnitDetailPageComponent-ecdee886ceeee4059dfe9303bd5dec5c96ba61ace1ca249dc958598ef97552bc5c2206bfeb1061620baf85924f6f09b55438fc81ce1ee9ba922f50b39c8cd73f",
            "file": "src/app/modules/organization/clients/client-business-units/pages/client-business-unit-detail-page/client-business-unit-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-business-unit-detail-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-business-unit-detail-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        title: 'Detalles',\r\n        server: { url: 'client-business-unit' },\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'Nombre',\r\n                        displayValueFn: (item) => item.name\r\n                    },\r\n                    {\r\n                        title: 'Descripción',\r\n                        displayValueFn: (item) => item.description\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDetailConfiguration<ClientBusinessUnit>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemDetailTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemDetailTemplateComponent, registerDataGroupDetail } from '@component/item-detail-template/item-detail-template.component';\r\nimport { ClientBusinessUnit } from '@interface/clientBusinessUnit';\r\nimport { ItemDetailConfiguration } from '@component/item-detail-template/item-detail-template.component';\r\n\r\n@Component({\r\n    selector: 'app-client-business-unit-detail-page',\r\n    standalone: true,\r\n    imports: [ItemDetailTemplateComponent],\r\n    templateUrl: './client-business-unit-detail-page.component.html',\r\n    styleUrl: './client-business-unit-detail-page.component.scss'\r\n})\r\nexport class ClientBusinessUnitDetailPageComponent {\r\n    public configuration: ItemDetailConfiguration<ClientBusinessUnit> = {\r\n        title: 'Detalles',\r\n        server: { url: 'client-business-unit' },\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'Nombre',\r\n                        displayValueFn: (item) => item.name\r\n                    },\r\n                    {\r\n                        title: 'Descripción',\r\n                        displayValueFn: (item) => item.description\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }\r\n}\r\n",
            "styleUrl": "./client-business-unit-detail-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-detail-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "ClientBusinessUnitEditPageComponent",
            "id": "component-ClientBusinessUnitEditPageComponent-9cc1c2d165dd5ce2a6f748f47541b41fbe0436cdd619485ab596ea1a223b90099226b1b0ae5f3417c66da49f27d3cd6088993c737b69ce819506fdebb5fd5cb2",
            "file": "src/app/modules/organization/clients/client-business-units/pages/client-business-unit-edit-page/client-business-unit-edit-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-business-unit-edit-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-business-unit-edit-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "ClientBusinessUnitCreatePageComponent"
                    }
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n    type: 'create',\r\n    titleModule: 'unidad de negocio',\r\n    formGroup: clientBusinessUnitFormGroup({\r\n      client_id: Number(this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id')!)\r\n    }),\r\n    fields: DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_BUSINESS_UNIT,\r\n    server: { url: 'client-business-unit' },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "ClientBusinessUnitCreatePageComponent"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { ClientBusinessUnitCreatePageComponent } from '../client-business-unit-create-page/client-business-unit-create-page.component';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\n\r\n@Component({\r\n  selector: 'app-client-business-unit-edit-page',\r\n  standalone: true,\r\n  imports: [ItemFormTemplateComponent],\r\n  templateUrl: './client-business-unit-edit-page.component.html',\r\n  styleUrl: './client-business-unit-edit-page.component.scss'\r\n})\r\nexport class ClientBusinessUnitEditPageComponent extends ClientBusinessUnitCreatePageComponent {\r\n    constructor(\r\n    ) {\r\n        super();\r\n        this.configuration.type = 'update';\r\n        this.configuration.hiddeFields = true;\r\n    }\r\n}\r\n",
            "styleUrl": "./client-business-unit-edit-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "extends": [
                "ClientBusinessUnitCreatePageComponent"
            ],
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "ClientBusinessUnitListPageComponent",
            "id": "component-ClientBusinessUnitListPageComponent-362092365770d5fca8d13b22d4d40dce13b7218cd62b3e43c66026b73b584a47ee543de0a642ce333841ea5a566a58fe4010fc9b95cfe58e3ffc73127cc20082",
            "file": "src/app/modules/organization/clients/client-business-units/pages/client-business-unit-list-page/client-business-unit-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-business-unit-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-business-unit-list-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configList",
                    "defaultValue": "{\r\n        title: 'Unidades de negocio',\r\n        server: {\r\n            url: 'client-business-unit',\r\n            queryParams: {\r\n                client_id: this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id')\r\n            },\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Nombre',\r\n                sort: { key: 'name' },\r\n                routerLinkValue: { url: (item) => `../detail/${item.id}` },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.name ? item.name : '--',\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<ClientBusinessUnit>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, signal } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ItemListTemplateComponent } from '@component/item-list-template/item-list-template.component';\r\nimport { ClientBusinessUnit } from '@interface/clientBusinessUnit';\r\nimport { ItemListConfiguration, itemCreatedAtColumn, itemStatusColumn, itemUpdatedAtColumn, textColumn } from '@component/item-list-template/item-list-template.component';\r\n\r\n@Component({\r\n  selector: 'app-client-business-unit-list-page',\r\n  standalone: true,\r\n  imports: [ItemListTemplateComponent],\r\n  templateUrl: './client-business-unit-list-page.component.html',\r\n  styleUrl: './client-business-unit-list-page.component.scss'\r\n})\r\nexport class ClientBusinessUnitListPageComponent {\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    public configList: ItemListConfiguration<ClientBusinessUnit> = {\r\n        title: 'Unidades de negocio',\r\n        server: {\r\n            url: 'client-business-unit',\r\n            queryParams: {\r\n                client_id: this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id')\r\n            },\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Nombre',\r\n                sort: { key: 'name' },\r\n                routerLinkValue: { url: (item) => `../detail/${item.id}` },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.name ? item.name : '--',\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }\r\n}\r\n",
            "styleUrl": "./client-business-unit-list-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-list-template [configuration]=\"configList\"/>\r\n"
        },
        {
            "name": "ClientContactCreatePageComponent",
            "id": "component-ClientContactCreatePageComponent-8b3bd32e304d5b03be2030894a5736e9f8376bc071c0c573b11158eb5977f72a2f3d8b59408fdbe850ace5041b4d07375380f7e71b655597c4399c08b011fdbe",
            "file": "src/app/modules/organization/clients/client-contacts/pages/client-contact-create-page/client-contact-create-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-contact-create-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-contact-create-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        titleModule: 'contacto',\r\n        type: 'create',\r\n        formGroup: clientContactFormGroup({\r\n            client_id: Number(this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id')!)\r\n        }),\r\n        fields: [...DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_CONTACT],\r\n        server: { url: 'client-contact' },\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_CONTACT, clientContactFormGroup } from '../../helpers';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ItemFormConfiguration, ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\n\r\n@Component({\r\n    selector: 'app-client-contact-create-page',\r\n    standalone: true,\r\n    imports: [ItemFormTemplateComponent],\r\n    templateUrl: './client-contact-create-page.component.html',\r\n    styleUrl: './client-contact-create-page.component.scss'\r\n})\r\nexport class ClientContactCreatePageComponent {\r\n    public activatedRoute = inject(ActivatedRoute);\r\n    public configuration: ItemFormConfiguration = {\r\n        titleModule: 'contacto',\r\n        type: 'create',\r\n        formGroup: clientContactFormGroup({\r\n            client_id: Number(this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id')!)\r\n        }),\r\n        fields: [...DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_CONTACT],\r\n        server: { url: 'client-contact' },\r\n    }\r\n\r\n    get documentTypeCtrl(): FormControl {\r\n        return this.configuration.formGroup.get('document_type') as FormControl;\r\n    }\r\n\r\n    get documentNumberCtrl(): FormControl {\r\n        return this.configuration.formGroup.get('document_number') as FormControl;\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        // this.documentTypeCtrl.valueChanges.subscribe(value => {\r\n        //     const index = this.configuration.fields!.findIndex(f => f.text?.formControlName == 'document_number');\r\n        //     if (index != -1) this.configuration.fields![index].text?.maxLength  = value == DocumentTypeEnum.DNI ? 8 : value == DocumentTypeEnum.RUC ? 11 : 14;\r\n        // })\r\n    }\r\n}\r\n",
            "styleUrl": "./client-contact-create-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "documentTypeCtrl": {
                    "name": "documentTypeCtrl",
                    "getSignature": {
                        "name": "documentTypeCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 26
                    }
                },
                "documentNumberCtrl": {
                    "name": "documentNumberCtrl",
                    "getSignature": {
                        "name": "documentNumberCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 30
                    }
                }
            },
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "ClientContactDetailPageComponent",
            "id": "component-ClientContactDetailPageComponent-f1d5874a957fbad65a7c81dc8721d630a6467196ed449a9d8cec0e68b5c0f6f1cf9d34f1fd95a7030e01d697d7f61ca1564424669f6502359bb8e9addc698db5",
            "file": "src/app/modules/organization/clients/client-contacts/pages/client-contact-detail-page/client-contact-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-contact-detail-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-contact-detail-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        title: 'Detalles',\r\n        subtitle: false,\r\n        server: { url: 'client-contact' },\r\n        backButton: false,\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'T. Documento',\r\n                        displayValueFn: (item) => item.document_type.toUpperCase()\r\n                    },\r\n                    {\r\n                        title: 'N° Documento',\r\n                        displayValueFn: (item) => item.document_number\r\n                    },\r\n                    {\r\n                        title: 'Nombre',\r\n                        displayValueFn: (item) => item.name\r\n                    },\r\n                    {\r\n                        title: 'Dirección',\r\n                        displayValueFn: (item) => item.address\r\n                    },\r\n                    {\r\n                        title: 'Teléfono',\r\n                        displayValueFn: (item) => item.phone,\r\n                        type: 'phone'\r\n                    },\r\n                    {\r\n                        title: 'Email',\r\n                        displayValueFn: (item) => item.email,\r\n                        type: 'email',\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDetailConfiguration<ClientContact>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemDetailTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemDetailTemplateComponent, registerDataGroupDetail } from '@component/item-detail-template/item-detail-template.component';\r\nimport { ClientContact } from '@interface/clientContact';\r\nimport { ItemDetailConfiguration } from '@component/item-detail-template/item-detail-template.component';\r\n\r\n@Component({\r\n    selector: 'app-client-contact-detail-page',\r\n    standalone: true,\r\n    imports: [ItemDetailTemplateComponent],\r\n    templateUrl: './client-contact-detail-page.component.html',\r\n    styleUrl: './client-contact-detail-page.component.scss'\r\n})\r\nexport class ClientContactDetailPageComponent {\r\n    public configuration: ItemDetailConfiguration<ClientContact> = {\r\n        title: 'Detalles',\r\n        subtitle: false,\r\n        server: { url: 'client-contact' },\r\n        backButton: false,\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'T. Documento',\r\n                        displayValueFn: (item) => item.document_type.toUpperCase()\r\n                    },\r\n                    {\r\n                        title: 'N° Documento',\r\n                        displayValueFn: (item) => item.document_number\r\n                    },\r\n                    {\r\n                        title: 'Nombre',\r\n                        displayValueFn: (item) => item.name\r\n                    },\r\n                    {\r\n                        title: 'Dirección',\r\n                        displayValueFn: (item) => item.address\r\n                    },\r\n                    {\r\n                        title: 'Teléfono',\r\n                        displayValueFn: (item) => item.phone,\r\n                        type: 'phone'\r\n                    },\r\n                    {\r\n                        title: 'Email',\r\n                        displayValueFn: (item) => item.email,\r\n                        type: 'email',\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }\r\n}\r\n",
            "styleUrl": "./client-contact-detail-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-detail-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "ClientContactEditPageComponent",
            "id": "component-ClientContactEditPageComponent-8905e0642c162309b716f8e9afe99fce74584ff6480f7ae2a012d83c32bd57c4344c45318fd33d59f55006f40fc5c2374b6cc7ff17aac1bbfb3ac7aa6ae192fa",
            "file": "src/app/modules/organization/clients/client-contacts/pages/client-contact-edit-page/client-contact-edit-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-contact-edit-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-contact-edit-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "ClientContactCreatePageComponent"
                    }
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        titleModule: 'contacto',\r\n        type: 'create',\r\n        formGroup: clientContactFormGroup({\r\n            client_id: Number(this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id')!)\r\n        }),\r\n        fields: [...DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_CONTACT],\r\n        server: { url: 'client-contact' },\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "ClientContactCreatePageComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ClientContactCreatePageComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ClientContactCreatePageComponent } from '../client-contact-create-page/client-contact-create-page.component';\r\nimport { ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\n\r\n@Component({\r\n  selector: 'app-client-contact-edit-page',\r\n  standalone: true,\r\n  imports: [ItemFormTemplateComponent],\r\n  templateUrl: './client-contact-edit-page.component.html',\r\n  styleUrl: './client-contact-edit-page.component.scss'\r\n})\r\nexport class ClientContactEditPageComponent extends ClientContactCreatePageComponent {\r\n  constructor() {\r\n    super();\r\n    this.configuration.type = 'update';\r\n    this.configuration.hiddeFields = true;\r\n  }\r\n}\r\n",
            "styleUrl": "./client-contact-edit-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "extends": [
                "ClientContactCreatePageComponent"
            ],
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "ClientContactListPageComponent",
            "id": "component-ClientContactListPageComponent-32f6cc86c8634c76949ce493f40c70fd4e0232150f6c529cdd9666c71c5223d2bcb28ab68e54895b03d0e50b8ee4a5ebd08e6dcc2b140dcbe98ad6738d642374",
            "file": "src/app/modules/organization/clients/client-contacts/pages/client-contact-list-page/client-contact-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-contact-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-contact-list-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configList",
                    "defaultValue": "{\r\n        title: 'Contactos',\r\n        server: {\r\n            url: 'client-contact',\r\n            queryParams: {\r\n                client_id: this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id')\r\n            },\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Cliente / N° Documento',\r\n                sort: { key: 'name' },\r\n                routerLinkValue: { url: (item) => `../detail/${item.id}` },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.name ? item.name : '--',\r\n                displayAdditionalValueFn: (item) => item?.document_number.length >= 11 ? 'RUC: ' + item?.document_number : item?.document_number.length == 8 ? 'DNI: ' + item?.document_number : 'OTRO: ' + item?.document_number,\r\n            }),\r\n            emailColumn({\r\n                title: 'Email',\r\n                sort: { key: 'email' },\r\n                gridColumn: 'auto',\r\n                displayValueFn: (item) => item.email,\r\n            }),\r\n            phoneColumn({\r\n                title: 'Teléfono',\r\n                sort: { key: 'phone' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.phone,\r\n            }),\r\n            phoneColumn({\r\n                title: 'Celular',\r\n                sort: { key: 'cellphone' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.cellphone,\r\n            }),\r\n            textColumn({\r\n                title: 'Dirección',\r\n                sort: { key: 'address' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.address,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<ClientContact>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, signal } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ItemListTemplateComponent } from '@component/item-list-template/item-list-template.component';\r\nimport { ClientContact } from '@interface/clientContact';\r\nimport { ItemListConfiguration, itemCreatedAtColumn, itemStatusColumn, itemUpdatedAtColumn, emailColumn, phoneColumn, textColumn } from '@component/item-list-template/item-list-template.component';\r\n\r\n@Component({\r\n  selector: 'app-client-contact-list-page',\r\n  standalone: true,\r\n  imports: [ItemListTemplateComponent],\r\n  templateUrl: './client-contact-list-page.component.html',\r\n  styleUrl: './client-contact-list-page.component.scss'\r\n})\r\nexport class ClientContactListPageComponent {\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    public configList: ItemListConfiguration<ClientContact> = {\r\n        title: 'Contactos',\r\n        server: {\r\n            url: 'client-contact',\r\n            queryParams: {\r\n                client_id: this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id')\r\n            },\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Cliente / N° Documento',\r\n                sort: { key: 'name' },\r\n                routerLinkValue: { url: (item) => `../detail/${item.id}` },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.name ? item.name : '--',\r\n                displayAdditionalValueFn: (item) => item?.document_number.length >= 11 ? 'RUC: ' + item?.document_number : item?.document_number.length == 8 ? 'DNI: ' + item?.document_number : 'OTRO: ' + item?.document_number,\r\n            }),\r\n            emailColumn({\r\n                title: 'Email',\r\n                sort: { key: 'email' },\r\n                gridColumn: 'auto',\r\n                displayValueFn: (item) => item.email,\r\n            }),\r\n            phoneColumn({\r\n                title: 'Teléfono',\r\n                sort: { key: 'phone' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.phone,\r\n            }),\r\n            phoneColumn({\r\n                title: 'Celular',\r\n                sort: { key: 'cellphone' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.cellphone,\r\n            }),\r\n            textColumn({\r\n                title: 'Dirección',\r\n                sort: { key: 'address' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.address,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }\r\n}\r\n",
            "styleUrl": "./client-contact-list-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-list-template [configuration]=\"configList\"/>\r\n"
        },
        {
            "name": "ClientContractDetailPageComponent",
            "id": "component-ClientContractDetailPageComponent-c18bdcafb5faf425019b662fa46881e4fc5b93ce07d041903d8c8d54558993a2be98c738c9cedb3dcf078387ab7096e44e1adb2a81fe25c8de290758cf456ff7",
            "file": "src/app/modules/organization/clients/client-contracts/pages/client-contract-detail-page/client-contract-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-contract-detail-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-contract-detail-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        title: 'Detalles',\r\n        subtitle: false,\r\n        server: {\r\n            url: 'contract',\r\n            queryParams: {\r\n                relations: 'plan,clientBusinessUnit'\r\n            },\r\n        },\r\n        backButton: false,\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'Código',\r\n                        displayValueFn: (item) => item.code\r\n                    },\r\n                    {\r\n                        title: 'Unidad de negocio',\r\n                        displayValueFn: (item) => item.client_business_unit?.name\r\n                    },\r\n                    {\r\n                        title: 'Plan',\r\n                        displayValueFn: (item) => item.plan?.name\r\n                    },\r\n                    {\r\n                        title: 'Fecha de instalación',\r\n                        displayValueFn: (item) => item.installation_date,\r\n                        type: 'date',\r\n                    },\r\n                    {\r\n                        title: 'Fecha de inicio',\r\n                        displayValueFn: (item) => item.start_date,\r\n                        type: 'date',\r\n                    },\r\n                    {\r\n                        title: 'Fecha de fin',\r\n                        displayValueFn: (item) => item.end_date,\r\n                        type: 'date',\r\n                    },\r\n                    {\r\n                        title: 'Periodo',\r\n                        displayValueFn: (item) => item.period\r\n                    },\r\n                    {\r\n                        title: 'Cantidad',\r\n                        displayValueFn: (item) => item.quantity,\r\n                    },\r\n                    {\r\n                        title: 'Precio de compra',\r\n                        displayValueFn: (item) => item.buy_price,\r\n                        type: 'currency',\r\n                    },\r\n                    {\r\n                        title: 'Precio de venta',\r\n                        displayValueFn: (item) => item.sale_price,\r\n                        type: 'currency',\r\n                    },\r\n                    {\r\n                        title: 'Precio de instalación',\r\n                        displayValueFn: (item) => item.installation_price,\r\n                        type: 'currency',\r\n                    },\r\n                    {\r\n                        title: 'Recurrente de pago',\r\n                        displayValueFn: (item) => item.recurrent_type.toUpperCase(),\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDetailConfiguration<Contract>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemDetailTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemDetailTemplateComponent, registerDataGroupDetail } from '@component/item-detail-template/item-detail-template.component';\r\nimport { Contract } from '@interface/contract';\r\nimport { ItemDetailConfiguration } from '@component/item-detail-template/item-detail-template.component';\r\n\r\n@Component({\r\n    selector: 'app-client-contract-detail-page',\r\n    standalone: true,\r\n    imports: [ItemDetailTemplateComponent],\r\n    templateUrl: './client-contract-detail-page.component.html',\r\n    styleUrl: './client-contract-detail-page.component.scss'\r\n})\r\nexport class ClientContractDetailPageComponent {\r\n    public configuration: ItemDetailConfiguration<Contract> = {\r\n        title: 'Detalles',\r\n        subtitle: false,\r\n        server: {\r\n            url: 'contract',\r\n            queryParams: {\r\n                relations: 'plan,clientBusinessUnit'\r\n            },\r\n        },\r\n        backButton: false,\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'Código',\r\n                        displayValueFn: (item) => item.code\r\n                    },\r\n                    {\r\n                        title: 'Unidad de negocio',\r\n                        displayValueFn: (item) => item.client_business_unit?.name\r\n                    },\r\n                    {\r\n                        title: 'Plan',\r\n                        displayValueFn: (item) => item.plan?.name\r\n                    },\r\n                    {\r\n                        title: 'Fecha de instalación',\r\n                        displayValueFn: (item) => item.installation_date,\r\n                        type: 'date',\r\n                    },\r\n                    {\r\n                        title: 'Fecha de inicio',\r\n                        displayValueFn: (item) => item.start_date,\r\n                        type: 'date',\r\n                    },\r\n                    {\r\n                        title: 'Fecha de fin',\r\n                        displayValueFn: (item) => item.end_date,\r\n                        type: 'date',\r\n                    },\r\n                    {\r\n                        title: 'Periodo',\r\n                        displayValueFn: (item) => item.period\r\n                    },\r\n                    {\r\n                        title: 'Cantidad',\r\n                        displayValueFn: (item) => item.quantity,\r\n                    },\r\n                    {\r\n                        title: 'Precio de compra',\r\n                        displayValueFn: (item) => item.buy_price,\r\n                        type: 'currency',\r\n                    },\r\n                    {\r\n                        title: 'Precio de venta',\r\n                        displayValueFn: (item) => item.sale_price,\r\n                        type: 'currency',\r\n                    },\r\n                    {\r\n                        title: 'Precio de instalación',\r\n                        displayValueFn: (item) => item.installation_price,\r\n                        type: 'currency',\r\n                    },\r\n                    {\r\n                        title: 'Recurrente de pago',\r\n                        displayValueFn: (item) => item.recurrent_type.toUpperCase(),\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }\r\n}\r\n",
            "styleUrl": "./client-contract-detail-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-detail-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "ClientContractDocumentItemFormComponent",
            "id": "component-ClientContractDocumentItemFormComponent-540a9316898b95a39539bfc76855ec800ea0d789637690a33fd12670b389898cc32f3af65c683fffb0d57061844dc714a1bd7c47a684f4254bad6fe1d317a3a8",
            "file": "src/app/modules/organization/clients/client-documents/components/client-contract-document-item-form/client-contract-document-item-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-contract-document-item-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-contract-document-item-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 24,
                    "type": "number",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 23,
                    "type": "ItemFormDocumentContractItem",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteItem",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "updateItem",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter<ItemFormDocumentContractItem>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\r\n        period: new FormControl(1, [Validators.required]),\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "loadingSaveItem",
                    "defaultValue": "signal<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "timeoutSaveItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReturnType<>",
                    "optional": true,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelEditItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "clearTimeoutSaveItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "deleteItemInServer",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ]
                },
                {
                    "name": "editFucusItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isChangesItem",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "patchValueForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "saveItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "saveItemInServer",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CdkMenuModule",
                    "type": "module"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                },
                {
                    "name": "UpperCasePipe",
                    "type": "pipe"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "AutofocusDirectiveDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CdkMenuModule } from '@angular/cdk/menu';\r\nimport { Component, EventEmitter, Input, Output, inject, signal } from '@angular/core';\r\nimport { ItemFormDocumentContractItem } from '../../pages/client-document-create/client-document-create.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { AsyncPipe, DecimalPipe, UpperCasePipe } from '@angular/common';\r\nimport { AutofocusDirectiveDirective } from '@directive/autofocus-directive.directive';\r\n\r\n@Component({\r\n    selector: 'app-client-contract-document-item-form',\r\n    standalone: true,\r\n    imports: [\r\n        ReactiveFormsModule,\r\n        CdkMenuModule,\r\n        DecimalPipe,\r\n        UpperCasePipe,\r\n        AsyncPipe,\r\n        AutofocusDirectiveDirective,\r\n    ],\r\n    templateUrl: './client-contract-document-item-form.component.html',\r\n    styleUrl: './client-contract-document-item-form.component.scss'\r\n})\r\nexport class ClientContractDocumentItemFormComponent {\r\n    @Input({ required: true }) public item!: ItemFormDocumentContractItem;\r\n    @Input({ required: true }) public index!: number;\r\n    @Output() deleteItem: EventEmitter<void> = new EventEmitter();\r\n    @Output() updateItem: EventEmitter<ItemFormDocumentContractItem> = new EventEmitter();\r\n\r\n    private timeoutSaveItem?: ReturnType<typeof setTimeout>;\r\n    public loadingSaveItem = signal<boolean>(false);\r\n\r\n    public form = new FormGroup({\r\n        period: new FormControl(1, [Validators.required]),\r\n    });\r\n\r\n    get periodCtrl(): FormControl { return this.form.get('period') as FormControl; }\r\n\r\n    public editFucusItems(): void {\r\n        this.item.edit = true;\r\n        this.item.inputAutoFocus = 'period';\r\n        this.patchValueForm();\r\n    }\r\n\r\n    private patchValueForm(): void {\r\n        this.form.patchValue({\r\n            period: Number(this.item.periods),\r\n        }, { emitEvent: false });\r\n    }\r\n\r\n    public cancelEditItem(): void {\r\n        this.item.edit = false;\r\n        this.clearTimeoutSaveItem();\r\n    }\r\n\r\n    public clearTimeoutSaveItem(): void {\r\n        if (this.timeoutSaveItem) clearTimeout(this.timeoutSaveItem);\r\n    }\r\n\r\n    private isChangesItem(): boolean {\r\n        return this.item.periods != this.periodCtrl.value;\r\n    }\r\n\r\n    public saveItem(): void {\r\n        if (this.form.invalid) return;\r\n        else if (!this.isChangesItem()) this.timeoutSaveItem = setTimeout(() => {\r\n            this.cancelEditItem();\r\n            this.updateItem.emit();\r\n        }, 250);\r\n        else this.timeoutSaveItem = setTimeout(() => this.saveItemInServer(), 250);\r\n    }\r\n\r\n    private async saveItemInServer() {\r\n        this.loadingSaveItem.set(true);\r\n        const body = this.form.value;\r\n        this.item.periods = body.period!;\r\n        this.cancelEditItem();\r\n        this.loadingSaveItem.set(false);\r\n        this.updateItem.emit();\r\n    }\r\n\r\n    public async deleteItemInServer() {\r\n        this.deleteItem.emit();\r\n    }\r\n}\r\n",
            "styleUrl": "./client-contract-document-item-form.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "periodCtrl": {
                    "name": "periodCtrl",
                    "getSignature": {
                        "name": "periodCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 35
                    }
                }
            },
            "templateData": "@if (item.edit) {\r\n<div class=\"item__row\" level=\"1\" [formGroup]=\"form\">\r\n    <div class=\"item__row__cell item__row__cell-start\">\r\n        {{ item.description }}\r\n    </div>\r\n\r\n    <div class=\"item__row__cell\" align=\"right\">\r\n        {{ item.price | number: '.2-2'}}\r\n    </div>\r\n\r\n    <div class=\"item__row__cell\" align=\"right\">\r\n        <input class=\"item__row__cell__input\" placeholder=\"Periodo...\" type=\"number\" min=\"0\" formControlName=\"period\"\r\n                appAutofocus [autoFocus]=\"item.inputAutoFocus == 'period'\"\r\n                (keydown.escape)=\"cancelEditItem()\"\r\n                (focus)=\"clearTimeoutSaveItem()\"\r\n                (keyup.enter)=\"saveItem()\"\r\n                (blur)=\"saveItem()\">\r\n    </div>\r\n\r\n    <div class=\"item__row__cell item__row__cell-end\" align=\"right\">\r\n        {{ (item.price * periodCtrl.value) | number: '.2-2'}}\r\n    </div>\r\n</div>\r\n} @else {\r\n<div class=\"item__row\" level=\"1\" [cdkContextMenuTriggerFor]=\"menuItem\">\r\n    <div class=\"item__row__cell item__row__cell-start\">\r\n        {{ item.description }}\r\n    </div>\r\n\r\n    <div class=\"item__row__cell\" align=\"right\">\r\n        {{ item.price | number: '.2-2' }}\r\n    </div>\r\n\r\n    <div class=\"item__row__cell\" align=\"right\" (dblclick)=\"editFucusItems()\">\r\n        {{ item.periods | number: '2.0-0' }}\r\n    </div>\r\n\r\n    <div class=\"item__row__cell item__row__cell-end\" align=\"right\">\r\n        {{ (item.price * item.periods) | number: '.2-2' }}\r\n    </div>\r\n</div>\r\n}\r\n\r\n<ng-template #menuItem>\r\n    <div class=\"cdk-menu-panel\" cdkMenu>\r\n        <button class=\"cdk-menu-item\" type=\"button\" cdkMenuItem (click)=\"editFucusItems()\">\r\n            <span class=\"material-icons\">edit</span>\r\n            <span>Editar Item</span>\r\n        </button>\r\n        <button class=\"cdk-menu-item\" type=\"button\" cdkMenuItem (click)=\"deleteItemInServer()\">\r\n            <span class=\"material-icons\">delete</span>\r\n            <span>Eliminar Item</span>\r\n        </button>\r\n    </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "ClientContractListPageComponent",
            "id": "component-ClientContractListPageComponent-4d4710b5e231fa75014ce857df56bfdc7b6833493f0919b1682fd51a82a2f4c8aaeb9bf4573252f0a33e395c45fc76f84fdafeb8eccef7666e39afbac7fc1db4",
            "file": "src/app/modules/organization/clients/client-contracts/pages/client-contract-list-page/client-contract-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-contract-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-contract-list-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        title: 'Contratos',\r\n        server: {\r\n            url: 'contract',\r\n            queryParams: {\r\n                relations: 'plan',\r\n                client_id: this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id')\r\n            },\r\n        },\r\n        createButton: false,\r\n        columns: signal(contractColumnsList().toSpliced(1, 2, uppercaseColumn<Contract>({\r\n            title: 'Plan',\r\n            displayValueFn: (item) => item.plan?.name,\r\n            gridColumn: '1fr',\r\n        }))),\r\n        rows: {\r\n            options: [\r\n                routerLinkActionButton({\r\n                    text: 'Ver detalle',\r\n                    icon: 'visibility',\r\n                    routerLink: { url: (item) => `../detail/${item.id}` },\r\n                }),\r\n                routerLinkActionButton({\r\n                    text: 'Ver en perfil',\r\n                    icon: 'autorenew',\r\n                    routerLink: { url: (item) => `/tracking/contract/view/${item.id}/detail` },\r\n                })\r\n            ]\r\n        }\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<Contract>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, signal } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ItemListTemplateComponent, clickEventActionButton, routerLinkActionButton, uppercaseColumn } from '@component/item-list-template/item-list-template.component';\r\nimport { Contract } from '@interface/contract';\r\nimport { ItemListConfiguration, dateColumn, itemCreatedAtColumn, itemStatusColumn, itemUpdatedAtColumn, numberColumn, textColumn } from '@component/item-list-template/item-list-template.component';\r\nimport { contractColumnsList } from 'src/app/modules/tracking/contracts/helpers';\r\n\r\n@Component({\r\n    selector: 'app-client-contract-list-page',\r\n    standalone: true,\r\n    imports: [ItemListTemplateComponent],\r\n    templateUrl: './client-contract-list-page.component.html',\r\n    styleUrl: './client-contract-list-page.component.scss'\r\n})\r\nexport class ClientContractListPageComponent {\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    public configuration: ItemListConfiguration<Contract> = {\r\n        title: 'Contratos',\r\n        server: {\r\n            url: 'contract',\r\n            queryParams: {\r\n                relations: 'plan',\r\n                client_id: this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id')\r\n            },\r\n        },\r\n        createButton: false,\r\n        columns: signal(contractColumnsList().toSpliced(1, 2, uppercaseColumn<Contract>({\r\n            title: 'Plan',\r\n            displayValueFn: (item) => item.plan?.name,\r\n            gridColumn: '1fr',\r\n        }))),\r\n        rows: {\r\n            options: [\r\n                routerLinkActionButton({\r\n                    text: 'Ver detalle',\r\n                    icon: 'visibility',\r\n                    routerLink: { url: (item) => `../detail/${item.id}` },\r\n                }),\r\n                routerLinkActionButton({\r\n                    text: 'Ver en perfil',\r\n                    icon: 'autorenew',\r\n                    routerLink: { url: (item) => `/tracking/contract/view/${item.id}/detail` },\r\n                })\r\n            ]\r\n        }\r\n    };\r\n}\r\n",
            "styleUrl": "./client-contract-list-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-list-template [configuration]=\"configuration\" />\r\n"
        },
        {
            "name": "ClientCreatePageComponent",
            "id": "component-ClientCreatePageComponent-bece608a73a9b1426b624f53a79f68fe340fe64aa429b0847816610212d6616cb38f080fd94e9c5be63bcf8fe4418457edca0da6347d0fc6b9e7d1a2b79475f8",
            "file": "src/app/modules/organization/clients/pages/client-create-page/client-create-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-create-page",
            "styleUrls": [
                "./client-create-page.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./client-create-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "abortController",
                    "defaultValue": "new AbortController()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AbortController",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        type: 'create',\r\n        titleModule: 'cliente',\r\n        formGroup: clientFormGroup(),\r\n        fields: DEFAULT_DISPLAY_FIELDS_FORM_CLIENT,\r\n        server: { url: 'client' },\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "fetch",
                    "defaultValue": "inject(FetchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "minMaxlengthDocumentNumber",
                    "defaultValue": "12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "searchDocumentNumber",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateValidatorsForDocumentNumberCtrl",
                    "args": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyDocuments",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, inject } from '@angular/core';\r\nimport { ItemFormConfiguration } from '@component/item-form-template/item-form-template.component';\r\nimport { DEFAULT_DISPLAY_FIELDS_FORM_CLIENT, clientFormGroup } from '../../helpers';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { filter } from 'rxjs';\r\nimport { DOCUMENT_TYPES, DocumentTypeEnum } from '@interface/baseModel';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { getDataPersonFormDocumentNumber } from '@helper/index';\r\nimport { ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\n\r\n@Component({\r\n    selector: 'app-client-create-page',\r\n    standalone: true,\r\n    templateUrl: './client-create-page.component.html',\r\n    styleUrls: ['./client-create-page.component.css'],\r\n    imports: [ItemFormTemplateComponent]\r\n})\r\nexport class ClientCreatePageComponent {\r\n    private fetch = inject(FetchService);\r\n    public searchDocumentNumber: boolean = false;\r\n    private abortController: AbortController = new AbortController();\r\n    public minMaxlengthDocumentNumber: number = 12;\r\n    public configuration: ItemFormConfiguration = {\r\n        type: 'create',\r\n        titleModule: 'cliente',\r\n        formGroup: clientFormGroup(),\r\n        fields: DEFAULT_DISPLAY_FIELDS_FORM_CLIENT,\r\n        server: { url: 'client' },\r\n    };\r\n\r\n    get documentTypes(): DocumentTypeEnum[] {\r\n        return DOCUMENT_TYPES;\r\n    }\r\n    get documentNumberCtrl(): FormControl {\r\n        return this.configuration.formGroup.get('document_number') as FormControl;\r\n    }\r\n    get documentTypeCtrl(): FormControl {\r\n        return this.configuration.formGroup.get('document_type') as FormControl;\r\n    }\r\n    get nameCtrl(): FormControl {\r\n        return this.configuration.formGroup.get('name') as FormControl;\r\n    }\r\n    get addressCtrl(): FormControl {\r\n        return this.configuration.formGroup.get('address') as FormControl;\r\n    }\r\n    get phoneCtrl(): FormControl {\r\n        return this.configuration.formGroup.get('phone') as FormControl;\r\n    }\r\n    ngOnInit(): void {\r\n        this.documentNumberCtrl.valueChanges\r\n            .pipe(filter(() => this.documentNumberCtrl.valid && this.documentNumberCtrl.enabled))\r\n            .subscribe(() => this.verifyDocuments());\r\n\r\n        this.documentTypeCtrl.valueChanges.subscribe(() => {\r\n            const documentSelected = this.documentTypes.find(d => d.toLowerCase() == this.documentTypeCtrl.value);\r\n            if (!documentSelected) return;\r\n            if (documentSelected.toLowerCase() == 'ruc') this.updateValidatorsForDocumentNumberCtrl(11);\r\n            else if (documentSelected.toLowerCase() == 'dni') this.updateValidatorsForDocumentNumberCtrl(8);\r\n            else if (documentSelected.toLowerCase() != 'dni' || documentSelected.toLowerCase() != 'dni') this.updateValidatorsForDocumentNumberCtrl(14);\r\n        });\r\n        this.phoneCtrl.valueChanges.subscribe((value) => this.phoneCtrl.setValue(value.replace(/[^0-9]/gi, ''), { emitEvent: false }));\r\n        this.documentNumberCtrl.valueChanges.subscribe((value) => this.documentNumberCtrl.setValue(value.replace(/[^0-9]/gi, ''), { emitEvent: false }));\r\n\r\n    }\r\n\r\n    public updateValidatorsForDocumentNumberCtrl(length: number): void {\r\n        console.log(length);\r\n\r\n        this.documentNumberCtrl.setValidators([\r\n            Validators.required,\r\n            Validators.minLength(length),\r\n            Validators.maxLength(length),\r\n            Validators.pattern(`[0-9]+`),\r\n        ]);\r\n        this.documentNumberCtrl.updateValueAndValidity();\r\n        this.minMaxlengthDocumentNumber = length;\r\n    }\r\n\r\n    private async verifyDocuments() {\r\n        if (this.searchDocumentNumber) {\r\n            this.abortController.abort();\r\n            this.abortController = new AbortController();\r\n        }\r\n        this.searchDocumentNumber = true;\r\n        const documentSelected = this.documentTypes.find(item => item.toLocaleLowerCase() == this.documentTypeCtrl.value);\r\n        const documentNumber = this.documentNumberCtrl.value ?? '';\r\n        if (documentSelected && (documentSelected.toLowerCase() == 'ruc' && documentNumber.length == 11 || documentSelected.toLowerCase() == 'dni' && documentNumber.length == 8)) {\r\n            try {\r\n                const data = await getDataPersonFormDocumentNumber(this.fetch, documentNumber, this.abortController);\r\n                this.searchDocumentNumber = false;\r\n                if (data?.full_name) {\r\n                    this.nameCtrl.setValue(data.full_name);\r\n                    this.nameCtrl.disable();\r\n                    this.addressCtrl.setValue(data.address ?? null);\r\n                } else {\r\n                    this.nameCtrl.setValue(null);\r\n                    this.addressCtrl.setValue(null);\r\n                    this.nameCtrl.enable();\r\n                }\r\n            } catch (error: any) {\r\n                if (error.name != 'AbortError') {\r\n                    this.searchDocumentNumber = false;\r\n                }\r\n            }\r\n        } else {\r\n            this.nameCtrl.setValue(null);\r\n            this.nameCtrl.enable();\r\n        }\r\n    }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./client-create-page.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "documentTypes": {
                    "name": "documentTypes",
                    "getSignature": {
                        "name": "documentTypes",
                        "type": "[]",
                        "returnType": "DocumentTypeEnum[]",
                        "line": 31
                    }
                },
                "documentNumberCtrl": {
                    "name": "documentNumberCtrl",
                    "getSignature": {
                        "name": "documentNumberCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 34
                    }
                },
                "documentTypeCtrl": {
                    "name": "documentTypeCtrl",
                    "getSignature": {
                        "name": "documentTypeCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 37
                    }
                },
                "nameCtrl": {
                    "name": "nameCtrl",
                    "getSignature": {
                        "name": "nameCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 40
                    }
                },
                "addressCtrl": {
                    "name": "addressCtrl",
                    "getSignature": {
                        "name": "addressCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 43
                    }
                },
                "phoneCtrl": {
                    "name": "phoneCtrl",
                    "getSignature": {
                        "name": "phoneCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 46
                    }
                }
            },
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "ClientDetailPageComponent",
            "id": "component-ClientDetailPageComponent-b692e21da1926c09ea206802b230dd69e5228c6581e9bd84b4e0d566da90700428d6dd1011e9182f06f243d28eefbc764751a88459481c5a15677651c1cfc293",
            "file": "src/app/modules/organization/clients/pages/client-detail-page/client-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-detail-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-detail-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        title: 'Detalles',\r\n        subtitle: false,\r\n        server: { url: 'client' },\r\n        backButton: false,\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'T. Documento',\r\n                        displayValueFn: (item) => item.document_type.toUpperCase()\r\n                    },\r\n                    {\r\n                        title: 'N° Documento',\r\n                        displayValueFn: (item) => item.document_number\r\n                    },\r\n                    {\r\n                        title: 'Nombre',\r\n                        displayValueFn: (item) => item.name\r\n                    },\r\n                    {\r\n                        title: 'Dirección',\r\n                        displayValueFn: (item) => item.address\r\n                    },\r\n                    {\r\n                        title: 'Teléfono',\r\n                        displayValueFn: (item) => item.phone,\r\n                        type: 'phone'\r\n                    },\r\n                    {\r\n                        title: 'Email',\r\n                        displayValueFn: (item) => item.email,\r\n                        type: 'email',\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDetailConfiguration<Client>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemDetailTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemDetailTemplateComponent, registerDataGroupDetail } from '@component/item-detail-template/item-detail-template.component';\r\nimport { Client } from '@interface/client';\r\nimport { ItemDetailConfiguration } from '@component/item-detail-template/item-detail-template.component';\r\n\r\n@Component({\r\n  selector: 'app-client-detail-page',\r\n  standalone: true,\r\n  imports: [ItemDetailTemplateComponent],\r\n  templateUrl: './client-detail-page.component.html',\r\n  styleUrl: './client-detail-page.component.scss'\r\n})\r\nexport class ClientDetailPageComponent {\r\n    public configuration: ItemDetailConfiguration<Client> = {\r\n        title: 'Detalles',\r\n        subtitle: false,\r\n        server: { url: 'client' },\r\n        backButton: false,\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'T. Documento',\r\n                        displayValueFn: (item) => item.document_type.toUpperCase()\r\n                    },\r\n                    {\r\n                        title: 'N° Documento',\r\n                        displayValueFn: (item) => item.document_number\r\n                    },\r\n                    {\r\n                        title: 'Nombre',\r\n                        displayValueFn: (item) => item.name\r\n                    },\r\n                    {\r\n                        title: 'Dirección',\r\n                        displayValueFn: (item) => item.address\r\n                    },\r\n                    {\r\n                        title: 'Teléfono',\r\n                        displayValueFn: (item) => item.phone,\r\n                        type: 'phone'\r\n                    },\r\n                    {\r\n                        title: 'Email',\r\n                        displayValueFn: (item) => item.email,\r\n                        type: 'email',\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }\r\n}\r\n",
            "styleUrl": "./client-detail-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-detail-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "ClientDocumentContractAddComponent",
            "id": "component-ClientDocumentContractAddComponent-5e43e28711819fda97430428df14364e66921b2dcd0ab603bd8f4fef8252842cb69cbd1c7c81967f981cbdb79b7dfcacd92a4bdced6761e98f35f38bc6c6b0f8",
            "file": "src/app/modules/organization/clients/client-documents/pages/client-document-contract-add/client-document-contract-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-document-contract-add",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-document-contract-add.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        title: 'Contratos',\r\n        server: {\r\n            url: 'contract',\r\n            queryParams: {\r\n                relations: 'client,clientBusinessUnit,plan,contractVehicles.vehicle,lastContractDocumentItem',\r\n                client_id:  this.activatedRoute.snapshot.paramMap.get('client_id')\r\n            },\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Código',\r\n                displayValueFn: (item) => item.code,\r\n                routerLinkValue: { url: (item) => `/tracking/contract/view/${item.id}` },\r\n            }),\r\n            textColumn({\r\n                title: 'Cliente / Unidad de negocio',\r\n                displayValueFn: (item) => item.client?.name,\r\n                displayAdditionalValueFn: (item) => item.client_business_unit?.name,\r\n                gridColumn: '1fr',\r\n                routerLinkValue: { url: (item) => `/organization/client/view/${item.client?.id}` },\r\n            }),\r\n            textColumn({\r\n                title: 'Plan',\r\n                displayValueFn: (item) => item.plan?.name,\r\n            }),\r\n            numberColumn({\r\n                title: 'Unidades',\r\n                displayValueFn: (item) => item.quantity,\r\n                numberFormat: '2.0-0',\r\n            }),\r\n            numberColumn({\r\n                title: 'Precio Und.',\r\n                displayValueFn: (item) => item.sale_price,\r\n            }),\r\n            dateColumn({\r\n                title: 'Fecha de inicio',\r\n                displayValueFn: (item) => item.start_date,\r\n            }),\r\n            dateColumn({\r\n                title: 'Fecha de fin',\r\n                displayValueFn: (item) => item.end_date,\r\n            }),\r\n        ]),\r\n        rows: {\r\n            actions: [\r\n                {\r\n                    type: 'clickEvent',\r\n                    style: 'filled-icon-button',\r\n                    icon: 'check',\r\n                    fn:  (item) => this.addContractDocumentItem([item])\r\n                }\r\n            ],\r\n            selectable: {\r\n                actions: [\r\n                    selectableActionButton({\r\n                        icon: 'add',\r\n                        style: 'filled-button',\r\n                        text: 'Agregar',\r\n                        fn: (items)=>{\r\n                            this.addContractDocumentItem(items);\r\n                        }\r\n                    })\r\n                ]\r\n            }\r\n        }\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<Contract>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "eventService",
                    "defaultValue": "inject(EventsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lateralPanelType",
                    "defaultValue": "'maximum'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LateralPanelType",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "location",
                    "defaultValue": "inject(Location)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addContractDocumentItem",
                    "args": [
                        {
                            "name": "items",
                            "type": "Contract[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Contract[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Location } from '@angular/common';\r\nimport { Component, inject, signal } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ItemListConfiguration, ItemListTemplateComponent, dateColumn, numberColumn, selectableActionButton, textColumn } from '@component/item-list-template/item-list-template.component';\r\nimport { Contract } from '@interface/contract';\r\nimport { EventsService } from '@service/events.service';\r\nimport { LateralPanelType } from 'src/app/sidenav/sidenav/sidenav.component';\r\n\r\n@Component({\r\n    selector: 'app-client-document-contract-add',\r\n    standalone: true,\r\n    imports: [ItemListTemplateComponent],\r\n    templateUrl: './client-document-contract-add.component.html',\r\n    styleUrl: './client-document-contract-add.component.scss'\r\n})\r\nexport class ClientDocumentContractAddComponent {\r\n    public readonly lateralPanelType: LateralPanelType = 'maximum';\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private location = inject(Location);\r\n    private router = inject(Router);\r\n    private eventService = inject(EventsService);\r\n    public configuration: ItemListConfiguration<Contract> = {\r\n        title: 'Contratos',\r\n        server: {\r\n            url: 'contract',\r\n            queryParams: {\r\n                relations: 'client,clientBusinessUnit,plan,contractVehicles.vehicle,lastContractDocumentItem',\r\n                client_id:  this.activatedRoute.snapshot.paramMap.get('client_id')\r\n            },\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Código',\r\n                displayValueFn: (item) => item.code,\r\n                routerLinkValue: { url: (item) => `/tracking/contract/view/${item.id}` },\r\n            }),\r\n            textColumn({\r\n                title: 'Cliente / Unidad de negocio',\r\n                displayValueFn: (item) => item.client?.name,\r\n                displayAdditionalValueFn: (item) => item.client_business_unit?.name,\r\n                gridColumn: '1fr',\r\n                routerLinkValue: { url: (item) => `/organization/client/view/${item.client?.id}` },\r\n            }),\r\n            textColumn({\r\n                title: 'Plan',\r\n                displayValueFn: (item) => item.plan?.name,\r\n            }),\r\n            numberColumn({\r\n                title: 'Unidades',\r\n                displayValueFn: (item) => item.quantity,\r\n                numberFormat: '2.0-0',\r\n            }),\r\n            numberColumn({\r\n                title: 'Precio Und.',\r\n                displayValueFn: (item) => item.sale_price,\r\n            }),\r\n            dateColumn({\r\n                title: 'Fecha de inicio',\r\n                displayValueFn: (item) => item.start_date,\r\n            }),\r\n            dateColumn({\r\n                title: 'Fecha de fin',\r\n                displayValueFn: (item) => item.end_date,\r\n            }),\r\n        ]),\r\n        rows: {\r\n            actions: [\r\n                {\r\n                    type: 'clickEvent',\r\n                    style: 'filled-icon-button',\r\n                    icon: 'check',\r\n                    fn:  (item) => this.addContractDocumentItem([item])\r\n                }\r\n            ],\r\n            selectable: {\r\n                actions: [\r\n                    selectableActionButton({\r\n                        icon: 'add',\r\n                        style: 'filled-button',\r\n                        text: 'Agregar',\r\n                        fn: (items)=>{\r\n                            this.addContractDocumentItem(items);\r\n                        }\r\n                    })\r\n                ]\r\n            }\r\n        }\r\n    };\r\n    constructor(){\r\n        const state : any = this.router.getCurrentNavigation()?.extras.state;\r\n        if(state){\r\n            const not_include_ids = state.not_include_ids;\r\n            if(not_include_ids){\r\n                this.configuration.server.queryParams = {...this.configuration.server.queryParams as any, not_ids: not_include_ids};\r\n            }\r\n        }\r\n    }\r\n\r\n     addContractDocumentItem(items: Contract[]){\r\n        this.eventService.emitEvent(`add-contract-document-item`, items);\r\n        this.location.back();\r\n    }\r\n}\r\n",
            "styleUrl": "./client-document-contract-add.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 88
            },
            "extends": [],
            "templateData": "<app-item-list-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "ClientDocumentCreateComponent",
            "id": "component-ClientDocumentCreateComponent-924a7d65315970eb174d1a6c44ae9c78c245038d93898ee8700ab4b6ad3db1d45b3007511037de1362df988b516456abad9e3f39e1540d9f2de932c7f7392029",
            "file": "src/app/modules/organization/clients/client-documents/pages/client-document-create/client-document-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-document-create",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-document-create.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "eventsService",
                    "defaultValue": "inject(EventsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formConfiguration",
                    "defaultValue": "{\r\n        title: \"Nuevo Documento\",\r\n        titleModule: \"documento\",\r\n        type: \"create\",\r\n        server: {\r\n            url: 'document/contracts/generate',\r\n        },\r\n        formGroup: new FormGroup({\r\n            client_id: new FormControl(this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id'), [Validators.required]),\r\n            valid_contracts: new FormControl(false, [Validators.requiredTrue]),\r\n        }),\r\n        parseDataItemBeforeSendFormFn: (data) => ({\r\n            ...data,\r\n            contracts: this.items().map((item) => ({ id: item.contract.id, periods: item.periods }))\r\n        }),\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "signal([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<ItemFormDocumentContractItem[]>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "total",
                    "defaultValue": "computed(() => this.items().reduce((acc, item) => acc + item.price, 0))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addData",
                    "args": [
                        {
                            "name": "contracts",
                            "type": "Contract[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "contracts",
                            "type": "Contract[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteItem",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDetails",
                    "args": [
                        {
                            "name": "contract",
                            "type": "Contract",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "periods",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ description: string; price: number; }",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "contract",
                            "type": "Contract",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "periods",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "newAdd",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateDescription",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "ClientContractDocumentItemFormComponent",
                    "type": "component"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, WritableSignal, computed, inject, signal } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ItemFormConfiguration, ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\nimport { Contract } from '@interface/contract';\r\nimport { ClientContractDocumentItemFormComponent } from '../../components/client-contract-document-item-form/client-contract-document-item-form.component';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { EventsService } from '@service/events.service';\r\nimport { StatusModel } from '@interface/baseModel';\r\nimport { addMonths, format, parseISO, setDefaultOptions, subDays } from 'date-fns';\r\nimport { es } from 'date-fns/locale'\r\nimport { DecimalPipe } from '@angular/common';\r\n\r\nexport interface ItemFormDocumentContractItem {\r\n    edit?: boolean;\r\n    inputAutoFocus?: 'period';\r\n    contract: Contract,\r\n    periods: number,\r\n    description: string,\r\n    price: number,\r\n}\r\n\r\n@Component({\r\n    selector: 'app-client-document-create',\r\n    standalone: true,\r\n    imports: [ItemFormTemplateComponent, ClientContractDocumentItemFormComponent, DecimalPipe],\r\n    templateUrl: './client-document-create.component.html',\r\n    styleUrl: './client-document-create.component.scss'\r\n})\r\nexport class ClientDocumentCreateComponent {\r\n    private router = inject(Router);\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private eventsService = inject(EventsService);\r\n    private subscription?: Subscription;\r\n    public items: WritableSignal<ItemFormDocumentContractItem[]> = signal([]);\r\n    public total = computed(() => this.items().reduce((acc, item) => acc + item.price, 0));\r\n    public formConfiguration: ItemFormConfiguration = {\r\n        title: \"Nuevo Documento\",\r\n        titleModule: \"documento\",\r\n        type: \"create\",\r\n        server: {\r\n            url: 'document/contracts/generate',\r\n        },\r\n        formGroup: new FormGroup({\r\n            client_id: new FormControl(this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id'), [Validators.required]),\r\n            valid_contracts: new FormControl(false, [Validators.requiredTrue]),\r\n        }),\r\n        parseDataItemBeforeSendFormFn: (data) => ({\r\n            ...data,\r\n            contracts: this.items().map((item) => ({ id: item.contract.id, periods: item.periods }))\r\n        }),\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.subscription = this.eventsService.eventsFiltered(['add-contract-document-item']).subscribe(event => {\r\n            this.addData(event.data);\r\n        });\r\n\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription?.unsubscribe();\r\n    }\r\n\r\n    private addData(contracts: Contract[]) {\r\n        const newData: ItemFormDocumentContractItem[] = contracts.map(contract => {\r\n            const { description, price } = this.getDetails(contract, 1);\r\n            return { contract, periods: 1, description, price }\r\n        })\r\n        this.items.update((data) => [...data, ...newData]);\r\n        this.formConfiguration.formGroup.get('valid_contracts')?.setValue(true);\r\n    }\r\n\r\n    private getDetails(contract: Contract, periods: number) {\r\n        setDefaultOptions({ locale: es })\r\n        const contractVehiclesActives = contract.contract_vehicles?.filter((contract_vehicle) => contract_vehicle.vehicle?.status == StatusModel.Habilitado);\r\n        const platesString = contractVehiclesActives?.map(contractVehicle => contractVehicle.vehicle?.plate).join(', ');\r\n        const nextPeriod = (contract.last_contract_document_item?.end_period ? contract.last_contract_document_item?.end_period : 1) - 1;\r\n        const dateNextPeriod = addMonths(parseISO(contract.start_date), nextPeriod);\r\n        const dateEndPeriod = subDays(addMonths(addMonths(parseISO(contract.start_date), nextPeriod), periods), 1);\r\n        const dateStringInit = dateNextPeriod.getFullYear() == dateEndPeriod.getFullYear() ? format(dateNextPeriod, \"dd 'DE' MMMM\").toUpperCase() : format(dateNextPeriod, \"dd 'DE' MMMM yyyy\").toUpperCase();\r\n        const dateStringEnd = format(dateEndPeriod, \"dd 'DE' MMMM yyyy\").toUpperCase();\r\n        const vehiclesQuantity = contractVehiclesActives?.length ?? 0;\r\n        const price = (contract.sale_price * vehiclesQuantity);\r\n        const description = `ALQUILER MENSUAL DE GPS POR ${vehiclesQuantity} UNIDADES - PERIODO DEL ${dateStringInit} AL ${dateStringEnd} | ${contract.plan?.name} | CONTRATO ${contract.code} | PLACAS: ${platesString}`;\r\n        return { description, price }\r\n    }\r\n\r\n    public newAdd(event: Event) {\r\n        event.preventDefault()\r\n        const clientId = this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id');\r\n        const not_include_ids = this.items().map(item => item.contract.id);\r\n        this.router.navigate([{ outlets: { 'route-lateral': `client/${clientId}/contract/add` } }], { state: { not_include_ids } });\r\n    }\r\n\r\n    public deleteItem(index: number) {\r\n        this.items.update((data) => data.toSpliced(index, 1))\r\n        if (this.items().length == 0) this.formConfiguration.formGroup.get('valid_contracts')?.setValue(false);\r\n    }\r\n\r\n    public updateDescription(index: number) {\r\n        const item = this.items()[index];\r\n        const description = this.getDetails(item.contract, item.periods).description;\r\n        this.items.update((data) => data.toSpliced(index, 1, { ...item, description }));\r\n    }\r\n}\r\n",
            "styleUrl": "./client-document-create.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-form-template [configuration]=\"formConfiguration\">\r\n\r\n    <ng-container beforeContent>\r\n        <div class=\"items\">\r\n            <div class=\"item__row item__row-header\">\r\n                <div class=\"item__row__cell\">Descripción</div>\r\n                <div class=\"item__row__cell\" align=\"right\">Costo</div>\r\n                <div class=\"item__row__cell\" align=\"right\">Periodos</div>\r\n                <div class=\"item__row__cell\" align=\"right\">Subtotal</div>\r\n            </div>\r\n\r\n            @for (item of items(); track item.contract.id; let i = $index) {\r\n            <app-client-contract-document-item-form [item]=\"item\" [index]=\"i\" (deleteItem)=\"deleteItem(i)\"\r\n                (updateItem)=\"updateDescription(i)\" />\r\n            }\r\n\r\n            <br>\r\n            <button class=\"outlined-button contract__add-button\" (click)=\"newAdd($event)\">\r\n                <span class=\"material-icons\">add</span>\r\n                <span>Agregar contrato</span>\r\n            </button>\r\n            <br>\r\n        </div>\r\n\r\n        <div class=\"items__footer\">\r\n            <div class=\"items__footer__resumen\">\r\n                @if (total(); as amounts;) {\r\n\r\n                    <div class=\"items__footer__resumen__title\">Resumen</div>\r\n\r\n                    <div class=\"contents\">\r\n                        <p class=\"items__resumen__label\">Costo directo (S/.)</p>\r\n                        <p>:</p>\r\n                        <p class=\"items__resumen__value\"> {{ amounts | number : \".2-2\" }}</p>\r\n                    </div>\r\n\r\n                    <div class=\"contents\">\r\n                        <p class=\"items__resumen__label\">Descuento (S/.)</p>\r\n                        <p>:</p>\r\n                        <p class=\"items__resumen__value\">0.00</p>\r\n                    </div>\r\n\r\n                    <div class=\"contents\">\r\n                        <p class=\"items__resumen__label\">IGV (18%) (S/.)</p>\r\n                        <p>:</p>\r\n                        <p class=\"items__resumen__value\">{{ (amounts * 0.18) | number : \".2-2\" }}</p>\r\n                    </div>\r\n\r\n                    <div class=\"contents\">\r\n                        <p class=\"items__resumen__label\">Total (S/.)</p>\r\n                        <p>:</p>\r\n                        <p class=\"items__resumen__value\">{{ (amounts + (amounts * 0.18)) | number : \"0.2-2\" }}</p>\r\n                    </div>\r\n                    @if((amounts + (amounts * 0.18)) >= 700){\r\n                        <div class=\"contents\">\r\n                            <p class=\"items__resumen__label\">Detracción (S/.)</p>\r\n                            <p>:</p>\r\n                            <p class=\"items__resumen__value\">{{ ((amounts + (amounts * 0.18))* 0.1) | number : \"0.2-2\" }}</p>\r\n                        </div>\r\n                        <div class=\"contents\">\r\n                            <p class=\"items__resumen__label\">Recurrente (S/.)</p>\r\n                            <p>:</p>\r\n                            <p class=\"items__resumen__value\">{{ ((amounts + (amounts * 0.18))+ ((amounts + (amounts * 0.18))* 0.1)) | number : \"0.2-2\" }}</p>\r\n                        </div>\r\n                    }\r\n                }\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n</app-item-form-template>\r\n"
        },
        {
            "name": "ClientDocumentPaymentCreateComponent",
            "id": "component-ClientDocumentPaymentCreateComponent-7782fc6a648c46af5191a222a67f35f31f92ffc515ff9507fbda9a471086479a86cc7884d1280e1c2c84a49b6df424abee0032dd85fd8054d4a805b486d295c4",
            "file": "src/app/modules/organization/clients/client-documents/pages/client-document-payment-create/client-document-payment-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-document-payment-create",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-document-payment-create.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "amountsByClient",
                    "defaultValue": "toSignal(from(this.fetch.get<AmountsByClient>(`client-payment/client/${this.activatedRoute.snapshot.parent?.paramMap.get('id')}`)))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        type: 'create',\r\n        titleModule: 'cliente',\r\n        formGroup: clientFormGroup(),\r\n        server: { url: 'client' },\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "fetch",
                    "defaultValue": "inject(FetchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "ClientDocumentPaymentFormComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Signal, WritableSignal, inject, signal } from '@angular/core';\r\nimport { ItemFormConfiguration, ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\nimport { ClientDocumentPaymentFormComponent } from '../../components/client-document-payment-form/client-document-payment-form.component';\r\nimport { clientFormGroup } from '../../../helpers';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { toSignal } from '@angular/core/rxjs-interop';\r\nimport { from } from 'rxjs';\r\n\r\nexport interface AmountsByClient {\r\n    recaudation_amount: number;\r\n    detraction_amount: number;\r\n    retention_amount: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-client-document-payment-create',\r\n    standalone: true,\r\n    imports: [ItemFormTemplateComponent, ClientDocumentPaymentFormComponent],\r\n    templateUrl: './client-document-payment-create.component.html',\r\n    styleUrl: './client-document-payment-create.component.scss'\r\n})\r\nexport class ClientDocumentPaymentCreateComponent {\r\n    private fetch = inject(FetchService);\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    public amountsByClient = toSignal(from(this.fetch.get<AmountsByClient>(`client-payment/client/${this.activatedRoute.snapshot.parent?.paramMap.get('id')}`)))\r\n    public configuration: ItemFormConfiguration = {\r\n        type: 'create',\r\n        titleModule: 'cliente',\r\n        formGroup: clientFormGroup(),\r\n        server: { url: 'client' },\r\n    };\r\n}\r\n",
            "styleUrl": "./client-document-payment-create.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-form-template [configuration]=\"configuration\">\r\n    <app-client-document-payment-form [AmountsByClient]=\"amountsByClient\" />\r\n</app-item-form-template>"
        },
        {
            "name": "ClientDocumentPaymentFormComponent",
            "id": "component-ClientDocumentPaymentFormComponent-2ee2054744d3eabba98fb69ad7a0d8d5de74829cdaeb773bd97a484c8f959c6b4d92d43ee0d18f5109a8f42ae8583199ab07190e9ff61fad156fed7df64c671c",
            "file": "src/app/modules/organization/clients/client-documents/components/client-document-payment-form/client-document-payment-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-document-payment-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-document-payment-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "AmountsByClient",
                    "defaultValue": "input.required<Signal<AmountsByClient|undefined>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "documents",
                    "defaultValue": "signal([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<Document[]>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "documentsToPay",
                    "defaultValue": "signal([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<Document[]>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "fetch",
                    "defaultValue": "inject(FetchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sumIgv",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "sumIgvInit",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "sumSubtotal",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "sumSubtotalInit",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "totalsToPay",
                    "defaultValue": "signal({\r\n        subtotal: 0,\r\n        igv: 0,\r\n        total: 0\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<any[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<any[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDocuments",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sumItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "CdkDropList"
                },
                {
                    "name": "CdkDrag"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Signal, WritableSignal, inject, input, signal } from '@angular/core';\r\nimport { Document } from '@interface/document';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { PaginatorData } from '@interface/paginator';\r\nimport { AsyncPipe, DecimalPipe } from '@angular/common';\r\nimport { CdkDrag, CdkDragDrop, CdkDropList, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AmountsByClient } from '../../pages/client-document-payment-create/client-document-payment-create.component';\r\n\r\n@Component({\r\n    selector: 'app-client-document-payment-form',\r\n    standalone: true,\r\n    imports: [\r\n        AsyncPipe,\r\n        CdkDropList,\r\n        CdkDrag,\r\n        DecimalPipe\r\n    ],\r\n    templateUrl: './client-document-payment-form.component.html',\r\n    styleUrl: './client-document-payment-form.component.scss',\r\n})\r\nexport class ClientDocumentPaymentFormComponent {\r\n    public AmountsByClient = input.required<Signal<AmountsByClient|undefined>>();\r\n    private fetch = inject(FetchService);\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    public documents: WritableSignal<Document[]> = signal([]);\r\n    public documentsToPay: WritableSignal<Document[]> = signal([]);\r\n\r\n    public sumSubtotal: number = 0;\r\n    public sumIgv: number = 0;\r\n    public sumSubtotalInit: number = 0;\r\n    public sumIgvInit: number = 0;\r\n\r\n    public totalsToPay = signal({\r\n        subtotal: 0,\r\n        igv: 0,\r\n        total: 0\r\n    });\r\n\r\n    ngOnInit() {\r\n        this.getDocuments();\r\n    }\r\n    ngOnChanges() {\r\n        this.sumItems()\r\n    }\r\n\r\n    private async getDocuments() {\r\n        const clientId = this.activatedRoute.snapshot.parent?.paramMap.get('id');\r\n        this.documents.set((await this.fetch.get<PaginatorData<Document>>(`document?relations=documentItems&client_id=${clientId}`)).data);\r\n        this.sumItems();\r\n    }\r\n\r\n    drop(event: CdkDragDrop<any[]>) {\r\n        if (event.previousContainer === event.container) {\r\n            moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n        } else {\r\n            transferArrayItem(\r\n                event.previousContainer.data,\r\n                event.container.data,\r\n                event.previousIndex,\r\n                event.currentIndex,\r\n            );\r\n            this.sumItems();\r\n        }\r\n    }\r\n\r\n    public sumItems() {\r\n\r\n        this.sumSubtotalInit = (this.documents() ?? []).reduce((previousValue, item) => {\r\n            return previousValue + Number(item.total_value)\r\n        }, 0);\r\n        this.sumIgvInit = (this.documents() ?? []).reduce((previousValue, item) => {\r\n            return previousValue + Number(item.total_taxes)\r\n        }, 0);\r\n        this.sumSubtotal = (this.documentsToPay() ?? []).reduce((previousValue, item) => {\r\n            return previousValue + Number(item.total_value)\r\n        }, 0);\r\n        this.sumIgv = (this.documentsToPay() ?? []).reduce((previousValue, item) => {\r\n            return previousValue + Number(item.total_taxes)\r\n        }, 0);\r\n\r\n        const documentToPay = this.documentsToPay();\r\n        const subtotalToPay = documentToPay.reduce((previousValue, item) => previousValue + Number(item.total_value), 0);\r\n        const igvToPay = documentToPay.reduce((previousValue, item) => previousValue + Number(item.total_value), 0);\r\n        this.totalsToPay.set({\r\n            subtotal: subtotalToPay,\r\n            igv: igvToPay,\r\n            total: subtotalToPay + igvToPay\r\n        });\r\n    }\r\n}\r\n",
            "styleUrl": "./client-document-payment-form.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "\r\n    <ng-container beforeContent>\r\n\r\n        <div class=\"container__items\">\r\n            <!-- ----------------- -->\r\n            <!-- ----------------- -->\r\n            <div class=\"container__block\" cdkDropList #todoList=\"cdkDropList\" [cdkDropListData]=\"documents()\" [cdkDropListConnectedTo]=\"[doneList]\" (cdkDropListDropped)=\"drop($event)\">\r\n                <div class=\"block__title\">\r\n                    Items disponibles ({{documents().length}})\r\n                </div>\r\n\r\n                <div class=\"items\">\r\n                    <div class=\"item__row item__row-header\">\r\n                        <div class=\"item__row__cell\">Nombre</div>\r\n                        <div class=\"item__row__cell\" align=\"right\">Subtotal</div>\r\n                        <div class=\"item__row__cell\" align=\"right\">IGV</div>\r\n                        <div class=\"item__row__cell item__row__cell-end\" align=\"right\">Rec.</div>\r\n                        <div class=\"item__row__cell item__row__cell-end\" align=\"right\">Det.</div>\r\n                        <div class=\"item__row__cell item__row__cell-end\" align=\"right\">Ret.</div>\r\n                        <div class=\"item__row__cell item__row__cell-end\" align=\"right\">Total</div>\r\n                    </div>\r\n                    @for (item of documents(); track item; let i = $index) {\r\n                        <div class=\"item__row\" cdkDrag>\r\n                            @for (document_item of item.document_items; track document_item; let i = $index){\r\n                                <div class=\"item__row__cell\">\r\n                                    {{ document_item.description }} |\r\n                                </div>\r\n                            }\r\n                            <div class=\"item__row__cell\" align=\"right\">\r\n                                {{ item.total_value }}\r\n                            </div>\r\n                            <div class=\"item__row__cell\" align=\"right\">\r\n                                {{ item.total_taxes }}\r\n                            </div>\r\n                            <div class=\"item__row__cell\" align=\"right\">\r\n                                {{ item.total_taxes }}\r\n                            </div>\r\n                            <div class=\"item__row__cell\" align=\"right\">\r\n                                {{ item.total_taxes }}\r\n                            </div>\r\n                            <div class=\"item__row__cell\" align=\"right\">\r\n                                {{ item.total_taxes }}\r\n                            </div>\r\n                            <div class=\"item__row__cell item__row__cell-end\" align=\"right\">\r\n                                {{ item.total }}\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n                <br>\r\n                @if (documents().length) {\r\n                <div class=\"items__footer\">\r\n                    <!-- <div class=\"items__footer__options\">\r\n                        <mat-slide-toggle>¿Items incluyen IGV?</mat-slide-toggle>\r\n                    </div> -->\r\n\r\n                    <div class=\"items__footer__resumen\">\r\n\r\n                        <div class=\"items__resumen__label\">Subtotal</div>\r\n                        <div>:</div>\r\n                        <div class=\"items__resumen__value\">{{sumSubtotalInit |number:'.2-2'}}</div>\r\n\r\n                        <div class=\"items__resumen__label\">IGV (18%)</div>\r\n                        <div>:</div>\r\n                        <div class=\"items__resumen__value\">{{sumIgvInit |number:'.2-2'}}</div>\r\n\r\n                        <div class=\"items__resumen__label\">Total</div>\r\n                        <div>:</div>\r\n                        <div class=\"items__resumen__value\">{{(sumSubtotalInit + sumIgvInit) |number:'.2-2'}}</div>\r\n\r\n                    </div>\r\n                </div>\r\n                }\r\n                <p class=\"body-small\"><i>Arrastrar a la derecha para seleccionar</i></p>\r\n            </div>\r\n            <!-- ----------------- -->\r\n            <!-- ----------------- -->\r\n            <div class=\"container__block\" cdkDropList #doneList=\"cdkDropList\" [cdkDropListData]=\"documentsToPay()\" [cdkDropListConnectedTo]=\"[todoList]\" (cdkDropListDropped)=\"drop($event)\">\r\n\r\n                <div class=\"block__title\">\r\n                    Items seleccionados ({{documentsToPay().length}})\r\n                </div>\r\n\r\n                <div class=\"items\">\r\n                    <div class=\"item__row item__row-header\">\r\n                        <div class=\"item__row__cell\">Nombre</div>\r\n                        <div class=\"item__row__cell\" align=\"right\">Subtotal</div>\r\n                        <div class=\"item__row__cell\" align=\"right\">IGV</div>\r\n                        <div class=\"item__row__cell item__row__cell-end\" align=\"right\">Rec.</div>\r\n                        <div class=\"item__row__cell item__row__cell-end\" align=\"right\">Det.</div>\r\n                        <div class=\"item__row__cell item__row__cell-end\" align=\"right\">Ret.</div>\r\n                        <div class=\"item__row__cell item__row__cell-end\" align=\"right\">Total</div>\r\n                    </div>\r\n                    @for (item of documentsToPay(); track item; let i = $index) {\r\n                        <div class=\"item__row\" cdkDrag>\r\n                            @for (document_item of item.document_items; track document_item; let i = $index){\r\n                                <div class=\"item__row__cell\">\r\n                                    {{ document_item.description }} |\r\n                                </div>\r\n                            }\r\n                            <div class=\"item__row__cell\" align=\"right\">\r\n                                {{ item.total_value }}\r\n                            </div>\r\n                            <div class=\"item__row__cell\" align=\"right\">\r\n                                {{ item.total_taxes }}\r\n                            </div>\r\n                            <div class=\"item__row__cell\" align=\"right\">\r\n                                {{ item.total_taxes }}\r\n                            </div>\r\n                            <div class=\"item__row__cell\" align=\"right\">\r\n                                {{ item.total_taxes }}\r\n                            </div>\r\n                            <div class=\"item__row__cell\" align=\"right\">\r\n                                {{ item.total_taxes }}\r\n                            </div>\r\n                            <div class=\"item__row__cell item__row__cell-end\" align=\"right\">\r\n                                {{ item.total }}\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n\r\n                @if (documentsToPay().length) {\r\n                <div class=\"items__footer\">\r\n                    <!-- <div class=\"items__footer__options\">\r\n                        <mat-slide-toggle>¿Items incluyen IGV?</mat-slide-toggle>\r\n                    </div> -->\r\n\r\n                    <div class=\"items__footer__resumen\">\r\n\r\n                        <div class=\"items__resumen__label\">Subtotal</div>\r\n                        <div>:</div>\r\n                        <div class=\"items__resumen__value\">{{sumSubtotal |number:'.2-2'}}</div>\r\n\r\n                        <div class=\"items__resumen__label\">IGV (18%)</div>\r\n                        <div>:</div>\r\n                        <div class=\"items__resumen__value\">{{sumIgv |number:'.2-2'}}</div>\r\n\r\n                        <div class=\"items__resumen__label\">Total</div>\r\n                        <div>:</div>\r\n                        <div class=\"items__resumen__value\">{{(sumSubtotal + sumIgv) |number:'.2-2'}}</div>\r\n\r\n                    </div>\r\n                </div>\r\n                }\r\n            </div>\r\n            <!-- ----------------- -->\r\n            <!-- ----------------- -->\r\n        </div>\r\n\r\n    </ng-container>\r\n"
        },
        {
            "name": "ClientEditPageComponent",
            "id": "component-ClientEditPageComponent-5f4af937c0a7bb5f6bc7ff45745bf57595224753f6e2f01f62f29e08b56393ac91c4635c33f0d2912d2e1bcf70bf29423b4d22957403e384b927728b7561bc81",
            "file": "src/app/modules/organization/clients/pages/client-edit-page/client-edit-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-edit-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-edit-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "abortController",
                    "defaultValue": "new AbortController()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AbortController",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "ClientCreatePageComponent"
                    }
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        type: 'create',\r\n        titleModule: 'cliente',\r\n        formGroup: clientFormGroup(),\r\n        fields: DEFAULT_DISPLAY_FIELDS_FORM_CLIENT,\r\n        server: { url: 'client' },\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "ClientCreatePageComponent"
                    }
                },
                {
                    "name": "fetch",
                    "defaultValue": "inject(FetchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "ClientCreatePageComponent"
                    }
                },
                {
                    "name": "minMaxlengthDocumentNumber",
                    "defaultValue": "12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "ClientCreatePageComponent"
                    }
                },
                {
                    "name": "searchDocumentNumber",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "ClientCreatePageComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ClientCreatePageComponent"
                    }
                },
                {
                    "name": "updateValidatorsForDocumentNumberCtrl",
                    "args": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ClientCreatePageComponent"
                    }
                },
                {
                    "name": "verifyDocuments",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "inheritance": {
                        "file": "ClientCreatePageComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { ClientCreatePageComponent } from '../client-create-page/client-create-page.component';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\n\r\n@Component({\r\n  selector: 'app-client-edit-page',\r\n  standalone: true,\r\n  imports: [ItemFormTemplateComponent],\r\n  templateUrl: './client-edit-page.component.html',\r\n  styleUrl: './client-edit-page.component.scss'\r\n})\r\nexport class ClientEditPageComponent extends ClientCreatePageComponent{\r\n    private activatedRoute = inject(ActivatedRoute);\r\n\r\n    constructor(\r\n    ) {\r\n        super();\r\n        this.configuration.type = 'update';\r\n        this.configuration.hiddeFields = true;\r\n    }\r\n}\r\n",
            "styleUrl": "./client-edit-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "extends": [
                "ClientCreatePageComponent"
            ],
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "ClientListPageComponent",
            "id": "component-ClientListPageComponent-e0830a7f0aec5c4bfc8ebd383729f2e30ea632d891afd4f54ab89b87e98fabd571e25738a046e88a5446e4d0d594ffda3fef5f71ea9abd688b40005b664c1e00",
            "file": "src/app/modules/organization/clients/pages/client-list-page/client-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-list-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configList",
                    "defaultValue": "{\r\n        title: 'Clientes',\r\n        server: {\r\n            url: 'client',\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Cliente / N° Documento',\r\n                sort: { key: 'name' },\r\n                routerLinkValue: { url: (item) => `../view/${item.id}` },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.name ? item.name : '--',\r\n                displayAdditionalValueFn: (item) => `${item.document_type.toUpperCase()}: ${item.document_number}`\r\n            }),\r\n            emailColumn({\r\n                title: 'Email',\r\n                sort: { key: 'email' },\r\n                gridColumn: 'auto',\r\n                displayValueFn: (item) => item.email,\r\n            }),\r\n            phoneColumn({\r\n                title: 'Teléfono',\r\n                sort: { key: 'phone' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.phone,\r\n            }),\r\n            phoneColumn({\r\n                title: 'Celular',\r\n                sort: { key: 'cellphone' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.cellphone,\r\n            }),\r\n            textColumn({\r\n                title: 'Dirección',\r\n                sort: { key: 'address' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.address,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<Client>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, signal } from '@angular/core';\r\nimport { ItemListTemplateComponent, ItemListConfiguration, itemCreatedAtColumn, itemStatusColumn, itemUpdatedAtColumn, emailColumn, phoneColumn, textColumn, clickEventActionButton } from '@component/item-list-template/item-list-template.component';\r\nimport { Client } from '@interface/client';\r\n\r\n@Component({\r\n    selector: 'app-client-list-page',\r\n    standalone: true,\r\n    imports: [ItemListTemplateComponent],\r\n    templateUrl: './client-list-page.component.html',\r\n    styleUrl: './client-list-page.component.scss'\r\n})\r\nexport class ClientListPageComponent {\r\n    public configList: ItemListConfiguration<Client> = {\r\n        title: 'Clientes',\r\n        server: {\r\n            url: 'client',\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Cliente / N° Documento',\r\n                sort: { key: 'name' },\r\n                routerLinkValue: { url: (item) => `../view/${item.id}` },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.name ? item.name : '--',\r\n                displayAdditionalValueFn: (item) => `${item.document_type.toUpperCase()}: ${item.document_number}`\r\n            }),\r\n            emailColumn({\r\n                title: 'Email',\r\n                sort: { key: 'email' },\r\n                gridColumn: 'auto',\r\n                displayValueFn: (item) => item.email,\r\n            }),\r\n            phoneColumn({\r\n                title: 'Teléfono',\r\n                sort: { key: 'phone' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.phone,\r\n            }),\r\n            phoneColumn({\r\n                title: 'Celular',\r\n                sort: { key: 'cellphone' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.cellphone,\r\n            }),\r\n            textColumn({\r\n                title: 'Dirección',\r\n                sort: { key: 'address' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.address,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }\r\n}\r\n",
            "styleUrl": "./client-list-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-list-template [configuration]=\"configList\"/>\r\n"
        },
        {
            "name": "ClientPaymentCreatePageComponent",
            "id": "component-ClientPaymentCreatePageComponent-c7f729ce1114825449408dc810add1d48347be0ab8ea112c2f231677d1608b9d4e3205d904c59dc7f3a4e5ba252cd6a73a6a9df1f1ab973ddf1e3d87b35397bf",
            "file": "src/app/modules/organization/clients/client-payments/pages/client-payment-create-page/client-payment-create-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-payment-create-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-payment-create-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        type: 'create',\r\n        titleModule: 'pagos',\r\n        formGroup: clientPaymentFormGroup({\r\n            client_id: Number(this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id')) ?? null,\r\n        }),\r\n        server: { url: 'client-payment' },\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "ClientPaymentFormPageComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\nimport { ItemFormConfiguration } from '@component/item-form-template/item-form-template.component';\r\nimport { ClientPaymentFormPageComponent } from '../../components/client-payment-form-page/client-payment-form-page.component';\r\nimport { clientPaymentFormGroup } from '../../helpers';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-client-payment-create-page',\r\n    standalone: true,\r\n    imports: [ItemFormTemplateComponent, ClientPaymentFormPageComponent],\r\n    templateUrl: './client-payment-create-page.component.html',\r\n    styleUrl: './client-payment-create-page.component.scss'\r\n})\r\nexport class ClientPaymentCreatePageComponent {\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    public configuration: ItemFormConfiguration = {\r\n        type: 'create',\r\n        titleModule: 'pagos',\r\n        formGroup: clientPaymentFormGroup({\r\n            client_id: Number(this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id')) ?? null,\r\n        }),\r\n        server: { url: 'client-payment' },\r\n    };\r\n}\r\n",
            "styleUrl": "./client-payment-create-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-form-template [configuration]=\"configuration\">\r\n    <app-client-payment-form-page [form]=\"configuration.formGroup\"></app-client-payment-form-page>\r\n</app-item-form-template>\r\n"
        },
        {
            "name": "ClientPaymentFormPageComponent",
            "id": "component-ClientPaymentFormPageComponent-8cd9718d7ee2f49e0fcc2d68d92bb2d249de76ae083a1e33d3ad8a124343380663ee6a5ee0c5f6718cb2fdcec4452cbc91a617963bb3df1916713e7b5c80dc1b",
            "file": "src/app/modules/organization/clients/client-payments/components/client-payment-form-page/client-payment-form-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-payment-form-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-payment-form-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "bankAutocompleteLocalConfiguration",
                    "defaultValue": "{\r\n        textLabel: 'Banco',\r\n        local: { nameModuleDatabase: NameModuleDatabase.Banks }\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputAutocompleteLocalConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "boxOpeningLocalConfiguration",
                    "defaultValue": "{\r\n        textLabel: 'Caja',\r\n        local: { nameModuleDatabase: NameModuleDatabase.BoxOpenings },\r\n        displayTextFn: (item: BoxOpening)=> item.box?.name ?? '--',\r\n        // displayTextFn: (box_opening: BoxOpening) => box_opening.box ? `<div class=\"grid\">\r\n        //     <div class=\"label-large\">\r\n        //         ${box_opening?.box?.name}\r\n        //         <span class=\"label-medium\">(${box_opening?.box?.type})</span>\r\n        //     </div>\r\n        //     <div class=\"body-small flex gap-2\">\r\n        //         <span class=\"py-px px-2 rounded-full bg-tertiary-container text-on-tertiary-container\">\r\n        //              ${(box_opening?.box?.account?.coin ?? box_opening?.box?.coin)}\r\n        //         </span>\r\n        //     </div>\r\n        //     </div>` : '--',\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputAutocompleteLocalConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "clientAccountSelectServerConfiguration",
                    "defaultValue": "{\r\n        textLabel: 'Cuenta',\r\n        server: {\r\n            url: 'client-account',\r\n            queryParams: `client_id=${this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id')}`\r\n        },\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSelectServerConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "paymentTypeSelectConfiguration",
                    "defaultValue": "{\r\n        textLabel: 'Tipo de pago',\r\n        data: [\r\n            { id: 'transferencia', name: 'Transferencia' },\r\n            { id: 'depósito', name: 'Depósito' },\r\n            { id: 'efectivo', name: 'Efectivo' },\r\n            { id: 'cheque', name: 'Cheque' },\r\n        ],\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSelectConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 103,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "voucherTypeSelectConfiguration",
                    "defaultValue": "{\r\n        textLabel: 'Tipo de comprobante',\r\n        data: [\r\n            { id: 'boleta', name: 'Boleta' },\r\n            { id: 'factura', name: 'Factura' },\r\n        ],\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSelectConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "InputSelectTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "InputAutocompleteTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "SelectFileComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, inject } from '@angular/core';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { InputAutocompleteLocalConfiguration, InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectConfiguration, InputSelectServerConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { SelectFileComponent } from '@component/select-file/select-file.component';\r\nimport { BoxMovementTypeEnum } from '@interface/boxMovement';\r\nimport { BoxOpening } from '@interface/boxOpening';\r\nimport { NameModuleDatabase } from '@service/database-storage.service';\r\n\r\n@Component({\r\n    selector: 'app-client-payment-form-page',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        ReactiveFormsModule,\r\n        MatDatepickerModule,\r\n        MatSelectModule,\r\n        InputSelectTemplateComponent,\r\n        InputAutocompleteTemplateComponent,\r\n        SelectFileComponent\r\n    ],\r\n    templateUrl: './client-payment-form-page.component.html',\r\n    styleUrl: './client-payment-form-page.component.scss'\r\n})\r\nexport class ClientPaymentFormPageComponent {\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    @Input() public form!: FormGroup;\r\n\r\n    get boxMovementFormGroup(): FormGroup {\r\n        return this.form.get('box_movement') as FormGroup;\r\n    }\r\n    get clientAccountIdCtrl(): FormControl {\r\n        return this.form.get('client_account_id') as FormControl;\r\n    }\r\n    get bankIdCtrl(): FormControl {\r\n        return this.boxMovementFormGroup.get('bank_id') as FormControl;\r\n    }\r\n\r\n    get boxOpeningIdCtrl(): FormControl {\r\n        return this.boxMovementFormGroup.get('box_opening_id') as FormControl;\r\n    }\r\n\r\n    get amountCtrl(): FormControl {\r\n        return this.boxMovementFormGroup.get('amount') as FormControl;\r\n    }\r\n\r\n    get paymentTypeCtrl(): FormControl {\r\n        return this.boxMovementFormGroup.get('payment_type') as FormControl;\r\n    }\r\n\r\n    get voucherTypeCtrl(): FormControl {\r\n        return this.boxMovementFormGroup.get('voucher_type') as FormControl;\r\n    }\r\n    get voucherFileCtrl(): FormControl {\r\n        return this.boxMovementFormGroup.get('voucher_file') as FormControl;\r\n    }\r\n    get toBoxOpeningIdCtrl(): FormControl | null {\r\n        return this.boxMovementFormGroup.get('to_box_opening_id') as FormControl;\r\n    }\r\n    public readonly clientAccountSelectServerConfiguration: InputSelectServerConfiguration = {\r\n        textLabel: 'Cuenta',\r\n        server: {\r\n            url: 'client-account',\r\n            queryParams: `client_id=${this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id')}`\r\n        },\r\n    }\r\n\r\n    public readonly bankAutocompleteLocalConfiguration: InputAutocompleteLocalConfiguration = {\r\n        textLabel: 'Banco',\r\n        local: { nameModuleDatabase: NameModuleDatabase.Banks }\r\n    }\r\n    public readonly boxOpeningLocalConfiguration: InputAutocompleteLocalConfiguration = {\r\n        textLabel: 'Caja',\r\n        local: { nameModuleDatabase: NameModuleDatabase.BoxOpenings },\r\n        displayTextFn: (item: BoxOpening)=> item.box?.name ?? '--',\r\n        // displayTextFn: (box_opening: BoxOpening) => box_opening.box ? `<div class=\"grid\">\r\n        //     <div class=\"label-large\">\r\n        //         ${box_opening?.box?.name}\r\n        //         <span class=\"label-medium\">(${box_opening?.box?.type})</span>\r\n        //     </div>\r\n        //     <div class=\"body-small flex gap-2\">\r\n        //         <span class=\"py-px px-2 rounded-full bg-tertiary-container text-on-tertiary-container\">\r\n        //              ${(box_opening?.box?.account?.coin ?? box_opening?.box?.coin)}\r\n        //         </span>\r\n        //     </div>\r\n        //     </div>` : '--',\r\n    }\r\n    public readonly voucherTypeSelectConfiguration: InputSelectConfiguration = {\r\n        textLabel: 'Tipo de comprobante',\r\n        data: [\r\n            { id: 'boleta', name: 'Boleta' },\r\n            { id: 'factura', name: 'Factura' },\r\n        ],\r\n    }\r\n    public readonly paymentTypeSelectConfiguration: InputSelectConfiguration = {\r\n        textLabel: 'Tipo de pago',\r\n        data: [\r\n            { id: 'transferencia', name: 'Transferencia' },\r\n            { id: 'depósito', name: 'Depósito' },\r\n            { id: 'efectivo', name: 'Efectivo' },\r\n            { id: 'cheque', name: 'Cheque' },\r\n        ],\r\n    }\r\n}\r\n",
            "styleUrl": "./client-payment-form-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "boxMovementFormGroup": {
                    "name": "boxMovementFormGroup",
                    "getSignature": {
                        "name": "boxMovementFormGroup",
                        "type": "",
                        "returnType": "FormGroup",
                        "line": 37
                    }
                },
                "clientAccountIdCtrl": {
                    "name": "clientAccountIdCtrl",
                    "getSignature": {
                        "name": "clientAccountIdCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 40
                    }
                },
                "bankIdCtrl": {
                    "name": "bankIdCtrl",
                    "getSignature": {
                        "name": "bankIdCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 43
                    }
                },
                "boxOpeningIdCtrl": {
                    "name": "boxOpeningIdCtrl",
                    "getSignature": {
                        "name": "boxOpeningIdCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 47
                    }
                },
                "amountCtrl": {
                    "name": "amountCtrl",
                    "getSignature": {
                        "name": "amountCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 51
                    }
                },
                "paymentTypeCtrl": {
                    "name": "paymentTypeCtrl",
                    "getSignature": {
                        "name": "paymentTypeCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 55
                    }
                },
                "voucherTypeCtrl": {
                    "name": "voucherTypeCtrl",
                    "getSignature": {
                        "name": "voucherTypeCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 59
                    }
                },
                "voucherFileCtrl": {
                    "name": "voucherFileCtrl",
                    "getSignature": {
                        "name": "voucherFileCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 62
                    }
                },
                "toBoxOpeningIdCtrl": {
                    "name": "toBoxOpeningIdCtrl",
                    "getSignature": {
                        "name": "toBoxOpeningIdCtrl",
                        "type": "",
                        "returnType": "FormControl | null",
                        "line": 65
                    }
                }
            },
            "templateData": "<div [formGroup]=\"form\" class=\"form__content__inputs\">\r\n    <div [formGroup]=\"boxMovementFormGroup\" class=\"contents\">\r\n        <app-input-select-template class=\"col-span-full @2xl:col-span-3\"\r\n            [configuration]=\"clientAccountSelectServerConfiguration\" [control]=\"clientAccountIdCtrl\" />\r\n\r\n        <app-input-autocomplete-template class=\"col-span-6 @2xl:col-span-3\" [idControl]=\"boxOpeningIdCtrl\"\r\n            [configuration]=\"boxOpeningLocalConfiguration\" />\r\n\r\n        <mat-form-field class=\"col-span-3 @2xl:col-span-2\">\r\n            <mat-label>Monto</mat-label>\r\n            <input matInput type=\"number\" formControlName=\"amount\" [min]=\"0\" placeholder=\"Monto\">\r\n            <mat-error>Campo requerido</mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field class=\"col-span-6 @2xl:col-span-2\">\r\n            <mat-label>F. de la operación</mat-label>\r\n            <input matInput placeholder=\"Fecha de la operación\" formControlName=\"payment_date\" required\r\n                [matDatepicker]=\"picker\">\r\n            <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n            <mat-datepicker #picker></mat-datepicker>\r\n            <mat-error>Campo requerido</mat-error>\r\n        </mat-form-field>\r\n\r\n        <app-input-select-template class=\"relative col-span-6 @2xl:col-span-2\" [control]=\"paymentTypeCtrl\"\r\n            [configuration]=\"paymentTypeSelectConfiguration\" />\r\n\r\n        @if (paymentTypeCtrl.value =='transferencia' || paymentTypeCtrl.value =='depósito') {\r\n        <app-input-select-template class=\"col-span-6 @2xl:col-span-3\" [control]=\"bankIdCtrl\"\r\n            [configuration]=\"bankAutocompleteLocalConfiguration\" />\r\n        }\r\n\r\n        @if (paymentTypeCtrl.value !='efectivo' && paymentTypeCtrl.value) {\r\n        <mat-form-field class=\"col-span-3 @2xl:col-span-3\">\r\n            <mat-label>Código de la operación</mat-label>\r\n            <input matInput type=\"text\" formControlName=\"operation_code\" placeholder=\"Código de la operación\">\r\n            <mat-error>Campo requerido</mat-error>\r\n        </mat-form-field>\r\n        }\r\n\r\n        <!-- @if (form.get('concept')) {\r\n        <mat-form-field class=\"col-span-full\">\r\n            <mat-label>Concepto del movimiento</mat-label>\r\n            <textarea matInput formControlName=\"concept\" id=\"\" rows=\"2\" placeholder=\"Concepto\"></textarea>\r\n            <mat-error>Campo requerido</mat-error>\r\n        </mat-form-field>\r\n        } -->\r\n\r\n        <app-input-select-template class=\"relative col-span-6 @2xl:col-span-3\" [control]=\"voucherTypeCtrl\"\r\n            [configuration]=\"voucherTypeSelectConfiguration\" />\r\n\r\n        <mat-form-field class=\"col-span-3\">\r\n            <mat-label>N° comprobante</mat-label>\r\n            <input matInput type=\"text\" formControlName=\"invoice_number\" placeholder=\"N° factura\">\r\n            <mat-error>Campo requerido</mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field class=\"col-span-full\">\r\n            <mat-label>Observación</mat-label>\r\n            <textarea matInput type=\"text\" formControlName=\"observation\" rows=\"1\"></textarea>\r\n            <mat-error>Campo requerido</mat-error>\r\n        </mat-form-field>\r\n\r\n        <!-- <app-select-file class=\"col-span-full mb-3\" [fileCtrl]=\"voucherFileCtrl\"></app-select-file> -->\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "ClientPaymentListPageComponent",
            "id": "component-ClientPaymentListPageComponent-50c0c5333c935c74d49b221478b56cf53a92d7ef768e9ed1a05a9ae041247ee1d6c6278fa11ad5f1254bdc8d71bf9df85e34fa555716a9c9f08bb0fe552fc4f9",
            "file": "src/app/modules/organization/clients/client-payments/pages/client-payment-list-page/client-payment-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-payment-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-payment-list-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "listConfiguration",
                    "defaultValue": "{\r\n        title: 'Documentos',\r\n        server: {\r\n          url: 'client-payment',\r\n          queryParams: {relations: 'clientAccount,boxMovement'}\r\n        },\r\n        columns: signal([\r\n          textColumn({\r\n            title: 'Código',\r\n            displayValueFn: (item) => item.box_movement?.code,\r\n          }),\r\n          textColumn({\r\n            title: 'Cuenta',\r\n            displayValueFn: (item) => item.client_account?.name,\r\n            gridColumn: '1fr',\r\n          }),\r\n          titlecaseColumn({\r\n            title: 'Tipo pago',\r\n            displayValueFn: (item) => item.box_movement?.payment_type,\r\n          }),\r\n          dateColumn({\r\n            title: 'Fecha pago',\r\n            displayValueFn: (item) => item.box_movement?.payment_date,\r\n          }),\r\n          userColumn({\r\n            title: 'Usuario',\r\n            displayValueFn: (item) => item.box_movement?.user_id,\r\n          }),\r\n          titlecaseColumn({\r\n            title: 'Moneda',\r\n            displayValueFn: (item) => item.box_movement?.coin ?? item.client_account?.coin,\r\n          }),\r\n          numberColumn({\r\n            title: 'Monto',\r\n            displayValueFn: (item) => item.box_movement?.amount,\r\n          }),\r\n          itemCreatedAtColumn(),\r\n          itemUpdatedAtColumn(),\r\n          itemStatusColumn(),\r\n        ])\r\n      }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<ClientPayment>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, signal } from '@angular/core';\r\nimport { ItemListConfiguration, ItemListTemplateComponent, dateColumn, itemCreatedAtColumn, itemStatusColumn, itemUpdatedAtColumn, numberColumn, textColumn, titlecaseColumn, userColumn } from '@component/item-list-template/item-list-template.component';\r\nimport { ClientPayment } from '@interface/clientPayment';\r\n\r\n@Component({\r\n  selector: 'app-client-payment-list-page',\r\n  standalone: true,\r\n  imports: [ItemListTemplateComponent],\r\n  templateUrl: './client-payment-list-page.component.html',\r\n  styleUrl: './client-payment-list-page.component.scss'\r\n})\r\nexport class ClientPaymentListPageComponent {\r\n    public listConfiguration: ItemListConfiguration<ClientPayment> = {\r\n        title: 'Documentos',\r\n        server: {\r\n          url: 'client-payment',\r\n          queryParams: {relations: 'clientAccount,boxMovement'}\r\n        },\r\n        columns: signal([\r\n          textColumn({\r\n            title: 'Código',\r\n            displayValueFn: (item) => item.box_movement?.code,\r\n          }),\r\n          textColumn({\r\n            title: 'Cuenta',\r\n            displayValueFn: (item) => item.client_account?.name,\r\n            gridColumn: '1fr',\r\n          }),\r\n          titlecaseColumn({\r\n            title: 'Tipo pago',\r\n            displayValueFn: (item) => item.box_movement?.payment_type,\r\n          }),\r\n          dateColumn({\r\n            title: 'Fecha pago',\r\n            displayValueFn: (item) => item.box_movement?.payment_date,\r\n          }),\r\n          userColumn({\r\n            title: 'Usuario',\r\n            displayValueFn: (item) => item.box_movement?.user_id,\r\n          }),\r\n          titlecaseColumn({\r\n            title: 'Moneda',\r\n            displayValueFn: (item) => item.box_movement?.coin ?? item.client_account?.coin,\r\n          }),\r\n          numberColumn({\r\n            title: 'Monto',\r\n            displayValueFn: (item) => item.box_movement?.amount,\r\n          }),\r\n          itemCreatedAtColumn(),\r\n          itemUpdatedAtColumn(),\r\n          itemStatusColumn(),\r\n        ])\r\n      }\r\n}\r\n",
            "styleUrl": "./client-payment-list-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-list-template [configuration]=\"listConfiguration\" />\r\n"
        },
        {
            "name": "ClientVehicleListPageComponent",
            "id": "component-ClientVehicleListPageComponent-6f7d0a0b86fd45c862d4b1b56b373f966068fdbb72bf46a9c61f56c7fc3839ca0a803c497f9f46bbd71e4db24f39ccae92dbad319517437ed677612d9dbd1708",
            "file": "src/app/modules/organization/clients/client-vehicles/pages/client-vehicle-list-page/client-vehicle-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-vehicle-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-vehicle-list-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configList",
                    "defaultValue": "{\r\n        title: 'Vehículos',\r\n        server: {\r\n            url: 'vehicle',\r\n            queryParams: {\r\n                relations: 'client,vehicleType',\r\n                client_id: this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id')\r\n            },\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Placa / Tipo',\r\n                sort: { key: 'plate' },\r\n                displayValueFn: (item) => `${item.plate} / ${item.vehicle_type?.name.toUpperCase()}`,\r\n                gridColumn: '1fr',\r\n            }),\r\n            textColumn({\r\n                title: 'Cliente',\r\n                gridColumn: 'fit-content(250px)',\r\n                displayValueFn: (item) => item?.client?.name ? item.client?.name : '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Color',\r\n                sort: { key: 'color' },\r\n                displayValueFn: (item) => item.color ?? '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Marca',\r\n                sort: { key: 'brand' },\r\n                displayValueFn: (item) => item.brand ?? '--',\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<Vehicle>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, signal } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ItemListConfiguration, ItemListTemplateComponent, itemCreatedAtColumn, itemStatusColumn, itemUpdatedAtColumn, textColumn } from '@component/item-list-template/item-list-template.component';\r\nimport { Vehicle } from '@interface/vehicle';\r\n\r\n@Component({\r\n  selector: 'app-client-vehicle-list-page',\r\n  standalone: true,\r\n  imports: [ItemListTemplateComponent],\r\n  templateUrl: './client-vehicle-list-page.component.html',\r\n  styleUrl: './client-vehicle-list-page.component.scss'\r\n})\r\nexport class ClientVehicleListPageComponent {\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    public configList: ItemListConfiguration<Vehicle> = {\r\n        title: 'Vehículos',\r\n        server: {\r\n            url: 'vehicle',\r\n            queryParams: {\r\n                relations: 'client,vehicleType',\r\n                client_id: this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id')\r\n            },\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Placa / Tipo',\r\n                sort: { key: 'plate' },\r\n                displayValueFn: (item) => `${item.plate} / ${item.vehicle_type?.name.toUpperCase()}`,\r\n                gridColumn: '1fr',\r\n            }),\r\n            textColumn({\r\n                title: 'Cliente',\r\n                gridColumn: 'fit-content(250px)',\r\n                displayValueFn: (item) => item?.client?.name ? item.client?.name : '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Color',\r\n                sort: { key: 'color' },\r\n                displayValueFn: (item) => item.color ?? '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Marca',\r\n                sort: { key: 'brand' },\r\n                displayValueFn: (item) => item.brand ?? '--',\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }\r\n}\r\n",
            "styleUrl": "./client-vehicle-list-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-list-template [configuration]=\"configList\" />\r\n"
        },
        {
            "name": "ClientViewPageComponent",
            "id": "component-ClientViewPageComponent-570849928698e198823bfa835571b4ca31664841dffd8fad7475863a141533d480fd94f9d793038e4a047a06ef00a2b8fdca61b852d6aa9996e51cd01a779660",
            "file": "src/app/modules/organization/clients/pages/client-view-page/client-view-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client-view-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./client-view-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "defaultValue": "{\r\n        server: { url: 'client' },\r\n        titleModule: 'Cliente',\r\n        links: [\r\n            {\r\n                routerLink: './detail',\r\n                text: 'Detalle',\r\n            },\r\n            {\r\n                routerLink: './billing-option',\r\n                text: 'Opciones de facturación',\r\n            },\r\n            {\r\n                routerLink: './business-unit',\r\n                text: 'Unidades de negocio',\r\n            },\r\n            {\r\n                routerLink: './contact',\r\n                text: 'Contactos',\r\n            },\r\n            {\r\n                routerLink: './account',\r\n                text: 'Cuentas',\r\n            },\r\n            {\r\n                routerLink: './contract',\r\n                text: 'Contratos',\r\n            },\r\n            {\r\n                routerLink: './document',\r\n                text: 'Documentos',\r\n            },\r\n            {\r\n                routerLink: './payment',\r\n                text: 'Pagos',\r\n            },\r\n            {\r\n                routerLink: './vehicle',\r\n                text: 'Vehículos',\r\n            },\r\n            {\r\n                routerLink: './comprobant-payments',\r\n                text: 'Pagar comprobantes',\r\n            },\r\n        ]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemViewConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemViewTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemViewTemplateComponent, ItemViewConfiguration } from '@component/item-view-template/item-view-template.component';\r\n\r\n@Component({\r\n  selector: 'app-client-view-page',\r\n  standalone: true,\r\n  imports: [ItemViewTemplateComponent],\r\n  templateUrl: './client-view-page.component.html',\r\n  styleUrl: './client-view-page.component.scss'\r\n})\r\nexport class ClientViewPageComponent {\r\n    public config: ItemViewConfiguration = {\r\n        server: { url: 'client' },\r\n        titleModule: 'Cliente',\r\n        links: [\r\n            {\r\n                routerLink: './detail',\r\n                text: 'Detalle',\r\n            },\r\n            {\r\n                routerLink: './billing-option',\r\n                text: 'Opciones de facturación',\r\n            },\r\n            {\r\n                routerLink: './business-unit',\r\n                text: 'Unidades de negocio',\r\n            },\r\n            {\r\n                routerLink: './contact',\r\n                text: 'Contactos',\r\n            },\r\n            {\r\n                routerLink: './account',\r\n                text: 'Cuentas',\r\n            },\r\n            {\r\n                routerLink: './contract',\r\n                text: 'Contratos',\r\n            },\r\n            {\r\n                routerLink: './document',\r\n                text: 'Documentos',\r\n            },\r\n            {\r\n                routerLink: './payment',\r\n                text: 'Pagos',\r\n            },\r\n            {\r\n                routerLink: './vehicle',\r\n                text: 'Vehículos',\r\n            },\r\n            {\r\n                routerLink: './comprobant-payments',\r\n                text: 'Pagar comprobantes',\r\n            },\r\n        ]\r\n    }\r\n}\r\n",
            "styleUrl": "./client-view-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-view-template [configuration]=\"config\"/>"
        },
        {
            "name": "ConfirmDialogTemplateComponent",
            "id": "component-ConfirmDialogTemplateComponent-c337c449dc6209fc65eb6036e06f512b2e1370dcf0a040dc410d49cee826f209e149a473e90c4a3893b61788c278f39e61626a2c48e87f2f97fc86a49a7c50ca",
            "file": "src/app/shared/components/confirm-dialog-template/confirm-dialog-template.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirm-dialog-template",
            "styleUrls": [
                "./confirm-dialog-template.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm-dialog-template.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfirmDialogData",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "NgTemplateOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport { Component, Inject, TemplateRef } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\r\n\r\nexport interface ConfirmDialogData {\r\n  title: string;\r\n  description: string;\r\n  icon?: string;\r\n  templateRef?: TemplateRef<any>;\r\n  confirmButton?: {\r\n    text?: string;\r\n    cssClass?: string;\r\n    disabled?: boolean;\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-confirm-dialog-template',\r\n  standalone: true,\r\n  imports: [MatDialogModule, NgTemplateOutlet],\r\n  templateUrl: './confirm-dialog-template.component.html',\r\n  styleUrls: ['./confirm-dialog-template.component.scss']\r\n})\r\nexport class ConfirmDialogTemplateComponent {\r\n  constructor(@Inject(MAT_DIALOG_DATA) public data: ConfirmDialogData) {}\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dialog__container {\r\n    --max-width-container-dialog: 440px;\r\n}",
                    "styleUrl": "./confirm-dialog-template.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "ConfirmDialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "ConfirmDialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"dialog__container\">\r\n\r\n    @if (data.icon) {\r\n    <div class=\"dialog__icon\">\r\n        <span class=\"material-icons\">{{data.icon}}</span>\r\n    </div>\r\n    }\r\n\r\n    <div class=\"dialog__title dialog__title-center\">{{ data.title }}</div>\r\n\r\n    <div class=\"dialog__content\">\r\n        <p class=\"text-on-surface-variant body-medium\">{{ data.description }}</p>\r\n        @if (data.templateRef) {\r\n            <ng-container *ngTemplateOutlet=\"data.templateRef\" />\r\n        }\r\n    </div>\r\n\r\n    <div class=\"dialog__actions\">\r\n        <button class=\"text-button\" mat-dialog-close>Cancelar</button>\r\n        <button class=\"text-button\" [disabled]=\"data.confirmButton?.disabled\" [mat-dialog-close]=\"true\">\r\n            {{data.confirmButton?.text ?? 'Aceptar'}}\r\n        </button>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ContractCreatePageComponent",
            "id": "component-ContractCreatePageComponent-6ad6435f8e43e8cd2a425f0d3e1beea644e6500f46eff44ff25e89a94f0ec83f525a41da9e596367fb23a6330270218ae7de0a928d1f343082d23ceafc692c1d",
            "file": "src/app/modules/tracking/contracts/pages/contract-create-page/contract-create-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contract-create-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./contract-create-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n    titleModule: 'contrato',\r\n    server: { url: 'contract' },\r\n    type: 'create',\r\n    formGroup: getContractFormGroup(),\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "ContractFormComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemFormConfiguration, ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\nimport { ContractFormComponent } from '../../components/contract-form/contract-form.component';\r\nimport { getContractFormGroup } from '../../helpers';\r\n\r\n@Component({\r\n  selector: 'app-contract-create-page',\r\n  standalone: true,\r\n  imports: [\r\n    ItemFormTemplateComponent,\r\n    ContractFormComponent,\r\n  ],\r\n  templateUrl: './contract-create-page.component.html',\r\n  styleUrl: './contract-create-page.component.scss'\r\n})\r\nexport class ContractCreatePageComponent {\r\n  public configuration: ItemFormConfiguration = {\r\n    titleModule: 'contrato',\r\n    server: { url: 'contract' },\r\n    type: 'create',\r\n    formGroup: getContractFormGroup(),\r\n  }\r\n}\r\n",
            "styleUrl": "./contract-create-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-form-template [configuration]=\"configuration\">\r\n    <app-contract-form [form]=\"configuration.formGroup\" />\r\n</app-item-form-template>"
        },
        {
            "name": "ContractDetailPageComponent",
            "id": "component-ContractDetailPageComponent-32345a7bcc016a26d782dff5fa491aed9c3a3bb2a43b71fbb976879de9deafe8b31cf04e4827ed1c484804385d267c9875d2c499d55dde1bb760d7c2477da243",
            "file": "src/app/modules/tracking/contracts/pages/contract-detail-page/contract-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contract-detail-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./contract-detail-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        title: 'Detalles',\r\n        subtitle: false,\r\n        server: {\r\n            url: 'contract',\r\n            queryParams: {\r\n                relations: 'client,plan,clientBusinessUnit'\r\n            },\r\n        },\r\n        backButton: false,\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'Cliente',\r\n                        displayValueFn: (item) => item.client?.name\r\n                    },\r\n                    {\r\n                        title: 'Código',\r\n                        displayValueFn: (item) => item.code\r\n                    },\r\n                    {\r\n                        title: 'Unidad de negocio',\r\n                        displayValueFn: (item) => item.client_business_unit?.name\r\n                    },\r\n                    {\r\n                        title: 'Plan',\r\n                        displayValueFn: (item) => item.plan?.name\r\n                    },\r\n                    {\r\n                        title: 'Fecha de instalación',\r\n                        displayValueFn: (item) => item.installation_date,\r\n                        type: 'date',\r\n                    },\r\n                    {\r\n                        title: 'Fecha de inicio',\r\n                        displayValueFn: (item) => item.start_date,\r\n                        type: 'date',\r\n                    },\r\n                    {\r\n                        title: 'Fecha de fin',\r\n                        displayValueFn: (item) => item.end_date,\r\n                        type: 'date',\r\n                    },\r\n                    {\r\n                        title: 'Periodo',\r\n                        displayValueFn: (item) => item.period\r\n                    },\r\n                    {\r\n                        title: 'Cantidad',\r\n                        displayValueFn: (item) => item.quantity,\r\n                    },\r\n                    {\r\n                        title: 'Precio de compra',\r\n                        displayValueFn: (item) => item.buy_price,\r\n                        type: 'currency',\r\n                    },\r\n                    {\r\n                        title: 'Precio de venta',\r\n                        displayValueFn: (item) => item.sale_price,\r\n                        type: 'currency',\r\n                    },\r\n                    {\r\n                        title: 'Precio de instalación',\r\n                        displayValueFn: (item) => item.installation_price,\r\n                        type: 'currency',\r\n                    },\r\n                    {\r\n                        title: 'Recurrente de pago',\r\n                        displayValueFn: (item) => item.recurrent_type.toUpperCase(),\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDetailConfiguration<Contract>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemDetailTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ItemDetailTemplateComponent, registerDataGroupDetail } from '@component/item-detail-template/item-detail-template.component';\r\nimport { Contract } from '@interface/contract';\r\nimport { ItemDetailConfiguration } from '@component/item-detail-template/item-detail-template.component';\r\n\r\n@Component({\r\n    selector: 'app-contract-detail-page',\r\n    standalone: true,\r\n    imports: [ItemDetailTemplateComponent],\r\n    templateUrl: './contract-detail-page.component.html',\r\n    styleUrl: './contract-detail-page.component.scss'\r\n})\r\nexport class ContractDetailPageComponent {\r\n    public configuration: ItemDetailConfiguration<Contract> = {\r\n        title: 'Detalles',\r\n        subtitle: false,\r\n        server: {\r\n            url: 'contract',\r\n            queryParams: {\r\n                relations: 'client,plan,clientBusinessUnit'\r\n            },\r\n        },\r\n        backButton: false,\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'Cliente',\r\n                        displayValueFn: (item) => item.client?.name\r\n                    },\r\n                    {\r\n                        title: 'Código',\r\n                        displayValueFn: (item) => item.code\r\n                    },\r\n                    {\r\n                        title: 'Unidad de negocio',\r\n                        displayValueFn: (item) => item.client_business_unit?.name\r\n                    },\r\n                    {\r\n                        title: 'Plan',\r\n                        displayValueFn: (item) => item.plan?.name\r\n                    },\r\n                    {\r\n                        title: 'Fecha de instalación',\r\n                        displayValueFn: (item) => item.installation_date,\r\n                        type: 'date',\r\n                    },\r\n                    {\r\n                        title: 'Fecha de inicio',\r\n                        displayValueFn: (item) => item.start_date,\r\n                        type: 'date',\r\n                    },\r\n                    {\r\n                        title: 'Fecha de fin',\r\n                        displayValueFn: (item) => item.end_date,\r\n                        type: 'date',\r\n                    },\r\n                    {\r\n                        title: 'Periodo',\r\n                        displayValueFn: (item) => item.period\r\n                    },\r\n                    {\r\n                        title: 'Cantidad',\r\n                        displayValueFn: (item) => item.quantity,\r\n                    },\r\n                    {\r\n                        title: 'Precio de compra',\r\n                        displayValueFn: (item) => item.buy_price,\r\n                        type: 'currency',\r\n                    },\r\n                    {\r\n                        title: 'Precio de venta',\r\n                        displayValueFn: (item) => item.sale_price,\r\n                        type: 'currency',\r\n                    },\r\n                    {\r\n                        title: 'Precio de instalación',\r\n                        displayValueFn: (item) => item.installation_price,\r\n                        type: 'currency',\r\n                    },\r\n                    {\r\n                        title: 'Recurrente de pago',\r\n                        displayValueFn: (item) => item.recurrent_type.toUpperCase(),\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }\r\n}\r\n",
            "styleUrl": "./contract-detail-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-detail-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "ContractEditPageComponent",
            "id": "component-ContractEditPageComponent-5a09382ea9c96655ccc4e5450ebb663cb54047693e8f27604876f78aef292fdb0bca42318bf7a6d397c3c5853fbf616eecdbe300455dc6264563cfc217a4fc23",
            "file": "src/app/modules/tracking/contracts/pages/contract-edit-page/contract-edit-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contract-edit-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./contract-edit-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-contract-edit-page',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './contract-edit-page.component.html',\r\n  styleUrl: './contract-edit-page.component.scss'\r\n})\r\nexport class ContractEditPageComponent {\r\n\r\n}\r\n",
            "styleUrl": "./contract-edit-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>contract-edit-page works!</p>\r\n"
        },
        {
            "name": "ContractFormComponent",
            "id": "component-ContractFormComponent-4597f629ec416ef81d5f7b8476939fc3136fc311d9a0cfa50dd807f99520cfcbd7380855082ce3ed1016ca821a92d74562bf0a0535652966a9a0a6e302b5c5d5",
            "file": "src/app/modules/tracking/contracts/components/contract-form/contract-form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contract-form",
            "styleUrls": [
                "./contract-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./contract-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 41,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clientAutocompleteConfiguration",
                    "defaultValue": "{\r\n    textLabel: 'Cliente',\r\n    server: {\r\n      url: 'client',\r\n      queryParams: {\r\n        relations: 'clientBusinessUnits'\r\n      }\r\n    }\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputAutocompleteServerConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "nameModuleDatabase",
                    "defaultValue": "NameModuleDatabase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "periodSelectConfiguration",
                    "defaultValue": "{\r\n    textLabel: 'Duración',\r\n    data: [\r\n      { id: 12, name: '1 año' },\r\n      { id: 24, name: '2 años' },\r\n      { id: 36, name: '3 años' },\r\n      { id: 48, name: '4 años' },\r\n      { id: 60, name: '5 años' },\r\n    ],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSelectConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "planAutocompleteConfiguration",
                    "defaultValue": "{\r\n    textLabel: 'Plan',\r\n    local: { nameModuleDatabase: NameModuleDatabase.Plans }\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSelectLocalConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "recurrentTypeSelectConfiguration",
                    "defaultValue": "{\r\n    textLabel: 'Tipo de recurrente',\r\n    data: RECURRENT_TYPE_VALUES.map((recurrentType: string) => ({ id: recurrentType, name: recurrentType.toUpperCase() })),\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSelectConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "saleUserAutocompleteConfiguration",
                    "defaultValue": "{\r\n    textLabel: 'Vendedor',\r\n    local: { nameModuleDatabase: NameModuleDatabase.Users }\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSelectLocalConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "vehicleDetail",
                    "defaultValue": "signal('single')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<\"full\" | \"single\">",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "calculationDates",
                    "args": [
                        {
                            "name": "installation_date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "installation_date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changesContractVehiclesFormArray",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "deleteContractVehicle",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formGroupVehicle",
                    "args": [
                        {
                            "name": "vehicle",
                            "type": "Vehicle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "vehicle",
                            "type": "Vehicle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getVehicleTypeFormGroup",
                    "args": [
                        {
                            "name": "formGroupContractVehicle",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "formGroupContractVehicle",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getVehicleTypeIdFormGroup",
                    "args": [
                        {
                            "name": "formGroupContractVehicle",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "formGroupContractVehicle",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patternAddPlates",
                    "args": [
                        {
                            "name": "indexExcept",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "-1"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "indexExcept",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "-1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "quantityCtrlChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "InputAutocompleteTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "InputSelectTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "LoadImagePrivateDirective",
                    "type": "directive"
                },
                {
                    "name": "DatepickerTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "PathFilesServerPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DecimalPipe, NgClass } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, WritableSignal, signal } from '@angular/core';\r\nimport { FormArray, FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { DatepickerTemplateComponent } from '@component/datepicker-template/datepicker-template.component';\r\nimport { InputAutocompleteServerConfiguration, InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectConfiguration, InputSelectLocalConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { LoadImagePrivateDirective } from '@directive/load-image-private.directive';\r\nimport { Client } from '@interface/client';\r\nimport { RECURRENT_TYPE_VALUES } from '@interface/contract';\r\nimport { ContractVehicle } from '@interface/contractVehicle';\r\nimport { Vehicle } from '@interface/vehicle';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { NameModuleDatabase } from '@service/database-storage.service';\r\nimport { getDate, getMonth, getYear, format, differenceInDays } from 'date-fns';\r\nimport { startWith } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-contract-form',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n    DecimalPipe,\r\n    NgClass,\r\n    LoadImagePrivateDirective,\r\n    DatepickerTemplateComponent,\r\n    PathFilesServerPipe,\r\n  ],\r\n  templateUrl: './contract-form.component.html',\r\n  styleUrls: ['./contract-form.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ContractFormComponent {\r\n  @Input({ required: true }) form!: FormGroup;\r\n  \r\n  public vehicleDetail: WritableSignal<'full' | 'single'> = signal('single');\r\n\r\n  public readonly nameModuleDatabase = NameModuleDatabase;\r\n\r\n  public readonly clientAutocompleteConfiguration: InputAutocompleteServerConfiguration = {\r\n    textLabel: 'Cliente',\r\n    server: {\r\n      url: 'client',\r\n      queryParams: {\r\n        relations: 'clientBusinessUnits'\r\n      }\r\n    }\r\n  }\r\n\r\n  public readonly planAutocompleteConfiguration: InputSelectLocalConfiguration = {\r\n    textLabel: 'Plan',\r\n    local: { nameModuleDatabase: NameModuleDatabase.Plans }\r\n  }\r\n\r\n  public readonly saleUserAutocompleteConfiguration: InputSelectLocalConfiguration = {\r\n    textLabel: 'Vendedor',\r\n    local: { nameModuleDatabase: NameModuleDatabase.Users }\r\n  }\r\n\r\n  public readonly recurrentTypeSelectConfiguration: InputSelectConfiguration = {\r\n    textLabel: 'Tipo de recurrente',\r\n    data: RECURRENT_TYPE_VALUES.map((recurrentType: string) => ({ id: recurrentType, name: recurrentType.toUpperCase() })),\r\n  };\r\n\r\n  public readonly periodSelectConfiguration: InputSelectConfiguration = {\r\n    textLabel: 'Duración',\r\n    data: [\r\n      { id: 12, name: '1 año' },\r\n      { id: 24, name: '2 años' },\r\n      { id: 36, name: '3 años' },\r\n      { id: 48, name: '4 años' },\r\n      { id: 60, name: '5 años' },\r\n    ],\r\n  };\r\n\r\n  get clientIdCtrl(): FormControl {\r\n    return this.form.get('client_id') as FormControl;\r\n  }\r\n\r\n  get clientCtrl(): FormControl {\r\n    return this.form.get('client') as FormControl;\r\n  }\r\n\r\n  get planIdCtrl(): FormControl {\r\n    return this.form.get('plan_id') as FormControl;\r\n  }\r\n\r\n  get planCtrl(): FormControl {\r\n    return this.form.get('plan') as FormControl;\r\n  }\r\n\r\n  get quantityCtrl(): FormControl {\r\n    return this.form.get('quantity') as FormControl;\r\n  }\r\n\r\n  get buyPriceCtrl(): FormControl {\r\n    return this.form.get('buy_price') as FormControl;\r\n  }\r\n\r\n  get installationPriceCtrl(): FormControl {\r\n    return this.form.get('installation_price') as FormControl;\r\n  }\r\n\r\n  get contractVehiclesFormArray(): FormArray<FormGroup> {\r\n    return this.form.get('contract_vehicles') as FormArray<FormGroup>;\r\n  }\r\n\r\n  get installationDateCtrl(): FormControl {\r\n    return this.form.get('installation_date') as FormControl;\r\n  }\r\n\r\n  get startDateCtrl(): FormControl {\r\n    return this.form.get('start_date') as FormControl;\r\n  }\r\n\r\n  get endDateCtrl(): FormControl {\r\n    return this.form.get('end_date') as FormControl;\r\n  }\r\n\r\n  get recurrentTypeCtrl(): FormControl {\r\n    return this.form.get('recurrent_type') as FormControl;\r\n  }\r\n\r\n  get saleUserIdCtrl(): FormControl {\r\n    return this.form.get('sale_user_id') as FormControl;\r\n  }\r\n\r\n  get prorationDaysCtrl(): FormControl {\r\n    return this.form.get('proration_days') as FormControl;\r\n  }\r\n\r\n  get periodCtrl(): FormControl {\r\n    return this.form.get('period') as FormControl;\r\n  }\r\n\r\n  get clientBusinessUnitIdCtrl(): FormControl {\r\n    return this.form.get('client_business_unit_id') as FormControl;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.quantityCtrlChange();\r\n\r\n    this.periodCtrl.valueChanges.subscribe((period: number) => {\r\n      this.calculationDates(this.installationDateCtrl.value);\r\n    });\r\n\r\n    this.installationDateCtrl.valueChanges.pipe(startWith(new Date())).subscribe((installationDate: Date | null) => {\r\n      if (!installationDate) return;\r\n      this.calculationDates(installationDate);\r\n    });\r\n\r\n    this.clientCtrl.valueChanges.subscribe((client: Client) => {      \r\n      if (client instanceof Object) {\r\n        if(client.client_business_units?.length == 1) {\r\n          this.clientBusinessUnitIdCtrl.setValue(client.client_business_units[0].id, { emitEvent: false });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private calculationDates(installation_date: Date) {\r\n    const dayInstallationDate = getDate(installation_date);\r\n    const monthInstallationDate = getMonth(installation_date);\r\n    const yearInstallationDate = getYear(installation_date);\r\n\r\n    const dayInitContract = 26;\r\n    const monthInitContract = dayInstallationDate > dayInitContract ? monthInstallationDate + 1 : monthInstallationDate;\r\n    const yearInitContract = dayInstallationDate > dayInitContract && monthInstallationDate == 11 ? yearInstallationDate + 1 : yearInstallationDate;\r\n\r\n    const startDate = new Date(yearInitContract, monthInitContract, dayInitContract);\r\n    const prorationDays = differenceInDays(startDate, installation_date);\r\n    const period = Number(this.periodCtrl.value ?? 0);\r\n    const endDate = new Date(yearInitContract, monthInitContract + period, dayInitContract - 1);\r\n    \r\n    this.prorationDaysCtrl.setValue(prorationDays, { emitEvent: false });\r\n    this.startDateCtrl.setValue(format(startDate, 'dd/MM/yyyy'), { emitEvent: false });\r\n    this.endDateCtrl.setValue(format(endDate, 'dd/MM/yyyy'), { emitEvent: false });\r\n  }\r\n\r\n  public changesContractVehiclesFormArray() {\r\n    this.contractVehiclesFormArray.controls.forEach((formGroupContractVehicle: FormGroup, index) => {\r\n      formGroupContractVehicle.get('vehicle')?.get('plate')?.setValidators([Validators.required, Validators.pattern(this.patternAddPlates(index))]);\r\n      formGroupContractVehicle.get('vehicle')?.get('plate')?.updateValueAndValidity({ emitEvent: false });\r\n    });\r\n  }\r\n\r\n  private patternAddPlates(indexExcept: number = -1): string {\r\n    return `^(?!${this.contractVehiclesFormArray.value.filter((_, index) => index != indexExcept).map((contractVehicle: ContractVehicle) => contractVehicle.vehicle!.plate).filter(item => item).join('$|') ?? '----'}$).*`;\r\n  }\r\n\r\n  private quantityCtrlChange() {\r\n    this.quantityCtrl.valueChanges.subscribe((value: number) => {\r\n      if (value > this.contractVehiclesFormArray.length) {\r\n        for (let i = this.contractVehiclesFormArray.length; i < value; i++) {\r\n          this.contractVehiclesFormArray.push(new FormGroup({\r\n            vehicle: this.formGroupVehicle()\r\n          }));\r\n        }\r\n      } else {\r\n        for (let i = this.contractVehiclesFormArray.length; i > value; i--) {\r\n          this.contractVehiclesFormArray.removeAt(i - 1);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private formGroupVehicle(vehicle?: Vehicle) {\r\n    return new FormGroup({\r\n      id: new FormControl(vehicle?.id),\r\n      vehicle_type: new FormControl(vehicle?.vehicle_type),\r\n      vehicle_type_id: new FormControl(vehicle?.vehicle_type_id, [Validators.required]),\r\n      plate: new FormControl(vehicle?.plate, { validators: [Validators.required, Validators.pattern(this.patternAddPlates())], updateOn: 'blur' }),\r\n      brand: new FormControl(vehicle?.brand),\r\n      model: new FormControl(vehicle?.model),\r\n    });\r\n  }\r\n\r\n  public getVehicleTypeFormGroup(formGroupContractVehicle: FormGroup): FormControl {\r\n    return formGroupContractVehicle.get('vehicle')?.get('vehicle_type') as FormControl;\r\n  }\r\n\r\n  public getVehicleTypeIdFormGroup(formGroupContractVehicle: FormGroup): FormControl {\r\n    return formGroupContractVehicle.get('vehicle')?.get('vehicle_type_id') as FormControl;\r\n  }\r\n\r\n  public deleteContractVehicle(index: number) {\r\n    this.contractVehiclesFormArray.removeAt(index);\r\n    this.quantityCtrl.setValue(this.contractVehiclesFormArray.length, { emitEvent: false });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./contract-form.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "clientIdCtrl": {
                    "name": "clientIdCtrl",
                    "getSignature": {
                        "name": "clientIdCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 83
                    }
                },
                "clientCtrl": {
                    "name": "clientCtrl",
                    "getSignature": {
                        "name": "clientCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 87
                    }
                },
                "planIdCtrl": {
                    "name": "planIdCtrl",
                    "getSignature": {
                        "name": "planIdCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 91
                    }
                },
                "planCtrl": {
                    "name": "planCtrl",
                    "getSignature": {
                        "name": "planCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 95
                    }
                },
                "quantityCtrl": {
                    "name": "quantityCtrl",
                    "getSignature": {
                        "name": "quantityCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 99
                    }
                },
                "buyPriceCtrl": {
                    "name": "buyPriceCtrl",
                    "getSignature": {
                        "name": "buyPriceCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 103
                    }
                },
                "installationPriceCtrl": {
                    "name": "installationPriceCtrl",
                    "getSignature": {
                        "name": "installationPriceCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 107
                    }
                },
                "contractVehiclesFormArray": {
                    "name": "contractVehiclesFormArray",
                    "getSignature": {
                        "name": "contractVehiclesFormArray",
                        "type": "",
                        "returnType": "FormArray<FormGroup>",
                        "line": 111
                    }
                },
                "installationDateCtrl": {
                    "name": "installationDateCtrl",
                    "getSignature": {
                        "name": "installationDateCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 115
                    }
                },
                "startDateCtrl": {
                    "name": "startDateCtrl",
                    "getSignature": {
                        "name": "startDateCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 119
                    }
                },
                "endDateCtrl": {
                    "name": "endDateCtrl",
                    "getSignature": {
                        "name": "endDateCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 123
                    }
                },
                "recurrentTypeCtrl": {
                    "name": "recurrentTypeCtrl",
                    "getSignature": {
                        "name": "recurrentTypeCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 127
                    }
                },
                "saleUserIdCtrl": {
                    "name": "saleUserIdCtrl",
                    "getSignature": {
                        "name": "saleUserIdCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 131
                    }
                },
                "prorationDaysCtrl": {
                    "name": "prorationDaysCtrl",
                    "getSignature": {
                        "name": "prorationDaysCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 135
                    }
                },
                "periodCtrl": {
                    "name": "periodCtrl",
                    "getSignature": {
                        "name": "periodCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 139
                    }
                },
                "clientBusinessUnitIdCtrl": {
                    "name": "clientBusinessUnitIdCtrl",
                    "getSignature": {
                        "name": "clientBusinessUnitIdCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 143
                    }
                }
            },
            "templateData": "<div [formGroup]=\"form\" class=\"form__content__inputs\">\r\n\r\n    <app-input-autocomplete-template data-type=\"form-input\" data-form-input-name=\"client_id\" class=\"col-span-full @2xl:col-span-6\" [idControl]=\"clientIdCtrl\" [autocompleteControl]=\"clientCtrl\" [configuration]=\"clientAutocompleteConfiguration\" />\r\n\r\n    <app-input-select-template data-type=\"form-input\" data-form-input-name=\"client_business_id\" class=\"col-span-full @2xl:col-span-3\" [control]=\"clientBusinessUnitIdCtrl\" [configuration]=\"{ textLabel: 'Unidad de negocio', data: clientCtrl.value?.client_business_units ?? [] }\" />\r\n\r\n    <app-input-autocomplete-template data-type=\"form-input\" data-form-input-name=\"plan_id\" class=\"col-span-full @2xl:col-span-3\" [idControl]=\"planIdCtrl\" [autocompleteControl]=\"planCtrl\" [configuration]=\"planAutocompleteConfiguration\" />\r\n\r\n    <mat-form-field data-type=\"form-input\" data-form-input-name=\"installation_price\" class=\"col-span-full @2xl:col-span-2\">\r\n        <mat-label>Precio instalación Und.</mat-label>\r\n        <input matInput type=\"number\" [min]=\"1\" formControlName=\"installation_price\" />\r\n        <span matTextPrefix>S/.&nbsp;</span>\r\n        <mat-error>*Requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field data-type=\"form-input\" data-form-input-name=\"total_installation_price\" class=\"col-span-full @2xl:col-span-2\">\r\n        <mat-label>Total instalación</mat-label>\r\n        <input matInput type=\"text\"\r\n            [value]=\"((quantityCtrl.value ?? 0) * (installationPriceCtrl.value ?? 0)) | number:'.2-2'\"\r\n            [disabled]=\"true\" />\r\n        <span matTextPrefix>S/.&nbsp;</span>\r\n        <mat-error>*Requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field data-type=\"form-input\" data-form-input-name=\"buy_price\" class=\"col-span-full @2xl:col-span-2\">\r\n        <mat-label>Precio compra Und.</mat-label>\r\n        <input matInput type=\"number\" [min]=\"1\" formControlName=\"buy_price\" />\r\n        <span matTextPrefix>S/.&nbsp;</span>\r\n        <mat-error>*Requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field data-type=\"form-input\" data-form-input-name=\"sale_price\" class=\"col-span-full @2xl:col-span-2\">\r\n        <mat-label>Precio venta Und.</mat-label>\r\n        <input matInput type=\"number\" [min]=\"1\" formControlName=\"sale_price\" />\r\n        <span matTextPrefix>S/.&nbsp;</span>\r\n        <mat-error>*Requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field data-type=\"form-input\" data-form-input-name=\"quantity\" class=\"col-span-full @2xl:col-span-2\">\r\n        <mat-label>Cantidad</mat-label>\r\n        <input matInput type=\"number\" [min]=\"1\" formControlName=\"quantity\" />\r\n        <mat-error>*Requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field data-type=\"form-input\" data-form-input-name=\"recurrently\" class=\"col-span-full @2xl:col-span-2\">\r\n        <mat-label>Recurrente mensual</mat-label>\r\n        <input matInput type=\"text\" [value]=\"((quantityCtrl.value ?? 0) * (buyPriceCtrl.value ?? 0)) | number:'.2-2'\"\r\n            [disabled]=\"true\" />\r\n        <span matTextPrefix>S/.</span>\r\n        <mat-error>*Requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <div class=\"grid gap-1 col-span-full bg-tertiary-container rounded-xl p-4\" [ngClass]=\"{ 'grid-cols-2': vehicleDetail() == 'full', 'grid-cols-3': vehicleDetail() == 'single' }\">\r\n\r\n        <div class=\"col-span-full flex gap-x-2 justify-between items-center py-1\">\r\n            <div class=\"label-large\">Vehículos ({{(quantityCtrl.value ?? 0) | number:'2.0'}})</div>\r\n            <div class=\"list-button-group\">\r\n                <button type=\"button\" class=\"list-button-group-item\" [class.active]=\"vehicleDetail() == 'single'\" (click)=\"vehicleDetail.set('single')\">\r\n                    Simple\r\n                </button>\r\n                <button type=\"button\" class=\"list-button-group-item\" [class.active]=\"vehicleDetail() == 'full'\" (click)=\"vehicleDetail.set('full')\">\r\n                    Completo\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n        @if (vehicleDetail() == 'full') {\r\n        @for (formGroupContractVehicle of contractVehiclesFormArray.controls; track formGroupContractVehicle; let i = $index) {\r\n        <div class=\"flex gap-x-2 bg-surface p-2 rounded-lg\" [formGroup]=\"formGroupContractVehicle\">\r\n\r\n            <div class=\"flex-1 grid grid-cols-[40px,2fr,1fr,1fr,1fr] gap-x-1 gap-y-2 items-start\"\r\n                formGroupName=\"vehicle\">\r\n                <div class=\"w-10 h-10 relative rounded overflow-hidden mt-2\">\r\n                    @if(getVehicleTypeFormGroup(formGroupContractVehicle).value?.id) {\r\n                    <img class=\"absolute inset-0 object-fill\"\r\n                        [src]=\"getVehicleTypeFormGroup(formGroupContractVehicle).value?.image | pathFilesServer\">\r\n                    }\r\n                </div>\r\n\r\n                <app-input-autocomplete-template\r\n                    [autocompleteControl]=\"getVehicleTypeFormGroup(formGroupContractVehicle)\"\r\n                    [idControl]=\"getVehicleTypeIdFormGroup(formGroupContractVehicle)\"\r\n                    [configuration]=\"{ textLabel: 'Tipo de vehículo', local: { nameModuleDatabase: nameModuleDatabase.VehicleTypes } }\" />\r\n\r\n                <mat-form-field>\r\n                    <mat-label>Placa</mat-label>\r\n                    <input matInput type=\"text\" formControlName=\"plate\"\r\n                        (ngModelChange)=\"changesContractVehiclesFormArray()\" />\r\n                    @if (formGroupContractVehicle.get('vehicle')?.get('plate')?.hasError('required')) {\r\n                    <mat-error>*Requerido</mat-error>\r\n                    } @else if (formGroupContractVehicle.get('vehicle')?.get('plate')?.hasError('pattern')) {\r\n                    <mat-error>*Placa ya existe</mat-error>\r\n                    }\r\n                </mat-form-field>\r\n\r\n                <mat-form-field>\r\n                    <mat-label>Modelo</mat-label>\r\n                    <input matInput type=\"text\" formControlName=\"model\" />\r\n                    <mat-error>*Requerido</mat-error>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field>\r\n                    <mat-label>Marca</mat-label>\r\n                    <input matInput type=\"text\" formControlName=\"brand\" />\r\n                    <mat-error>*Requerido</mat-error>\r\n                </mat-form-field>\r\n\r\n            </div>\r\n\r\n            <button class=\"tonal-icon-button mt-2\" (click)=\"deleteContractVehicle(i)\">\r\n                <span class=\"material-icons\">delete</span>\r\n            </button>\r\n        </div>\r\n        }\r\n        } @else {\r\n        @for (formGroupContractVehicle of contractVehiclesFormArray.controls; track formGroupContractVehicle; let i = $index) {\r\n        <div class=\"flex gap-x-1 bg-surface p-2 rounded-lg\" [formGroup]=\"formGroupContractVehicle\">\r\n\r\n            <div class=\"flex-1 grid grid-cols-2 gap-x-1 gap-y-2 items-start\" formGroupName=\"vehicle\">\r\n\r\n                <app-input-autocomplete-template [idControl]=\"getVehicleTypeIdFormGroup(formGroupContractVehicle)\"\r\n                    [configuration]=\"{ textLabel: 'Tipo de vehículo', local: { nameModuleDatabase: nameModuleDatabase.VehicleTypes } }\" />\r\n\r\n                <mat-form-field>\r\n                    <mat-label>Placa</mat-label>\r\n                    <input matInput type=\"text\" formControlName=\"plate\"\r\n                        (ngModelChange)=\"changesContractVehiclesFormArray()\" />\r\n                    @if (formGroupContractVehicle.get('vehicle')?.get('plate')?.hasError('required')) {\r\n                    <mat-error>*Requerido</mat-error>\r\n                    } @else if (formGroupContractVehicle.get('vehicle')?.get('plate')?.hasError('pattern')) {\r\n                    <mat-error>*Placa ya existe</mat-error>\r\n                    }\r\n                </mat-form-field>\r\n\r\n            </div>\r\n\r\n            <button class=\"tonal-icon-button mt-2\" (click)=\"deleteContractVehicle(i)\">\r\n                <span class=\"material-icons\">delete</span>\r\n            </button>\r\n        </div>\r\n        }\r\n        }\r\n    </div>\r\n\r\n\r\n\r\n    <div class=\"col-span-full label-medium mt-4 mb-2 text-primary\">Detalles contractuales</div>\r\n\r\n    <app-input-select-template data-type=\"form-input\" class=\"col-span-full @2xl:col-span-2\" [control]=\"recurrentTypeCtrl\"\r\n        [configuration]=\"recurrentTypeSelectConfiguration\" />\r\n\r\n    <app-input-select-template data-type=\"form-input\" class=\"col-span-full @2xl:col-span-2\" [control]=\"periodCtrl\"\r\n        [configuration]=\"periodSelectConfiguration\" />\r\n\r\n    <app-datepicker-template data-type=\"form-input\" class=\"col-span-full @2xl:col-span-2\" [configuration]=\"{ label: 'Fecha de instalación' }\"\r\n        formControlName=\"installation_date\" />\r\n\r\n    <mat-form-field data-type=\"form-input\" class=\"col-span-full @2xl:col-span-2\">\r\n        <mat-label>Fecha de inicio</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"start_date\" />\r\n        <mat-error>*Requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field data-type=\"form-input\" class=\"col-span-full @2xl:col-span-2\">\r\n        <mat-label>Fecha de fin</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"end_date\" />\r\n        <mat-error>*Requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field data-type=\"form-input\" class=\"col-span-full @2xl:col-span-2\">\r\n        <mat-label>Días de prorrateo</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"proration_days\" />\r\n        <mat-error>*Requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n\r\n    <div class=\"col-span-full label-medium mt-4 mb-2 text-primary\">Detalles del cierre de la venta</div>\r\n\r\n    <mat-form-field data-type=\"form-input\" class=\"col-span-full @2xl:col-span-2\">\r\n        <mat-label>N° Doc. del contacto</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"client_responsible_document_number\" />\r\n        <mat-error>*Requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field data-type=\"form-input\" class=\"col-span-full @2xl:col-span-4\">\r\n        <mat-label>Nombre del contacto</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"client_responsible_name\" />\r\n        <mat-error>*Requerido</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field data-type=\"form-input\" class=\"col-span-full @2xl:col-span-3\">\r\n        <mat-label>Apellido paterno</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"client_responsible_paternal_name\" />\r\n        <mat-error>*Requerido</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field data-type=\"form-input\" class=\"col-span-full @2xl:col-span-3\">\r\n        <mat-label>Apellido materno</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"client_responsible_maternal_name\" />\r\n        <mat-error>*Requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field data-type=\"form-input\" class=\"col-span-full @2xl:col-span-2\">\r\n        <mat-label>Teléfono del contacto</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"client_responsible_phone\" />\r\n        <mat-error>*Requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field data-type=\"form-input\" class=\"col-span-full @2xl:col-span-5\">\r\n        <mat-label>Email del contacto</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"client_responsible_email\" />\r\n        <mat-error>*Requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n    <app-input-autocomplete-template data-type=\"form-input\" class=\"col-span-full @2xl:col-span-5\" [idControl]=\"saleUserIdCtrl\" [configuration]=\"saleUserAutocompleteConfiguration\" />\r\n\r\n</div>\r\n"
        },
        {
            "name": "ContractListPageComponent",
            "id": "component-ContractListPageComponent-e49df449887653130408840e8195d58d516ac8a987afaa4c773dbbe9dba82d29528c4cbbfdcb1610936a7cd12e64c46c46938380ac24ae598c43006a47e26da3",
            "file": "src/app/modules/tracking/contracts/pages/contract-list-page/contract-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contract-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./contract-list-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n    title: 'Contratos',\r\n    server: {\r\n      url: 'contract',\r\n      queryParams: { relations: 'client,clientBusinessUnit,plan' },\r\n    },\r\n    columns: signal(contractColumnsList())\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<Contract>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, signal } from '@angular/core';\r\nimport { ItemListTemplateComponent, ItemListConfiguration } from '@component/item-list-template/item-list-template.component';\r\nimport { Contract } from '@interface/contract';\r\nimport { contractColumnsList } from '../../helpers';\r\n\r\n@Component({\r\n  selector: 'app-contract-list-page',\r\n  standalone: true,\r\n  imports: [ItemListTemplateComponent],\r\n  templateUrl: './contract-list-page.component.html',\r\n  styleUrl: './contract-list-page.component.scss'\r\n})\r\nexport class ContractListPageComponent {\r\n  public configuration: ItemListConfiguration<Contract> = {\r\n    title: 'Contratos',\r\n    server: {\r\n      url: 'contract',\r\n      queryParams: { relations: 'client,clientBusinessUnit,plan' },\r\n    },\r\n    columns: signal(contractColumnsList())\r\n  };\r\n}\r\n",
            "styleUrl": "./contract-list-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-list-template [configuration]=\"configuration\" />"
        },
        {
            "name": "ContractResolutionCreateComponent",
            "id": "component-ContractResolutionCreateComponent-c0bdbbbad9aac77c75617a3947c7bdf7f64b595e38f403420f1b5ca18d0bec9b534f883e9a47d3ce1c416ac04c6db64b9d73ca947e57a87338f9ba1020731ff5",
            "file": "src/app/modules/tracking/contracts/contract-resolutions/pages/contract-resolution-create/contract-resolution-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contract-resolution-create",
            "styleUrls": [
                "./contract-resolution-create.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./contract-resolution-create.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n    titleModule: 'contrato',\r\n    title: 'Resolución de contrato',\r\n    type: 'create',\r\n    server: { url: 'contract-resolution' },\r\n    formGroup: new FormGroup({\r\n      contract_id: new FormControl(this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id'), [Validators.required]),\r\n      type: new FormControl<ContractResolutionTypeEnum | null>(null),\r\n      resolution_entity: new FormControl<ContractResolutionEntityEnum | null>(null),\r\n      reason: new FormControl<string>(''),\r\n      mutual_agreement: new FormControl<string>(''),\r\n      discharge_from_other_party: new FormControl<string>(''),\r\n      final_agreement: new FormControl<string>(''),\r\n      responsible_user_id: new FormControl<number | null>(null),\r\n      client_responsible_document_type: new FormControl<string>(''),\r\n      client_responsible_document_number: new FormControl<string>(''),\r\n      client_responsible_role: new FormControl<string>(''),\r\n      client_responsible_name: new FormControl<string>(''),\r\n      client_responsible_phone: new FormControl<string>(''),\r\n      client_responsible_email: new FormControl<string>(''),\r\n      link_file: new FormControl<string | null>(null),\r\n      responsible_user: new FormControl(null),\r\n    }),\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration<ContractResolution>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "ContractResolutionFormComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ItemFormConfiguration, ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\nimport { ContractResolution, ContractResolutionEntityEnum, ContractResolutionTypeEnum } from '@interface/contractResolution';\r\nimport { ContractResolutionFormComponent } from '../../components/contract-resolution-form/contract-resolution-form.component';\r\n\r\n@Component({\r\n  selector: 'app-contract-resolution-create',\r\n  templateUrl: './contract-resolution-create.component.html',\r\n  styleUrls: ['./contract-resolution-create.component.css'],\r\n  standalone: true,\r\n  imports: [\r\n    ItemFormTemplateComponent,\r\n    ContractResolutionFormComponent,\r\n  ],\r\n})\r\nexport class ContractResolutionCreateComponent {\r\n  private activatedRoute = inject(ActivatedRoute)\r\n  public configuration: ItemFormConfiguration<ContractResolution> = {\r\n    titleModule: 'contrato',\r\n    title: 'Resolución de contrato',\r\n    type: 'create',\r\n    server: { url: 'contract-resolution' },\r\n    formGroup: new FormGroup({\r\n      contract_id: new FormControl(this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id'), [Validators.required]),\r\n      type: new FormControl<ContractResolutionTypeEnum | null>(null),\r\n      resolution_entity: new FormControl<ContractResolutionEntityEnum | null>(null),\r\n      reason: new FormControl<string>(''),\r\n      mutual_agreement: new FormControl<string>(''),\r\n      discharge_from_other_party: new FormControl<string>(''),\r\n      final_agreement: new FormControl<string>(''),\r\n      responsible_user_id: new FormControl<number | null>(null),\r\n      client_responsible_document_type: new FormControl<string>(''),\r\n      client_responsible_document_number: new FormControl<string>(''),\r\n      client_responsible_role: new FormControl<string>(''),\r\n      client_responsible_name: new FormControl<string>(''),\r\n      client_responsible_phone: new FormControl<string>(''),\r\n      client_responsible_email: new FormControl<string>(''),\r\n      link_file: new FormControl<string | null>(null),\r\n      responsible_user: new FormControl(null),\r\n    }),\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./contract-resolution-create.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-form-template [configuration]=\"configuration\">\r\n    <app-contract-resolution-form [form]=\"configuration.formGroup\" />\r\n</app-item-form-template>"
        },
        {
            "name": "ContractResolutionDetailComponent",
            "id": "component-ContractResolutionDetailComponent-cc9a8ebdcde475ecb7dbd60220911c69c2357750f35f463c9e946fe070b3a1b0a43742ec5b29a35ba7faaef229e3481c785f14bd8b2e50efcd24465c6ba40ad2",
            "file": "src/app/modules/tracking/contracts/contract-resolutions/pages/contract-resolution-detail/contract-resolution-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contract-resolution-detail",
            "styleUrls": [
                "./contract-resolution-detail.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./contract-resolution-detail.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "alertConfiguration",
                    "defaultValue": "{\r\n    description: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Quasi soluta magni, libero vel possimus est facilis modi placeat ea quam obcaecati provident consequatur dicta odit ex iure aliquam. Et, sit!',\r\n    icon: 'warning',\r\n    actionButton: {\r\n      text: 'resolver contrato',\r\n      fn: () => this.router.navigate(['./create'], { relativeTo: this.activatedRoute }),\r\n    }\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AlertConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n    title: 'Resolución de contracto',\r\n    server: { url: 'contract-resolution' },\r\n    backButton: false,\r\n    ignoreShowError: true,\r\n    interceptHttpErrorItemFn: (error) => {\r\n      if (error.status == 404) {\r\n        this.notRegisterData.set(true);\r\n      }\r\n    },\r\n    groups: [\r\n      // {\r\n      //   details: [\r\n      //     {\r\n      //       label: 'Tipo de resolución',\r\n      //       key: 'type',\r\n      //       type: 'first-letter-uppercase',\r\n      //     },\r\n      //     {\r\n      //       label: 'Entidad resolutora',\r\n      //       key: 'resolution_entity',\r\n      //       type: 'first-letter-uppercase',\r\n      //     },\r\n      //     {\r\n      //       label: 'Motivo',\r\n      //       key: 'reason',\r\n      //     }, \r\n      //     {\r\n      //       label: 'Acuerdo mutuo',\r\n      //       key: 'mutual_agreement',\r\n      //     },\r\n      //     {\r\n      //       label: 'Descargo de la otra parte',\r\n      //       key: 'discharge_from_other_party',\r\n      //     },\r\n      //     {\r\n      //       label: 'Acuerdo final',\r\n      //       key: 'final_agreement',\r\n      //     },\r\n      //   ]\r\n      // },\r\n      // {\r\n      //   icon: 'location_away',\r\n      //   title: 'Responsable por parte del cliente',\r\n      //   details: [\r\n      //     {\r\n      //       key: 'client_responsible_document_number',\r\n      //       label: 'N° de documento',\r\n      //     },\r\n      //     {\r\n      //       key: 'client_responsible_name',\r\n      //       label: 'Nombre',\r\n      //     },\r\n      //     {\r\n      //       key: 'client_responsible_role',\r\n      //       label: 'Rol / Cargo',\r\n      //     }\r\n      //   ]\r\n      // },\r\n      // {\r\n      //   icon: 'account_box',\r\n      //   title: 'Responsable por parte de la empresa',\r\n      //   details: [\r\n      //     {\r\n      //       key: 'responsible_user_id',\r\n      //       label: 'Usuario',\r\n      //       type: 'user',\r\n      //       includeUserRole: true,\r\n      //     },\r\n      //   ]\r\n      // },\r\n      // detailItemRegisterDataGroup(),\r\n    ],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDetailConfiguration<ContractResolution>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "notRegisterData",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemDetailTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "AlertTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, WritableSignal, inject, signal } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AlertConfiguration, AlertTemplateComponent } from '@component/alert-template/alert-template.component';\r\nimport { ItemDetailTemplateComponent } from '@component/item-detail-template/item-detail-template.component';\r\nimport { ContractResolution } from '@interface/contractResolution';\r\nimport { ItemDetailConfiguration } from '@component/item-detail-template/item-detail-template.component';\r\n\r\n@Component({\r\n  selector: 'app-contract-resolution-detail',\r\n  templateUrl: './contract-resolution-detail.component.html',\r\n  styleUrls: ['./contract-resolution-detail.component.css'],\r\n  standalone: true,\r\n  imports: [ItemDetailTemplateComponent, AlertTemplateComponent],\r\n})\r\nexport class ContractResolutionDetailComponent {\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  public notRegisterData: WritableSignal<boolean> = signal(false);\r\n  public alertConfiguration: AlertConfiguration = {\r\n    description: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Quasi soluta magni, libero vel possimus est facilis modi placeat ea quam obcaecati provident consequatur dicta odit ex iure aliquam. Et, sit!',\r\n    icon: 'warning',\r\n    actionButton: {\r\n      text: 'resolver contrato',\r\n      fn: () => this.router.navigate(['./create'], { relativeTo: this.activatedRoute }),\r\n    }\r\n  }\r\n\r\n  public configuration: ItemDetailConfiguration<ContractResolution> = {\r\n    title: 'Resolución de contracto',\r\n    server: { url: 'contract-resolution' },\r\n    backButton: false,\r\n    ignoreShowError: true,\r\n    interceptHttpErrorItemFn: (error) => {\r\n      if (error.status == 404) {\r\n        this.notRegisterData.set(true);\r\n      }\r\n    },\r\n    groups: [\r\n      // {\r\n      //   details: [\r\n      //     {\r\n      //       label: 'Tipo de resolución',\r\n      //       key: 'type',\r\n      //       type: 'first-letter-uppercase',\r\n      //     },\r\n      //     {\r\n      //       label: 'Entidad resolutora',\r\n      //       key: 'resolution_entity',\r\n      //       type: 'first-letter-uppercase',\r\n      //     },\r\n      //     {\r\n      //       label: 'Motivo',\r\n      //       key: 'reason',\r\n      //     }, \r\n      //     {\r\n      //       label: 'Acuerdo mutuo',\r\n      //       key: 'mutual_agreement',\r\n      //     },\r\n      //     {\r\n      //       label: 'Descargo de la otra parte',\r\n      //       key: 'discharge_from_other_party',\r\n      //     },\r\n      //     {\r\n      //       label: 'Acuerdo final',\r\n      //       key: 'final_agreement',\r\n      //     },\r\n      //   ]\r\n      // },\r\n      // {\r\n      //   icon: 'location_away',\r\n      //   title: 'Responsable por parte del cliente',\r\n      //   details: [\r\n      //     {\r\n      //       key: 'client_responsible_document_number',\r\n      //       label: 'N° de documento',\r\n      //     },\r\n      //     {\r\n      //       key: 'client_responsible_name',\r\n      //       label: 'Nombre',\r\n      //     },\r\n      //     {\r\n      //       key: 'client_responsible_role',\r\n      //       label: 'Rol / Cargo',\r\n      //     }\r\n      //   ]\r\n      // },\r\n      // {\r\n      //   icon: 'account_box',\r\n      //   title: 'Responsable por parte de la empresa',\r\n      //   details: [\r\n      //     {\r\n      //       key: 'responsible_user_id',\r\n      //       label: 'Usuario',\r\n      //       type: 'user',\r\n      //       includeUserRole: true,\r\n      //     },\r\n      //   ]\r\n      // },\r\n      // detailItemRegisterDataGroup(),\r\n    ],\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./contract-resolution-detail.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "\r\n<app-item-detail-template [configuration]=\"configuration\">\r\n    @if(notRegisterData()) {\r\n        <ng-container beforeContent><app-alert-template [configuration]=\"alertConfiguration\" /></ng-container>\r\n    }\r\n</app-item-detail-template>"
        },
        {
            "name": "ContractResolutionFormComponent",
            "id": "component-ContractResolutionFormComponent-3bbfac045464e9323e098a61a33e34eeeeae6b551b0d27e477230d628976ed016c372fe83103fdaa723a57a8b5a827a955e6045a2317f5607e601b629105a7b2",
            "file": "src/app/modules/tracking/contracts/contract-resolutions/components/contract-resolution-form/contract-resolution-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contract-resolution-form",
            "styleUrls": [
                "./contract-resolution-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./contract-resolution-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 28,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contractResolutionEntities",
                    "defaultValue": "Object.values(ContractResolutionEntityEnum)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "contractResolutionType",
                    "defaultValue": "ContractResolutionTypeEnum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "contractResolutionTypes",
                    "defaultValue": "Object.values(ContractResolutionTypeEnum)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "nameModuleDatabase",
                    "defaultValue": "NameModuleDatabase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "FirstLetterUppercasePipe",
                    "type": "pipe"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "InputSelectTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "InputAutocompleteTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { ContractResolutionEntityEnum, ContractResolutionTypeEnum } from '@interface/contractResolution';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { NameModuleDatabase } from '@service/database-storage.service';\r\n\r\n@Component({\r\n  selector: 'app-contract-resolution-form',\r\n  templateUrl: './contract-resolution-form.component.html',\r\n  styleUrls: ['./contract-resolution-form.component.css'],\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    FirstLetterUppercasePipe,\r\n    MatSelectModule,\r\n    InputSelectTemplateComponent,\r\n    InputAutocompleteTemplateComponent,\r\n  ],\r\n})\r\nexport class ContractResolutionFormComponent {\r\n  @Input({required: true}) public form!: FormGroup;\r\n  public nameModuleDatabase = NameModuleDatabase;\r\n  public contractResolutionEntities: any = Object.values(ContractResolutionEntityEnum);\r\n  public contractResolutionTypes = Object.values(ContractResolutionTypeEnum);\r\n  public contractResolutionType = ContractResolutionTypeEnum;\r\n\r\n  get typeCtrl(): FormControl {\r\n    return this.form.get('type') as FormControl;\r\n  }\r\n  get responsibleUserIdCtrl(): FormControl {\r\n    return this.form.get('responsible_user_id') as FormControl;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./contract-resolution-form.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "typeCtrl": {
                    "name": "typeCtrl",
                    "getSignature": {
                        "name": "typeCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 34
                    }
                },
                "responsibleUserIdCtrl": {
                    "name": "responsibleUserIdCtrl",
                    "getSignature": {
                        "name": "responsibleUserIdCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 37
                    }
                }
            },
            "templateData": "<div [formGroup]=\"form\" class=\"form__content__inputs\">\r\n\r\n    <mat-form-field class=\"col-span-full @2xl:col-span-6\">\r\n        <mat-label>Tipo de resolución</mat-label>\r\n        <mat-select formControlName=\"type\">\r\n            @for (type of contractResolutionTypes; track $index) {\r\n                <mat-option [value]=\"type\">\r\n                    {{ type | firstLetterUppercase }}\r\n                </mat-option>\r\n            }\r\n        </mat-select>\r\n        <mat-error>*Campo requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n    @if (typeCtrl.value == contractResolutionType.Unilateral) {\r\n        <mat-form-field class=\"col-span-full @2xl:col-span-6\">\r\n            <mat-label>Entidad que resuelve</mat-label>\r\n            <mat-select formControlName=\"resolution_entity\">\r\n                @for (entity of contractResolutionEntities; track $index) {\r\n                    <mat-option [value]=\"entity\">\r\n                        {{ entity | firstLetterUppercase }}\r\n                    </mat-option>\r\n                }\r\n            </mat-select>\r\n            <mat-error>*Campo requerido</mat-error>\r\n        </mat-form-field>\r\n    }\r\n\r\n\r\n    <mat-form-field class=\"col-span-full @2xl:col-span-4 !col-start-1\">\r\n        <mat-label>Causal</mat-label>\r\n        <textarea matInput formControlName=\"reason\" rows=\"4\" placeholder=\"Describir causal...\"></textarea>\r\n        <mat-error>*Campo requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n    @if (typeCtrl.value == contractResolutionType.MutuoAcuerdo) {\r\n        <mat-form-field class=\"col-span-full @2xl:col-span-4\">\r\n            <mat-label>Mutuo acuerdo</mat-label>\r\n            <textarea matInput formControlName=\"mutual_agreement\" rows=\"4\" placeholder=\"Describir el mutuo acuerdo...\"></textarea>\r\n            <mat-error>*Campo requerido</mat-error>\r\n        </mat-form-field>\r\n    }\r\n\r\n    @if (typeCtrl.value == contractResolutionType.Unilateral) {\r\n        <mat-form-field class=\"col-span-full @2xl:col-span-4\">\r\n            <mat-label>Descargo de la otra parte</mat-label>\r\n            <textarea matInput formControlName=\"discharge_from_other_party\" rows=\"4\" placeholder=\"Describir el descargo de la otra parte...\"></textarea>\r\n            <mat-error>*Campo requerido</mat-error>\r\n        </mat-form-field>\r\n    }\r\n\r\n    <mat-form-field class=\"col-span-full @2xl:col-span-4\">\r\n        <mat-label>Acuerdo final</mat-label>\r\n        <textarea matInput formControlName=\"final_agreement\" rows=\"4\" placeholder=\"Describir acuerdo final...\"></textarea>\r\n        <mat-error>*Campo requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n    <div class=\"col-span-full mb-1 mt-2 label-small\">Responsable por parte del cliente</div>\r\n\r\n    <mat-form-field class=\"col-span-full @2xl:col-span-3\">\r\n        <mat-label>N° de documento</mat-label>\r\n        <input matInput formControlName=\"client_responsible_document_number\" placeholder=\"N° de documento...\">\r\n        <mat-error>*Campo requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field class=\"col-span-full @2xl:col-span-6\">\r\n        <mat-label>Nombre completo</mat-label>\r\n        <input matInput formControlName=\"client_responsible_name\" placeholder=\"Nombre completo...\">\r\n        <mat-error>*Campo requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field class=\"col-span-full @2xl:col-span-3\">\r\n        <mat-label>Rol / Cargo</mat-label>\r\n        <input matInput formControlName=\"client_responsible_role\" placeholder=\"Rol / Cargo...\">\r\n        <mat-error>*Campo requerido</mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <div class=\"col-span-full mb-1 mt-2 label-small\">Responsable por parte dea empresa</div>\r\n\r\n    <app-input-autocomplete-template class=\"col-span-full\" [idControl]=\"responsibleUserIdCtrl\" [configuration]=\"{\r\n        textLabel: 'Usuario',\r\n        local: { nameModuleDatabase: nameModuleDatabase.Users }\r\n    }\" />\r\n\r\n</div>"
        },
        {
            "name": "ContractVehicleListPageComponent",
            "id": "component-ContractVehicleListPageComponent-4a103c8e7857ead69cfbed08cd62f8b066183202df703428f8292b6075413cca6598d26c9fd9e5a5c41888ec114992d7147a32cbf2caf82feee18d147602bbea",
            "file": "src/app/modules/tracking/contract-vehicles/pages/contract-vehicle-list-page/contract-vehicle-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contract-vehicle-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./contract-vehicle-list-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configList",
                    "defaultValue": "{\r\n        title: 'Vehículos',\r\n        server: {\r\n            url: 'vehicle',\r\n            queryParams: {\r\n                relations: 'client,vehicleType',\r\n                contract_id: this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id')\r\n            },\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Placa / Tipo',\r\n                sort: { key: 'plate' },\r\n                displayValueFn: (item) => `${item.plate} / ${item.vehicle_type?.name.toUpperCase()}`,\r\n                gridColumn: '1fr',\r\n            }),\r\n            textColumn({\r\n                title: 'Cliente',\r\n                gridColumn: 'fit-content(250px)',\r\n                displayValueFn: (item) => item?.client?.name ? item.client?.name : '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Color',\r\n                sort: { key: 'color' },\r\n                displayValueFn: (item) => item.color ?? '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Marca',\r\n                sort: { key: 'brand' },\r\n                displayValueFn: (item) => item.brand ?? '--',\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<Vehicle>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, signal } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ItemListConfiguration, ItemListTemplateComponent, itemCreatedAtColumn, itemStatusColumn, itemUpdatedAtColumn, textColumn } from '@component/item-list-template/item-list-template.component';\r\nimport { Vehicle } from '@interface/vehicle';\r\n\r\n@Component({\r\n  selector: 'app-contract-vehicle-list-page',\r\n  standalone: true,\r\n  imports: [ItemListTemplateComponent],\r\n  templateUrl: './contract-vehicle-list-page.component.html',\r\n  styleUrl: './contract-vehicle-list-page.component.scss'\r\n})\r\nexport class ContractVehicleListPageComponent {\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    public configList: ItemListConfiguration<Vehicle> = {\r\n        title: 'Vehículos',\r\n        server: {\r\n            url: 'vehicle',\r\n            queryParams: {\r\n                relations: 'client,vehicleType',\r\n                contract_id: this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id')\r\n            },\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Placa / Tipo',\r\n                sort: { key: 'plate' },\r\n                displayValueFn: (item) => `${item.plate} / ${item.vehicle_type?.name.toUpperCase()}`,\r\n                gridColumn: '1fr',\r\n            }),\r\n            textColumn({\r\n                title: 'Cliente',\r\n                gridColumn: 'fit-content(250px)',\r\n                displayValueFn: (item) => item?.client?.name ? item.client?.name : '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Color',\r\n                sort: { key: 'color' },\r\n                displayValueFn: (item) => item.color ?? '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Marca',\r\n                sort: { key: 'brand' },\r\n                displayValueFn: (item) => item.brand ?? '--',\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }\r\n}\r\n",
            "styleUrl": "./contract-vehicle-list-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-list-template [configuration]=\"configList\" />\r\n"
        },
        {
            "name": "ContractViewPageComponent",
            "id": "component-ContractViewPageComponent-9fe8b31c8d5c67d152684f127f7867a9239058d0b169ca9ff1f5abc349f11b7233935d1351ca24b2fc6997e5b67343d62d7e4462e277c4a4bf253aeb2a839abb",
            "file": "src/app/modules/tracking/contracts/pages/contract-view-page/contract-view-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contract-view-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./contract-view-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n    titleModule: 'Contrato',\r\n    server: {\r\n      url: 'contract',\r\n      queryParams: { relations: 'client,clientBusinessUnit,plan' },\r\n    },\r\n    nameItemFn: (item) => `${item.code} - ${item.client?.name}`,\r\n    links: [\r\n      {\r\n        text: 'Detalles',\r\n        routerLink: './detail',\r\n      },\r\n      {\r\n        text: 'Vehículos',\r\n        routerLink: './vehicle',\r\n      },\r\n      {\r\n        text: 'Resolución',\r\n        routerLink: './resolution',\r\n      },\r\n      {\r\n        text: 'Documentos',\r\n        routerLink: './document',\r\n      },\r\n\r\n    ]\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemViewConfiguration<Contract>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemViewTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemViewTemplateComponent, ItemViewConfiguration } from '@component/item-view-template/item-view-template.component';\r\nimport { Contract } from '@interface/contract';\r\n\r\n@Component({\r\n  selector: 'app-contract-view-page',\r\n  standalone: true,\r\n  imports: [ItemViewTemplateComponent],\r\n  templateUrl: './contract-view-page.component.html',\r\n  styleUrl: './contract-view-page.component.scss'\r\n})\r\nexport class ContractViewPageComponent {\r\n  public configuration: ItemViewConfiguration<Contract> = {\r\n    titleModule: 'Contrato',\r\n    server: {\r\n      url: 'contract',\r\n      queryParams: { relations: 'client,clientBusinessUnit,plan' },\r\n    },\r\n    nameItemFn: (item) => `${item.code} - ${item.client?.name}`,\r\n    links: [\r\n      {\r\n        text: 'Detalles',\r\n        routerLink: './detail',\r\n      },\r\n      {\r\n        text: 'Vehículos',\r\n        routerLink: './vehicle',\r\n      },\r\n      {\r\n        text: 'Resolución',\r\n        routerLink: './resolution',\r\n      },\r\n      {\r\n        text: 'Documentos',\r\n        routerLink: './document',\r\n      },\r\n\r\n    ]\r\n  }\r\n}\r\n",
            "styleUrl": "./contract-view-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-view-template [configuration]=\"configuration\" />"
        },
        {
            "name": "DatepickerTemplateComponent",
            "id": "component-DatepickerTemplateComponent-49db8917b0b702c781ceb5e73571efae1f36c1d23237047205c43cc08ad8af3e8f5af8d098518dce9c99ee4d4d2a25690cc9b8f47db0c9454d3453ec4f3b0d0b",
            "file": "src/app/shared/components/datepicker-template/datepicker-template.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: DateAdapter, useClass: MyDateAdapter, deps: [DateFnsAdapter],\n}"
                },
                {
                    "name": "{\n    provide: MAT_DATE_FORMATS, useValue: MY_DATE_FORMATS,\n}"
                },
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: DatepickerTemplateComponent, multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: DatepickerTemplateComponent, multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-datepicker-template",
            "styleUrls": [
                "./datepicker-template.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./datepicker-template.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 66,
                    "type": "ConfigurationDatepickerTemplate",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formCtrl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "onChangefn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouchedfn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setRequiredCtrl",
                    "args": [
                        {
                            "name": "required",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "required",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "DatePipe",
                    "type": "pipe"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ReactiveFormsModule,\r\n  ValidationErrors,\r\n  Validator,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\r\nimport { DateFnsAdapter } from '@angular/material-date-fns-adapter';\r\nimport { DatePipe, NgIf } from '@angular/common';\r\nimport { MyDateAdapter } from '@utility/myDateAdapter';\r\nimport { MY_DATE_FORMATS } from '@utility/myDateFormat';\r\n\r\nexport interface ConfigurationDatepickerTemplate {\r\n  label: string;\r\n  placeholder?: string;\r\n  min?: Date | null | undefined;\r\n  max?: Date | null | undefined;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-datepicker-template',\r\n  standalone: true,\r\n  imports: [\r\n    NgIf,\r\n    DatePipe,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n  templateUrl: './datepicker-template.component.html',\r\n  styleUrls: ['./datepicker-template.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    {\r\n      provide: DateAdapter,\r\n      useClass: MyDateAdapter,\r\n      deps: [DateFnsAdapter],\r\n    },\r\n    {\r\n      provide: MAT_DATE_FORMATS,\r\n      useValue: MY_DATE_FORMATS,\r\n    },\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: DatepickerTemplateComponent,\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: DatepickerTemplateComponent,\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class DatepickerTemplateComponent implements ControlValueAccessor, Validator {\r\n  @Input({ required: true }) configuration!: ConfigurationDatepickerTemplate;\r\n\r\n  private onChangefn!: Function;\r\n  private onTouchedfn!: Function;\r\n  public formCtrl = new FormControl();\r\n  private required = false;\r\n\r\n  ngAfterViewInit() {\r\n    this.formCtrl.valueChanges.subscribe((value) => {\r\n      this.onChangefn(value);\r\n    });\r\n  }\r\n\r\n  writeValue(value: any): void {\r\n    this.formCtrl.setValue(value);\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChangefn = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouchedfn = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    isDisabled\r\n      ? this.formCtrl.disable({ emitEvent: false })\r\n      : this.formCtrl.enable({ emitEvent: false });\r\n  }\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (control.hasValidator(Validators.required) != this.required) this.setRequiredCtrl(control.hasValidator(Validators.required));\r\n    return null;\r\n  }\r\n\r\n  private setRequiredCtrl(required: boolean) {\r\n    if (required) this.formCtrl.setValidators([Validators.required]);\r\n    else this.formCtrl.setValidators([]);\r\n    this.formCtrl.updateValueAndValidity({ emitEvent: false });\r\n  }\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    display: grid;\r\n}",
                    "styleUrl": "./datepicker-template.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "Validator"
            ],
            "templateData": "<mat-form-field class=\"col-span-full @2xl:col-span-3\">\r\n    <mat-label>{{configuration.label}}</mat-label>\r\n    <input [formControl]=\"formCtrl\" matInput type=\"text\" [matDatepicker]=\"dp\" [min]=\"configuration.min\" [max]=\"configuration.max\">\r\n    <button matSuffix class=\"icon-button\" (click)=\"dp.open()\" [disabled]=\"formCtrl.disabled\" type=\"button\">\r\n        <span class=\"material-icons\">calendar_month</span>\r\n    </button>\r\n    <mat-error *ngIf=\"formCtrl.hasError('required')\">*Requerido</mat-error>\r\n    <mat-error *ngIf=\"formCtrl.hasError('min')\">*La fecha mínima es {{configuration.min | date:'dd/MM/yyyy'}}</mat-error>\r\n    <mat-error *ngIf=\"formCtrl.hasError('max')\">*La fecha máxima es {{configuration.max | date:'dd/MM/yyyy'}}</mat-error>\r\n    <mat-datepicker #dp=\"matDatepicker\"/>\r\n</mat-form-field>"
        },
        {
            "name": "DocumentCreatePageComponent",
            "id": "component-DocumentCreatePageComponent-806c62f8776eef5275246df15a3bf02cb9f5cdbce99e681049f320f9e143167886d51db82d2bf0796ac8a80755e21b36cc5115ad45ff5ef49b3a325c3d72404c",
            "file": "src/app/modules/administration/documents/pages/document-create-page/document-create-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-document-create-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./document-create-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-document-create-page',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './document-create-page.component.html',\r\n  styleUrl: './document-create-page.component.scss'\r\n})\r\nexport class DocumentCreatePageComponent {\r\n\r\n}\r\n",
            "styleUrl": "./document-create-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>document-create-page works!</p>\r\n"
        },
        {
            "name": "DocumentDetailPageComponent",
            "id": "component-DocumentDetailPageComponent-69949607170b3d101f67495f2f5baa13b98ff335ba6a06f0f3112ae4038af9139de6dcfe7a93317222f7baaff4dae1e616721b87a0733cd0c9178c37607b2573",
            "file": "src/app/modules/administration/documents/pages/document-detail-page/document-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-document-detail-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./document-detail-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        title: 'Detalles',\r\n        server: {\r\n            url: 'document',\r\n            queryParams: {relations: 'client'}\r\n        },\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'Cliente',\r\n                        displayValueFn: (item) => item.client?.name\r\n                    },\r\n                    {\r\n                        title: 'Serie',\r\n                        displayValueFn: (item) => item.serie\r\n                    },\r\n                    {\r\n                        title: 'Correlativo',\r\n                        displayValueFn: (item) => item.correlative\r\n                    },\r\n                    {\r\n                        title: 'IGV',\r\n                        displayValueFn: (item) => item.igv,\r\n                        type: 'number'\r\n                    },\r\n                    {\r\n                        title: 'Fecha de registro',\r\n                        displayValueFn: (item) => item.registration_date,\r\n                        type: 'date'\r\n                    },\r\n                    {\r\n                        title: 'Fecha de asunto',\r\n                        displayValueFn: (item) => item.issue_date,\r\n                        type: 'date'\r\n                    },\r\n                    {\r\n                        title: 'Fecha de expiración',\r\n                        displayValueFn: (item) => item.expiration_date,\r\n                        type: 'date'\r\n                    },\r\n                    {\r\n                        title: 'Tipo de cambio',\r\n                        displayValueFn: (item) => item.exchange_rate_sale,\r\n                        type: 'number'\r\n                    },\r\n                    {\r\n                        title: 'A crédito',\r\n                        displayValueFn: (item) => item.credit_days ? 'SI': 'NO',\r\n                    },\r\n                    {\r\n                        title: 'En cuotas',\r\n                        displayValueFn: (item) => item.is_fees ? 'SI' : 'NO',\r\n                    },\r\n                    {\r\n                        title: 'Es retención',\r\n                        displayValueFn: (item) => item.is_retention ? 'SI' : 'NO',\r\n                    },\r\n                    {\r\n                        title: 'Retención en (%) y en (S/.)',\r\n                        displayValueFn: (item) => item.total_retention ? `${item.retention_percent}% - ${item.total_retention}0` : '--',\r\n                    },\r\n                    {\r\n                        title: 'Es percepción',\r\n                        displayValueFn: (item) => item.is_perception ? 'SI' : 'NO',\r\n                    },\r\n                    {\r\n                        title: 'Percepción en (%) y en (S/.)',\r\n                        displayValueFn: (item) => item.total_perception ? `${item.perception_percent}% - ${item.total_perception}` : '--',\r\n                    },\r\n                    {\r\n                        title: 'Es detracción',\r\n                        displayValueFn: (item) => item.is_detraction ? 'SI' : 'NO',\r\n                    },\r\n                    {\r\n                        title: 'Detracción en (%) y en (S/.)',\r\n                        displayValueFn: (item) => item.total_detraction ? `${item.detraction_percent}% - ${item.total_detraction}` : '--',\r\n                    },\r\n                    {\r\n                        title: 'Información adicional',\r\n                        displayValueFn: (item) => item.additional_information,\r\n                    },\r\n                    {\r\n                        title: 'Información de la SUNAT',\r\n                        displayValueFn: (item) => item.sunat_information,\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDetailConfiguration<Document>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemDetailTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemDetailTemplateComponent, registerDataGroupDetail } from '@component/item-detail-template/item-detail-template.component';\r\nimport { Document } from '@interface/document';\r\nimport { ItemDetailConfiguration } from '@component/item-detail-template/item-detail-template.component';\r\n\r\n@Component({\r\n  selector: 'app-document-detail-page',\r\n  standalone: true,\r\n  imports: [ItemDetailTemplateComponent],\r\n  templateUrl: './document-detail-page.component.html',\r\n  styleUrl: './document-detail-page.component.scss'\r\n})\r\nexport class DocumentDetailPageComponent {\r\n    public configuration: ItemDetailConfiguration<Document> = {\r\n        title: 'Detalles',\r\n        server: {\r\n            url: 'document',\r\n            queryParams: {relations: 'client'}\r\n        },\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'Cliente',\r\n                        displayValueFn: (item) => item.client?.name\r\n                    },\r\n                    {\r\n                        title: 'Serie',\r\n                        displayValueFn: (item) => item.serie\r\n                    },\r\n                    {\r\n                        title: 'Correlativo',\r\n                        displayValueFn: (item) => item.correlative\r\n                    },\r\n                    {\r\n                        title: 'IGV',\r\n                        displayValueFn: (item) => item.igv,\r\n                        type: 'number'\r\n                    },\r\n                    {\r\n                        title: 'Fecha de registro',\r\n                        displayValueFn: (item) => item.registration_date,\r\n                        type: 'date'\r\n                    },\r\n                    {\r\n                        title: 'Fecha de asunto',\r\n                        displayValueFn: (item) => item.issue_date,\r\n                        type: 'date'\r\n                    },\r\n                    {\r\n                        title: 'Fecha de expiración',\r\n                        displayValueFn: (item) => item.expiration_date,\r\n                        type: 'date'\r\n                    },\r\n                    {\r\n                        title: 'Tipo de cambio',\r\n                        displayValueFn: (item) => item.exchange_rate_sale,\r\n                        type: 'number'\r\n                    },\r\n                    {\r\n                        title: 'A crédito',\r\n                        displayValueFn: (item) => item.credit_days ? 'SI': 'NO',\r\n                    },\r\n                    {\r\n                        title: 'En cuotas',\r\n                        displayValueFn: (item) => item.is_fees ? 'SI' : 'NO',\r\n                    },\r\n                    {\r\n                        title: 'Es retención',\r\n                        displayValueFn: (item) => item.is_retention ? 'SI' : 'NO',\r\n                    },\r\n                    {\r\n                        title: 'Retención en (%) y en (S/.)',\r\n                        displayValueFn: (item) => item.total_retention ? `${item.retention_percent}% - ${item.total_retention}0` : '--',\r\n                    },\r\n                    {\r\n                        title: 'Es percepción',\r\n                        displayValueFn: (item) => item.is_perception ? 'SI' : 'NO',\r\n                    },\r\n                    {\r\n                        title: 'Percepción en (%) y en (S/.)',\r\n                        displayValueFn: (item) => item.total_perception ? `${item.perception_percent}% - ${item.total_perception}` : '--',\r\n                    },\r\n                    {\r\n                        title: 'Es detracción',\r\n                        displayValueFn: (item) => item.is_detraction ? 'SI' : 'NO',\r\n                    },\r\n                    {\r\n                        title: 'Detracción en (%) y en (S/.)',\r\n                        displayValueFn: (item) => item.total_detraction ? `${item.detraction_percent}% - ${item.total_detraction}` : '--',\r\n                    },\r\n                    {\r\n                        title: 'Información adicional',\r\n                        displayValueFn: (item) => item.additional_information,\r\n                    },\r\n                    {\r\n                        title: 'Información de la SUNAT',\r\n                        displayValueFn: (item) => item.sunat_information,\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }\r\n}\r\n",
            "styleUrl": "./document-detail-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-detail-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "DocumentEditPageComponent",
            "id": "component-DocumentEditPageComponent-7ac9dd73080e8bb4d34dfab79fac2dbde26697d6ecd2e91193bb6d7514437544541c81d89b92addb6682b45973cf435bf42d5f7af2b4c587d5295da5b2e7cd90",
            "file": "src/app/modules/administration/documents/pages/document-edit-page/document-edit-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-document-edit-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./document-edit-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-document-edit-page',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './document-edit-page.component.html',\r\n  styleUrl: './document-edit-page.component.scss'\r\n})\r\nexport class DocumentEditPageComponent {\r\n\r\n}\r\n",
            "styleUrl": "./document-edit-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>document-edit-page works!</p>\r\n"
        },
        {
            "name": "DocumentListPageComponent",
            "id": "component-DocumentListPageComponent-29607d68b58f8b7480781a50e6226f4ef14f8fb31d6cdba0c57593702deb7d88b3679dc98a3614e8c70464b9a90a93012a79f660602108bbf9786560fc39e0e0",
            "file": "src/app/modules/administration/documents/pages/document-list-page/document-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-document-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./document-list-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "anulateFormTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'anulateFormTemplate', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "commentCtrl",
                    "defaultValue": "new FormControl('', [Validators.required])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n    title: 'Documentos',\r\n    server: {\r\n      url: 'document',\r\n      queryParams: {\r\n        relations: this.router.url.includes('/organization/client/view') ? 'documentItems' : 'client,documentItems',\r\n        client_id: this.router.url.includes('/organization/client/view') ? this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id') : null,\r\n        contract_id: this.router.url.includes('/tracking/contract/view') ? this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id') : null,\r\n      },\r\n    },\r\n    rows: {\r\n      options: [\r\n        viewItemActionButton(),\r\n        clickEventActionButton({\r\n          icon: 'post_add',\r\n          text: 'Detalles',\r\n          fn: (item) => {\r\n            this.router.navigate([{ outlets: { 'route-lateral': `administration/document/detail/${item.id}` } }]);\r\n          },\r\n        }),\r\n        clickEventActionButton({\r\n          icon: 'send',\r\n          text: 'Emitir',\r\n          hidden: (item) => item.status !== StatusModel.Generada,\r\n          fn: async (item, index, { updateChangesItemFn }) => {\r\n            if (item.expiration_date) {\r\n              const expireDate = parseISO(item.expiration_date);\r\n              this.expireDateCtrl.setValue(this.minDate > expireDate ? this.minDate : expireDate);\r\n            };\r\n            const response = await this.emitDocument(item);\r\n            if (response) updateChangesItemFn(index, { ...item, ...response });\r\n          },\r\n        }),\r\n        clickEventActionButton({\r\n          text: 'Anular',\r\n          icon: 'scan_delete',\r\n          hidden: (item) => {\r\n            return item.status !== StatusModel.Aceptada;\r\n          },\r\n          fn: async (item, index, { updateChangesItemFn }) => {\r\n            const response = await this.cancelDocument(item);\r\n            if (response) updateChangesItemFn(index, { ...item, ...response });\r\n          },\r\n        }),\r\n        clickEventActionButton({\r\n          text: 'Nota de crédito',\r\n          icon: 'scan_delete',\r\n          hidden: (item) => {\r\n            return item.status !== StatusModel.Aceptada;\r\n          },\r\n          fn: async (item, index, { updateChangesItemFn }) => {\r\n            const response = await this.anulateWithNote(item, 'crédito');\r\n            if (response) updateChangesItemFn(index, { ...item, ...response });\r\n          },\r\n        }),\r\n        clickEventActionButton({\r\n          text: 'Nota de débito',\r\n          icon: 'scan_delete',\r\n          hidden: (item) => {\r\n            return item.status !== StatusModel.Aceptada;\r\n          },\r\n          fn: async (item, index, { updateChangesItemFn }) => {\r\n            const response = await this.anulateWithNote(item, 'crédito');\r\n            if (response) updateChangesItemFn(index, { ...item, ...response });\r\n          }\r\n        }),\r\n        clickEventActionButton({\r\n          text: 'Descargar PDF',\r\n          icon: 'cloud_download',\r\n          hidden: (item) => {\r\n            return item.status !== StatusModel.Aceptada;\r\n          },\r\n          fn: (item) => console.log('Descargar PDF'),\r\n        }),\r\n        clickEventActionButton({\r\n          text: 'Descargar XML',\r\n          icon: 'cloud_download',\r\n          hidden: (item) => {\r\n            return item.status !== StatusModel.Aceptada;\r\n          },\r\n          fn: (item) => this.downloadFile(item, 'xml'),\r\n        }),\r\n        clickEventActionButton({\r\n          text: 'Descargar CDR',\r\n          icon: 'cloud_download',\r\n          hidden: (item) => {\r\n            return item.status !== StatusModel.Aceptada;\r\n          },\r\n          fn: (item) => this.downloadFile(item, 'cdr'),\r\n        }),\r\n      ]\r\n    },\r\n    columns: signal(this.generateColumns()),\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<ExtDocument>",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "emitForm",
                    "defaultValue": "new FormGroup({\r\n    expire_date: new FormControl('', [Validators.required]),\r\n    comment: new FormControl('', [Validators.required]),\r\n    credit: new FormControl(false, [Validators.required]),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "emitFormTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'emitFormTemplate', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "fetch",
                    "defaultValue": "inject(FetchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "matDialog",
                    "defaultValue": "inject(MatDialog)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "minDate",
                    "defaultValue": "addDays(new Date(), 1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "anulateWithNote",
                    "args": [
                        {
                            "name": "item",
                            "type": "Document",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"débito\" | \"crédito\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Document | null>",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Document",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"débito\" | \"crédito\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cancelDocument",
                    "args": [
                        {
                            "name": "item",
                            "type": "Document",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Document | null>",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Document",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmDialog",
                    "args": [
                        {
                            "name": "data",
                            "type": "ConfirmDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "ConfirmDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadFile",
                    "args": [
                        {
                            "name": "item",
                            "type": "Document",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"xml\" | \"cdr\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Document",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"xml\" | \"cdr\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitDocument",
                    "args": [
                        {
                            "name": "item",
                            "type": "Document",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Document | null>",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Document",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "ListColumn[]",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatSlideToggleModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, TemplateRef, ViewChild, inject, signal } from '@angular/core';\r\nimport { ItemListTemplateComponent, ListColumn, ListItemExtended, dateColumn, itemCreatedAtColumn, itemStatusColumn, numberColumn, viewItemActionButton } from '@component/item-list-template/item-list-template.component';\r\nimport { Document } from '@interface/document';\r\nimport { ItemListConfiguration, clickEventActionButton, textColumn } from '@component/item-list-template/item-list-template.component';\r\nimport { FetchService, RequestInitFetch } from '@service/fetch.service';\r\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { ConfirmDialogData, ConfirmDialogTemplateComponent } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { addDays, format, parseISO } from 'date-fns';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { StatusModel } from '@interface/baseModel';\r\n\r\ninterface ExtDocument extends Document, ListItemExtended { }\r\n\r\n@Component({\r\n  selector: 'app-document-list-page',\r\n  standalone: true,\r\n  imports: [\r\n    ItemListTemplateComponent,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatSlideToggleModule,\r\n  ],\r\n  templateUrl: './document-list-page.component.html',\r\n  styleUrl: './document-list-page.component.scss',\r\n})\r\nexport class DocumentListPageComponent {\r\n  @ViewChild('anulateFormTemplate', { static: true }) anulateFormTemplate!: TemplateRef<any>;\r\n  @ViewChild('emitFormTemplate', { static: true }) emitFormTemplate!: TemplateRef<any>;\r\n  private router = inject(Router);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private fetch = inject(FetchService);\r\n  private matDialog = inject(MatDialog);\r\n  public commentCtrl = new FormControl('', [Validators.required]);\r\n  public emitForm = new FormGroup({\r\n    expire_date: new FormControl('', [Validators.required]),\r\n    comment: new FormControl('', [Validators.required]),\r\n    credit: new FormControl(false, [Validators.required]),\r\n  });\r\n  public minDate = addDays(new Date(), 1);\r\n\r\n  public configuration: ItemListConfiguration<ExtDocument> = {\r\n    title: 'Documentos',\r\n    server: {\r\n      url: 'document',\r\n      queryParams: {\r\n        relations: this.router.url.includes('/organization/client/view') ? 'documentItems' : 'client,documentItems',\r\n        client_id: this.router.url.includes('/organization/client/view') ? this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id') : null,\r\n        contract_id: this.router.url.includes('/tracking/contract/view') ? this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id') : null,\r\n      },\r\n    },\r\n    rows: {\r\n      options: [\r\n        viewItemActionButton(),\r\n        clickEventActionButton({\r\n          icon: 'post_add',\r\n          text: 'Detalles',\r\n          fn: (item) => {\r\n            this.router.navigate([{ outlets: { 'route-lateral': `administration/document/detail/${item.id}` } }]);\r\n          },\r\n        }),\r\n        clickEventActionButton({\r\n          icon: 'send',\r\n          text: 'Emitir',\r\n          hidden: (item) => item.status !== StatusModel.Generada,\r\n          fn: async (item, index, { updateChangesItemFn }) => {\r\n            if (item.expiration_date) {\r\n              const expireDate = parseISO(item.expiration_date);\r\n              this.expireDateCtrl.setValue(this.minDate > expireDate ? this.minDate : expireDate);\r\n            };\r\n            const response = await this.emitDocument(item);\r\n            if (response) updateChangesItemFn(index, { ...item, ...response });\r\n          },\r\n        }),\r\n        clickEventActionButton({\r\n          text: 'Anular',\r\n          icon: 'scan_delete',\r\n          hidden: (item) => {\r\n            return item.status !== StatusModel.Aceptada;\r\n          },\r\n          fn: async (item, index, { updateChangesItemFn }) => {\r\n            const response = await this.cancelDocument(item);\r\n            if (response) updateChangesItemFn(index, { ...item, ...response });\r\n          },\r\n        }),\r\n        clickEventActionButton({\r\n          text: 'Nota de crédito',\r\n          icon: 'scan_delete',\r\n          hidden: (item) => {\r\n            return item.status !== StatusModel.Aceptada;\r\n          },\r\n          fn: async (item, index, { updateChangesItemFn }) => {\r\n            const response = await this.anulateWithNote(item, 'crédito');\r\n            if (response) updateChangesItemFn(index, { ...item, ...response });\r\n          },\r\n        }),\r\n        clickEventActionButton({\r\n          text: 'Nota de débito',\r\n          icon: 'scan_delete',\r\n          hidden: (item) => {\r\n            return item.status !== StatusModel.Aceptada;\r\n          },\r\n          fn: async (item, index, { updateChangesItemFn }) => {\r\n            const response = await this.anulateWithNote(item, 'crédito');\r\n            if (response) updateChangesItemFn(index, { ...item, ...response });\r\n          }\r\n        }),\r\n        clickEventActionButton({\r\n          text: 'Descargar PDF',\r\n          icon: 'cloud_download',\r\n          hidden: (item) => {\r\n            return item.status !== StatusModel.Aceptada;\r\n          },\r\n          fn: (item) => console.log('Descargar PDF'),\r\n        }),\r\n        clickEventActionButton({\r\n          text: 'Descargar XML',\r\n          icon: 'cloud_download',\r\n          hidden: (item) => {\r\n            return item.status !== StatusModel.Aceptada;\r\n          },\r\n          fn: (item) => this.downloadFile(item, 'xml'),\r\n        }),\r\n        clickEventActionButton({\r\n          text: 'Descargar CDR',\r\n          icon: 'cloud_download',\r\n          hidden: (item) => {\r\n            return item.status !== StatusModel.Aceptada;\r\n          },\r\n          fn: (item) => this.downloadFile(item, 'cdr'),\r\n        }),\r\n      ]\r\n    },\r\n    columns: signal(this.generateColumns()),\r\n  }\r\n\r\n  private generateColumns(): ListColumn<Document>[] {\r\n    let columns = [\r\n      textColumn<Document>({\r\n        title: 'Código/Descripción',\r\n        displayValueFn: (item) => item.serie ? `${item.serie}-${item.correlative}` : '--',\r\n        displayAdditionalValueFn: (item) => item.document_items?.map((item) => item.description).join(', '),\r\n      }),\r\n      textColumn<Document>({\r\n        title: 'Cliente',\r\n        displayValueFn: (item) => item.client?.name,\r\n        gridColumn: 'fit-content(200px)',\r\n      }),\r\n      textColumn<Document>({\r\n        title: 'Emitido',\r\n        displayValueFn: (item) => item.issue_date ? format(parseISO(item.issue_date), 'dd/MM/yyyy') : '--',\r\n      }),\r\n      numberColumn<Document>({\r\n        title: 'Sub total',\r\n        displayValueFn: (item) => item.total_value,\r\n      }),\r\n      numberColumn<Document>({\r\n        title: 'Igv',\r\n        displayValueFn: (item) => item.total_taxes,\r\n      }),\r\n      numberColumn<Document>({\r\n        title: 'Total',\r\n        displayValueFn: (item) => item.total,\r\n      }),\r\n      itemCreatedAtColumn(),\r\n      itemStatusColumn(),\r\n    ];\r\n    if(this.router.url.includes('/organization/client/view')) columns.splice(1, 1);\r\n    return columns;\r\n  }\r\n\r\n  get expireDateCtrl(): FormControl { return this.emitForm.get('expire_date')! as FormControl; }\r\n  get creditCtrl(): FormControl { return this.emitForm.get('credit')! as FormControl; }\r\n\r\n  private confirmDialog(data: ConfirmDialogData): Promise<boolean> {\r\n    return new Promise((resolve) => {\r\n      const dialogRef = this.matDialog.open(ConfirmDialogTemplateComponent, { data });\r\n      dialogRef.afterClosed().subscribe((result) => resolve(result));\r\n    });\r\n  }\r\n\r\n  private async emitDocument(item: Document): Promise<Document | null> {\r\n    this.commentCtrl.reset('');\r\n    const dialogData: ConfirmDialogData = {\r\n      icon: 'info',\r\n      title: '¿Está seguro de emitir documento?',\r\n      description: '',\r\n      templateRef: this.emitFormTemplate,\r\n      confirmButton: { disabled: true },\r\n    };\r\n    const subscribe = this.emitForm.valueChanges.subscribe(() => dialogData.confirmButton!.disabled = this.emitForm.invalid);\r\n    const confirm = await this.confirmDialog(dialogData);\r\n    subscribe.unsubscribe();\r\n    if (!confirm) return null;\r\n    const url = `document/send-to-sunat/${item.id}`;\r\n    const body = this.emitForm.value;\r\n    const request: RequestInitFetch = {\r\n      confirmDialog: false,\r\n      toast: {\r\n        loading: 'Enviando a SUNAT...',\r\n        success: 'Documento enviado a SUNAT',\r\n        error: (error) => error.error ?? 'Error al enviar a SUNAT',\r\n      }\r\n    };\r\n    return await this.fetch.put<Document>(url, body, request);\r\n  }\r\n\r\n  private async cancelDocument(item: Document): Promise<Document | null> {\r\n    this.commentCtrl.reset('');\r\n    const dialogData: ConfirmDialogData = {\r\n      icon: 'error',\r\n      title: '¿Está seguro de anular documento?',\r\n      description: '',\r\n      templateRef: this.anulateFormTemplate,\r\n      confirmButton: { disabled: true },\r\n    };\r\n    const subscribe = this.commentCtrl.valueChanges.subscribe(() => dialogData.confirmButton!.disabled = this.commentCtrl.invalid);\r\n    const confirm = await this.confirmDialog(dialogData);\r\n    subscribe.unsubscribe();\r\n    if (!confirm) return null;\r\n    const url = 'cancel-document-send';\r\n    const body = {\r\n      low_reason: this.commentCtrl.value,\r\n      document_id: item.id,\r\n    };\r\n    const request: RequestInitFetch = {\r\n      confirmDialog: false,\r\n      toast: {\r\n        loading: 'Anulando documento...',\r\n        success: 'Documento anulado',\r\n        error: (error) => 'Error al anular documento',\r\n      }\r\n    };\r\n    return await this.fetch.post<Document>(url, body, request);\r\n  }\r\n\r\n  private async anulateWithNote(item: Document, type: 'débito' | 'crédito'): Promise<Document | null> {\r\n    this.commentCtrl.reset('');\r\n    const dialogData: ConfirmDialogData = {\r\n      icon: 'error',\r\n      title: `¿Está seguro de anular documento con nota de ${type}?`,\r\n      description: `Se generará una nota de ${type}`,\r\n      templateRef: this.anulateFormTemplate,\r\n      confirmButton: {\r\n        text: `Anular con nota de ${type}`,\r\n        disabled: true,\r\n      },\r\n    };\r\n    const subscribe = this.commentCtrl.valueChanges.subscribe(() => dialogData.confirmButton!.disabled = this.commentCtrl.invalid);\r\n    const confirm = await this.confirmDialog(dialogData);\r\n    subscribe.unsubscribe();\r\n    if (!confirm) return null;\r\n    const url = `${type == 'crédito' ? 'credit' : 'debit'}-note`;\r\n    const request: RequestInitFetch = {\r\n      confirmDialog: false,\r\n      toast: {\r\n        loading: 'Anulando documento...',\r\n        success: 'Documento anulado',\r\n        error: (error) => 'Error al anular documento',\r\n      }\r\n    };\r\n    const body = {\r\n      document_id: item.id,\r\n      low_reason: this.commentCtrl.value,\r\n    };\r\n    return await this.fetch.post<Document>(url, body, request);\r\n  }\r\n\r\n  private async downloadFile(item: Document, type: 'xml' | 'cdr'): Promise<void> {\r\n    const url = `document/${item.id}/download/${type}`;\r\n    const request: RequestInitFetch = {\r\n      confirmDialog: {\r\n        icon: 'cloud_download',\r\n        title: `¿Está seguro de descargar ${type.toUpperCase()}?`,\r\n        description: `Se descargará el ${type.toUpperCase()} del documento`,\r\n        confirmButton: { text: `Descargar ${type.toUpperCase()}` },\r\n\r\n      },\r\n      toast: {\r\n        loading: `Descargando ${type.toUpperCase()}...`,\r\n        success: `${type.toUpperCase()} descargado`,\r\n        error: () => `Error al descargar ${type.toUpperCase()}`,\r\n      }\r\n    };\r\n    const blob: Blob = await this.fetch.blob(url, request);\r\n    const URL = window.URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = URL;\r\n    a.download = `${type.toUpperCase()}-${item.serie}-${item.correlative}.${type == 'xml' ? 'xml' : 'zip'}`;\r\n    a.click();\r\n    window.URL.revokeObjectURL(URL);\r\n\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./document-list-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "expireDateCtrl": {
                    "name": "expireDateCtrl",
                    "getSignature": {
                        "name": "expireDateCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 178
                    }
                },
                "creditCtrl": {
                    "name": "creditCtrl",
                    "getSignature": {
                        "name": "creditCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 179
                    }
                }
            },
            "templateData": "<app-item-list-template [configuration]=\"configuration\"/>\r\n\r\n<ng-template #anulateFormTemplate>\r\n    <div class=\"__form\">\r\n        <mat-form-field>\r\n            <mat-label>Motivo</mat-label>\r\n            <textarea matInput placeholder=\"Comment\" rows=\"2\" [formControl]=\"commentCtrl\"></textarea>\r\n        </mat-form-field>\r\n        <p>Una vez anulado no se puede revertir el proceso, pero puede emitir la factura con otro proceso</p>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #emitFormTemplate>\r\n    <div class=\"__form\" [formGroup]=\"emitForm\">\r\n        <div class=\"__form-item-switch\">\r\n            <div>\r\n                <div class=\"label-large\">Al crédito</div>\r\n                <p class=\"body-small\">Se crea a una cuota con fecha de expiración</p>\r\n            </div>\r\n            <mat-slide-toggle formControlName=\"credit\"/>\r\n        </div>\r\n        @if (creditCtrl.value) {\r\n            <mat-form-field>\r\n                <mat-label>Fecha de expiración</mat-label>\r\n                <input matInput [matDatepicker]=\"picker\" formControlName=\"expire_date\" [min]=\"minDate\">\r\n                <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                <mat-datepicker #picker></mat-datepicker>\r\n                <mat-error>*Campo requerido</mat-error>\r\n            </mat-form-field>\r\n        }\r\n        <mat-form-field>\r\n            <mat-label>Comentario</mat-label>\r\n            <textarea matInput placeholder=\"Comentario\" rows=\"2\" formControlName=\"comment\"></textarea>\r\n            <mat-error>*Campo requerido</mat-error>\r\n        </mat-form-field>\r\n        <p>Una vez emitido a Sunat no se puede revertir el proceso, pero puede anular la factura con otro proceso</p>\r\n    </div>\r\n</ng-template>"
        },
        {
            "name": "DocumentViewPageComponent",
            "id": "component-DocumentViewPageComponent-759bd7d13237ab35689172a3ddd3386f035ed5a5b0fa662288e7eb7a6bdcb85fc828e968e0165865cff72e8fb1da4ff5cfff2b5b1f2d830d679ad0139ceb0ec2",
            "file": "src/app/modules/administration/documents/pages/document-view-page/document-view-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-document-view-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./document-view-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-document-view-page',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './document-view-page.component.html',\r\n  styleUrl: './document-view-page.component.scss'\r\n})\r\nexport class DocumentViewPageComponent {\r\n\r\n}\r\n",
            "styleUrl": "./document-view-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>document-view-page works!</p>\r\n"
        },
        {
            "name": "ErrorTemplateComponent",
            "id": "component-ErrorTemplateComponent-c23a2f3e7c23c024360e8f8c016783ac346792da9ce48309eb9ad27658ea4fb7920965dab491e47bfb4f2397e7eb8bc471b2671b915489b421b76591584a36b7",
            "file": "src/app/shared/components/error-template/error-template.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-error-template",
            "styleUrls": [
                "./error-template.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./error-template.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "FetchErrorResponse",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "reload",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FetchErrorResponse, HTTP_ERROR_CODES } from 'src/app/shared/interfaces/fetch';\r\nimport { RouterLink } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-error-template',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    RouterLink,\r\n  ],\r\n  templateUrl: './error-template.component.html',\r\n  styleUrls: ['./error-template.component.css']\r\n})\r\nexport class ErrorTemplateComponent {\r\n  @Input() error?: FetchErrorResponse;\r\n  @Output() reload: EventEmitter<void> = new EventEmitter<void>();\r\n  public errorInfo?: any;\r\n\r\n  ngOnInit() {\r\n    if(this.error) {\r\n      const errorHttp = HTTP_ERROR_CODES.find((httpError) => httpError.status == this.error?.status);\r\n      this.errorInfo = errorHttp ?? {\r\n        status: 0,\r\n        title: 'Error desconocido',\r\n        description: 'Error desconocido',\r\n      };\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".error {\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    align-items: center;\r\n}\r\n\r\n.error__image {\r\n    position: relative;\r\n    color: rgb(var(--rgb-error));\r\n\r\n}\r\n\r\n/* .error__image img {\r\n    width: 100%;\r\n} */\r\n\r\n.error__image .material-icons {\r\n    --size-material-symbol-icon: 32px;\r\n    /* --fill: 1; */\r\n    --opsz: 32;\r\n}\r\n\r\n.error__content {\r\n    max-width: 280px;\r\n}\r\n\r\n.error__status {\r\n    color: rgb(var(--rgb-error));\r\n}\r\n.error__text {\r\n    text-align: center;\r\n    margin-top: 4px;\r\n    max-width: 380px;\r\n}\r\n\r\n.error__content__actions {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    gap: 4px;\r\n    margin-top: 16px;\r\n}",
                    "styleUrl": "./error-template.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"error\">\r\n    <div class=\"error__image\">\r\n        <span class=\"material-icons\">{{errorInfo?.icon ?? 'error'}}</span>\r\n        <!-- <img src=\"/assets/images/robot-error.png\" width=\"120\" alt=\"\"> -->\r\n    </div>\r\n    <h1 class=\"error__status display-small\">\r\n        {{ errorInfo?.status }} <!-- - {{ error?.statusText }} -->\r\n    </h1>\r\n    <p class=\"error__title title-small\">\r\n        {{ errorInfo?.title }}\r\n    </p>\r\n    <p class=\"error__text body-medium\">\r\n        {{ errorInfo?.description }}\r\n    </p>\r\n    <div class=\"error__content__actions\">\r\n        <button class=\"tonal-button\" (click)=\"reload.emit()\">\r\n            <span class=\"material-icons\">autorenew</span>\r\n            <span>Volver a cargar</span>\r\n        </button>\r\n        <button class=\"tonal-button\" routerLink=\"/\">\r\n            <span class=\"material-icons\">home</span>\r\n            <span>Ir al inicio</span>\r\n        </button>\r\n    </div>\r\n\r\n</div>"
        },
        {
            "name": "InputAutocompleteTemplateComponent",
            "id": "component-InputAutocompleteTemplateComponent-bd14b6266fa4cf3ac6d1c8ba2983660e710be52a4a04554bf38570c6a3d8a191246f43a725132d4ede61012ec5736f74f6ee8c6537f174970a9ec098ba910dd0",
            "file": "src/app/shared/components/input-autocomplete-template/input-autocomplete-template.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input-autocomplete-template",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-autocomplete-template.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "autocompleteControl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 75,
                    "type": "InputAutocompleteConfiguration | InputAutocompleteLocalConfiguration | InputAutocompleteServerConfiguration",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "idControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 76,
                    "type": "FormControl",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "abortController",
                    "defaultValue": "new AbortController()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "databaseStorage",
                    "defaultValue": "inject(DatabaseStorageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "displayFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 169,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "fetch",
                    "defaultValue": "inject(FetchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "filterData",
                    "defaultValue": "signal([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<any[]>",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "init",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "inputHtml",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputHtml', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "renderer",
                    "defaultValue": "inject(Renderer2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "findLocalItem",
                    "args": [
                        {
                            "name": "value",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItemsFromData",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItemsLocal",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItemsServer",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "NgStyle"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatAutocompleteModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "GetMixedValuePipe",
                    "type": "pipe"
                },
                {
                    "name": "NavigateLateralPanelOutletDirective",
                    "type": "directive"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgStyle } from '@angular/common';\r\nimport { Component, ElementRef, Input, Renderer2, ViewChild, WritableSignal, inject, signal } from '@angular/core';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { RouterLink } from '@angular/router';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { DatabaseStorageService, NameModuleDatabase } from \"@service/database-storage.service\";\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { debounceTime, tap } from 'rxjs/operators';\r\n\r\nexport interface InputAutocompleteConfiguration<T = any> {\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  cssClassOption?: string | ((item: T) => string);\r\n  cssStyleOption?: ({ [key: string]: any }) | ((item: T) => ({ [key: string]: any }));\r\n  disableOptionFn?: (item: T) => boolean;\r\n  conditionFilterFn?: (item: T, value: string) => boolean;\r\n  displayValueFn?: (item: T) => string | number | { [key: string]: any };\r\n  displayTextFn?: (item: T) => string | number;\r\n  parseDataFn?: (data: T[]) => (T[] | Promise<T[]>);\r\n  data?: T[];\r\n  addButton?: RouterLinkInputAutocomplete;\r\n}\r\n\r\nexport interface InputAutocompleteServerConfiguration<T = any> extends InputAutocompleteConfiguration<T> {\r\n  server: {\r\n    url: string;\r\n    searchKey?: string;\r\n    queryParams?: string | { [key: string]: any };\r\n  }\r\n}\r\n\r\nexport interface InputAutocompleteLocalConfiguration<T = any> extends InputAutocompleteConfiguration<T> {\r\n  local: {\r\n    readonly nameModuleDatabase: NameModuleDatabase;\r\n  }\r\n}\r\n\r\nexport interface ButtonAddInputAutocomplete {\r\n  label?: string;\r\n  routerLink: string;\r\n  function?: () => void;\r\n  outlet: 'route-lateral' | 'principal';\r\n}\r\n\r\ninterface RouterLinkInputAutocomplete {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any\r\n}\r\n@Component({\r\n  selector: 'app-input-autocomplete-template',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    NgStyle,\r\n    MatFormFieldModule,\r\n    MatAutocompleteModule,\r\n    MatInputModule,\r\n    GetMixedValuePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    RouterLink,\r\n  ],\r\n  templateUrl: './input-autocomplete-template.component.html',\r\n  styleUrl: './input-autocomplete-template.component.scss'\r\n})\r\nexport class InputAutocompleteTemplateComponent {\r\n  @Input({ required: true }) configuration!: InputAutocompleteConfiguration | InputAutocompleteLocalConfiguration | InputAutocompleteServerConfiguration;\r\n  @Input({ required: true }) idControl!: FormControl;\r\n  @Input() autocompleteControl: FormControl = new FormControl();\r\n\r\n  @ViewChild('inputHtml', { static: true })\r\n  inputHtml!: ElementRef<HTMLInputElement>;\r\n\r\n  private databaseStorage = inject(DatabaseStorageService);\r\n  private fetch = inject(FetchService);\r\n  private renderer = inject(Renderer2);\r\n\r\n  public filterData: WritableSignal<any[]> = signal([]);\r\n  public loading: WritableSignal<boolean> = signal(false);\r\n  public init: WritableSignal<boolean> = signal(false);\r\n  private abortController = new AbortController();\r\n\r\n  get conditionFilterFn(): (item: any, value: string) => boolean {\r\n    return this.configuration.conditionFilterFn ?? ((item, value) => (item.name ?? '').trim().toLowerCase().includes(value.trim().toLowerCase()));\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if((this.configuration as InputAutocompleteLocalConfiguration).local) {\r\n      if(this.idControl.value) {\r\n        this.findLocalItem(this.idControl.value);\r\n      };\r\n    }\r\n    this.autocompleteControl.valueChanges.pipe(tap(() => this.loading.set(true)), debounceTime(250))\r\n      .subscribe((data: (string | { [key: string]: any })) => {\r\n        this.init.set(true);\r\n        if (data instanceof Object) {\r\n          const value = this.configuration.displayValueFn ? this.configuration.displayValueFn(data) : data['id'];\r\n          this.idControl.setValue(value, { emitEvent: false });\r\n          this.renderer.setAttribute(this.inputHtml.nativeElement, 'readonly', 'readonly');\r\n        } else if (data !== null && data !== undefined) {\r\n          if (this.idControl.value) this.idControl.setValue(null, { emitEvent: false });\r\n          if (this.configuration.data) this.getItemsFromData(data);\r\n          else if ((this.configuration as InputAutocompleteLocalConfiguration).local) this.getItemsLocal(data);\r\n          else if ((this.configuration as InputAutocompleteServerConfiguration).server) this.getItemsServer(data);\r\n        }\r\n      });\r\n  }\r\n\r\n  private async findLocalItem(value: number | string): Promise<void> {\r\n    const data = await this.databaseStorage.getData<any>((this.configuration as InputAutocompleteLocalConfiguration).local!.nameModuleDatabase);\r\n    const item = data.find((item) => {\r\n      const id = this.configuration.displayValueFn ? this.configuration.displayValueFn(data) : item['id']\r\n      return id == value\r\n    });\r\n    this.autocompleteControl.setValue(item);\r\n  }\r\n\r\n  private async getItemsFromData(value: string): Promise<void> {\r\n    let data = this.configuration.data!;\r\n    const { parseDataFn } = this.configuration;\r\n    if (parseDataFn) data = await parseDataFn(data);\r\n    this.filterData.set(data.filter((item) => this.conditionFilterFn(item, value)));\r\n    this.loading.set(false);\r\n  }\r\n\r\n  private async getItemsLocal(value: string): Promise<void> {\r\n    const { nameModuleDatabase } = (this.configuration as InputAutocompleteLocalConfiguration).local!;\r\n    let data = await this.databaseStorage.getData(nameModuleDatabase);\r\n    const { parseDataFn } = this.configuration;\r\n    if (parseDataFn) data = await parseDataFn(data);\r\n    this.filterData.set(data.filter((item) => this.conditionFilterFn(item, value)));\r\n    this.loading.set(false);\r\n  }\r\n\r\n  private async getItemsServer(value: string): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const { url, searchKey } = (this.configuration as InputAutocompleteServerConfiguration).server!;\r\n    let queryParams = (this.configuration as InputAutocompleteServerConfiguration).server!.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    try {\r\n      const endpoint = `${url}?${searchKey ?? 'search'}=${value}&${queryParams ? queryParams : ''}`;\r\n      const response = await this.fetch.get<PaginatorData<any> | any[]>(endpoint, { signal: this.abortController.signal });\r\n      let data = response instanceof Array ? response : response.data;\r\n      const { parseDataFn } = this.configuration;\r\n      if (parseDataFn) data = await parseDataFn(data);\r\n      this.filterData.set(data);\r\n      this.loading.set(false);\r\n    } catch (error: any) {\r\n      if (error.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n    this.loading.set(false);\r\n  }\r\n\r\n  public displayFn = (value: any) => {\r\n    return value instanceof Object ? value.name : ''\r\n  }\r\n\r\n  public clearInput() {\r\n    this.autocompleteControl.setValue(null);\r\n    this.idControl.setValue(null, { emitEvent: false });\r\n    this.renderer.removeAttribute(this.inputHtml.nativeElement, 'readonly');\r\n  }\r\n}\r\n\r\n",
            "styleUrl": "./input-autocomplete-template.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "conditionFilterFn": {
                    "name": "conditionFilterFn",
                    "getSignature": {
                        "name": "conditionFilterFn",
                        "type": "function",
                        "returnType": "boolean",
                        "line": 91
                    }
                }
            },
            "templateData": "<mat-form-field>\r\n    <mat-label>{{ configuration.textLabel }}</mat-label>\r\n    <input #inputHtml type=\"text\" matInput [placeholder]=\"configuration.placeholder ? configuration.placeholder : 'Buscar...'\" [formControl]=\"autocompleteControl\" [matAutocomplete]=\"auto\" />\r\n    @if (autocompleteControl.value) {\r\n        <button matSuffix class=\"icon-button\" (click)=\"clearInput()\" [disabled]=\"autocompleteControl.disabled\" type=\"button\">\r\n            <span class=\"material-icons\">{{ autocompleteControl.value?.id ? 'edit' : 'close' }}</span>\r\n        </button>\r\n    }\r\n    <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"configuration.displayTextFn ?? displayFn\">\r\n        @for (item of filterData(); track item) {\r\n            <mat-option \r\n                [class]=\"(configuration.cssClassOption | getMixedValue: item) ?? ''\"\r\n                [ngStyle]=\"configuration.cssStyleOption | getMixedValue: item\"\r\n                [value]=\"configuration.displayValueFn ? (configuration.displayValueFn|getMixedValue:item) : item\"\r\n                [disabled]=\"configuration.disableOptionFn ? (configuration.disableOptionFn|getMixedValue:item) : false\">\r\n                <div [innerHtml]=\"configuration.displayTextFn ? (configuration.displayTextFn|getMixedValue:item) : item.name\"></div>\r\n            </mat-option>\r\n        } @empty {\r\n            @if (!init()) {\r\n                <mat-option>\r\n                    <div class=\"mat-option-empty\">\r\n                        <span class=\"material-icons icon-xsmall\">search</span>\r\n                        <span class=\"text\">Escriba para buscar resultados</span>\r\n                    </div>\r\n                </mat-option>\r\n            } @else if (loading()) {\r\n                <mat-option>\r\n                    <div class=\"mat-option-empty\">\r\n                        Buscando resultados...\r\n                    </div>\r\n                </mat-option>\r\n            } @else {\r\n                <mat-option>\r\n                    <div class=\"mat-option-empty\">\r\n                        <span class=\"mat-option-empty__icon material-icons icon-xsmall\">search_off</span>\r\n                        <p class=\"mat-option-empty__text\">\r\n                            <span>Sin resultados. </span>\r\n                            @if (configuration.addButton; as addButton) {\r\n                                @if (addButton.outlet == 'route-lateral') { <a class=\"mat-option-empty__text__link\" appNavigateLateralPanelOutlet [navigateUrl]=\"addButton.url\">Crear nuevo registro</a> } \r\n                                @else { <a class=\"mat-option-empty__text__link\" [routerLink]=\"addButton.url\" [state]=\"addButton.state\">Crear nuevo registro</a> }\r\n                            }\r\n                        </p>\r\n                    </div>\r\n                </mat-option>\r\n            }\r\n        }\r\n    </mat-autocomplete>\r\n</mat-form-field>"
        },
        {
            "name": "InputSelectTemplateComponent",
            "id": "component-InputSelectTemplateComponent-a6a025df6f336f909585f40229d9e1c6d8fb29cebafc17fe57f9be8414f01bedfbd1cec507ce5f4b8d32c2bc5ac228dee7e31f3dc872472283335dffd7e59bf0",
            "file": "src/app/shared/components/input-select-template/input-select-template.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input-select-template",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-select-template.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 64,
                    "type": "InputSelectServerConfiguration | InputSelectConfiguration | InputSelectLocalConfiguration",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 65,
                    "type": "FormControl",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "abortController",
                    "defaultValue": "new AbortController()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "databaseStorage",
                    "defaultValue": "inject(DatabaseStorageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fetch",
                    "defaultValue": "inject(FetchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getItemsLocal",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "getItemsServer",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "NgStyle"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "GetMixedValuePipe",
                    "type": "pipe"
                },
                {
                    "name": "NavigateLateralPanelOutletDirective",
                    "type": "directive"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { DatabaseStorageService } from '@service/database-storage.service';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\n\r\nimport { NameModuleDatabase } from \"@service/database-storage.service\";\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { RouterLink } from '@angular/router';\r\nimport { NgStyle } from '@angular/common';\r\n\r\nexport interface InputSelectConfiguration<T = any> {\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  cssClassOption?: string | ((item: T) => string);\r\n  cssStyleOption?: ({ [key: string]: any }) | ((item: T) => ({ [key: string]: any }));\r\n  disableOptionFn?: (item: T) => boolean;\r\n  displayValueFn?: (item: T) => string | number | { [key: string]: any };\r\n  displayTextFn?: (item: T) => string | number;\r\n  parseDataFn?: (data: T[]) => (T[] | Promise<T[]>);\r\n  data?: T[];\r\n  addButton?: ButtonAddInputSelect;\r\n}\r\n\r\nexport interface InputSelectServerConfiguration<T = any> extends InputSelectConfiguration<T> {\r\n  server: {\r\n    url: string;\r\n    queryParams?: string | { [key: string]: any };\r\n  }\r\n}\r\n\r\nexport interface InputSelectLocalConfiguration<T = any> extends InputSelectConfiguration<T> {\r\n  local: {\r\n    nameModuleDatabase: NameModuleDatabase;\r\n  }\r\n}\r\n\r\ninterface ButtonAddInputSelect {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any\r\n}\r\n@Component({\r\n  selector: 'app-input-select-template',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    NgStyle,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    GetMixedValuePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    RouterLink,\r\n  ],\r\n  templateUrl: './input-select-template.component.html',\r\n  styleUrl: './input-select-template.component.scss'\r\n})\r\nexport class InputSelectTemplateComponent {\r\n  @Input({ required: true }) public configuration!: InputSelectServerConfiguration | InputSelectConfiguration | InputSelectLocalConfiguration;\r\n  @Input({ required: true }) public control!: FormControl;\r\n  private fetch = inject(FetchService);\r\n  private databaseStorage = inject(DatabaseStorageService);\r\n  private abortController = new AbortController();\r\n  public loading:WritableSignal<boolean> = signal(false);\r\n\r\n  ngOnInit(): void {\r\n    if (!this.configuration.data) {\r\n      this.configuration.data = [];\r\n      this.getData();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  get data() {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  private getData() {\r\n    if ((this.configuration as InputSelectServerConfiguration).server) {\r\n      this.getItemsServer();\r\n    } else if ((this.configuration as InputSelectLocalConfiguration).local) {\r\n      this.getItemsLocal();\r\n    }\r\n  }\r\n\r\n  private async getItemsServer(): Promise<void> {\r\n    const { url } = (this.configuration as InputSelectServerConfiguration).server!;\r\n    let queryParams = (this.configuration as InputSelectServerConfiguration).server!.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const endpoint = `${url}?${queryParams ? queryParams : ''}`;\r\n    const response = await this.fetch.get<PaginatorData<any> | any[]>(endpoint, { signal: this.abortController.signal });\r\n    const data = response instanceof Array ? response : response.data\r\n    const { parseDataFn } = this.configuration;\r\n    this.configuration.data = parseDataFn ? await parseDataFn(data) : data;\r\n  }\r\n\r\n  private async getItemsLocal(): Promise<void> {\r\n    const response = await this.databaseStorage.getData((this.configuration as InputSelectLocalConfiguration).local!.nameModuleDatabase);\r\n    const { parseDataFn } = this.configuration;\r\n    this.configuration.data = parseDataFn ? await parseDataFn(response) : response;\r\n  }\r\n  \r\n}\r\n\r\n",
            "styleUrl": "./input-select-template.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "data": {
                    "name": "data",
                    "getSignature": {
                        "name": "data",
                        "type": "",
                        "returnType": "",
                        "line": 82
                    }
                }
            },
            "templateData": "<mat-form-field>\r\n    <mat-label>{{configuration.textLabel}}</mat-label>\r\n    <mat-select [formControl]=\"control\">\r\n        @for (item of data; track item.id) {\r\n            <mat-option \r\n                [class]=\"(configuration.cssClassOption | getMixedValue: item) ?? ''\"\r\n                [ngStyle]=\"configuration.cssStyleOption | getMixedValue: item\"\r\n                [value]=\"configuration.displayValueFn ? (configuration.displayValueFn|getMixedValue:item) : item.id\"\r\n                [disabled]=\"configuration.disableOptionFn ? (configuration.disableOptionFn|getMixedValue:item) : false\">\r\n                <div [innerHtml]=\"configuration.displayTextFn ? (configuration.displayTextFn|getMixedValue:item) : item.name\"></div>\r\n            </mat-option>\r\n        } @empty {\r\n            @if (loading()) {\r\n                <mat-option>\r\n                    <div class=\"mat-autocomplete-empty\">\r\n                        Buscando resultados...\r\n                    </div>\r\n                </mat-option>\r\n            } @else {\r\n                <mat-option>\r\n                    <div class=\"mat-autocomplete-empty\">\r\n                        <span class=\"mat-autocomplete-empty__icon material-icons icon-xsmall\">search_off</span>\r\n                        <p class=\"mat-autocomplete-empty__text\">\r\n                            <span>Sin resultados. </span>\r\n                            @if (configuration.addButton; as addButton) {\r\n                                @if (addButton.outlet == 'route-lateral') { <a class=\"mat-autocomplete-empty__text__link\" appNavigateLateralPanelOutlet [navigateUrl]=\"addButton.url\">Crear nuevo registro</a> } \r\n                                @else { <a class=\"mat-autocomplete-empty__text__link\" [routerLink]=\"addButton.url\" [state]=\"addButton.state\">Crear nuevo registro</a> }\r\n                            }\r\n                        </p>\r\n                    </div>\r\n                </mat-option>\r\n            }\r\n        }\r\n    </mat-select>\r\n    @if (control.hasError('required')) {\r\n        <mat-error>*Requerido</mat-error>\r\n    }\r\n</mat-form-field>"
        },
        {
            "name": "ItemDetailTemplateComponent",
            "id": "component-ItemDetailTemplateComponent-4eb06c323f65c7c563743bdd99660c7cce6c74cdad0242792a84f0a4071de8558528f7cf28bd5ea34c0cf9bf02ff3171185f2722fb46841db3beebdfb8e0bed9",
            "file": "src/app/shared/components/item-detail-template/item-detail-template.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-item-detail-template",
            "styleUrls": [
                "./item-detail-template.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./item-detail-template.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 122,
                    "type": "ItemDetailConfiguration",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "abortController",
                    "defaultValue": "new AbortController()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 129,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 126,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fetch",
                    "defaultValue": "inject(FetchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 125,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "location",
                    "defaultValue": "inject(Location)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 124,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 127,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteItem",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ]
                },
                {
                    "name": "getItem",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ]
                },
                {
                    "name": "navigateEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restoreItem",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ]
                },
                {
                    "name": "setItemId",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "SpinnerDefaultComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "PathFilesServerPipe",
                    "type": "pipe"
                },
                {
                    "name": "GetUserByIdPipe",
                    "type": "pipe"
                },
                {
                    "name": "DiffDatePipe",
                    "type": "pipe"
                },
                {
                    "name": "ErrorTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "ListFormatPipe",
                    "type": "pipe"
                },
                {
                    "name": "FirstLetterUppercasePipe",
                    "type": "pipe"
                },
                {
                    "name": "ScrollingModule",
                    "type": "module"
                },
                {
                    "name": "NavigateLateralPanelOutletDirective",
                    "type": "directive"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "GeneratePathUrlPipe",
                    "type": "pipe"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "ExecuteFunctionPipe",
                    "type": "pipe"
                },
                {
                    "name": "GetMixedValuePipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n    Component,\r\n    Input,\r\n    ViewEncapsulation,\r\n    inject,\r\n    signal,\r\n} from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport {\r\n    ItemDetail,\r\n    ItemDetailConfiguration,\r\n    ItemDetailGroup,\r\n} from 'src/app/shared/interfaces/itemDetail';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { SpinnerDefaultComponent } from '../spinner-default/spinner-default.component';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { GetUserByIdPipe } from '@pipe/get-user-by-id.pipe';\r\nimport { DiffDatePipe } from '@pipe/diff-date.pipe';\r\nimport { ErrorTemplateComponent } from '../error-template/error-template.component';\r\nimport { FetchErrorResponse, RequestInitFetch } from 'src/app/shared/interfaces/fetch';\r\nimport { ListFormatPipe } from '@pipe/list-format.pipe';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { GeneratePathUrlPipe } from '@pipe/generate-path-url.pipe';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { ExecuteFunctionPipe } from '@pipe/execute-function.pipe';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { ConfirmDialogData } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\n\r\nexport const registerDataGroupDetail = (): ItemDetailGroup<any> => {\r\n    return {\r\n        title: 'Datos del registro',\r\n        icon: 'app_registration',\r\n        details: [\r\n            {\r\n                title: 'Estado',\r\n                key: 'status',\r\n                type: 'titlecase',\r\n                cssClass: (item) => item.status ?? '',\r\n                displayValueFn: (item) => item.status,\r\n            },\r\n            {\r\n                title: 'Creado',\r\n                key: 'created_at',\r\n                type: 'diff-date',\r\n                displayValueFn: (item) => item.created_at,\r\n            },\r\n            {\r\n                title: 'Creado por',\r\n                key: 'create_user_id',\r\n                type: 'user',\r\n                displayValueFn: (item) => item.create_user_id,\r\n            },\r\n            {\r\n                title: 'Actualizado',\r\n                key: 'updated_at',\r\n                type: 'diff-date',\r\n                displayValueFn: (item) => item.updated_at,\r\n            },\r\n            {\r\n                title: 'Actualizado por',\r\n                key: 'update_user_id',\r\n                type: 'user',\r\n                displayValueFn: (item) => item.update_user_id,\r\n            },\r\n            {\r\n                title: 'Eliminado',\r\n                key: 'deleted_at',\r\n                type: 'diff-date',\r\n                displayValueFn: (item) => item.deleted_at,\r\n            },\r\n            {\r\n                title: 'Eliminado por',\r\n                key: 'delete_user_id',\r\n                type: 'user',\r\n                displayValueFn: (item) => item.delete_user_id,\r\n            },\r\n            {\r\n                title: 'Restaurado por',\r\n                key: 'restore_user_id',\r\n                type: 'user',\r\n                displayValueFn: (item) => item.restore_user_id,\r\n            },\r\n        ],\r\n    };\r\n};\r\ninterface TextDetail<T = any> extends ItemDetail<T> {\r\n\r\n}\r\nexport const textDetail = () => {}\r\n\r\n@Component({\r\n    selector: 'app-item-detail-template',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        SpinnerDefaultComponent,\r\n        RouterLink,\r\n        PathFilesServerPipe,\r\n        GetUserByIdPipe,\r\n        DiffDatePipe,\r\n        ErrorTemplateComponent,\r\n        ListFormatPipe,\r\n        FirstLetterUppercasePipe,\r\n        ScrollingModule,\r\n        NavigateLateralPanelOutletDirective,\r\n        MatMenuModule,\r\n        GeneratePathUrlPipe,\r\n        MatTooltipModule,\r\n        ExecuteFunctionPipe,\r\n        GetMixedValuePipe,\r\n    ],\r\n    templateUrl: './item-detail-template.component.html',\r\n    styleUrls: ['./item-detail-template.component.css'],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class ItemDetailTemplateComponent {\r\n    @Input({ required: true }) configuration!: ItemDetailConfiguration;\r\n\r\n    public location = inject(Location);\r\n    private fetch = inject(FetchService);\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n\r\n    private abortController = new AbortController();\r\n\r\n    ngOnInit(): void {\r\n        this.setItemId();\r\n        \r\n        if (this.configuration.dataItem && this.configuration.dataItem()) {\r\n            this.configuration.loading = false;\r\n        } else {\r\n            this.configuration.dataItem = signal(null);\r\n            this.getItem();\r\n        }\r\n        \r\n        if (this.configuration.updateItemEvent) this.configuration.updateItemEvent.subscribe(() => this.getItem());\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.abortController.abort();\r\n    }\r\n\r\n\r\n    private setItemId() {\r\n        if (!this.configuration.itemId) {\r\n            if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n                this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n            } else if (this.activatedRoute.parent?.snapshot.paramMap.get('id')) {\r\n                this.configuration.itemId = this.activatedRoute.parent?.snapshot.paramMap.get('id')!;\r\n            } else if (this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id')) {\r\n                this.configuration.itemId = this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id')!;\r\n            }\r\n        }\r\n    }\r\n\r\n    public navigateEdit() {\r\n        if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n            this.router.navigate([`../../edit/${this.configuration.itemId}`], { relativeTo: this.activatedRoute });\r\n        } else if (this.activatedRoute.parent?.snapshot.paramMap.get('id')) {\r\n            this.router.navigate([`./edit`], { relativeTo: this.activatedRoute });\r\n        } else if (this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id')) {\r\n            this.router.navigate([`./edit`], { relativeTo: this.activatedRoute });\r\n        }\r\n    }\r\n\r\n\r\n    public async getItem<T = any>() {\r\n        this.configuration.loading = true;\r\n        try {\r\n            const { server, ignoreShowError } = this.configuration;\r\n            const queryParams = objectToURLSearchParams(server.queryParams ?? {}).toString();\r\n\r\n            const url = `${server.url}/${this.configuration.itemId}?${queryParams ? queryParams : ''}`;\r\n            const requestInit: RequestInitFetch = { signal: this.abortController.signal };\r\n            if (ignoreShowError) requestInit.ignoreInterceptErrors = true;\r\n            let response: T = await this.fetch.get<T>(url, requestInit);\r\n            \r\n            const { parseItemFn } = this.configuration;\r\n            this.configuration.dataItem!.set((await parseItemFn?.(response)) ?? response);\r\n\r\n            const { afterSetItemFn } = this.configuration;\r\n            if (afterSetItemFn) afterSetItemFn(this.configuration.dataItem!()!); \r\n        } catch (error) {\r\n            this.configuration.httpError = error as FetchErrorResponse;\r\n            const { interceptHttpErrorItemFn } = this.configuration;\r\n            if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n        }\r\n        this.configuration.loading = false;\r\n    }\r\n\r\n    public async deleteItem() {\r\n        const url = `${this.configuration.server.url}/${this.configuration.itemId}`;\r\n        const response = await this.fetch.delete(url);\r\n        const { afterDeleteItemFn } = this.configuration;\r\n        if (afterDeleteItemFn) afterDeleteItemFn(response);\r\n        this.location.back();\r\n    }\r\n\r\n    public async restoreItem() {\r\n        const url = `${this.configuration.server.url}/${this.configuration.itemId}/restore`;\r\n        const confirmDialog: ConfirmDialogData = {\r\n            icon: 'autorenew',\r\n            title: '¿Deseas restaurar este registro?',\r\n            description: 'Esta acción restaurará el registro eliminado. Una vez que se haya completado la restauración, el registro volverá a estar visible en la lista principal y se podrá acceder a él como antes.',\r\n        };\r\n        const response = await this.fetch.put<any>(url, {}, { confirmDialog });\r\n        const { afterRestoreItemFn } = this.configuration;\r\n        if (afterRestoreItemFn) afterRestoreItemFn(response);\r\n        this.configuration.dataItem?.update(item => ({...item!, ...response}));\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./item-detail-template.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"item-detail\" [ngClass]=\"{'loading': configuration.loading}\" cdkScrollable>\r\n    @if(!configuration.hiddeHeader) {\r\n    <div class=\"item-detail__header\">\r\n\r\n        @if (!(configuration.backButton == false)) {\r\n            <button class=\"item-detail__header__back-button icon-button\" type=\"button\" (click)=\"location.back()\">\r\n                <span class=\"material-icons\">arrow_back</span>\r\n            </button>\r\n        }\r\n\r\n        <div class=\"item-detail__header__title\">\r\n            <div>{{configuration.title}}</div>\r\n            @if (configuration.dataItem!(); as item) {\r\n                @if(this.configuration.subtitle != false) {\r\n                    @if (configuration.subtitle; as subtitleFn) {\r\n                        @if ((subtitleFn | getMixedValue:item); as subtitle) {\r\n                            <div class=\"item-detail__header__title__sub\">{{subtitle}}</div>\r\n                        }\r\n                    } @else {\r\n                        @if (item?.name; as name) {\r\n                            <div class=\"item-detail__header__title__sub\">{{name}}</div>\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        </div>\r\n\r\n        <div class=\"item-detail__header__actions\">\r\n            @if (configuration.dataItem!(); as item) {\r\n            <ng-content select=\"[headerActions]\" />\r\n\r\n            @if (!(configuration.editButton == false)) {\r\n            <ng-container [ngTemplateOutlet]=\"editButtonTmpl\" [ngTemplateOutletContext]=\"{ $implicit: item, editButton: configuration.editButton }\" />\r\n            }\r\n\r\n            @if (!(configuration.deleteButton == false) && !item.deleted_at) {\r\n            <ng-container [ngTemplateOutlet]=\"deleteButtonTmpl\" [ngTemplateOutletContext]=\"{ $implicit: item }\" />\r\n            }\r\n\r\n            @if (!(configuration.restoreButton == false) && item.deleted_at) {\r\n            <ng-container [ngTemplateOutlet]=\"restoreButtonTmpl\" [ngTemplateOutletContext]=\"{ $implicit: item }\" />\r\n            }\r\n\r\n            @if (configuration.actionButtons; as actionButtons) {\r\n            @if (actionButtons.length > 4) {\r\n            @for (i of [0,1,2,3]; track i) {\r\n            <ng-container [ngTemplateOutlet]=\"switchActionButton\"\r\n                [ngTemplateOutletContext]=\"{ $implicit: item, actionButton: actionButtons[i] }\" />\r\n            }\r\n            } @else {\r\n            @for (actionButton of actionButtons; track actionButton.id) {\r\n                <ng-container [ngTemplateOutlet]=\"switchActionButton\" [ngTemplateOutletContext]=\"{ $implicit: item, actionButton }\" />\r\n            }\r\n            }\r\n            }\r\n\r\n            }\r\n        </div>\r\n\r\n    </div>\r\n    }\r\n\r\n    <div class=\"item-detail__content\">\r\n        <ng-content select=\"[beforeContent]\" />\r\n        @if (configuration.dataItem!(); as item) {\r\n        <ng-container [ngTemplateOutlet]=\"itemDefaultTemplate\" [ngTemplateOutletContext]=\"{ $implicit: item }\" />\r\n        <ng-content select=\"[afterContent]\" />\r\n        } @else if (configuration.loading) {\r\n        <app-spinner-default />\r\n        } @else if (configuration.httpError && !configuration.ignoreShowError) {\r\n        <app-error-template [error]=\"configuration.httpError\" (reload)=\"getItem()\" />\r\n        }\r\n    </div>\r\n</div>\r\n\r\n\r\n<ng-template #itemDefaultTemplate let-item>\r\n    @if (configuration.groups; as groups) {\r\n        @for (group of groups; track group) {\r\n            <div class=\"item-detail__group\">\r\n                <!-- ---------------------------------------------- -->\r\n                <!-- ---------------------------------------------- -->\r\n                <!-- ---------------------------------------------- -->\r\n                @if (group.title) {\r\n                    <div class=\"item-detail__group__header\">\r\n                        <div class=\"item-detail__group__header__icon\">\r\n                            @if (group.icon) {\r\n                                <span class=\"material-icons\">{{group.icon}}</span>\r\n                            } @else {\r\n                                <span class=\"material-icons\">info</span>\r\n                            }\r\n                        </div>\r\n                        \r\n                        <div class=\"item-detail__group__header__title\">\r\n                            {{group.title}}\r\n                        </div>\r\n                    </div>\r\n                }\r\n                <!-- ---------------------------------------------- -->\r\n                <!-- ---------------------------------------------- -->\r\n                <!-- ---------------------------------------------- -->\r\n                @if (group.template && group.template.position != 'after') {\r\n                    <ng-container [ngTemplateOutlet]=\"group.template.ref\" [ngTemplateOutletContext]=\"{ $implicit: item }\" />\r\n                }\r\n                <!-- ---------------------------------------------- -->\r\n                <!-- ---------------------------------------------- -->\r\n                <!-- ---------------------------------------------- -->\r\n                @if (group.details; as details) {\r\n                    @for (itemDetail of details; track itemDetail) {\r\n                        <div [attr.data-key]=\"itemDetail.key ?? ''\" class=\"item-detail__group__row {{ itemDetail.cssClass ? (itemDetail.cssClass | getMixedValue:item) : '' }}\">\r\n                            @if(itemDetail.displayValueFn; as displayValueFn){\r\n                                @if ((displayValueFn | executeFunction:item); as value) {\r\n                                    <ng-container [ngTemplateOutlet]=\"renderNormalFields\" [ngTemplateOutletContext]=\"{ $implicit: itemDetail, value, item, routerLink: itemDetail.routerLink, clickEvent: itemDetail.clickEvent }\" />\r\n                                }\r\n                            }\r\n                        </div>\r\n                    }\r\n                }\r\n                <!-- ---------------------------------------------- -->\r\n                <!-- ---------------------------------------------- -->\r\n                <!-- ---------------------------------------------- -->\r\n                @if (group.template && group.template.position == 'after') {\r\n                    <ng-container [ngTemplateOutlet]=\"group.template.ref\" [ngTemplateOutletContext]=\"{ $implicit: item }\" />\r\n                }\r\n                <!-- ---------------------------------------------- -->\r\n                <!-- ---------------------------------------------- -->\r\n                <!-- ---------------------------------------------- -->\r\n            </div>\r\n        }\r\n    }\r\n</ng-template>\r\n\r\n\r\n<ng-template #renderNormalFields let-itemDetail let-item=\"item\" let-value=\"value\" let-routerLink=\"routerLink\" let-clickEvent=\"clickEvent\">\r\n    <div class=\"item-detail__group__row__label\">{{itemDetail.title}}</div>\r\n    <div>:</div>\r\n    <div class=\"item-detail__group__row__value\">\r\n            @switch (itemDetail.type ?? '') {\r\n                <!-- --------------------------------- -->\r\n                @case ('email') { <a href=\"mailto:{{value}}\">{{value}}</a> }\r\n                <!-- --------------------------------- -->\r\n                @case ('phone') { <a href=\"tel:{{value}}\">{{value}}</a> }\r\n                <!-- --------------------------------- -->\r\n                @case ('html') { <ng-container [ngTemplateOutlet]=\"renderValueHtml\" [ngTemplateOutletContext]=\"{ $implicit: value, item, routerLink, clickEvent, tooltip: itemDetail.tooltip}\" /> }\r\n                <!-- --------------------------------- -->\r\n                @case ('number') { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: (value | number: itemDetail.numberFormat ?? '.2-2'), item, routerLink, clickEvent, tooltip: itemDetail.tooltip}\" /> }\r\n                <!-- --------------------------------- -->\r\n                @case ('titlecase') { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: (value | titlecase), item, routerLink, clickEvent, tooltip: itemDetail.tooltip}\" /> }\r\n                <!-- --------------------------------- -->\r\n                @case ('uppercase') { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: (value | uppercase), item, routerLink, clickEvent, tooltip: itemDetail.tooltip}\" /> }\r\n                <!-- --------------------------------- -->\r\n                @case ('first-letter-uppercase') { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: (value | firstLetterUppercase), item, routerLink, clickEvent, tooltip: itemDetail.tooltip}\" /> }\r\n                <!-- --------------------------------- -->\r\n                @case ('lowercase') { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: (value | lowercase), item, routerLink, clickEvent, tooltip: itemDetail.tooltip}\" /> }\r\n                <!-- --------------------------------- -->\r\n                @case ('date') { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: (value | date: itemDetail.dateFormat ??'dd/MM/yyyy'), item, routerLink, clickEvent, tooltip: itemDetail.tooltip}\" /> }\r\n                <!-- --------------------------------- -->\r\n                @case ('diff-date') { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: (value | diffDate | firstLetterUppercase), item, routerLink, clickEvent, tooltip: itemDetail.tooltip}\" /> }\r\n                <!-- --------------------------------- -->\r\n                @case ('currency') { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: (value | currency), item, routerLink, clickEvent, tooltip: itemDetail.tooltip}\" /> }\r\n                <!-- --------------------------------- -->\r\n                @case ('list-format') { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: (value | listFormat), item, routerLink, clickEvent, tooltip: itemDetail.tooltip}\" /> }\r\n                <!-- --------------------------------- -->\r\n                @case ('user') { @if ((value | getUserById | async); as user) { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: user.name, item, routerLink, clickEvent, tooltip: itemDetail.tooltip}\" /> } }\r\n                <!-- --------------------------------- -->\r\n                @default { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: value, item, routerLink, clickEvent, tooltip: itemDetail.tooltip}\" /> }\r\n                <!-- --------------------------------- -->\r\n            }\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #renderValue let-value let-tooltip=\"tooltip\" let-item=\"item\" let-routerLink=\"routerLink\" let-clickEvent=\"clickEvent\">\r\n    @if (routerLink; as rLink) {\r\n      @if (rLink.outlet == 'route-lateral') { <a [matTooltip]=\"tooltip | getMixedValue:item\" class=\"item-detail__group__row__value__hovered\" appNavigateLateralPanelOutlet [navigateUrl]=\"rLink.url | getMixedValue:item\" [routeState]=\"rLink.state | getMixedValue:item\">{{value}}</a> }\r\n      @else { <a [matTooltip]=\"tooltip | getMixedValue:item\" class=\"item-detail__group__row__value__hovered\" [routerLink]=\"rLink.url | getMixedValue:item\" [state]=\"rLink.state | getMixedValue:item\">{{value}}</a> }\r\n    } @else if(clickEvent) {\r\n        <a [matTooltip]=\"tooltip | getMixedValue:item\" class=\"item-detail__group__row__value__hovered\" (click)=\"clickEvent(item)\">{{value}}</a>\r\n    } @else {\r\n        <span [title]=\"value\" [matTooltip]=\"tooltip | getMixedValue:item\">{{ value }}</span>\r\n    }\r\n</ng-template>\r\n\r\n<ng-template #renderValueHtml let-value let-tooltip=\"tooltip\" let-item=\"item\" let-routerLink=\"routerLink\" let-clickEvent=\"clickEvent\">\r\n    @if (routerLink; as rLink) {\r\n      @if (rLink.outlet == 'route-lateral') { <div [matTooltip]=\"tooltip | getMixedValue:item\" class=\"item-detail__group__row__value__hovered\" appNavigateLateralPanelOutlet [navigateUrl]=\"rLink.url | getMixedValue:item\" [routeState]=\"rLink.state | getMixedValue:item\" [innerHTML]=\"value\"></div> }\r\n      @else { <div [matTooltip]=\"tooltip | getMixedValue:item\" class=\"item-detail__group__row__value__hovered\" [routerLink]=\"rLink.url | getMixedValue:item\" [state]=\"rLink.state | getMixedValue:item\" [innerHTML]=\"value\"></div> }\r\n    } @else if(clickEvent) {\r\n        <div [matTooltip]=\"tooltip | getMixedValue:item\" class=\"item-detail__group__row__value__hovered\" (click)=\"clickEvent(item)\" [innerHTML]=\"value\"></div>\r\n    } @else {\r\n        <div [title]=\"value\" [matTooltip]=\"tooltip | getMixedValue:item\" [innerHTML]=\"value\"></div>\r\n    }\r\n</ng-template>\r\n\r\n<ng-template #switchActionButton let-item let-actionButton=\"actionButton\">\r\n    @switch (actionButton.type) {\r\n        @case ('edit') {\r\n            <ng-container [ngTemplateOutlet]=\"editButtonTmpl\" [ngTemplateOutletContext]=\"{ $implicit: item, editButton: configuration.editButton }\" />\r\n        }\r\n        @case ('delete') {\r\n            <ng-container [ngTemplateOutlet]=\"deleteButtonTmpl\" [ngTemplateOutletContext]=\"{ $implicit: item }\" />\r\n        }\r\n        @case ('restore') {\r\n            <ng-container [ngTemplateOutlet]=\"restoreButtonTmpl\" [ngTemplateOutletContext]=\"{ $implicit: item }\" />\r\n        }\r\n        @case ('clickEvent') {\r\n            <button class=\"tonal-button\" (click)=\"actionButton.clickEvent(item)\">\r\n                <span class=\"material-icons\">{{actionButton.icon}}</span>\r\n                <span>{{actionButton.text}}</span>\r\n            </button>\r\n        }\r\n    }\r\n</ng-template>\r\n\r\n<ng-template #editButtonTmpl let-item let-editButton=\"editButton\">\r\n    @if (editButton) {\r\n        @if (editButton.routerLink; as rLink) {\r\n            @if (rLink.outlet == 'route-lateral') {\r\n                <button class=\"tonal-button add__button\" appNavigateLateralPanelOutlet [navigateUrl]=\"rLink.url | getMixedValue:item\">\r\n                    <span class=\"material-icons\">edit</span>\r\n                    <span>{{ editButton?.text ?? 'Editar' }}</span>\r\n                </button>\r\n            }@else {\r\n                <button class=\"tonal-button add__button\"  [routerLink]=\"rLink.url | getMixedValue:item\">\r\n                    <span class=\"material-icons\">edit</span>\r\n                    <span>{{ editButton?.text ?? 'Editar' }}</span>\r\n                </button>\r\n            }\r\n        } @else {\r\n            <button class=\"tonal-button add__button\" (click)=\"navigateEdit()\">\r\n                <span class=\"material-icons\">edit</span>\r\n                <span>{{ editButton?.text ?? 'Editar' }}</span>\r\n            </button>\r\n        }\r\n    } @else {\r\n        <button class=\"tonal-button add__button\" (click)=\"navigateEdit()\">\r\n            <span class=\"material-icons\">edit</span>\r\n            <span>Editar</span>\r\n        </button>\r\n    }\r\n</ng-template>\r\n\r\n<ng-template #deleteButtonTmpl let-item>\r\n    @if (!item.deleted_at) {\r\n    <button class=\"tonal-button\" (click)=\"deleteItem()\">\r\n        <span class=\"material-icons\">delete</span>\r\n        <span>Eliminar</span>\r\n    </button>\r\n    }\r\n</ng-template>\r\n\r\n<ng-template #restoreButtonTmpl let-item>\r\n    @if (item.deleted_at) {\r\n    <button class=\"tonal-button\" (click)=\"restoreItem()\">\r\n        <span class=\"material-icons\">autorenew</span>\r\n        <span>Restaurar</span>\r\n    </button>\r\n    }\r\n</ng-template>\r\n"
        },
        {
            "name": "ItemFormTemplateComponent",
            "id": "component-ItemFormTemplateComponent-c318b4a215c8ef742cae4789ee423f79c07102763a82acdca3a73e70fce6b013cf18d23c85dd12f649226b77bd037e42298d7e0f64fce4e298d57932521aba8a",
            "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-item-form-template",
            "styleUrls": [
                "./item-form-template.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./item-form-template.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 334,
                    "type": "ItemFormConfiguration",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "abortController",
                    "defaultValue": "new AbortController()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 341,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 338,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "events",
                    "defaultValue": "inject(EventsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 337,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fetch",
                    "defaultValue": "inject(FetchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 336,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "location",
                    "defaultValue": "inject(Location)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 339,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getControl",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 367,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItem",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 408,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 355,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 343,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setItemId",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 359,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "submitForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 371,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ScrollingModule",
                    "type": "module"
                },
                {
                    "name": "SpinnerDefaultComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "MatSlideToggleModule",
                    "type": "module"
                },
                {
                    "name": "SelectFileComponent",
                    "type": "component"
                },
                {
                    "name": "PathFilesServerPipe",
                    "type": "pipe"
                },
                {
                    "name": "ScrollingModule",
                    "type": "module"
                },
                {
                    "name": "ErrorTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "GetKeyItemPipe",
                    "type": "pipe"
                },
                {
                    "name": "ExecuteFunctionPipe",
                    "type": "pipe"
                },
                {
                    "name": "GetMixedValuePipe",
                    "type": "pipe"
                },
                {
                    "name": "InputAutocompleteTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "InputSelectTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { FetchService, RequestInitFetch, ToastForFetch } from '@service/fetch.service';\r\nimport { EventsService } from '@service/events.service';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { SpinnerDefaultComponent } from '../spinner-default/spinner-default.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { InputFileConfiguration, SelectFileComponent } from '../select-file/select-file.component';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { ErrorTemplateComponent } from '../error-template/error-template.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { ExecuteFunctionPipe } from '@pipe/execute-function.pipe';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\nimport { InputAutocompleteConfiguration, InputAutocompleteLocalConfiguration, InputAutocompleteServerConfiguration, InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectConfiguration, InputSelectLocalConfiguration, InputSelectServerConfiguration, InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { ConfirmDialogData } from '@component/confirm-dialog-template/confirm-dialog-template.component';\r\n\r\nexport interface ItemFormConfiguration<Item = any, Data = any> {\r\n  title?: string;\r\n  titleModule: string;\r\n\r\n  subtitle?: ((item: Item) => string | number | null | undefined) | false;\r\n\r\n  formGroup: FormGroup;\r\n  type: 'create' | 'update';\r\n\r\n  loading?: boolean;\r\n  hiddeFields?: boolean;\r\n  fields?: FormInput[];\r\n\r\n  dataItem?: WritableSignal<Item | null>,\r\n\r\n  server: {\r\n      url: string;\r\n      queryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      updateUrl?: string;\r\n      updateQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      createUrl?: string;\r\n      createQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      itemUrl?: string;\r\n      itemQueryParams?: { [key: string]: string | number | boolean | null | undefined };\r\n      fetch?: {\r\n        confirmDialog?: ConfirmDialogData,\r\n        toast?: ToastForFetch,\r\n      }\r\n  }\r\n\r\n  parseDataItemBeforeSendFormFn?: (data: Data) => (Data | Promise<Data>);\r\n  afterSaveFormFn?: (data: Item) => void;\r\n\r\n  itemId?: string | number\r\n  parseItemBeforePatchFormFn?: (item: Item) => (Item | Promise<Item>);\r\n\r\n  ignoreShowError?: boolean;\r\n  interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n  httpError?: FetchErrorResponse;\r\n\r\n  disableAutoBackLocation?: boolean;\r\n\r\n  saveButton?: {\r\n      text: string;\r\n      icon?: string;\r\n      iconPosition?: 'left' | 'right';\r\n  };\r\n  \r\n  cancelButton?: {\r\n      iconPosition?: 'left' | 'right';\r\n      text: string;\r\n      icon?: string;\r\n  } | false;\r\n}\r\n\r\nexport declare type InputType = 'select' | 'select-local' | 'select-server' | 'date' | 'date-range' | 'text' | 'number' | 'textarea' | 'checkbox' | 'switch' | 'autocomplete' | 'autocomplete-local' | 'autocomplete-server';\r\n\r\nexport interface FormInput {\r\n\r\n  type: InputType | 'file';\r\n\r\n  text?: TextFormInput;\r\n\r\n  number?: NumberFormInput;\r\n\r\n  textarea?: TextareaFormInput;\r\n  \r\n  date?: DateFormInput;\r\n  \r\n  dateRange?: DateRangeFormInput;\r\n  \r\n  switch?: SwitchFormInput;\r\n  \r\n  checkbox?: CheckboxFormInput;\r\n\r\n  select?: SelectConfigurationExt;\r\n\r\n  selectLocal?: SelectLocalConfigurationExt;\r\n  \r\n  selectServer?: SelectServerConfigurationExt;\r\n\r\n  autocomplete?: AutocompleteConfigurationExt;\r\n\r\n  autocompleteServer?: AutocompleteServerConfigurationExt;\r\n\r\n  autocompleteLocal?: AutocompleteLocalConfigurationExt;\r\n\r\n  file?: FileFormInput;\r\n}\r\n\r\nexport interface TextFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface NumberFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface TextareaFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | null;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  rows?: number;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SelectFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: string | number | boolean | null;\r\n  options: { text: string, value: any }[];\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValue?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface DateRangeFormInput<T = any> {\r\n  formControlNameFrom: string;\r\n  formControlNameTo: string;\r\n  textLabel: string;\r\n  placeholder?: string;\r\n  defaultValueFrom?: Date | string | number | null;\r\n  defaultValueTo?: Date | string | number | null;\r\n  min?: Date;\r\n  max?: Date;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface SwitchFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface CheckboxFormInput<T = any> {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: boolean | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectConfigurationExt<T = any> extends InputSelectConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectLocalConfigurationExt<T = any> extends InputSelectLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface SelectServerConfigurationExt<T = any> extends InputSelectServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteConfigurationExt<T = any> extends InputAutocompleteConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteLocalConfigurationExt<T = any> extends InputAutocompleteLocalConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\ninterface AutocompleteServerConfigurationExt<T = any> extends InputAutocompleteServerConfiguration<T> {\r\n  formControlName: string;\r\n  defaultValue?: string | number | null;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport interface FileFormInput<T = any> extends InputFileConfiguration {\r\n  formControlName: string;\r\n  textLabel: string;\r\n  defaultValue?: any;\r\n  cssClass?: string | ((item: T) => string);\r\n}\r\n\r\nexport const textFormInput = (configuration: TextFormInput): FormInput => ({\r\n  type: 'text',\r\n  text: configuration\r\n});\r\n\r\nexport const numberFormInput = (configuration: NumberFormInput): FormInput => ({\r\n  type: 'number',\r\n  number: configuration\r\n});\r\n\r\nexport const textareaFormInput = (configuration: TextareaFormInput): FormInput => ({\r\n  type: 'textarea',\r\n  textarea: configuration\r\n});\r\n\r\nexport const selectFormInput = (configuration: SelectConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectLocalFormInput = (configuration: SelectLocalConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const selectServerFormInput = (configuration: SelectServerConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n});\r\n\r\nexport const dateFormInput = (configuration: DateFormInput): FormInput => ({\r\n  type: 'date',\r\n  date: configuration\r\n});\r\n\r\nexport const dateRangeFormInput = (configuration: DateRangeFormInput): FormInput => ({\r\n  type: 'date-range',\r\n  dateRange: configuration\r\n});\r\n\r\nexport const switchFormInput = (configuration: SwitchFormInput): FormInput => ({\r\n  type: 'switch',\r\n  switch: configuration\r\n});\r\n\r\nexport const checkboxFormInput = (configuration: CheckboxFormInput): FormInput => ({\r\n  type: 'checkbox',\r\n  checkbox: configuration\r\n});\r\n\r\nexport const autocompleteFormInput = (configuration: AutocompleteConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocomplete: configuration\r\n});\r\n\r\nexport const autocompleteLocalFormInput = (configuration: AutocompleteLocalConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocompleteLocal: configuration\r\n});\r\n\r\nexport const autocompleteServerFormInput = (configuration: AutocompleteServerConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-server',\r\n  autocompleteServer: configuration\r\n});\r\n\r\nexport const fileFormInput = (configuration: FileFormInput): FormInput => ({\r\n  type: 'file',\r\n  file: configuration\r\n});\r\n\r\n\r\n@Component({\r\n  selector: 'app-item-form-template',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ScrollingModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    SelectFileComponent,\r\n    PathFilesServerPipe,\r\n    ScrollingModule,\r\n    ErrorTemplateComponent,\r\n    GetKeyItemPipe,\r\n    ExecuteFunctionPipe,\r\n    GetMixedValuePipe,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n  ],\r\n  templateUrl: './item-form-template.component.html',\r\n  styleUrls: ['./item-form-template.component.css']\r\n})\r\nexport class ItemFormTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemFormConfiguration;\r\n\r\n  private fetch = inject(FetchService);\r\n  private events = inject(EventsService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  public location = inject(Location);\r\n\r\n  private abortController = new AbortController();\r\n\r\n  ngOnInit() {\r\n    if (this.configuration.type == 'update') {\r\n      this.setItemId();\r\n      if (this.configuration.dataItem && this.configuration.dataItem()) {\r\n        this.configuration.loading = false;\r\n      } else {\r\n        this.configuration.dataItem = signal(null);\r\n        this.getItem();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private setItemId() {\r\n    if (!this.configuration.itemId) {\r\n      if (this.activatedRoute.snapshot.paramMap.get('id')) {\r\n        this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getControl(name: string): FormControl {\r\n    return this.configuration.formGroup.get(name) as FormControl;\r\n  }\r\n\r\n  public async submitForm() {\r\n    try {\r\n      const form = this.configuration.formGroup;\r\n      form.markAllAsTouched();\r\n      if (form.invalid || this.configuration.loading) return;\r\n      this.configuration.loading = true;\r\n\r\n      let data = form.getRawValue();\r\n      const { parseDataItemBeforeSendFormFn } = this.configuration;\r\n      data = await parseDataItemBeforeSendFormFn?.(data) ?? data;\r\n\r\n      const requestInit: RequestInitFetch = { };\r\n      if(this.configuration.server.fetch?.confirmDialog) {\r\n        requestInit.confirmDialog = this.configuration.server.fetch.confirmDialog;\r\n      }\r\n      if(this.configuration.server.fetch?.toast) {\r\n        requestInit.toast = this.configuration.server.fetch.toast;\r\n      }\r\n\r\n      let response = null;\r\n      if (this.configuration.type === 'create') {\r\n        response = await this.fetch.post(this.configuration.server.url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_created`, response);\r\n      } else {\r\n        const url = this.configuration.server.updateUrl ?? `${this.configuration.server.url}/${this.configuration.dataItem!()?.id}`;\r\n        response = await this.fetch.put(url, data, requestInit);\r\n        this.events.emitEvent(`${this.configuration.server.url}_updated`, response);\r\n      }\r\n\r\n      const { afterSaveFormFn } = this.configuration;\r\n      if (afterSaveFormFn) afterSaveFormFn(response);\r\n\r\n      if (!this.configuration.disableAutoBackLocation) this.location.back();\r\n    } catch { }\r\n    this.configuration.loading = false;\r\n  }\r\n\r\n  public async getItem() {\r\n    this.configuration.dataItem = signal(null)\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { itemId, server } = this.configuration;\r\n      let queryParams:any = server.itemQueryParams ?? {};\r\n      if (queryParams instanceof Object) {\r\n        queryParams = objectToURLSearchParams(queryParams);\r\n        queryParams = queryParams.toString();\r\n      }\r\n      const url = `${server.itemUrl ?? server.url}/${itemId}?${queryParams ? queryParams : ''}`;\r\n      const requestInit: RequestInitFetch = { signal: this.abortController.signal };\r\n      let item: any = await this.fetch.get(url, requestInit);\r\n      const { parseItemBeforePatchFormFn } = this.configuration;\r\n      item = await parseItemBeforePatchFormFn?.(item) ?? item;\r\n      this.configuration.formGroup.patchValue(item);\r\n      this.configuration.dataItem.set(item);\r\n      this.configuration.hiddeFields = false;\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./item-form-template.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<form [formGroup]=\"configuration.formGroup\" class=\"form\" (submit)=\"submitForm()\" [ngClass]=\"{ 'container-loading': configuration.loading }\" cdkScrollable>\r\n    <!-- -------------------------- -->\r\n    <div class=\"form__header\">\r\n\r\n        <button class=\"form__header__back-button icon-button\" type=\"button\" (click)=\"location.back()\">\r\n            <span class=\"material-icons\">arrow_back</span>\r\n        </button>\r\n\r\n        <div class=\"form__header__title\">\r\n            <div>\r\n                {{ configuration.title ?? ((configuration.type == 'update' ? 'Actualizar ' : 'Crear ') + configuration.titleModule) }}\r\n            </div>\r\n\r\n            @if(configuration.dataItem; as dataItem) {\r\n                @if (dataItem(); as item) {\r\n                    @if(this.configuration.subtitle != false) {\r\n                        @if (configuration.subtitle; as subtitleFn) {\r\n                            @if ((subtitleFn | executeFunction:item); as subtitle) {\r\n                                <div class=\"form__header__title__sub\">{{subtitle}}</div>\r\n                            }\r\n                        } @else {\r\n                            @if (item?.name; as name) {\r\n                                <div class=\"form__header__title__sub\">{{name}}</div>\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        </div>\r\n\r\n        <div class=\"form__header__actions\">\r\n            <button class=\"text-button\" type=\"submit\" [disabled]=\"configuration.loading\">\r\n                {{configuration.saveButton?.text ?? 'Guardar'}}\r\n            </button>\r\n        </div>\r\n    </div>\r\n    <!-- -------------------------- -->\r\n    <div class=\"form__content\">\r\n        <ng-content select=\"beforeContent\" />\r\n        @if (!configuration.hiddeFields) {\r\n        <ng-content />\r\n        @if (configuration.fields;as fields) {\r\n            <div class=\"form__content__inputs\">\r\n                @for (field of fields; track field) {\r\n                    @switch (field.type) {\r\n                        @case ('date-range') {\r\n                            @if (field.dateRange; as input) {\r\n                                @if (getControl(input.formControlNameFrom) && getControl(input.formControlNameTo)) {\r\n                                    <mat-form-field data-type=\"form-input\" data-form-input-type=\"date-range\" [attr.data-form-input-name]=\"input.formControlNameFrom\" class=\"form__input\" [ngClass]=\"input.cssClass | getMixedValue: configuration.dataItem ? configuration.dataItem() : null\">\r\n                                        <mat-label>{{ input.textLabel }}</mat-label>\r\n                                        <mat-date-range-input [rangePicker]=\"pickerRange1\">\r\n                                            <input matStartDate [formControlName]=\"input.formControlNameFrom\">\r\n                                            <input matEndDate [formControlName]=\"input.formControlNameTo\">\r\n                                        </mat-date-range-input>\r\n                                        <button class=\"icon-button\" matSuffix type=\"button\" (click)=\"pickerRange1.open()\" [disabled]=\"getControl(input.formControlNameFrom).disabled\">\r\n                                            <span class=\"material-icons\">calendar_month</span>\r\n                                        </button>\r\n                                        <mat-date-range-picker #pickerRange1></mat-date-range-picker>\r\n                                    </mat-form-field>\r\n                                }\r\n                            }\r\n                        }\r\n                        @case ('date') {\r\n                            @if (field.date; as input) {\r\n                                @if (getControl(input.formControlName); as control) {\r\n                                    <mat-form-field data-type=\"form-input\" data-form-input-type=\"date\" [attr.data-form-input-name]=\"input.formControlName\" class=\"form__input\" [ngClass]=\"input.cssClass | getMixedValue: configuration.dataItem ? configuration.dataItem() : null\">\r\n                                        <mat-label>{{ input.textLabel }}</mat-label>\r\n                                        <input matInput [matDatepicker]=\"pickerDate\" [formControlName]=\"input.formControlName\">\r\n                                        <button class=\"icon-button\" type=\"button\" matSuffix (click)=\"pickerDate.open()\" [disabled]=\"control.disabled\">\r\n                                            <span class=\"material-icons\">calendar_month</span>\r\n                                        </button>\r\n                                        <mat-datepicker #pickerDate></mat-datepicker>\r\n                                        @if (control.hasError('required')) { <mat-error>Campo requerido</mat-error> }\r\n                                        @else if (control.hasError('min')) { <mat-error>Error fecha mínima</mat-error> }\r\n                                        @else if (control.hasError('max')) { <mat-error>Error fecha máxima</mat-error> }\r\n                                        @else { <mat-error>Inválido</mat-error> }\r\n                                    </mat-form-field>\r\n                                }\r\n                            }\r\n                            \r\n                        }\r\n                        @case ('number') {\r\n                            @if (field.number; as input) {\r\n                                @if (getControl(input.formControlName); as control) {\r\n                                    <mat-form-field data-type=\"form-input\" data-form-input-type=\"number\" [attr.data-form-input-name]=\"input.formControlName\" class=\"form__input\" [ngClass]=\"input.cssClass | getMixedValue: configuration.dataItem ? configuration.dataItem() : null\">\r\n                                        <mat-label>{{ input.textLabel}}</mat-label>\r\n                                        <input type=\"number\" matInput [formControlName]=\"input.formControlName\" [min]=\"input.min ? +input.min : 0\" [max]=\"input.max ? +input.max : null\">\r\n                                        @if (control.hasError('required')) { <mat-error>Campo requerido</mat-error> }\r\n                                        @else if (control.hasError('min')) { <mat-error>Mínimo {{input.min ? +input.min : 0}}</mat-error> }\r\n                                        @else if (control.hasError('max')) { <mat-error>Máximo {{input.max ? +input.max : 'superado'}}</mat-error> }\r\n                                        @else { <mat-error>Inválido</mat-error> }\r\n                                    </mat-form-field>\r\n                                }\r\n                            }\r\n                        }\r\n                        @case ('text') {\r\n                            @if (field.text; as input) {\r\n                                @if (getControl(input.formControlName); as control) {\r\n                                    <mat-form-field data-type=\"form-input\" data-form-input-type=\"text\" [attr.data-form-input-name]=\"input.formControlName\" class=\"form__input\" [ngClass]=\"input.cssClass | getMixedValue: configuration.dataItem ? configuration.dataItem() : null\">\r\n                                        <mat-label>{{ input.textLabel}}</mat-label>\r\n                                        <input type=\"text\" matInput [formControlName]=\"input.formControlName\" [placeholder]=\"input.placeholder ?? input.textLabel\" [maxlength]=\"input.maxLength ?? 255\">\r\n                                        @if (control.hasError('required')) { <mat-error>Campo requerido</mat-error> }\r\n                                        @else if (control.hasError('email')) { <mat-error>Email no válido</mat-error> }\r\n                                        @else if (control.hasError('pattern')) { <mat-error>Contenido no válido</mat-error> }\r\n                                        @else { <mat-error>Inválido</mat-error> }\r\n                                    </mat-form-field>\r\n                                }\r\n                            }\r\n                        }\r\n                        @case ('textarea') {\r\n                            @if (field.textarea; as input) {\r\n                                @if (getControl(input.formControlName); as control) {\r\n                                    <mat-form-field data-type=\"form-input\" data-form-input-type=\"text-area\" [attr.data-form-input-name]=\"input.formControlName\" class=\"form__input\" [ngClass]=\"input.cssClass | getMixedValue: configuration.dataItem ? configuration.dataItem() : null\">\r\n                                        <mat-label>{{ input.textLabel}}</mat-label>\r\n                                        <textarea matInput [formControlName]=\"input.formControlName\" [placeholder]=\"input.placeholder ?? input.textLabel\" [maxlength]=\"input.maxLength ?? 2500\"></textarea>\r\n                                        @if (control.hasError('required')) { <mat-error>Campo requerido</mat-error> }\r\n                                        @else if (control.hasError('email')) { <mat-error>Email no válido</mat-error> }\r\n                                        @else if (control.hasError('pattern')) { <mat-error>Contenido no válido</mat-error> }\r\n                                        @else { <mat-error>Inválido</mat-error> }\r\n                                    </mat-form-field>\r\n                                }\r\n                            }\r\n                        } \r\n                        @case ('select') {\r\n                            @if (field.select; as input) {\r\n                                @if (getControl(input.formControlName); as control) {\r\n                                    <app-input-select-template data-type=\"form-input\" data-form-input-type=\"select\" [attr.data-form-input-name]=\"input.formControlName\"\r\n                                        class=\"form__input\" [ngClass]=\"input.cssClass | getMixedValue: configuration.dataItem ? configuration.dataItem() : null\"\r\n                                        [control]=\"control\"\r\n                                        [configuration]=\"input\"\r\n                                        />\r\n                                }\r\n                            }\r\n                        }\r\n                        @case ('select-local') {\r\n                            @if (field.selectLocal; as input) {\r\n                                @if (getControl(input.formControlName); as control) {\r\n                                    <app-input-select-template data-type=\"form-input\" data-form-input-type=\"select-local\" [attr.data-form-input-name]=\"input.formControlName\"\r\n                                        class=\"form__input\" [ngClass]=\"input.cssClass | getMixedValue: configuration.dataItem ? configuration.dataItem() : null\"\r\n                                        [control]=\"control\"\r\n                                        [configuration]=\"input\"\r\n                                        />\r\n                                }\r\n                            }\r\n                        }\r\n                        @case ('select-server') {\r\n                            @if (field.selectServer; as input) {\r\n                                @if (getControl(input.formControlName); as control) {\r\n                                    <app-input-select-template data-type=\"form-input\" data-form-input-type=\"select-server\" [attr.data-form-input-name]=\"input.formControlName\"\r\n                                        class=\"form__input\" [ngClass]=\"input.cssClass | getMixedValue: configuration.dataItem ? configuration.dataItem() : null\"\r\n                                        [control]=\"control\"\r\n                                        [configuration]=\"input\"\r\n                                        />\r\n                                }\r\n                            }\r\n                        }\r\n                        @case ('autocomplete') {\r\n                            @if (field.autocomplete; as input) {\r\n                                @if (getControl(input.formControlName); as control) {\r\n                                    <app-input-autocomplete-template data-type=\"form-input\" data-form-input-type=\"autocomplete\" [attr.data-form-input-name]=\"input.formControlName\"\r\n                                        class=\"form__input\" [ngClass]=\"input.cssClass | getMixedValue: configuration.dataItem ? configuration.dataItem() : null\"\r\n                                        [idControl]=\"control\"\r\n                                        [configuration]=\"input\" />\r\n                                }\r\n                            }\r\n                        }\r\n                        @case ('autocomplete-local') {\r\n                            @if (field.autocompleteLocal; as input) {\r\n                                @if (getControl(input.formControlName); as control) {\r\n                                    <app-input-autocomplete-template data-type=\"form-input\" data-form-input-type=\"autocomplete-local\" [attr.data-form-input-name]=\"input.formControlName\"\r\n                                        class=\"form__input\" [ngClass]=\"input.cssClass | getMixedValue: configuration.dataItem ? configuration.dataItem() : null\"\r\n                                        [idControl]=\"control\"\r\n                                        [configuration]=\"input\" />\r\n                                }\r\n                            }\r\n                        }\r\n                        @case ('autocomplete-server') {\r\n                            @if (field.autocompleteServer; as input) {\r\n                                @if (getControl(input.formControlName); as control) {\r\n                                    <app-input-autocomplete-template data-type=\"form-input\" data-form-input-type=\"autocomplete-server\" [attr.data-form-input-name]=\"input.formControlName\" \r\n                                        class=\"form__input\" [ngClass]=\"input.cssClass | getMixedValue: configuration.dataItem ? configuration.dataItem() : null\"\r\n                                        [idControl]=\"control\"\r\n                                        [configuration]=\"input\" />\r\n                                }\r\n                            }\r\n                        }\r\n                        @case ('checkbox') {\r\n                            @if (field.checkbox; as input) {\r\n                                @if (getControl(input.formControlName); as control) {\r\n                                    <div data-type=\"form-input\" data-form-input-type=\"checkbox\" [attr.data-form-input-name]=\"input.formControlName\" class=\"form__input\" [ngClass]=\"input.cssClass | getMixedValue: configuration.dataItem ? configuration.dataItem() : null\">\r\n                                        <mat-checkbox [formControlName]=\"input.formControlName\">{{ input.textLabel }}</mat-checkbox>\r\n                                    </div>\r\n                                }\r\n                            }\r\n                        }\r\n                        @case ('switch') {\r\n                            @if (field.switch; as input) {\r\n                                @if (getControl(input.formControlName); as control) {\r\n                                    <div data-type=\"form-input\" data-form-input-type=\"switch\" [attr.data-form-input-name]=\"input.formControlName\" class=\"form__input\" [ngClass]=\"input.cssClass | getMixedValue: configuration.dataItem ? configuration.dataItem() : null\">\r\n                                        <mat-slide-toggle [formControlName]=\"input.formControlName\">{{ input.textLabel }}</mat-slide-toggle>\r\n                                    </div>\r\n                                }\r\n                            }\r\n                        }\r\n                        @case ('file') {\r\n                            @if (field.file; as input) {\r\n                                @if (getControl(input.formControlName); as control) {\r\n                                    <div data-type=\"form-input\" data-form-input-type=\"file\" [attr.data-form-input-name]=\"input.formControlName\" class=\"form__input\" [ngClass]=\"input.cssClass | getMixedValue: configuration.dataItem ? configuration.dataItem() : null\">\r\n                                        <app-select-file [configuration]=\"input\" [fileCtrl]=\"control\" />\r\n                                    </div>\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            </div>\r\n        }\r\n        <ng-content select=\"afterContent\" />\r\n        }\r\n        @if (!configuration.dataItem?.() && configuration.loading && configuration.type == 'update') {\r\n        <app-spinner-default />\r\n        } @else if (!configuration.dataItem?.() && configuration.httpError && !configuration.ignoreShowError) {\r\n        <app-error-template [error]=\"configuration.httpError\" (reload)=\"getItem()\" />\r\n        }\r\n    </div>\r\n\r\n\r\n    @if (configuration.type == 'create' || (configuration.type == 'update' && configuration.dataItem && configuration.dataItem())) {\r\n        <div class=\"form__actions\">\r\n            @if (configuration.cancelButton !== false) {\r\n            <button class=\"text-button\" [disabled]=\"configuration.loading\" type=\"button\" (click)=\"location.back()\">\r\n                @if (configuration.cancelButton?.icon && configuration.cancelButton?.iconPosition !== 'right') {\r\n                <span class=\"material-icons\">{{ configuration.saveButton?.icon }}</span>\r\n                }\r\n\r\n                <span>{{ configuration.cancelButton?.text ?? 'Cancelar' }}</span>\r\n\r\n                @if (configuration.cancelButton?.icon && configuration.cancelButton?.iconPosition === 'right') {\r\n                <span class=\"material-icons\">{{ configuration.saveButton?.icon }}</span>\r\n                }\r\n            </button>\r\n            }\r\n\r\n            <button class=\"filled-button\" [disabled]=\"configuration.loading || this.configuration.formGroup.invalid\" type=\"submit\">\r\n                @if (configuration.saveButton?.icon && configuration.saveButton?.iconPosition !== 'right') {\r\n                <span class=\"material-icons\">{{ configuration.saveButton?.icon }}</span>\r\n                }\r\n                <span>\r\n                    @if (configuration.saveButton?.text; as text) { {{text}} } \r\n                    @else if (configuration.type == 'update') { Actualizar }\r\n                    @else { Guardar }\r\n                </span>\r\n\r\n                @if (configuration.saveButton?.icon && configuration.saveButton?.iconPosition === 'right') {\r\n                <span class=\"material-icons\">{{ configuration.saveButton?.icon }}</span>\r\n                }\r\n            </button>\r\n        </div>\r\n    }\r\n\r\n</form>"
        },
        {
            "name": "ItemListTemplateComponent",
            "id": "component-ItemListTemplateComponent-edc9a2c085d669b062640c6d2a97876fe56bb34f5ae23612a12a67b2af6f44bb5d3316d9f28e50d8c8d522c0e6ce8fc3245f639ec16593bc1c325c3c460a4296",
            "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "FirstLetterUppercasePipe",
                    "type": "pipe"
                },
                {
                    "name": "GetKeyItemPipe",
                    "type": "pipe"
                },
                {
                    "name": "RenameTitleColumnListPipe",
                    "type": "pipe"
                },
                {
                    "name": "BrowserAnimationsModule",
                    "type": "module"
                },
                {
                    "name": "DateFnsAdapter"
                }
            ],
            "selector": "app-item-list-template",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./item-list-template.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 611,
                    "type": "ItemListConfiguration",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_dataTypeList",
                    "defaultValue": "'array'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"array\" | \"paginator\"",
                    "optional": false,
                    "description": "",
                    "line": 621,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_keyForGetItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 622,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_keyForGetTotalItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 623,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "abortController",
                    "defaultValue": "new AbortController()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 646,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 626,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "allSelectedItems",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 875,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "deleteItem",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 945,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "divList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 619,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'divListItems', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                },
                {
                    "name": "eventsService",
                    "defaultValue": "inject(EventsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 629,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fetch",
                    "defaultValue": "inject(FetchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 625,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "firstLetterUppercasePipe",
                    "defaultValue": "inject(FirstLetterUppercasePipe)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 633,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "font",
                    "defaultValue": "signal('medium')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<\"small\" | \"medium\" | \"large\">",
                    "optional": false,
                    "description": "",
                    "line": 643,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "formFilters",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<any> | null",
                    "optional": false,
                    "description": "",
                    "line": 640,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getKeyItemPipe",
                    "defaultValue": "inject(GetKeyItemPipe)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 634,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "headerListStyle",
                    "defaultValue": "signal('simple')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<\"simple\" | \"color\">",
                    "optional": false,
                    "description": "",
                    "line": 644,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "lengthData",
                    "defaultValue": "computed(() => this.data().length)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 637,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "lengthSelectedItems",
                    "defaultValue": "computed(() => this.data().filter((e: ListItemExtended) => e.__selected__).length)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 878,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "signal(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 642,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "location",
                    "defaultValue": "inject(Location)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 630,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "optional": false,
                    "description": "",
                    "line": 616,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "renameTitleColumnListPipe",
                    "defaultValue": "inject(RenameTitleColumnListPipe)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 635,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "renderer",
                    "defaultValue": "inject(Renderer2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 628,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "restoreItem",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 957,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 627,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "rowList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 614,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'rowList'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "searchCtrl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 639,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectedItems",
                    "defaultValue": "computed(() => this.data().filter((e: ListItemExtended) => e.__selected__))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 877,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "someSelectedItems",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 876,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "",
                    "line": 617,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 648,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateChangesItem",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 970,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "callGetData",
                    "args": [
                        {
                            "name": "queryParams",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 815,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "queryParams",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkSelectedItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 894,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "generateColumnsCss",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 757,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "generateFormControlsFromFilterInputs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 901,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getControlFormFilter",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 932,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getData",
                    "args": [
                        {
                            "name": "searchParams",
                            "type": "URLSearchParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "new URLSearchParams()"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 823,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "searchParams",
                            "type": "URLSearchParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "new URLSearchParams()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getQueryParams",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 789,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hiddenToggleColumn",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 859,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateCreateView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 869,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "navigateOrCallGetData",
                    "args": [
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 799,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 707,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 749,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 680,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectedAllItems",
                    "args": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 885,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedItem",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 880,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "someSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 890,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "updateLoadingStatusItem",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 938,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyQueryParams",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 804,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "SpinnerDefaultComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatPaginatorModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatSortModule",
                    "type": "module"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "MatSlideToggleModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "MatPseudoCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "IndexListPipe",
                    "type": "pipe"
                },
                {
                    "name": "GetKeyItemPipe",
                    "type": "pipe"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "DiffDatePipe",
                    "type": "pipe"
                },
                {
                    "name": "HiddenOptionButtonRowPipe",
                    "type": "pipe"
                },
                {
                    "name": "NgOptimizedImage"
                },
                {
                    "name": "ScrollingModule",
                    "type": "module"
                },
                {
                    "name": "GetUserByIdPipe",
                    "type": "pipe"
                },
                {
                    "name": "PathFilesServerPipe",
                    "type": "pipe"
                },
                {
                    "name": "ListFormatPipe",
                    "type": "pipe"
                },
                {
                    "name": "LoadImagePrivateDirective",
                    "type": "directive"
                },
                {
                    "name": "FirstLetterUppercasePipe",
                    "type": "pipe"
                },
                {
                    "name": "NavigateLateralPanelOutletDirective",
                    "type": "directive"
                },
                {
                    "name": "InputAutocompleteTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "InputSelectTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "ExecuteFunctionListPipe",
                    "type": "pipe"
                },
                {
                    "name": "RenameTitleColumnListPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule, DatePipe, Location, NgOptimizedImage } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, ViewChild, Input, ContentChild, TemplateRef, ElementRef, Renderer2, ViewEncapsulation, signal, WritableSignal, computed, inject, Inject, Optional, InjectionToken, EventEmitter, RendererStyleFlags2 } from '@angular/core';\r\nimport { MatCheckboxChange, MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSort, MatSortModule } from '@angular/material/sort';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { objectToURLSearchParams } from 'src/app/shared/utilities/queryParams';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { IndexListPipe } from '@pipe/index-list.pipe';\r\nimport { SpinnerDefaultComponent } from '@component/spinner-default/spinner-default.component';\r\nimport { GetKeyItemPipe } from '@pipe/get-key-item.pipe';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { debounceTime } from 'rxjs';\r\nimport { DiffDatePipe } from '@pipe/diff-date.pipe';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { HiddenOptionButtonRowPipe } from '@pipe/hidden-option-button-row.pipe';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { GetUserByIdPipe } from '@pipe/get-user-by-id.pipe';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { ListFormatPipe } from '@pipe/list-format.pipe';\r\nimport { LoadImagePrivateDirective } from '@directive/load-image-private.directive';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\nimport { NavigateLateralPanelOutletDirective } from '@directive/navigate-lateral-panel-outlet.directive';\r\nimport { FetchErrorType } from 'src/app/shared/interfaces/fetch';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MatPseudoCheckboxModule } from '@angular/material/core';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { InputAutocompleteTemplateComponent } from '@component/input-autocomplete-template/input-autocomplete-template.component';\r\nimport { InputSelectTemplateComponent } from '@component/input-select-template/input-select-template.component';\r\nimport { EventGlobalSearch, NAME_EVENT_GLOBAL_SEARCH } from 'src/app/sidenav/sidenav/sidenav.component';\r\nimport { ExecuteFunctionListPipe } from './execute-function-list.pipe';\r\nimport { FormInput, dateRangeFormInput, switchFormInput } from '@component/item-form-template/item-form-template.component';\r\nimport { RenameTitleColumnListPipe } from './rename-title-column-list.pipe';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DateFnsAdapter } from '@angular/material-date-fns-adapter';\r\nimport { MyDateAdapter } from '@utility/myDateAdapter';\r\nimport { MY_DATE_FORMATS } from '@utility/myDateFormat';\r\n\r\nexport const DATA_TYPE_LIST = new InjectionToken<'array' | 'paginator'>('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_ITEMS_PAGINATOR_LIST');\r\nexport const KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST = new InjectionToken('KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST');\r\n\r\nexport interface ItemListConfiguration<T = any> {\r\n  readonly dataType?: 'array' | 'paginator';\r\n  readonly keyGetItemsPaginator?: string;\r\n  readonly keyGetTotalItemsPaginator?: string;\r\n\r\n  readonly disableFiltersInQueryParams?: boolean;\r\n\r\n  title: string | null;\r\n\r\n  parseDataFn?: (data: T[]) => T[] | Promise<T[]>;\r\n  data?: WritableSignal<T[]>;\r\n  updateListEvent?: EventEmitter<void>;\r\n\r\n  defaultOrder?: {\r\n    key: string,\r\n    order: 'ASC' | 'DESC'\r\n  };\r\n\r\n  backButton?: boolean;\r\n\r\n  updateButton?: boolean;\r\n\r\n  server: {\r\n    readonly url: string,\r\n    queryParams?: { [key: string]: any } | string;\r\n  }\r\n\r\n  createButton?: {\r\n    text?: string,\r\n    routerLink: RouterLinkCreateButton\r\n  } | false;\r\n\r\n  filters?: FormInput[] | false;\r\n\r\n  rows?: {\r\n    selectable?: {\r\n      actions: SelectableActionButton<T>[];\r\n    };\r\n    index?: false | ({ title: string });\r\n    cssClass?: string | ((item: T) => string);\r\n    actions?: ActionButton<T>[];\r\n    options?: ActionButton<T>[] | false;\r\n  },\r\n\r\n  columns: WritableSignal<ListColumn<T>[]>;\r\n}\r\n\r\nexport interface RouterLinkCreateButton {\r\n  url: string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: any;\r\n}\r\nexport interface RouterLinkItem<T> {\r\n  url: ((item: T, index: number) => string) | string;\r\n  outlet?: 'route-lateral' | 'principal';\r\n  queryParams?: { [key: string]: any },\r\n  state?: ((item: T, index: number) => (string | { [key: string]: any } | any[] | number | null)) | string | { [key: string]: any } | any[] | number | null;\r\n}\r\n\r\nexport type StyleButton = 'filled-button' | 'tonal-button' | 'text-button' | 'outlined-button' | 'elevated-button' | 'icon-button' | 'tonal-icon-button' | 'filled-icon-button' | 'outlined-icon-button';\r\n\r\ndeclare type ActionButtonActionsType = 'clickEvent' | 'routerLink';\r\ninterface ActionButton<T> {\r\n  type: 'clickEvent' | 'routerLink';\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((item: T, index: number) => boolean);\r\n  disabled?: boolean | ((item: T, index: number) => boolean);\r\n  cssClass?: string | ((item: T, index: number) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((item: T, index: number) => ({ [key: string]: any }));\r\n  fn?: (item: T, index: number, fns: {\r\n    deleteItemFn: (id: number | string) => Promise<void>,\r\n    restoreItemFn: (id: number | string) => Promise<void>,\r\n    updateChangesItemFn: (index: number, item: T) => void,\r\n  }) => void;\r\n  routerLink?: RouterLinkItem<T>;\r\n}\r\ninterface ClickEventActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'fn'>> & ActionButton<T>, 'type' | 'routerLink'> { }\r\nexport const clickEventActionButton = <T = any>(config: ClickEventActionButton<T>): ActionButton<T> => ({ type: 'clickEvent', ...config });\r\ninterface RouterLinkActionButton<T> extends Omit<Required<Pick<ActionButton<T>, 'routerLink'>> & ActionButton<T>, 'type' | 'clickEvent'> { }\r\nexport const routerLinkActionButton = <T = any>(config: RouterLinkActionButton<T>): ActionButton<T> => ({ type: 'routerLink', ...config });\r\ninterface SelectableActionButton<T> {\r\n  icon?: string;\r\n  text?: string;\r\n  title?: string;\r\n  style?: StyleButton;\r\n  hidden?: boolean | ((selectedItems: T[]) => boolean);\r\n  disabled?: boolean | ((selectedItems: T[]) => boolean);\r\n  cssClass?: string | ((selectedItems: T[]) => string);\r\n  cssStyle?: ({ [key: string]: any }) | ((selectedItems: T[]) => ({ [key: string]: any }));\r\n  fn: (selectedItems: T[]) => void;\r\n}\r\nexport const selectableActionButton = <T = any>(config: SelectableActionButton<T>): SelectableActionButton<T> => ({ ...config });\r\n\r\nexport interface ListItemExtended {\r\n  __selected__?: boolean;\r\n  __loading_status__?: boolean;\r\n}\r\n\r\nexport type TypeValueKeyItem = 'text' | 'diff-date' | 'date' | 'number' | 'email' | 'phone' | 'user' | 'uppercase' | 'lowercase' | 'titlecase' | 'first-letter-uppercase' | 'list-format' | 'currency';\r\n\r\nexport interface ListColumn<T> {\r\n  /**\r\n   * @description\r\n   * Agrega clases css al contenedor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   */\r\n  align?: 'left' | 'center' | 'right';\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor adicional de la celda de la columna\r\n   * @example\r\n   * clickEventAdditionalValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventAdditionalValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Función que se ejecuta al dar click en el valor de la celda de la columna\r\n   * @example\r\n   * clickEventValue: (item) => { // TODO }\r\n   * @param item como parámetro pasa el item de cada elemento de la lista\r\n   * @returns void\r\n   */\r\n  clickEventValue?: (item: T, index: number) => void;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css a la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClass: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClass: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClass?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor adicional de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayAdditionalValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayAdditionalValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Agrega clases css al elemento del valor de la celda de la columna\r\n   * @example\r\n   * ...\r\n   * cssClassDisplayValue: (item) => item.status === 'active' ? 'text-green-500' : 'text-red-500'\r\n   * ...\r\n   * cssClassDisplayValue: 'text-green-500'\r\n   * ...\r\n   */\r\n  cssClassDisplayValue?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo fecha (type: 'date')\r\n   * @example\r\n   * ...\r\n   * dateFormat: 'yyyy-MM-dd'\r\n   * ...\r\n   * dateFormat: 'dd/MM/yyyy' // Por defecto\r\n   * ...\r\n   */\r\n  dateFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor adicional a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.name\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayAdditionalValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayAdditionalValueFn?: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * Función que retorna el valor a mostrar en la celda de cada columna\r\n   * @example\r\n   * ...\r\n   * displayValueFn: (item) => item.name\r\n   * ...\r\n   * displayValueFn: (item) => item.price // with type 'number'\r\n   * ...\r\n   * displayValueFn: (item) =>  `<p>${item.name} <i>${item.email}</i></p>`// with type 'html'\r\n   * ...\r\n   * displayValueFn: (item) => item.contacts.map((contact) => contact.name) // with type 'list-format'\r\n   * ...\r\n   * @param item\r\n   * @returns Date | string | number | null | undefined | string[] | number[]\r\n   */\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined | string[] | number[];\r\n\r\n  /**\r\n   * @description\r\n   * If you want to display a value in the column that is not in the item, you can use this function\r\n   * @example\r\n   * ...\r\n   * gridColumn: '1fr'\r\n   * ...\r\n   * gridColumn: '200px'\r\n   * ...\r\n   * gridColumn: 'max-content'\r\n   * ...\r\n   * gridColumn: 'fit-content(200px)'\r\n   * ...\r\n   */\r\n  gridColumn?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Establece que la columna esté oculta para la lista, se puede mostrar con el icono de configuraciones > Columnas\r\n   * @example\r\n   * ...\r\n   * hidden: true\r\n   * ...\r\n   * hidden: false // Por defecto\r\n   * ...\r\n   */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * @description\r\n   * Establece el formato de la columna cuando esta es de tipo número (type: 'number')\r\n   * @example\r\n   * ...\r\n   * numberFormat: '2.2-2'\r\n   * ...\r\n   * numberFormat: '0.2-2' // Por defecto\r\n   * ...\r\n   */\r\n  numberFormat?: string;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor adicional de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkAdditionalValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkAdditionalValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Para agregarle routerLink al valor de la columna\r\n   * @example\r\n   * ...\r\n   * routerLinkValue: {\r\n   *     url: (item) => `/admin/usuarios/${item.id}`,\r\n   * }\r\n   * ...\r\n   * routerLinkValue: {\r\n   *    outlet: 'route-lateral',\r\n   *    url: '/admin/usuarios',\r\n   * }\r\n   * ...\r\n   */\r\n  routerLinkValue?: RouterLinkItem<T>;\r\n\r\n  /**\r\n   * @description\r\n   * Sortable column espicif key in object configuration\r\n   * @example\r\n   * sort: { key: 'name' }\r\n   */\r\n  sort?: { key: string };\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display additional value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayAdditionalValue: { color: 'green' }\r\n   * ...\r\n   * @param item\r\n   * @returns string | number | null | undefined | string[] | number[]\r\n   */\r\n  cssStyleDisplayAdditionalValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Set Inline style for display value\r\n   * @example\r\n   * ...\r\n   * cssStyleDisplayValue: (item) => ({ color: item.status === 'active' ? 'green' : 'red' })\r\n   * ...\r\n   * cssStyleDisplayValue: { color: 'green' }\r\n   * ...\r\n   */\r\n  cssStyleDisplayValue?: ((item: T, index: number) => ({ [key: string]: any })) | ({ [key: string]: any });\r\n\r\n  /**\r\n   * @description\r\n   * Title column\r\n   * @example\r\n   * title: 'Nombre'\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * @description\r\n   * To display a tooltip in the column on hover\r\n   * @example\r\n   * tooltip: 'Ver detalle'\r\n   */\r\n  tooltip?: ((item: T) => string) | string;\r\n\r\n  /**\r\n   * @description\r\n   * For show type value in cell\r\n   * @example\r\n   * ...\r\n   * type: 'number',\r\n   * displayValueFn: (item) => item.price, // output: 2,000.00\r\n   * ...\r\n   * type: 'date',\r\n   * displayValueFn: (item) => item.created_at, // output 12/12/2020\r\n   * ...\r\n   */\r\n  type?: TypeValueKeyItem | 'image' | 'html';\r\n\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface SimpleListColumn<T> extends Omit<ListColumn<T>, 'type' | 'displayAdditionalValueFn' | 'displayValueFn' | 'dateFormat' | 'numberFormat' | 'image'> { }\r\ninterface SimpleListColumn2<T> extends Omit<SimpleListColumn<T>, 'cssStyleDisplayAdditionalValue' | 'routerLinkAdditionalValue' | 'cssClassDisplayAdditionalValue' | 'clickEventAdditionalValue'> { }\r\ninterface ListFormatListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string[];\r\n  displayValueFn: (item: T, index: number) => string[];\r\n}\r\n\r\ninterface NumberListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => number | null | undefined;\r\n  numberFormat?: string;\r\n}\r\n\r\ninterface StringListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => string | number | null | undefined;\r\n}\r\n\r\ninterface DateListColumn<T = any> extends SimpleListColumn<T> {\r\n  displayAdditionalValueFn?: (item: T, index: number) => string | number | null | undefined;\r\n  displayValueFn: (item: T, index: number) => Date | string | number | null | undefined;\r\n  dateFormat?: string;\r\n}\r\n\r\ninterface ImageListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n  image?: {\r\n    prefixUrl?: string;\r\n    width?: number;\r\n    height?: number;\r\n    alt?: string;\r\n  }\r\n}\r\n\r\ninterface HtmlListColumn<T = any> extends SimpleListColumn2<T> {\r\n  displayValueFn: (item: T, index: number) => string | null | undefined;\r\n}\r\n\r\nexport const numberColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'number', ...config });\r\n\r\nexport const listFormatColumn = <T = any>(config: ListFormatListColumn<T>): ListColumn<T> => ({ type: 'list-format', ...config });\r\n\r\nexport const dateColumn = <T = any>(config: DateListColumn<T>): ListColumn<T> => ({ type: 'date', ...config });\r\n\r\nexport const diffDateColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'diff-date', ...config });\r\n\r\nexport const htmlColumn = <T = any>(config: HtmlListColumn<T>): ListColumn<T> => ({ type: 'html', ...config });\r\n\r\nexport const textColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'text', ...config });\r\n\r\nexport const uppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'uppercase', ...config });\r\n\r\nexport const lowercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'lowercase', ...config });\r\n\r\nexport const titlecaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'titlecase', ...config });\r\n\r\nexport const firstLetterUppercaseColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'first-letter-uppercase', ...config });\r\n\r\nexport const phoneColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'phone', ...config });\r\n\r\nexport const emailColumn = <T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'email', ...config });\r\n\r\nexport const userColumn = <T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'user', ...config });\r\n\r\nexport const imageColumn = <T = any>(config: ImageListColumn<T>): ListColumn<T> => ({ type: 'image', ...config });\r\n\r\n\r\nexport const itemNameAndDescriptionColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  title: 'Nombre',\r\n  gridColumn: '1fr',\r\n  sort: { key: 'name' },\r\n  routerLinkValue: { url: (item: any) => `../detail/${item.id}` },\r\n  displayValueFn: (item: any) => item.name,\r\n  displayAdditionalValueFn: (item: any) => item.description,\r\n  ...config,\r\n});\r\nexport const itemStatusColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'cssClassDisplayValue' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'first-letter-uppercase',\r\n  title: 'Estado',\r\n  sort: { key: 'status' },\r\n  align: 'center',\r\n  displayValueFn: (item: any) => item.status,\r\n  cssClassDisplayValue: (item: any) => `status-chip ${item.status}`,\r\n  ...config,\r\n});\r\nexport const itemCreatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Creado',\r\n  sort: { key: 'created_at' },\r\n  displayValueFn: (item: any) => item.created_at,\r\n  ...config,\r\n});\r\nexport const itemUpdatedAtColumn = <T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Actualizado',\r\n  sort: { key: 'updated_at' },\r\n  hidden: true,\r\n  displayValueFn: (item: any) => item.updated_at,\r\n  ...config,\r\n});\r\nexport const simpleListColumns = (): ListColumn<any>[] => ([\r\n  itemNameAndDescriptionColumn(),\r\n  itemUpdatedAtColumn(),\r\n  itemCreatedAtColumn(),\r\n  itemStatusColumn(),\r\n]);\r\n\r\n\r\nexport const defaultListFilterInputs = (): FormInput[] => [\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de creación',\r\n    formControlNameFrom: 'created_at_from',\r\n    formControlNameTo: 'created_at_to',\r\n  }),\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de actualización',\r\n    formControlNameFrom: 'updated_at_from',\r\n    formControlNameTo: 'updated_at_to',\r\n  }),\r\n  switchFormInput({\r\n    textLabel: 'Registros inactivos',\r\n    formControlName: 'inactive',\r\n  }),\r\n];\r\n\r\nexport const deleteItemActionButton = () => clickEventActionButton({\r\n  icon: 'delete',\r\n  text: 'Eliminar',\r\n  fn: async ({ id }, _, { deleteItemFn }) => deleteItemFn(id),\r\n  hidden: (item) => item.deleted_at,\r\n});\r\n\r\nexport const restoreItemActionButton = () => clickEventActionButton({\r\n  icon: 'restore',\r\n  text: 'Restaurar',\r\n  fn: async ({ id }, _, { restoreItemFn }) => restoreItemFn(id),\r\n  hidden: (item) => !item.deleted_at,\r\n})\r\n\r\nexport const viewItemActionButton = () => routerLinkActionButton({\r\n  icon: 'visibility',\r\n  text: 'Ver',\r\n  routerLink: { url: (item) => `../view/${item.id}` },\r\n});\r\n\r\nexport const editItemActionButton = () => routerLinkActionButton({\r\n  icon: 'edit',\r\n  text: 'Editar',\r\n  routerLink: { url: (item) => `../edit/${item.id}` },\r\n})\r\n\r\n@Component({\r\n  selector: 'app-item-list-template',\r\n  standalone: true,\r\n  templateUrl: './item-list-template.component.html',\r\n  styleUrl: './item-list-template.component.css',\r\n  imports: [\r\n    CommonModule,\r\n    SpinnerDefaultComponent,\r\n    ReactiveFormsModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatSortModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatTooltipModule,\r\n    MatPseudoCheckboxModule,\r\n    IndexListPipe,\r\n    GetKeyItemPipe,\r\n    RouterLink,\r\n    DiffDatePipe,\r\n    HiddenOptionButtonRowPipe,\r\n    NgOptimizedImage,\r\n    ScrollingModule,\r\n    GetUserByIdPipe,\r\n    PathFilesServerPipe,\r\n    ListFormatPipe,\r\n    LoadImagePrivateDirective,\r\n    FirstLetterUppercasePipe,\r\n    NavigateLateralPanelOutletDirective,\r\n    InputAutocompleteTemplateComponent,\r\n    InputSelectTemplateComponent,\r\n    ExecuteFunctionListPipe,\r\n    RenameTitleColumnListPipe,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    FirstLetterUppercasePipe,\r\n    GetKeyItemPipe,\r\n    RenameTitleColumnListPipe,\r\n    BrowserAnimationsModule,\r\n    DateFnsAdapter,\r\n  ],\r\n})\r\nexport class ItemListTemplateComponent {\r\n  @Input({ required: true }) configuration!: ItemListConfiguration;\r\n\r\n  // @ContentChild('headers') headers!: TemplateRef<any>;\r\n  @ContentChild('rowList') rowList!: TemplateRef<any>;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  @ViewChild('divListItems', { static: true }) private divList!: ElementRef;\r\n\r\n  private _dataTypeList: 'array' | 'paginator' = 'array';\r\n  private _keyForGetItems: string;\r\n  private _keyForGetTotalItems: string;\r\n\r\n  private fetch = inject(FetchService);\r\n  private activatedRoute = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  private renderer = inject(Renderer2);\r\n  private eventsService = inject(EventsService);\r\n  public location = inject(Location);\r\n\r\n  // private datePipe = inject(DatePipe);\r\n  public firstLetterUppercasePipe = inject(FirstLetterUppercasePipe);\r\n  public getKeyItemPipe = inject(GetKeyItemPipe);\r\n  public renameTitleColumnListPipe = inject(RenameTitleColumnListPipe);\r\n\r\n  public lengthData = computed(() => this.data().length)\r\n\r\n  public searchCtrl: FormControl = new FormControl('');\r\n  public formFilters: FormGroup<any> | null = null;\r\n\r\n  public loading = signal(true);\r\n  public font: WritableSignal<'small' | 'medium' | 'large'> = signal('medium');\r\n  public headerListStyle: WritableSignal<'simple' | 'color'> = signal('simple');\r\n\r\n  private abortController = new AbortController();\r\n\r\n  private unsubscribe$: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(DATA_TYPE_LIST) _dataTypeList: 'array' | 'paginator',\r\n    @Optional() @Inject(KEY_GET_ITEMS_PAGINATOR_LIST) _keyForGetItems: string,\r\n    @Optional() @Inject(KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST) _keyForGetTotalItems: string\r\n  ) {\r\n    this._dataTypeList = _dataTypeList ?? 'paginator';\r\n    this._keyForGetItems = _keyForGetItems || 'data';\r\n    this._keyForGetTotalItems = _keyForGetTotalItems || 'total';\r\n  }\r\n\r\n  get data(): WritableSignal<any[]> {\r\n    return this.configuration.data!;\r\n  }\r\n\r\n  get defaultOrder(): string {\r\n    return this.configuration.defaultOrder ? `${this.configuration.defaultOrder?.key}|${this.configuration.defaultOrder?.order}` : 'id|DESC';\r\n  }\r\n\r\n  get dataTypeList(): 'array' | 'paginator' {\r\n    return this.configuration.dataType ?? this._dataTypeList;\r\n  }\r\n\r\n  get keyForGetItems(): string {\r\n    return this.configuration.keyGetItemsPaginator ?? this._keyForGetItems;\r\n  }\r\n\r\n  get keyForGetTotalItems(): string {\r\n    return this.configuration.keyGetTotalItemsPaginator ?? this._keyForGetTotalItems;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.configuration.data = signal([]);\r\n    this.configuration.updateListEvent = new EventEmitter();\r\n    if (this.configuration.rows?.options != false && !this.configuration.rows?.options?.length) {\r\n      this.configuration.rows = {\r\n        ...(this.configuration.rows ?? {}),\r\n        options: [\r\n          viewItemActionButton(),\r\n          editItemActionButton(),\r\n          deleteItemActionButton(),\r\n          restoreItemActionButton(),\r\n        ]\r\n      };\r\n    }\r\n    this.generateFormControlsFromFilterInputs();\r\n    this.generateColumnsCss();\r\n\r\n    this.eventsService\r\n      .eventsFiltered<EventGlobalSearch>([NAME_EVENT_GLOBAL_SEARCH])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(({ data }: any) => {\r\n        const type = data.type;\r\n        if (type == 'enter') this.searchCtrl.setValue(data.value);\r\n      })\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.paginator.pageIndex = 0;\r\n    this.paginator.pageSize = 20;\r\n\r\n    this.verifyQueryParams();\r\n\r\n    this.activatedRoute.queryParams.subscribe(() => this.callGetData());\r\n\r\n    this.sort.sortChange.subscribe(({ active, direction }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (this.defaultOrder == `${active}|${direction}` || !active || !direction) queryParams['order'] = null;\r\n      else queryParams['order'] = `${active}|${direction}`;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.searchCtrl.valueChanges.pipe(debounceTime(250)).subscribe((value: string) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (value) queryParams['search'] = value;\r\n      else queryParams['search'] = null;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.paginator.page.subscribe(({ pageIndex, pageSize }) => {\r\n      const queryParams = this.getQueryParams();\r\n      if (pageIndex == 0 || (queryParams['page'] ?? null) == pageIndex + 1) queryParams['page'] = null;\r\n      else queryParams['page'] = pageIndex + 1;\r\n      if (pageSize == 20 || (queryParams['per_page'] ?? null) == pageSize) queryParams['per_page'] = null;\r\n      else queryParams['per_page'] = pageSize;\r\n      this.navigateOrCallGetData(queryParams);\r\n    });\r\n\r\n    this.eventsService\r\n      .eventsFiltered([\r\n        `${this.configuration.server.url}_created`,\r\n        `${this.configuration.server.url}_updated`\r\n      ])\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(() => this.callGetData());\r\n\r\n    // this.configuration.updateListEvent!.subscribe(() => this.callGetData({}));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n    if (this.abortController) this.abortController.abort();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private async generateColumnsCss(): Promise<void> {\r\n    const grid_cols: string[] = [];\r\n    const grid_areas: string[] = []\r\n    if (this.configuration.rows?.selectable) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('selected');\r\n    }\r\n    if (this.configuration.rows?.index != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('index');\r\n    }\r\n    for await (const column of this.configuration.columns()) {\r\n      if (!column.hidden) {\r\n        grid_cols.push(column.gridColumn ?? 'auto');\r\n        grid_areas.push(this.renameTitleColumnListPipe.transform(column.title));\r\n      }\r\n    }\r\n    if (this.configuration.rows?.actions) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('actions');\r\n    }\r\n    if (this.configuration.rows?.options != false) {\r\n      grid_cols.push('auto');\r\n      grid_areas.push('options');\r\n    }\r\n    this.renderer.setStyle(this.divList.nativeElement, 'grid-template-columns', grid_cols.join(' '));\r\n    this.renderer.setStyle(this.divList.nativeElement, '--items-list-grid-template-areas', `\"${grid_areas.join(' ')}\"`, RendererStyleFlags2.DashCase);\r\n    grid_areas.forEach((area, index) => this.renderer.setStyle(this.divList.nativeElement, `--items-list-grid-area-${index + 1}`, area, RendererStyleFlags2.DashCase));\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private getQueryParams(): { [key: string]: any } {\r\n    return !this.configuration.disableFiltersInQueryParams ? JSON.parse(JSON.stringify(this.activatedRoute.snapshot.queryParams)) : {\r\n      ...this.formFilters?.value ?? {},\r\n      page: this.paginator.pageIndex + 1,\r\n      per_page: this.paginator.pageSize,\r\n      order: this.sort.active ? `${this.sort.active}|${this.sort.direction}` : null,\r\n      search: this.searchCtrl.value ? this.searchCtrl.value : null,\r\n    }\r\n  }\r\n\r\n  private navigateOrCallGetData(params: any): void {\r\n    if (this.configuration.disableFiltersInQueryParams) this.callGetData(params);\r\n    else this.router.navigate([], { queryParams: params });\r\n  }\r\n\r\n  private verifyQueryParams(): void {\r\n    const queryParams = {} as any;\r\n    const { page, per_page, order, search, ...filters } = queryParams;\r\n    this.paginator.pageIndex = Number(page ?? 1) - 1;\r\n    this.paginator.pageSize = Number(per_page) ?? 20;\r\n    this.sort.active = order?.split('|')[0] ?? '';\r\n    this.sort.direction = order?.split('|')[1] == 'asc' ? 'asc' : 'desc';\r\n    this.sort.sortChange.emit();\r\n    this.searchCtrl.setValue(search ?? null, { emitEvent: false });\r\n  }\r\n\r\n  public callGetData(queryParams: any = {}): void {\r\n    const params = objectToURLSearchParams(queryParams);\r\n    if (!params.has('page')) params.set('page', String(this.paginator.pageIndex + 1));\r\n    if (!params.has('per_page')) params.set('per_page', String(this.paginator.pageSize));\r\n    if (!params.has('order')) params.set('order', this.defaultOrder);\r\n    this.getData(params);\r\n  }\r\n\r\n  private async getData(searchParams: URLSearchParams = new URLSearchParams()): Promise<void> {\r\n    if (this.loading()) {\r\n      this.abortController.abort();\r\n      this.abortController = new AbortController();\r\n    }\r\n    this.loading.set(true);\r\n    const serverUrl = this.configuration.server.url;\r\n    let queryParams = this.configuration.server.queryParams ?? {};\r\n    if (queryParams instanceof Object) {\r\n      queryParams = objectToURLSearchParams(queryParams);\r\n      queryParams = queryParams.toString();\r\n    }\r\n    const url = `${serverUrl}?${searchParams.toString()}&${queryParams ?? ''}`;\r\n    const config = { signal: this.abortController.signal };\r\n    try {\r\n      let items = [];\r\n      let totalItems = 0;\r\n      if (this.dataTypeList == 'array') {\r\n        items = await this.fetch.get<any[]>(url, config);\r\n        totalItems = items.length;\r\n      } else {\r\n        const paginatorData = await this.fetch.get<PaginatorData<any>>(url, config);\r\n        items = this.getKeyItemPipe.transform(paginatorData, this.keyForGetItems);\r\n        totalItems = this.getKeyItemPipe.transform(paginatorData, this.keyForGetTotalItems);\r\n      }\r\n      const { parseDataFn } = this.configuration;\r\n      const parseData = await parseDataFn?.(items) ?? items;\r\n      this.paginator.length = totalItems;\r\n      this.data.set(parseData);\r\n      this.loading.set(false);\r\n      this.checkSelectedItems();\r\n    } catch (err: any) {\r\n      if (err.name != FetchErrorType.ABORT) this.loading.set(false);\r\n    }\r\n  }\r\n\r\n  public hiddenToggleColumn($event: MatCheckboxChange, index: number): void {\r\n    this.configuration.columns.update((columns) => {\r\n      columns[index]['hidden'] = !$event.checked\r\n      return columns;\r\n    })\r\n    this.generateColumnsCss();\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public navigateCreateView(): void {\r\n    this.router.navigate(['../create'], { relativeTo: this.activatedRoute });\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  public allSelectedItems = signal(false);\r\n  public someSelectedItems = signal(false);\r\n  public selectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__));\r\n  public lengthSelectedItems = computed(() => this.data().filter((e: ListItemExtended) => e.__selected__).length);\r\n\r\n  public selectedItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.toSpliced(index, 1, { ...data[index], __selected__: status }));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public selectedAllItems(status: boolean): void {\r\n    this.data.update((data) => data.map((e) => ({ ...e, __selected__: status })));\r\n    this.checkSelectedItems();\r\n  }\r\n\r\n  public someSelected(): boolean {\r\n    return this.data().length > 0 && this.data().some((e: ListItemExtended) => e.__selected__) && !this.allSelectedItems();\r\n  }\r\n\r\n  private checkSelectedItems(): void {\r\n    this.allSelectedItems.set(this.data().length > 0 && this.data().every((e: ListItemExtended) => e.__selected__));\r\n    this.someSelectedItems.set(this.someSelected());\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private generateFormControlsFromFilterInputs(): void {\r\n    if (this.configuration.filters == false) return;\r\n    if (!this.configuration.filters?.length) this.configuration.filters = defaultListFilterInputs();\r\n    const formFilters = new FormGroup({});\r\n    this.configuration.filters?.forEach((filter) => {\r\n      if (filter.text) {\r\n        formFilters.setControl(filter.text.formControlName, new FormControl(filter.text.defaultValue));\r\n      } else if (filter.textarea) {\r\n        formFilters.setControl(filter.textarea.formControlName, new FormControl(filter.textarea.defaultValue));\r\n      } else if (filter.select) {\r\n        formFilters.setControl(filter.select.formControlName, new FormControl(filter.select.defaultValue));\r\n      } else if (filter.number) {\r\n        formFilters.setControl(filter.number.formControlName, new FormControl(filter.number.defaultValue));\r\n      } else if (filter.date) {\r\n        formFilters.setControl(filter.date.formControlName, new FormControl(filter.date.defaultValue));\r\n      } else if (filter.dateRange) {\r\n        formFilters.setControl(filter.dateRange.formControlNameFrom, new FormControl(filter.dateRange.defaultValueFrom));\r\n        formFilters.setControl(filter.dateRange.formControlNameTo, new FormControl(filter.dateRange.defaultValueTo));\r\n      } else if (filter.autocompleteLocal) {\r\n        formFilters.setControl(filter.autocompleteLocal.formControlName, new FormControl(filter.autocompleteLocal.defaultValue));\r\n      } else if (filter.autocompleteServer) {\r\n        formFilters.setControl(filter.autocompleteServer.formControlName, new FormControl(filter.autocompleteServer.defaultValue));\r\n      } else if (filter.checkbox) {\r\n        formFilters.setControl(filter.checkbox.formControlName, new FormControl(filter.checkbox.defaultValue));\r\n      } else if (filter.switch) {\r\n        formFilters.setControl(filter.switch.formControlName, new FormControl(filter.switch.defaultValue));\r\n      }\r\n    });\r\n    this.formFilters = formFilters;\r\n  }\r\n\r\n  public getControlFormFilter(name: string): FormControl {\r\n    return this.formFilters!.get(name) as FormControl;\r\n  }\r\n\r\n  /* ---------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------- */\r\n  private updateLoadingStatusItem(index: number, status: boolean): void {\r\n    this.data.update((data) => data.map((item: ListItemExtended, i) => {\r\n      if (i == index) item.__loading_status__ = status;\r\n      return item;\r\n    }));\r\n  }\r\n\r\n  public deleteItem = async (id: number | string) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}`;\r\n    try {\r\n      await this.fetch.delete(url);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public restoreItem = async (id: string | number) => {\r\n    const index = this.data().findIndex((e) => e.id == id);\r\n    if (index == -1) return;\r\n    this.updateLoadingStatusItem(index, true);\r\n    const url = `${this.configuration.server.url}/${id}/restore`;\r\n    const config = { afterAlert: { description: 'Restaurando ítem de la lista' } }\r\n    try {\r\n      await this.fetch.put(url, config);\r\n      this.callGetData();\r\n    } catch (error) { }\r\n    this.updateLoadingStatusItem(index, false);\r\n  }\r\n\r\n  public updateChangesItem = (index: number, item: any) => {\r\n    this.configuration.data!.update(items => items.toSpliced(index, 1, item));\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./item-list-template.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_dataTypeList",
                        "type": "\"array\" | \"paginator\"",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_keyForGetItems",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_keyForGetTotalItems",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 648,
                "jsdoctags": [
                    {
                        "name": "_dataTypeList",
                        "type": "\"array\" | \"paginator\"",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_keyForGetItems",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_keyForGetTotalItems",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "data": {
                    "name": "data",
                    "getSignature": {
                        "name": "data",
                        "type": "",
                        "returnType": "WritableSignal<any[]>",
                        "line": 660
                    }
                },
                "defaultOrder": {
                    "name": "defaultOrder",
                    "getSignature": {
                        "name": "defaultOrder",
                        "type": "string",
                        "returnType": "string",
                        "line": 664
                    }
                },
                "dataTypeList": {
                    "name": "dataTypeList",
                    "getSignature": {
                        "name": "dataTypeList",
                        "type": "",
                        "returnType": "\"array\" | \"paginator\"",
                        "line": 668
                    }
                },
                "keyForGetItems": {
                    "name": "keyForGetItems",
                    "getSignature": {
                        "name": "keyForGetItems",
                        "type": "string",
                        "returnType": "string",
                        "line": 672
                    }
                },
                "keyForGetTotalItems": {
                    "name": "keyForGetTotalItems",
                    "getSignature": {
                        "name": "keyForGetTotalItems",
                        "type": "string",
                        "returnType": "string",
                        "line": 676
                    }
                }
            },
            "templateData": "<div class=\"list\" cdkScrollable>\r\n  <!-- ----------------------------------------- -->\r\n  <!-- ----------------------------------------- -->\r\n  <div class=\"list__header\">\r\n    <div class=\"list__header__title\">\r\n\r\n      @if (configuration.backButton) {\r\n        <button class=\"list__header__title__back-button icon-button\" (click)=\"location.back()\">\r\n          <span class=\"material-icons\">arrow_back</span>\r\n        </button>\r\n      }\r\n\r\n      @if (configuration.title) {\r\n        <span>{{ configuration.title }}</span>\r\n      }\r\n\r\n      <ng-content select=\"listHeaderTitle\"/>\r\n\r\n    </div>\r\n\r\n    <ng-content select=\"listHeaderMiddle\"/>\r\n\r\n    <div class=\"list__header__actions\">\r\n      @if (configuration.disableFiltersInQueryParams) {\r\n        <div class=\"list__header__actions__search\">\r\n          <input class=\"list__header__actions__search__input\" type=\"search\" placeholder=\"Buscar...\" [formControl]=\"searchCtrl\" />\r\n          <span class=\"list__header__actions__search__icon material-icons icon-small\">search</span>\r\n        </div>\r\n      }\r\n\r\n      @if (configuration.updateButton != false) {\r\n        <button class=\"tonal-icon-button\" title=\"Actualizar\" (click)=\"callGetData()\">\r\n          <span class=\"material-icons\">refresh</span>\r\n          <span>Actualizar</span>\r\n        </button>\r\n      }\r\n\r\n      @if (configuration.filters != false) {\r\n        <button class=\"tonal-icon-button\" title=\"Filtros\" [matMenuTriggerFor]=\"filterMenu\">\r\n          <span class=\"material-icons\">tune</span>\r\n          <span>Filtros</span>\r\n        </button>\r\n      }\r\n\r\n      <ng-content select=\"headerButtons\" />\r\n\r\n      @if (configuration.createButton != false) {\r\n\r\n        @if (configuration.createButton; as createButton) {\r\n\r\n          @if (createButton.routerLink.outlet == 'route-lateral') {\r\n            <button class=\"list__header__actions__create-button filled-button\" appNavigateLateralPanelOutlet [navigateUrl]=\"createButton.routerLink.url\" [routeState]=\"createButton.routerLink.state\">\r\n              <span class=\"material-icons\">add</span>\r\n              <span>{{ createButton?.text ?? 'Agregar' }}</span>\r\n            </button>\r\n          } @else {\r\n            <button class=\"list__header__actions__create-button filled-button\" [routerLink]=\"createButton.routerLink.url\" [state]=\"createButton.routerLink.state\">\r\n              <span class=\"material-icons\">add</span>\r\n              <span>{{ createButton?.text ?? 'Agregar' }}</span>\r\n            </button>\r\n          }\r\n\r\n        } @else {\r\n          <button class=\"list__header__actions__create-button filled-button\" (click)=\"navigateCreateView()\">\r\n            <span class=\"material-icons\">add</span>\r\n            <span>Agregar</span>\r\n          </button>\r\n        }\r\n\r\n      }\r\n    </div>\r\n  </div>\r\n  <!-- ----------------------------------------- -->\r\n  <!-- ----------------------------------------- -->\r\n  <ng-content select=\"list-information\"/>\r\n  <!-- ----------------------------------------- -->\r\n  <!-- ----------------------------------------- -->\r\n  <div #divListItems class=\"list__items\" [ngClass]=\"{ 'container-loading': loading() }\">\r\n    <!-- ---------------------------- -->\r\n    @if (configuration.columns(); as columns) {\r\n\r\n      <div class=\"list__items__row list__items__row-header\" matSort>\r\n\r\n        @if (configuration.rows?.selectable) {\r\n          <div data-column-name=\"selected\" data-column-key=\"selected\" class=\"list__items__row__cell\">\r\n            <mat-checkbox (change)=\"selectedAllItems($event.checked)\" [checked]=\"allSelectedItems()\" [indeterminate]=\"someSelectedItems()\" />\r\n          </div>\r\n        }\r\n\r\n        @if (configuration.rows?.index != false) {\r\n          <div data-column-name=\"index\" data-column-key=\"index\" class=\"list__items__row__cell\">\r\n            <span>\r\n              @if (configuration.rows?.index; as index) { {{ index.title }} }\r\n              @else { N° }\r\n            </span>\r\n          </div>\r\n        }\r\n\r\n        @for (column of columns; track column) {\r\n          @if (!column.hidden) {\r\n            <div [attr.data-column-name]=\"column.title\" [attr.data-column-key]=\"column.title|renameTitleColumnList\" [attr.data-align]=\"column.align\" [attr.data-type]=\"column.type\" class=\"list__items__row__cell\">\r\n              @if (column.sort; as sort) { <span [mat-sort-header]=\"sort.key\">{{ column.title }}</span> }\r\n              @else { <span>{{ column.title }}</span> }\r\n            </div>\r\n          }\r\n        }\r\n\r\n        @if (configuration.rows?.actions) {\r\n          <div data-column-name=\"actions\" data-column-key=\"actions\" class=\"list__items__row__cell\">\r\n            <span>Acciones</span>\r\n          </div>\r\n        }\r\n\r\n        @if (configuration.rows?.options != false) {\r\n          <div data-column-name=\"options\" data-column-key=\"options\" class=\"list__items__row__cell\">\r\n            <button class=\"icon-button list__items__row__cell__option\" [matMenuTriggerFor]=\"optionsColumnMenu\">\r\n              <span class=\"material-icons\">settings</span>\r\n            </button>\r\n          </div>\r\n        }\r\n      </div>\r\n\r\n      @for (row of data(); track row.id; let index = $index;) {\r\n        <ng-container *ngTemplateOutlet=\"rowList || rowDefault; context: { $implicit: row, index, columns, optionsRowMenu, pageIndex: paginator.pageIndex, pageSize: paginator.pageSize }\" />\r\n      }\r\n\r\n    }\r\n    <!-- ---------------------------- -->\r\n    @if (!loading() && !lengthData()) {\r\n      <div class=\"list__not-results\">\r\n        Sin resultados...\r\n      </div>\r\n    }\r\n    <!-- ---------------------------- -->\r\n    @if (loading() && !lengthData()) {\r\n      <app-spinner-default class=\"list__spinner-loading\" />\r\n    }\r\n    <!-- ---------------------------- -->\r\n  </div>\r\n  <!-- ----------------------------------------- -->\r\n  <!-- ----------------------------------------- -->\r\n  <div class=\"list__footer\">\r\n    <div class=\"list__footer__selectable\">\r\n      @if (lengthSelectedItems(); as lengthSelected) {\r\n\r\n        <div class=\"list__footer__selectable__info\">\r\n          {{lengthSelected | number:'2.0-0'}} Ítems seleccionados :\r\n        </div>\r\n\r\n        <div class=\"list__footer__selectable__actions\">\r\n          @if (configuration.rows?.selectable; as selectable) {\r\n            @for (action of selectable.actions; track $index) {\r\n              <button class=\"{{action.style ?? 'filled-icon-button'}} {{(action.cssClass | executeFunctionList:[selectedItems(), 0]) ?? ''}}\" (click)=\"action.fn(selectedItems())\" [disabled]=\"action.disabled | executeFunctionList:[selectedItems(), 0]\"  [title]=\"action.title??action.text??''\">\r\n                @if (action.icon; as icon) { <span class=\"material-icons\">{{icon}}</span> }\r\n                @if (action.text; as text) { <span>{{text}}</span> }\r\n              </button>\r\n            }\r\n          }\r\n        </div>\r\n\r\n      }\r\n    </div>\r\n    <mat-paginator class=\"list__footer__paginator\"></mat-paginator>\r\n  </div>\r\n  <!-- ----------------------------------------- -->\r\n  <!-- ----------------------------------------- -->\r\n</div>\r\n\r\n<!-- --------------------------------------------- -->\r\n<!-- --------------------------------------------- -->\r\n<ng-template #rowDefault let-item let-columns=\"columns\" let-index=\"index\" let-rowMenu=\"optionsRowMenu\" let-pageSize=\"pageSize\" let-pageIndex=\"pageIndex\">\r\n  <div class=\"list__items__row {{(configuration.rows?.cssClass??'') | executeFunctionList:[item, index]}}\" [ngClass]=\"{ 'container-loading': item?.__loading_status__, 'list__items__row-selected': item.__selected__}\">\r\n    @if (configuration.rows?.selectable) {\r\n      <div data-column-name=\"selected\" data-column-key=\"selected\" class=\"list__items__row__cell list__items__row__cell-select\">\r\n        <mat-checkbox (change)=\"selectedItem(index, $event.checked)\" [checked]=\"item.__selected__\" />\r\n      </div>\r\n    }\r\n\r\n    @if (configuration.rows?.index != false) {\r\n      <div data-column-name=\"index\" data-column-key=\"index\" class=\"list__items__row__cell list__items__row__cell-index\">\r\n        <div class=\"list__items__row__cell__value\">{{ index | indexList : [pageIndex, pageSize] }}</div>\r\n      </div>\r\n    }\r\n\r\n    @for (column of columns; track column;) {\r\n      @if (!column.hidden) {\r\n        <div [attr.data-column-name]=\"column.title\" [attr.data-column-key]=\"column.title|renameTitleColumnList\" [attr.data-type]=\"column.type\" [attr.data-align]=\"column.align\" class=\"list__items__row__cell {{(column.cssClass | executeFunctionList:[item, index]) ?? ''}}\">\r\n              @if(column.displayValueFn; as displayValueFn){\r\n                <div data-type=\"value-row\" class=\"list__items__row__cell__value {{(column.cssClassDisplayValue | executeFunctionList:[item, index]) ?? ''}}\" [ngStyle]=\"column.cssStyleDisplayValue | executeFunctionList:[item, index]\">\r\n                  <ng-container [ngTemplateOutlet]=\"renderColumn\" [ngTemplateOutletContext]=\"{ $implicit: column, value:displayValueFn | executeFunctionList:[item, index], item, index, routerLink: column.routerLinkValue, clickEvent: column.clickEventValue }\" />\r\n                </div>\r\n              }\r\n\r\n              @if(column.displayAdditionalValueFn; as displayAdditionalValueFn){\r\n                <div data-type=\"additional-value-row\" class=\"list__items__row__cell__value {{(column.cssClassDisplayAdditionalValue | executeFunctionList:[item, index] )}}\" [ngStyle]=\"column.cssStyleDisplayAdditionalValue | executeFunctionList:[item, index]\">\r\n                  <ng-container [ngTemplateOutlet]=\"renderColumn\" [ngTemplateOutletContext]=\"{ $implicit: column, value: displayAdditionalValueFn | executeFunctionList:[item, index], item, index, routerLink: column.routerLinkAdditionalValue, clickEvent: column.clickEventAdditionalValue }\" />\r\n                </div>\r\n              }\r\n        </div>\r\n      }\r\n    }\r\n\r\n    @if (configuration.rows?.actions; as actions) {\r\n      <div data-column-name=\"actions\" data-column-key=\"actions\" class=\"list__items__row__cell\">\r\n        @for (bAction of actions; track bAction) {\r\n          @if (!((bAction.hidden ?? false) | executeFunctionList:[item, index])) {\r\n            @if (bAction.routerLink; as rLink) {\r\n              @if (rLink.outlet == 'route-lateral') {\r\n                <a class=\"{{bAction.style ?? 'text-button'}} {{(bAction.cssClass | executeFunctionList:[item, index]) ?? ''}}\" appNavigateLateralPanelOutlet [navigateUrl]=\"rLink.url | executeFunctionList:[item, index]\" [routeState]=\"rLink.state | executeFunctionList:[item, index]\">\r\n                  @if (bAction.icon; as icon) { <span class=\"material-icons\">{{icon}}</span> }\r\n                  @if (bAction.text; as text) { <span>{{text}}</span> }\r\n                </a> \r\n              } @else { \r\n                <a class=\"{{bAction.style ?? 'text-button'}} {{(bAction.cssClass | executeFunctionList:[item, index]) ?? ''}}\" [routerLink]=\"rLink.url | executeFunctionList:[item, index]\" [state]=\"rLink.state | executeFunctionList:[item, index]\">\r\n                  @if (bAction.icon; as icon) { <span class=\"material-icons\">{{icon}}</span> }\r\n                  @if (bAction.text; as text) { <span>{{text}}</span> }\r\n                </a>\r\n              }\r\n            } @else if (bAction.fn) {\r\n              <button class=\"{{bAction.style ?? 'text-button'}} {{(bAction.cssClass | executeFunctionList:[item, index]) ?? ''}}\" (click)=\"bAction.fn(item, index, {deleteItemFn: deleteItem, restoreItemFn: restoreItem, updateChangesItemFn: updateChangesItem})\" [disabled]=\"bAction.disabled | executeFunctionList:[item, index]\"  [title]=\"bAction.title??''\">\r\n                @if (bAction.icon; as icon) { <span class=\"material-icons\">{{icon}}</span> }\r\n                @if (bAction.text; as text) { <span>{{text}}</span> }\r\n              </button>\r\n            }\r\n          }\r\n        }\r\n      </div>\r\n    }\r\n    \r\n    @if (configuration.rows?.options != false) {\r\n      <div data-column-name=\"options\" data-column-key=\"options\" class=\"list__items__row__cell\">\r\n        <button class=\"icon-button list__items__header__cell__option\" [matMenuTriggerFor]=\"rowMenu\" [matMenuTriggerData]=\"{item, index}\">\r\n          <span class=\"material-icons\">more_horiz</span>\r\n        </button>\r\n      </div>\r\n    }\r\n  </div>\r\n</ng-template>\r\n\r\n<!-- --------------------------------------------- -->\r\n<!-- --------------------------------------------- -->\r\n<ng-template #renderColumn let-column let-value=\"value\" let-item=\"item\" let-routerLink=\"routerLink\" let-index=\"index\" let-clickEvent=\"clickEvent\">\r\n  @switch (column.type ?? '') {\r\n    <!-- --------------------------------- -->\r\n    @case ('image') { <img [src]=\"column.image?.prefixUrl ? (column.image?.prefixUrl + value) : (value | pathFilesServer)\"/> }\r\n    <!-- --------------------------------- -->\r\n    @case ('email') { <a href=\"mailto:{{value}}\">{{value}}</a> }\r\n    <!-- --------------------------------- -->\r\n    @case ('phone') { <a href=\"tel:{{value}}\">{{value}}</a> }\r\n    <!-- --------------------------------- -->\r\n    @case ('html') { <ng-container [ngTemplateOutlet]=\"renderValueHtml\" [ngTemplateOutletContext]=\"{ $implicit: value, item, routerLink, index, clickEvent, tooltip: column.tooltip}\" /> }\r\n    <!-- --------------------------------- -->\r\n    @case ('number') { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: (value | number: column.numberFormat ?? '.2-2'), item, routerLink, index, clickEvent, tooltip: column.tooltip}\" /> }\r\n    <!-- --------------------------------- -->\r\n    @case ('titlecase') { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: (value | titlecase), item, routerLink, index, clickEvent, tooltip: column.tooltip}\" /> }\r\n    <!-- --------------------------------- -->\r\n    @case ('uppercase') { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: (value | uppercase), item, routerLink, index, clickEvent, tooltip: column.tooltip}\" /> }\r\n    <!-- --------------------------------- -->\r\n    @case ('first-letter-uppercase') { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: (value | firstLetterUppercase), item, routerLink, index, clickEvent, tooltip: column.tooltip}\" /> }\r\n    <!-- --------------------------------- -->\r\n    @case ('lowercase') { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: (value | lowercase), item, routerLink, index, clickEvent, tooltip: column.tooltip}\" /> }\r\n    <!-- --------------------------------- -->\r\n    @case ('date') { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: (value | date: column.dateFormat ??'dd/MM/yyyy'), item, routerLink, index, clickEvent, tooltip: column.tooltip}\" /> }\r\n    <!-- --------------------------------- -->\r\n    @case ('diff-date') { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: (value | diffDate | firstLetterUppercase), item, routerLink, index, clickEvent, tooltip: column.tooltip}\" /> }\r\n    <!-- --------------------------------- -->\r\n    @case ('currency') { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: (value | currency), item, routerLink, index, clickEvent, tooltip: column.tooltip}\" /> }\r\n    <!-- --------------------------------- -->\r\n    @case ('list-format') { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: (value | listFormat), item, routerLink, index, clickEvent, tooltip: column.tooltip}\" /> }\r\n    <!-- --------------------------------- -->\r\n    @case ('user') { @if ((value | getUserById | async); as user) { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: user.name, item, routerLink, index, clickEvent, tooltip: column.tooltip}\" /> } }\r\n    <!-- --------------------------------- -->\r\n    @default { <ng-container [ngTemplateOutlet]=\"renderValue\" [ngTemplateOutletContext]=\"{ $implicit: value, item, routerLink, index, clickEvent, tooltip: column.tooltip}\" /> }\r\n    <!-- --------------------------------- -->\r\n}\r\n</ng-template>\r\n\r\n<ng-template #renderValue let-value let-tooltip=\"tooltip\" let-item=\"item\" let-index=\"index\" let-routerLink=\"routerLink\" let-clickEvent=\"clickEvent\">\r\n  @if (routerLink; as rLink) {\r\n    @if (rLink.outlet == 'route-lateral') { <a [matTooltip]=\"tooltip | executeFunctionList:[item, index]\" class=\"list__items__row__cell__value__hovered\" appNavigateLateralPanelOutlet [navigateUrl]=\"rLink.url | executeFunctionList:[item, index]\" [routeState]=\"rLink.state | executeFunctionList:[item, index]\">{{value}}</a> } \r\n    @else { <a [matTooltip]=\"tooltip | executeFunctionList:[item, index]\" class=\"list__items__row__cell__value__hovered\" [routerLink]=\"rLink.url | executeFunctionList:[item, index]\" [state]=\"rLink.state | executeFunctionList:[item, index]\">{{value}}</a> }\r\n  } @else if(clickEvent) {\r\n      <a [matTooltip]=\"tooltip | executeFunctionList:[item, index]\" class=\"list__items__row__cell__value__hovered\" (click)=\"clickEvent(item)\">{{value}}</a>\r\n  } @else {\r\n      <span [title]=\"value\" [matTooltip]=\"tooltip | executeFunctionList:[item, index]\">{{ value }}</span>\r\n  }\r\n</ng-template>\r\n\r\n<ng-template #renderValueHtml let-value let-tooltip=\"tooltip\" let-item=\"item\" let-index=\"index\" let-routerLink=\"routerLink\" let-clickEvent=\"clickEvent\">\r\n  @if (routerLink; as rLink) {\r\n    @if (rLink.outlet == 'route-lateral') { <div [matTooltip]=\"tooltip | executeFunctionList:[item, index]\" class=\"list__items__row__cell__value__hovered\" appNavigateLateralPanelOutlet [navigateUrl]=\"rLink.url | executeFunctionList:[item, index]\" [routeState]=\"rLink.state | executeFunctionList:[item, index]\" [innerHTML]=\"value\"></div> } \r\n    @else { <div [matTooltip]=\"tooltip | executeFunctionList:[item, index]\" class=\"list__items__row__cell__value__hovered\" [routerLink]=\"rLink.url | executeFunctionList:[item, index]\" [innerHTML]=\"value\" [state]=\"rLink.state | executeFunctionList:[item, index]\"></div> }\r\n  } @else if(clickEvent) {\r\n      <div [matTooltip]=\"tooltip | executeFunctionList:[item, index]\" class=\"list__items__row__cell__value__hovered\" (click)=\"clickEvent(item)\" [innerHTML]=\"value\"></div>\r\n  } @else {\r\n      <div [title]=\"value\" [matTooltip]=\"tooltip | executeFunctionList:[item, index]\" [innerHTML]=\"value\"></div>\r\n  }\r\n</ng-template>\r\n\r\n<!-- --------------------------------------------- -->\r\n<!-- --------------------------------------------- -->\r\n<mat-menu #optionsRowMenu=\"matMenu\" xPosition=\"before\">\r\n  <ng-template matMenuContent let-item=\"item\" let-index=\"index\">\r\n    @if (configuration.rows?.options; as options) {\r\n        @for (bOption of options; track bOption) {\r\n          @if (!((bOption.hidden ?? false) | executeFunctionList:[item, index])) {\r\n            @if (bOption.routerLink; as rLink) {\r\n              @if (rLink.outlet == 'route-lateral') {\r\n                <a mat-menu-item [class]=\"bOption.cssClass | executeFunctionList:[item, index]\" appNavigateLateralPanelOutlet [navigateUrl]=\"rLink.url | executeFunctionList:[item, index]\" [routeState]=\"rLink.state | executeFunctionList:[item, index]\">\r\n                  @if (bOption.icon; as icon) { <span class=\"material-icons\">{{icon}}</span> }\r\n                  @if (bOption.text; as text) { <span>{{text}}</span> }\r\n                </a> \r\n              } @else { \r\n                <a mat-menu-item [class]=\"bOption.cssClass | executeFunctionList:[item, index]\" [routerLink]=\"rLink.url | executeFunctionList:[item, index]\" [state]=\"rLink.state | executeFunctionList:[item, index]\">\r\n                  @if (bOption.icon; as icon) { <span class=\"material-icons\">{{icon}}</span> }\r\n                  @if (bOption.text; as text) { <span>{{text}}</span> }\r\n                </a>\r\n              }\r\n            } @else if (bOption.fn) {\r\n              <button mat-menu-item [class]=\"bOption.cssClass | executeFunctionList:[item, index]\" (click)=\"bOption.fn(item, index, {deleteItemFn: deleteItem, restoreItemFn: restoreItem, updateChangesItemFn: updateChangesItem})\" [disabled]=\"bOption.disabled | executeFunctionList:[item, index]\"  [title]=\"bOption.title??''\">\r\n                @if (bOption.icon; as icon) { <span class=\"material-icons\">{{icon}}</span> }\r\n                @if (bOption.text; as text) { <span>{{text}}</span> }\r\n              </button>\r\n            }\r\n          }\r\n        }\r\n    }\r\n  </ng-template>\r\n</mat-menu>\r\n\r\n<!-- --------------------------------------------- -->\r\n<!-- --------------------------------------------- -->\r\n<mat-menu #optionsColumnMenu=\"matMenu\">\r\n  <button mat-menu-item [matMenuTriggerFor]=\"columnsMenu\">\r\n    Columnas\r\n  </button>\r\n</mat-menu>\r\n\r\n<mat-menu #columnsMenu=\"matMenu\" xPosition=\"before\">\r\n  @for (column of configuration.columns(); track column; let i = $index;) {\r\n    <div class=\"flex gap-2 items-center py-1 pl-2 pr-4\" (click)=\"$event.stopPropagation()\">\r\n      <mat-checkbox [checked]=\"!column.hidden\" (change)=\"hiddenToggleColumn($event, i)\" color=\"primary\">\r\n        {{ column.title }}\r\n      </mat-checkbox>\r\n    </div>\r\n  }\r\n</mat-menu>\r\n\r\n<!-- --------------------------------------------- -->\r\n<!-- --------------------------------------------- -->\r\n<mat-menu class=\"filter-list-menu\" #filterMenu=\"matMenu\" xPosition=\"before\" [hasBackdrop]=\"false\">\r\n    <div class=\"filter__title\" (click)=\"$event.stopPropagation()\">Filtros</div>\r\n\r\n    @if (formFilters) {\r\n      <div class=\"filter__form\" [formGroup]=\"formFilters\" (click)=\"$event.stopPropagation()\">\r\n        @if (configuration.filters; as fields) {\r\n          @for (field of fields; track field) {\r\n              @switch (field.type) {\r\n                  @case ('date-range') {\r\n                      @if (field.dateRange; as input) {\r\n                          <mat-form-field [attr.data-form-input-name]=\"input.formControlNameFrom\">\r\n                              <mat-label>{{ input.textLabel }}</mat-label>\r\n                              <mat-date-range-input [rangePicker]=\"pickerRange1\">\r\n                                  <input matStartDate [formControlName]=\"input.formControlNameFrom\">\r\n                                  <input matEndDate [formControlName]=\"input.formControlNameTo\">\r\n                              </mat-date-range-input>\r\n                              <button class=\"icon-button\" matSuffix type=\"button\" (click)=\"pickerRange1.open()\" [disabled]=\"getControlFormFilter(input.formControlNameFrom).disabled\">\r\n                                  <span class=\"material-icons\">calendar_month</span>\r\n                              </button>\r\n                              <mat-date-range-picker #pickerRange1></mat-date-range-picker>\r\n                          </mat-form-field>\r\n                      }\r\n                  }\r\n                  @case ('date') {\r\n                      @if (field.date; as input) {\r\n                          <mat-form-field [attr.data-form-input-name]=\"input.formControlName\">\r\n                              <mat-label>{{ input.textLabel }}</mat-label>\r\n                              <input matInput [matDatepicker]=\"pickerDate\" [formControlName]=\"input.formControlName\">\r\n                              <button class=\"icon-button\" type=\"button\" matSuffix (click)=\"pickerDate.open()\" [disabled]=\"getControlFormFilter(input.formControlName).disabled\">\r\n                                  <span class=\"material-icons\">calendar_month</span>\r\n                              </button>\r\n                              <mat-datepicker #pickerDate></mat-datepicker>\r\n                              @if (getControlFormFilter(input.formControlName).hasError('required')) {\r\n                                  <mat-error>Campo requerido</mat-error>\r\n                              } @else if (getControlFormFilter(input.formControlName).hasError('min')) {\r\n                                  <mat-error>Error fecha mínima</mat-error>\r\n                              } @else if (getControlFormFilter(input.formControlName).hasError('max')) {\r\n                                  <mat-error>Error fecha máxima</mat-error>\r\n                              } @else {\r\n                                  <mat-error>Inválido</mat-error>\r\n                              }\r\n                          </mat-form-field>\r\n                      }\r\n                      \r\n                  }\r\n                  @case ('number') {\r\n                      @if (field.number; as input) {\r\n                          <mat-form-field [attr.data-form-input-name]=\"input.formControlName\">\r\n                              <mat-label>{{ input.textLabel}}</mat-label>\r\n                              <input type=\"number\" matInput [formControlName]=\"input.formControlName\"\r\n                                  [min]=\"input.min ? +input.min : 0\" [max]=\"input.max ? +input.max : null\">\r\n                              @if (getControlFormFilter(input.formControlName).hasError('required')) {\r\n                                  <mat-error>Campo requerido</mat-error>\r\n                              } @else if (getControlFormFilter(input.formControlName).hasError('min')) {\r\n                                  <mat-error>Mínimo {{input.min ? +input.min : 0}}</mat-error>\r\n                              } @else if (getControlFormFilter(input.formControlName).hasError('max')) {\r\n                                  <mat-error>Máximo {{input.max ? +input.max : 'superado'}}</mat-error>\r\n                              } @else {\r\n                                  <mat-error>Inválido</mat-error>\r\n                              }\r\n                          </mat-form-field>\r\n                      }\r\n                  }\r\n                  @case ('text') {\r\n                      @if (field.text; as input) {\r\n                          <mat-form-field [attr.data-form-input-name]=\"input.formControlName\">\r\n                              <mat-label>{{ input.textLabel}}</mat-label>\r\n                              <input type=\"text\" matInput [formControlName]=\"input.formControlName\"\r\n                                  [placeholder]=\"input.placeholder ?? input.textLabel\" [maxlength]=\"input.maxLength ?? 255\">\r\n                              @if (getControlFormFilter(input.formControlName).hasError('required')) {\r\n                                  <mat-error>Campo requerido</mat-error>\r\n                              } @else if (getControlFormFilter(input.formControlName).hasError('email')) {\r\n                                  <mat-error>Email no válido</mat-error>\r\n                              } @else if (getControlFormFilter(input.formControlName).hasError('pattern')) {\r\n                                  <mat-error>Contenido no válido</mat-error>\r\n                              } @else {\r\n                                  <mat-error>Inválido</mat-error>\r\n                              }\r\n                          </mat-form-field>\r\n                      }\r\n                  }\r\n                  @case ('textarea') {\r\n                      @if (field.textarea; as input) {\r\n                          <mat-form-field [attr.data-form-input-name]=\"input.formControlName\">\r\n                              <mat-label>{{ input.textLabel}}</mat-label>\r\n                              <textarea matInput [formControlName]=\"input.formControlName\"\r\n                                  [placeholder]=\"input.placeholder ?? input.textLabel\"\r\n                                  [maxlength]=\"input.maxLength ?? 2500\"></textarea>\r\n                              @if (getControlFormFilter(input.formControlName).hasError('required')) {\r\n                                  <mat-error>Campo requerido</mat-error>\r\n                              } @else if (getControlFormFilter(input.formControlName).hasError('email')) {\r\n                                  <mat-error>Email no válido</mat-error>\r\n                              } @else if (getControlFormFilter(input.formControlName).hasError('pattern')) {\r\n                                  <mat-error>Contenido no válido</mat-error>\r\n                              } @else {\r\n                                  <mat-error>Inválido</mat-error>\r\n                              }\r\n                          </mat-form-field>\r\n                      }\r\n                  }\r\n                  @case ('select') {\r\n                      @if (field.select; as input) {\r\n                          <app-input-select-template [attr.data-form-input-name]=\"input.formControlName\"\r\n                              [control]=\"getControlFormFilter(input.formControlName)\"\r\n                              [configuration]=\"input\"\r\n                              />\r\n                      }\r\n                  }\r\n                  @case ('select-local') {\r\n                      @if (field.selectLocal; as input) {\r\n                          <app-input-select-template [attr.data-form-input-name]=\"input.formControlName\"\r\n                              [control]=\"getControlFormFilter(input.formControlName)\"\r\n                              [configuration]=\"input\"\r\n                              />\r\n                      }\r\n                  }\r\n                  @case ('select-server') {\r\n                      @if (field.selectServer; as input) {\r\n                          <app-input-select-template [attr.data-form-input-name]=\"input.formControlName\"\r\n                              [control]=\"getControlFormFilter(input.formControlName)\"\r\n                              [configuration]=\"input\"\r\n                              />\r\n                      }\r\n                  }\r\n                  @case ('autocomplete') {\r\n                      @if (field.autocomplete; as input) {\r\n                          <app-input-autocomplete-template [attr.data-form-input-name]=\"input.formControlName\"\r\n                              [idControl]=\"getControlFormFilter(input.formControlName)\"\r\n                              [configuration]=\"input\" />\r\n                      }\r\n                  }\r\n                  @case ('autocomplete-local') {\r\n                      @if (field.autocompleteLocal; as input) {\r\n                          <app-input-autocomplete-template [attr.data-form-input-name]=\"input.formControlName\"\r\n                              [idControl]=\"getControlFormFilter(input.formControlName)\"\r\n                              [configuration]=\"input\" />\r\n                      }\r\n                  }\r\n                  @case ('autocomplete-server') {\r\n                      @if (field.autocompleteServer; as input) {\r\n                          <app-input-autocomplete-template [attr.data-form-input-name]=\"input.formControlName\"\r\n                              [idControl]=\"getControlFormFilter(input.formControlName)\"\r\n                              [configuration]=\"input\" />\r\n                      }\r\n                  }\r\n                  @case ('checkbox') {\r\n                      @if (field.checkbox; as input) {\r\n                          <div [attr.data-form-input-name]=\"input.formControlName\">\r\n                              <mat-checkbox [formControlName]=\"input.formControlName\">{{ input.textLabel }}</mat-checkbox>\r\n                          </div>\r\n                      }\r\n                  }\r\n                  @case ('switch') {\r\n                      @if (field.switch; as input) {\r\n                          <div [attr.data-form-input-name]=\"input.formControlName\">\r\n                              <mat-slide-toggle [formControlName]=\"input.formControlName\">{{ input.textLabel }}</mat-slide-toggle>\r\n                          </div>\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n        }\r\n      </div>\r\n    }\r\n\r\n    <div class=\"filter__actions\" (click)=\"$event.stopPropagation()\">\r\n      <button class=\"text-button\" (click)=\"filterMenu.closed.emit()\">Descartar</button>\r\n      <button class=\"text-button\">Aplicar</button>\r\n    </div>\r\n</mat-menu>"
        },
        {
            "name": "ItemViewTemplateComponent",
            "id": "component-ItemViewTemplateComponent-ffbc78c057c09fea1fa5e296071afb5056c624b620ccb7c46a2704c162751379f4a6427c3bd5b9d2d4fc0284bcba4198b97098fbefbb8365dce287501eb92a38",
            "file": "src/app/shared/components/item-view-template/item-view-template.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-item-view-template",
            "styleUrls": [
                "./item-view-template.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./item-view-template.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "ItemViewConfiguration",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "abortController",
                    "defaultValue": "new AbortController()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "fetch",
                    "defaultValue": "inject(FetchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "location",
                    "defaultValue": "inject(Location)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getItem",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterLinkActive"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "GetMixedValuePipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, inject, ViewEncapsulation, ChangeDetectionStrategy, WritableSignal, signal } from '@angular/core';\r\nimport { Location, NgClass, NgFor, NgIf } from '@angular/common';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { ActivatedRoute, IsActiveMatchOptions, Params, Router, RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\nimport { objectToURLSearchParams } from '@utility/queryParams';\r\nimport { GetMixedValuePipe } from '@pipe/get-mixed-value.pipe';\r\n\r\nexport interface ItemViewConfiguration<T = any> {\r\n    item?: WritableSignal<T|null>;\r\n    nameItemFn?: (item: T) => string;\r\n    titleModule: string;\r\n    itemId?: string;\r\n    links: LinkNavProfile[];\r\n    loading?: boolean;\r\n    parseItemFn?: (item: T) => (T | Promise<T>);\r\n    afterSetItemFn?: (item: T) => void;\r\n    interceptHttpErrorItemFn?: (error: FetchErrorResponse) => void;\r\n    httpError?: FetchErrorResponse;\r\n    server: {\r\n        url: string;\r\n        queryParams?: { [key: string]: any };\r\n    }\r\n}\r\n\r\nexport interface LinkNavProfile {\r\n    text: string;\r\n    routerLink: string;\r\n    routerLinkActiveOptions?: { exact: boolean } | IsActiveMatchOptions;\r\n    queryParams?: Params | null;\r\n    icon?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-item-view-template',\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    RouterLink,\r\n    RouterLinkActive,\r\n    RouterOutlet,\r\n    MatTabsModule,\r\n    GetMixedValuePipe,\r\n  ],\r\n  templateUrl: './item-view-template.component.html',\r\n  styleUrls: ['./item-view-template.component.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ItemViewTemplateComponent {\r\n  @Input() public configuration!: ItemViewConfiguration;\r\n  public location = inject(Location);\r\n  public router = inject(Router);\r\n  public activatedRoute = inject(ActivatedRoute);\r\n  private fetch = inject(FetchService);\r\n  private abortController = new AbortController();\r\n\r\n  get links(): any {\r\n    return this.configuration.links;\r\n  }\r\n\r\n  \r\n\r\n  get itemId(): number | string {\r\n    return this.configuration.itemId ?? this.activatedRoute.snapshot.paramMap.get('id')!;\r\n  }\r\n\r\n  get titleModule(): string {\r\n    return this.configuration.titleModule;\r\n  }\r\n\r\n  get nameItemFn(): (item: any) => string {\r\n    return this.configuration.nameItemFn ?? ((item: any) => item?.name);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.configuration.item ??= signal(null);\r\n    this.activatedRoute.params.subscribe(() => this.getItem());\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  private async getItem<T>() {\r\n    this.configuration.loading = true;\r\n    try {\r\n      const { server } = this.configuration;\r\n      const queryParams = objectToURLSearchParams(server.queryParams ?? {});\r\n      const url = `${server.url}/${this.itemId}?${queryParams ? queryParams : ''}`;\r\n      const response = await this.fetch.get<T>(url, { signal: this.abortController.signal });\r\n      const { parseItemFn } = this.configuration;\r\n      const item = parseItemFn?.(response) ?? response;\r\n      const { afterSetItemFn } = this.configuration;\r\n      if (afterSetItemFn) afterSetItemFn(item);\r\n      this.configuration.item!.set(item);\r\n    } catch (error) {\r\n      this.configuration.httpError = error as FetchErrorResponse;\r\n      const { interceptHttpErrorItemFn } = this.configuration;\r\n      if (interceptHttpErrorItemFn) interceptHttpErrorItemFn(this.configuration.httpError);\r\n    }\r\n    this.configuration.loading = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./item-view-template.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "links": {
                    "name": "links",
                    "getSignature": {
                        "name": "links",
                        "type": "any",
                        "returnType": "any",
                        "line": 60
                    }
                },
                "itemId": {
                    "name": "itemId",
                    "getSignature": {
                        "name": "itemId",
                        "type": "",
                        "returnType": "number | string",
                        "line": 66
                    }
                },
                "titleModule": {
                    "name": "titleModule",
                    "getSignature": {
                        "name": "titleModule",
                        "type": "string",
                        "returnType": "string",
                        "line": 70
                    }
                },
                "nameItemFn": {
                    "name": "nameItemFn",
                    "getSignature": {
                        "name": "nameItemFn",
                        "type": "function",
                        "returnType": "string",
                        "line": 74
                    }
                }
            },
            "templateData": "<div class=\"item-view\" [ngClass]=\"{ 'container-loading': configuration.loading }\">\r\n\r\n    <div class=\"item-view__header\">\r\n\r\n        <div class=\"item-view__header__actions\">\r\n            <ng-content select=\"itemActions\"></ng-content>\r\n        </div>\r\n\r\n        <a ILoad class=\"item-view__header__subtitle\" routerLink=\"../../\">\r\n            {{ titleModule }}\r\n        </a>\r\n\r\n        <h1 ILoad class=\"item-view__header__title\">\r\n            @if (this.configuration.item!(); as _item) { {{nameItemFn | getMixedValue: _item}} } \r\n            @else { ######## }\r\n        </h1>\r\n\r\n        <ng-content select=\"informationUnderTitle\"/>\r\n\r\n        <nav class=\"item-view__header__nav\" ILoad fitInkBarToContent mat-tab-nav-bar mat-stretch-tabs=\"false\"\r\n            mat-align-tabs=\"start\" [tabPanel]=\"tabPanel\">\r\n            @for (link of links; track link) {\r\n            <a mat-tab-link [routerLink]=\"link.routerLink\" [routerLinkActiveOptions]=\"link?.routerLinkActiveOptions ?? { exact: false }\" routerLinkActive=\"active\" [active]=\"link0.isActive\" #link0=\"routerLinkActive\" [disabled]=\"link.disabled ?? false\" [state]=\"this.configuration.item!()\">\r\n                {{ link.text }}\r\n            </a>\r\n            }\r\n        </nav>\r\n        <mat-tab-nav-panel class=\"contents\" #tabPanel />\r\n    </div>\r\n\r\n    <div class=\"item-view__content\">\r\n        @if (this.configuration.item!() && !configuration.loading) {\r\n        <div class=\"item-view__content__router\">\r\n            <router-outlet class=\"hidden\"/>\r\n        </div>\r\n        }\r\n    </div>\r\n</div>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-c9531bcc5f751c050f8ce5f9dd5d771efc50dd09e9b2dfb6d4f4cfd976416ccb9b087eccc20a2dcc4af3133533e02eea80bfa0e7bf5cb253fc7e93ad434c5c69",
            "file": "src/app/login/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: RECAPTCHA_SETTINGS, useValue: { siteKey:  } as RecaptchaSettings,\n}"
                }
            ],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fetch",
                    "defaultValue": "inject(FetchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formLogin",
                    "defaultValue": "new FormGroup({\r\n    email: new FormControl('', [Validators.required, Validators.email]),\r\n    password: new FormControl('', [Validators.required]),\r\n    recaptchaToken: new FormControl('', [Validators.required])\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "formResetPassword",
                    "defaultValue": "new FormGroup({\r\n    email: new FormControl('', [Validators.required, Validators.email])\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isLogin",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeType",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "reponseLogin",
                    "args": [
                        {
                            "name": "data",
                            "type": "ResponseLogin",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "ResponseLogin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submitFormLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "submitFormResetPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "SpinnerDefaultComponent",
                    "type": "component"
                },
                {
                    "name": "RecaptchaModule",
                    "type": "module"
                },
                {
                    "name": "RecaptchaFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, WritableSignal, inject, signal } from '@angular/core';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators, ReactiveFormsModule, FormsModule, FormGroup, FormControl } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { RECAPTCHA_LOADER_OPTIONS, RECAPTCHA_SETTINGS, RECAPTCHA_V3_SITE_KEY, ReCaptchaV3Service, RecaptchaFormsModule, RecaptchaModule, RecaptchaSettings, RecaptchaV3Module } from 'ng-recaptcha';\r\nimport { AuthService } from 'src/app/core/services/auth.service';\r\nimport { FetchService } from 'src/app/core/services/fetch.service';\r\nimport { SpinnerDefaultComponent } from '../../../shared/components/spinner-default/spinner-default.component';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { NgClass } from '@angular/common';\r\nimport { FetchErrorResponse } from 'src/app/shared/interfaces/fetch';\r\n\r\ninterface ResponseLogin {\r\n  access_token: string;\r\n  token_type: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    SpinnerDefaultComponent,\r\n    RecaptchaModule,\r\n    RecaptchaFormsModule,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: RECAPTCHA_SETTINGS,\r\n      useValue: { siteKey: \"6Ldb0DIpAAAAAEvjUicIYq_Yqoq7u1RmGZGsEcVq\" } as RecaptchaSettings,\r\n    },\r\n  ],\r\n})\r\nexport class LoginComponent {\r\n  private fetch = inject(FetchService);\r\n  private authService = inject(AuthService);\r\n\r\n  public isLogin: boolean = true;\r\n  public formLogin: FormGroup = new FormGroup({\r\n    email: new FormControl('', [Validators.required, Validators.email]),\r\n    password: new FormControl('', [Validators.required]),\r\n    recaptchaToken: new FormControl('', [Validators.required])\r\n  });\r\n  public formResetPassword:FormGroup = new FormGroup({\r\n    email: new FormControl('', [Validators.required, Validators.email])\r\n  });\r\n\r\n  public loading: WritableSignal<boolean> = signal(false);\r\n\r\n  public changeType() {\r\n    this.isLogin = !this.isLogin;\r\n  }\r\n\r\n  public submitFormLogin() {\r\n    if (this.loading()) return;\r\n    this.formLogin.markAllAsTouched();\r\n    if (this.formLogin.valid) { this.login() }\r\n  }\r\n\r\n  private async login() {\r\n    this.loading.set(true);\r\n    try {\r\n      const response = await this.fetch.post<ResponseLogin>('login', this.formLogin.value, { \r\n        ignoreAuthorization: true, \r\n        confirmDialog: false,\r\n        toast: {\r\n          loading: 'Iniciando sesión...',\r\n          success: 'Sesión iniciada correctamente',\r\n          error: (error: FetchErrorResponse) => {\r\n            if(error.status == 401) return 'Credenciales incorrectas';\r\n            return 'Error al iniciar sesión';\r\n          }\r\n        }\r\n      });\r\n      this.reponseLogin(response);\r\n    } catch (error) { }\r\n    this.loading.set(false);\r\n  }\r\n\r\n  private reponseLogin(data: ResponseLogin) {\r\n    const token = data?.access_token;\r\n    if (token) {\r\n      this.authService.setToken(token);\r\n      this.authService.redirectToPrincipalRoute();\r\n    }\r\n  }\r\n\r\n  public submitFormResetPassword() { }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    --height-card-login: 380px;\r\n    position: relative;\r\n    display: grid;\r\n    align-items: center;\r\n    justify-items: center;\r\n    height: 100vh;\r\n    overflow: hidden;\r\n    font-size: 14px;\r\n    background: linear-gradient(\r\n            0deg,\r\n            rgba(var(--rgb-primary), 0.05),\r\n            rgba(var(--rgb-primary), 0.05)\r\n        ),\r\n        linear-gradient(0deg, rgb(var(--rgb-surface)), rgb(var(--rgb-surface)));\r\n    background-size: 16px 16px;\r\n    background-position: 50% 50%;\r\n}\r\n\r\nsection {\r\n    width: 880px;\r\n    height: var(--height-card-login);\r\n    padding-left: 27%;\r\n\r\n    /* -------------------------------------------- */\r\n    &.login {\r\n        > div {\r\n            &:first-of-type {\r\n                [data-form=\"x1\"] {\r\n                    animation: right_ 0.75s;\r\n                }\r\n\r\n                [data-form=\"x2\"] {\r\n                    position: absolute;\r\n                    left: 50%;\r\n                    transform: translateX(-50%);\r\n                    opacity: 0;\r\n                }\r\n            }\r\n\r\n            &:last-of-type {\r\n                padding-right: 30%;\r\n                transition: left 0.325s, right 0.75s;\r\n                filter: drop-shadow(1px 1px 4px rgba(0, 0, 0, 0.275));\r\n\r\n                > div,\r\n                > h3,\r\n                > p,\r\n                > button {\r\n                    animation: left_ 0.75s ease;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n    &.register {\r\n        padding-left: 0%;\r\n        padding-right: 27%;\r\n\r\n        > div {\r\n            &:first-of-type {\r\n                [data-form=\"x1\"] {\r\n                    position: absolute;\r\n                    left: 50%;\r\n                    transform: translateX(-50%);\r\n                    opacity: 0;\r\n                }\r\n\r\n                [data-form=\"x2\"] {\r\n                    animation: left_ 0.75s;\r\n                }\r\n            }\r\n\r\n            &:last-of-type {\r\n                left: 35%;\r\n                right: 0;\r\n                padding-left: 30%;\r\n                transition: left 0.75s, right 0.325s;\r\n                filter: drop-shadow(-1px -1px 4px rgba(0, 0, 0, 0.275));\r\n\r\n                > div,\r\n                > h3,\r\n                > p,\r\n                > button {\r\n                    animation: right_ 0.75s ease;\r\n                }\r\n\r\n                &::after {\r\n                    left: 35%;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n}\r\n\r\n._container_title {\r\n    height: var(--height-card-login);\r\n    right: 35%;\r\n    --color-background-title: rgba(var(--rgb-primary-container, (0, 0, 0)), 1);\r\n    color: rgba(var(--rgb-on-primary-container, (0, 0, 0)), 1);\r\n    z-index: 1;\r\n\r\n    @media screen and (min-width: 640px) {\r\n        &::after {\r\n            content: \"\";\r\n            position: absolute;\r\n            left: 0;\r\n            width: 65%;\r\n            top: 0;\r\n            bottom: 0;\r\n            background-color: var(--color-background-title);\r\n            transition: all 0.35s;\r\n            z-index: -1;\r\n            pointer-events: none;\r\n        }\r\n    }\r\n\r\n    > button {\r\n        margin-top: 0.75rem !important;\r\n    }\r\n}\r\n\r\nsvg {\r\n    width: 100%;\r\n    height: var(--height-card-login);\r\n\r\n    path {\r\n        transition: all 0.7s;\r\n        fill: var(--color-background-title);\r\n\r\n        &.mobile {\r\n            display: none;\r\n        }\r\n    }\r\n}\r\n\r\n@media screen and (max-width: 640px) {\r\n    .__container {\r\n        width: 85%;\r\n        height: auto !important;\r\n        min-height: 480px;\r\n        padding: 0 !important;\r\n        grid-template-rows: auto 1fr;\r\n    }\r\n\r\n    ._container_form {\r\n        padding: 0rem 2rem 2rem !important;\r\n        height: auto;\r\n        margin-top: -2.5rem;\r\n    }\r\n\r\n    ._container_title {\r\n        height: max-content !important;\r\n        padding: 2rem 2rem 8rem !important;\r\n        left: 0 !important;\r\n        right: 0 !important;\r\n        grid-row-start: 1;\r\n\r\n        button {\r\n            position: absolute !important;\r\n            bottom: 5rem !important;\r\n            right: 2rem !important;\r\n            padding: 0.5rem 1rem !important;\r\n            line-height: 1 !important;\r\n        }\r\n\r\n        svg {\r\n            height: 100% !important;\r\n\r\n            path.mobile {\r\n                display: initial !important;\r\n            }\r\n\r\n            path.desktop {\r\n                display: none;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@keyframes left_ {\r\n    from {\r\n        transform: translateX(-200%);\r\n    }\r\n\r\n    to {\r\n        transform: translateX(0%);\r\n    }\r\n}\r\n\r\n@keyframes right_ {\r\n    from {\r\n        transform: translateX(140%);\r\n    }\r\n\r\n    to {\r\n        transform: translateX(0%);\r\n    }\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<section [ngClass]=\"{login: isLogin, register: !isLogin}\" class=\"\r\n  __container\r\n  relative grid bg-surface overflow-hidden shadow-lg rounded-lg z-10\r\n  \">\r\n  <!-- -------------------------------------------------------------------------------------------------------------- -->\r\n  <!-- -------------------------------------------------------------------------------------------------------------- -->\r\n  <div class=\"\r\n    _container_form relative z-10 grid content-start  py-4 px-16\r\n    sm:content-center\r\n    \">\r\n    <!-- -------------------------------------- -->\r\n    <!-- -------------------------------------- -->\r\n    @if (isLogin) {\r\n    <form form-apareance=\"filled\" data-form=\"x1\" [formGroup]=\"formLogin\" (submit)=\"submitFormLogin()\"\r\n      class=\"relative grid gap-2\">\r\n      <h3 class=\"font-semibold mb-2 text-left sm:text-center\">LOGIN</h3>\r\n      <mat-form-field>\r\n        <mat-label>Email</mat-label>\r\n        <input matInput formControlName=\"email\" placeholder=\"Email..\" />\r\n        <mat-error>Campo requerido</mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field>\r\n        <mat-label>Contraseña</mat-label>\r\n        <input matInput name=\"password\" type=\"password\" formControlName=\"password\" placeholder=\"Contraseña..\" />\r\n        <mat-error>Campo requerido</mat-error>\r\n      </mat-form-field>\r\n      <re-captcha formControlName=\"recaptchaToken\" name=\"captcha\" #captcha></re-captcha>\r\n      <button class=\"filled-button\" type=\"submit\">\r\n        Ingresar\r\n      </button>\r\n      @if (loading()) {\r\n        <app-spinner-default class=\"absolute top-0 left-0 right-0 bottom-0 z-10\">\r\n        </app-spinner-default>\r\n      }\r\n    </form>\r\n    }\r\n    <!-- -------------------------------------- -->\r\n    <!-- -------------------------------------- -->\r\n    @if (!isLogin) {\r\n    <form form-apareance=\"filled\" data-form=\"x2\" [formGroup]=\"formResetPassword\" (submit)=\"submitFormResetPassword()\" class=\"relative grid\">\r\n      <h3 class=\"font-semibold mb-2 text-left sm:text-center\">RECUPERAR CONTRASEÑA</h3>\r\n      <mat-form-field label=\"Email\">\r\n        <mat-label>Email</mat-label>\r\n        <input matInput formControlName=\"email\" placeholder=\"Email..\" />\r\n        <mat-error>Campo requerido</mat-error>\r\n      </mat-form-field>\r\n      <button class=\"filled-button\" type=\"submit\">\r\n        Recuperar\r\n      </button>\r\n    </form>\r\n    }\r\n    <!-- -------------------------------------- -->\r\n    <!-- -------------------------------------- -->\r\n  </div>\r\n  <!-- -------------------------------------------------------------------------------------------------------------- -->\r\n  <!-- -------------------------------------------------------------------------------------------------------------- -->\r\n  <div class=\"\r\n    _container_title\r\n    top-0 left-0 bottom-0 grid py-4 px-16\r\n    content-start sm:content-center\r\n    relative sm:absolute\r\n    gap-y-0 sm:gap-y-1\r\n    overflow-visible sm:overflow-hidden\r\n    \">\r\n    <!-- -------------------------------------- -->\r\n    <!-- -------------------------------------- -->\r\n    <h3 class=\"!text-contrast-primary font-semibold mb-1 text-left sm:text-center\">PANEL DE CONTROL</h3>\r\n    <!-- -------------------------------------- -->\r\n    <!-- -------------------------------------- -->\r\n    @if (isLogin) {\r\n    <p class=\"!text-contrast-primary/80 h-11 text-left sm:text-center\">\r\n      Ingresa tus datos de sesión para acceder al panel de control\r\n    </p>\r\n    }\r\n    @if (!isLogin) {\r\n    <p class=\"!text-contrast-primary/80 h-11 text-left sm:text-center\">\r\n      Ingresar el correo donde se enviarán las instrucciones de recuperación\r\n    </p>\r\n    }\r\n    <!-- -------------------------------------- -->\r\n    <!-- -------------------------------------- -->\r\n    <div class=\"relative | items-center justify-center gap-x-2 hidden sm:flex\">\r\n      <div class=\"!bg-current w-8 h-px\"></div>\r\n      <span class=\"leading-none\">o</span>\r\n      <div class=\"!bg-current w-8 h-px\"></div>\r\n    </div>\r\n    <!-- -------------------------------------- -->\r\n    <!-- -------------------------------------- -->\r\n    <button class=\"outlined-button\" (click)=\"changeType()\">\r\n      {{isLogin ? 'Olvidé la contraseña' : 'Inicia sesión'}}\r\n    </button>\r\n    <!-- -------------------------------------- -->\r\n    <!-- -------------------------------------- -->\r\n    <svg viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\"\r\n      class=\"absolute top-0 left-0 bottom-0 pointer-events-none -z-1\">\r\n      <path class=\"mobile\" d=\"M 0 0 H100 V0 H100 V85 C 66 109 30 50 0 72\" />\r\n      <path class=\"desktop\" [attr.d]=\"\r\n          isLogin\r\n            ? 'M 100 0 H 0 V 100 H 70 C 70 100 50 10 100 0'\r\n            : 'M 0 0 H 100 V 100 H 30 C 30 100 50 10 0 0'\r\n        \" />\r\n    </svg>\r\n    <!-- -------------------------------------- -->\r\n    <!-- -------------------------------------- -->\r\n  </div>\r\n  <!-- -------------------------------------------------------------------------------------------------------------- -->\r\n  <!-- -------------------------------------------------------------------------------------------------------------- -->\r\n</section>"
        },
        {
            "name": "NotificationsMenuComponent",
            "id": "component-NotificationsMenuComponent-c2ba51cecdda4e5d198c977e864e182338391f9f432cdf2f577f0edfc921fd6c98acbf28ab4a0d57191a071a002984646b638413810857a89738a5a71b729b3e",
            "file": "src/app/sidenav/notifications-menu/notifications-menu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notifications-menu",
            "styleUrls": [
                "./notifications-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notifications-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fetch",
                    "defaultValue": "inject(FetchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "menuTrigger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatMenuTrigger",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatMenuTrigger"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                },
                {
                    "name": "notifications",
                    "defaultValue": "signal([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<Notification[]>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "signal('unread')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<\"read\" | \"unread\">",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchNotifications",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "DatePipe",
                    "type": "pipe"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild, ViewEncapsulation, WritableSignal, inject, signal } from '@angular/core';\r\nimport { DatePipe } from '@angular/common';\r\nimport { MatMenuModule, MatMenuTrigger } from '@angular/material/menu';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { Notification } from '@interface/notification';\r\nimport { PaginatorData } from 'src/app/shared/interfaces/paginator';\r\n\r\n@Component({\r\n  selector: 'app-notifications-menu',\r\n  standalone: true,\r\n  imports: [\r\n    DatePipe,\r\n    MatMenuModule,\r\n    MatTabsModule,\r\n  ],\r\n  templateUrl: './notifications-menu.component.html',\r\n  styleUrls: ['./notifications-menu.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class NotificationsMenuComponent {\r\n  @ViewChild(MatMenuTrigger) private menuTrigger!: MatMenuTrigger;\r\n  private fetch = inject(FetchService);\r\n  public type: WritableSignal<'read' | 'unread'> = signal('unread');\r\n  public notifications: WritableSignal<Notification[]> = signal([]);\r\n\r\n  ngOnInit() {\r\n    this.fetchNotifications();\r\n  }\r\n\r\n  private async fetchNotifications() {\r\n    const notifications = await this.fetch.get<PaginatorData<Notification>>('auth/notification');\r\n    this.notifications.set(notifications.data);\r\n\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".notifications-menu {\r\n    border-radius: var(--corner-mdc-dialog, 28px) !important;\r\n    max-width: 300px !important;\r\n    min-width: 300px !important;\r\n}\r\n.notifications-menu .mat-mdc-menu-content {\r\n    position: relative;\r\n    display: grid;\r\n    overflow: hidden;\r\n    height: 100%;\r\n}\r\n\r\n.notifications__container {\r\n    display: grid;\r\n    grid-template-rows: auto 1fr;\r\n    height: 100%;\r\n    overflow: hidden;\r\n}\r\n\r\n.notifications__header {\r\n    padding: 16px 24px 12px 24px;\r\n}\r\n\r\n.notifications__content {\r\n    overflow-y: auto;\r\n}\r\n\r\n.notifications__item {\r\n    position: relative;\r\n    padding: 4px 24px !important;\r\n    height: auto !important;\r\n}\r\n\r\n\r\n.notifications__item__description {\r\n    // line clamp 3\r\n    display: -webkit-box;\r\n    -webkit-line-clamp: 3;\r\n    -webkit-box-orient: vertical;\r\n    overflow: hidden;\r\n    color: var(--color-on-surface);\r\n}\r\n\r\n.notifications__item__date {\r\n    margin-top: 4px;\r\n    color: var(--color-on-surface-variant);\r\n}\r\n",
                    "styleUrl": "./notifications-menu.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<button class=\"icon-button\" [matMenuTriggerFor]=\"notificationMenu\">\r\n    <span class=\"material-icons\">notifications</span>\r\n</button>\r\n\r\n\r\n<mat-menu class=\"notifications-menu\" #notificationMenu=\"matMenu\">\r\n    <div class=\"notifications__container\" (click)=\"$event.stopPropagation()\">\r\n\r\n        <div class=\"notifications__header\">\r\n            <h4 class=\"notifications__header__title title-small\">Notificaciones</h4>\r\n        </div>\r\n\r\n        <div class=\"notifications__content custom-scroll\">\r\n            @for (notification of notifications(); track notification) {\r\n            <button mat-menu-item class=\"notifications__item\">\r\n                <div>\r\n                    <p class=\"notifications__item__description body-medium\">{{ notification.data.message }}</p>\r\n                    <p class=\"notifications__item__date body-small\">{{notification.created_at | date: 'dd/MM/yyyy' }}\r\n                    </p>\r\n                </div>\r\n            </button>\r\n            }\r\n        </div>\r\n\r\n    </div>\r\n</mat-menu>"
        },
        {
            "name": "PanelDrawerTemplateComponent",
            "id": "component-PanelDrawerTemplateComponent-9e35dbe9df6f784b4f4f1e9d5868de97fb41554da82e8c829ecaa1347a88ba9c7ddf8e95ce22dc4492ac748140276e8a873c49985647880e34b146a9741bc898",
            "file": "src/app/shared/components/panel-drawer-template/panel-drawer-template.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-panel-drawer-template",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./panel-drawer-template.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 44,
                    "type": "PanelSidenavConfiguration",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "panelSidenavLinkSelected",
                    "defaultValue": "signal(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<PanelSidenavLink | null>",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "showChildren",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "selectedLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "PanelSidenavLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "PanelSidenavLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterLinkActive"
                },
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, WritableSignal, signal } from '@angular/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\n\r\nexport interface PanelSidenavConfiguration {\r\n  title?: string;\r\n  groups: PanelSidenavGroup[];\r\n}\r\n\r\nexport interface PanelSidenavGroup {\r\n  title?: string;\r\n  icon?: string;\r\n  links: PanelSidenavLink[];\r\n}\r\n\r\nexport interface PanelSidenavLink {\r\n  title: string;\r\n  icon?: string;\r\n  routerLink: PanelSidenavLinkRouter;\r\n  children?: Omit<PanelSidenavLink, 'children'>[];\r\n}\r\n\r\nexport interface PanelSidenavLinkRouter {\r\n  url: string;\r\n  queryParams?: { [key: string]: any };\r\n}\r\n\r\n@Component({\r\n  selector: 'app-panel-drawer-template',\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    RouterLink,\r\n    RouterLinkActive,\r\n    RouterOutlet,\r\n  ],\r\n  templateUrl: './panel-drawer-template.component.html',\r\n  styleUrl: './panel-drawer-template.component.scss',\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class PanelDrawerTemplateComponent {\r\n  panelSidenavLinkSelected: WritableSignal<PanelSidenavLink | null> = signal(null);\r\n  showChildren: WritableSignal<boolean> = signal(false);\r\n  @Input({required: true}) public configuration!: PanelSidenavConfiguration;\r\n  public selectedLink(link: PanelSidenavLink) {\r\n    this.panelSidenavLinkSelected.set(link);\r\n    this.showChildren.set(true);\r\n  }\r\n}\r\n",
            "styleUrl": "./panel-drawer-template.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"panel\">\r\n    <div class=\"panel__drawer\">\r\n        @if (configuration.title; as title) {\r\n        <h2 class=\"panel__drawer__title\">{{title}}</h2>\r\n        }\r\n        <div class=\"panel__drawer__container\">\r\n\r\n            <div class=\"enter-element enter-element-two\" [ngClass]=\"{__show: showChildren(), __hidden: !showChildren()}\">\r\n                @if (panelSidenavLinkSelected(); as link) {\r\n                <div class=\"panel__drawer__subtitle\">\r\n                    <button class=\"icon-button\" (click)=\"showChildren.set(false)\">\r\n                        <span class=\"material-icons\">arrow_back</span>\r\n                    </button>\r\n                    <div class=\"label-large\">{{link.title}}</div>\r\n                </div>\r\n                @for (link of link.children; track link) {\r\n                <a class=\"panel__drawer__block__links__item\" [routerLink]=\"link.routerLink.url\"\r\n                    routerLinkActive=\"active\">\r\n                    {{link.title}}\r\n                </a>\r\n                }\r\n                }\r\n            </div>\r\n\r\n            <div class=\"enter-element enter-element-one\" [ngClass]=\"{__show: !showChildren(), __hidden: showChildren()}\">\r\n                @for (group of configuration.groups; track group) {\r\n                    <div class=\"panel__drawer__block\">\r\n                        <h4 class=\"panel__drawer__block__title\">{{group.title}}</h4>\r\n                        <div class=\"panel__drawer__block__links\">\r\n                            @for (link of group.links; track link) {\r\n                                @if (link.children?.length) {\r\n                                    <a class=\"panel__drawer__block__links__item\" (click)=\"selectedLink(link)\">\r\n                                        {{link.title}}\r\n                                        <span class=\"panel__drawer__block__links__item__next-icon material-icons\">chevron_right</span>\r\n                                    </a>\r\n                                } @else {\r\n                                    <a class=\"panel__drawer__block__links__item\" [routerLink]=\"link.routerLink.url\" routerLinkActive=\"active\">\r\n                                        {{link.title}}\r\n                                    </a>\r\n                                }\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                }\r\n                <ng-content select=\"afterLinks\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel__content\">\r\n        <router-outlet />\r\n    </div>\r\n</div>"
        },
        {
            "name": "PlanCreatePageComponent",
            "id": "component-PlanCreatePageComponent-45644f766d46ef1281156e7306c7dd7cf6998b58fb4c4dd3efe73fa4ac5b6e0554383b5f1a392c7d52a5d9f5c633e3af6e56a8fc474d0fd3e8e0f4352c33b1e6",
            "file": "src/app/modules/configuration/plans/pages/plan-create-page/plan-create-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plan-create-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./plan-create-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n    type: 'create',\r\n    titleModule: 'plan',\r\n    formGroup: planFormGroup(),\r\n    afterSaveFormFn: (item: Plan) => {\r\n      this.databaseStorage.updateDataLocal(NameModuleDatabase.Plans);\r\n    },\r\n    fields: DEFAULT_DISPLAY_FIELDS_FORM_PLAN,\r\n    server: { url: 'plan' },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "databaseStorage",
                    "defaultValue": "inject(DatabaseStorageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { DEFAULT_DISPLAY_FIELDS_FORM_PLAN, planFormGroup } from '../../helpers';\r\nimport { ItemFormConfiguration, ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\nimport { Plan } from '@interface/plan';\r\nimport { DatabaseStorageService, NameModuleDatabase } from '@service/database-storage.service';\r\n\r\n@Component({\r\n  selector: 'app-plan-create-page',\r\n  standalone: true,\r\n  imports: [ItemFormTemplateComponent],\r\n  templateUrl: './plan-create-page.component.html',\r\n  styleUrl: './plan-create-page.component.scss'\r\n})\r\nexport class PlanCreatePageComponent {\r\n  private databaseStorage = inject(DatabaseStorageService)\r\n  public configuration: ItemFormConfiguration = {\r\n    type: 'create',\r\n    titleModule: 'plan',\r\n    formGroup: planFormGroup(),\r\n    afterSaveFormFn: (item: Plan) => {\r\n      this.databaseStorage.updateDataLocal(NameModuleDatabase.Plans);\r\n    },\r\n    fields: DEFAULT_DISPLAY_FIELDS_FORM_PLAN,\r\n    server: { url: 'plan' },\r\n  };\r\n}\r\n",
            "styleUrl": "./plan-create-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "PlanDetailPageComponent",
            "id": "component-PlanDetailPageComponent-13220945bd161e83beb381c71c8fc1d144f5e487a1dd3d6273174c533d4d47af20851f9469424b87fbab1f43948321937931094b54910b96b9d6f8518b72221e",
            "file": "src/app/modules/configuration/plans/pages/plan-detail-page/plan-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plan-detail-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./plan-detail-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        title: 'Detalles',\r\n        server: { url: 'plan' },\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'Nombre',\r\n                        displayValueFn: (item) => item.name\r\n                    },\r\n                    {\r\n                        title: 'Moneda',\r\n                        displayValueFn: (item) => item.coin.toUpperCase()\r\n                    },\r\n                    {\r\n                        title: 'Precio',\r\n                        displayValueFn: (item) => item.price\r\n                    },\r\n                    {\r\n                        title: 'Descripción',\r\n                        displayValueFn: (item) => item.description\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDetailConfiguration<Plan>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemDetailTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemDetailTemplateComponent, registerDataGroupDetail } from '@component/item-detail-template/item-detail-template.component';\r\nimport { ItemDetailConfiguration } from '@component/item-detail-template/item-detail-template.component';\r\nimport { Plan } from '@interface/plan';\r\n\r\n@Component({\r\n    selector: 'app-plan-detail-page',\r\n    standalone: true,\r\n    imports: [ItemDetailTemplateComponent],\r\n    templateUrl: './plan-detail-page.component.html',\r\n    styleUrl: './plan-detail-page.component.scss'\r\n})\r\nexport class PlanDetailPageComponent {\r\n    public configuration: ItemDetailConfiguration<Plan> = {\r\n        title: 'Detalles',\r\n        server: { url: 'plan' },\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'Nombre',\r\n                        displayValueFn: (item) => item.name\r\n                    },\r\n                    {\r\n                        title: 'Moneda',\r\n                        displayValueFn: (item) => item.coin.toUpperCase()\r\n                    },\r\n                    {\r\n                        title: 'Precio',\r\n                        displayValueFn: (item) => item.price\r\n                    },\r\n                    {\r\n                        title: 'Descripción',\r\n                        displayValueFn: (item) => item.description\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }\r\n}\r\n",
            "styleUrl": "./plan-detail-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-detail-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "PlanEditPageComponent",
            "id": "component-PlanEditPageComponent-24444243b05f28f5c71bea5bd7702998e44e23d1fd026288b9eeb5014e984d848520a57d78391d74147bbcf66bb6a82c2df66c20741c9275cfcda3b8b01511d4",
            "file": "src/app/modules/configuration/plans/pages/plan-edit-page/plan-edit-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plan-edit-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./plan-edit-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n    type: 'create',\r\n    titleModule: 'plan',\r\n    formGroup: planFormGroup(),\r\n    afterSaveFormFn: (item: Plan) => {\r\n      this.databaseStorage.updateDataLocal(NameModuleDatabase.Plans);\r\n    },\r\n    fields: DEFAULT_DISPLAY_FIELDS_FORM_PLAN,\r\n    server: { url: 'plan' },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "PlanCreatePageComponent"
                    }
                },
                {
                    "name": "databaseStorage",
                    "defaultValue": "inject(DatabaseStorageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "PlanCreatePageComponent"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { PlanCreatePageComponent } from '../plan-create-page/plan-create-page.component';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\n\r\n@Component({\r\n    selector: 'app-plan-edit-page',\r\n    standalone: true,\r\n    imports: [ItemFormTemplateComponent],\r\n    templateUrl: './plan-edit-page.component.html',\r\n    styleUrl: './plan-edit-page.component.scss'\r\n})\r\nexport class PlanEditPageComponent extends PlanCreatePageComponent {\r\n    private activatedRoute = inject(ActivatedRoute);\r\n\r\n    constructor(\r\n    ) {\r\n        super();\r\n        this.configuration.type = 'update';\r\n        this.configuration.hiddeFields = true;\r\n    }\r\n}\r\n",
            "styleUrl": "./plan-edit-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "extends": [
                "PlanCreatePageComponent"
            ],
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "PlanListPageComponent",
            "id": "component-PlanListPageComponent-bf5a904a4b14dd15f57b216f532f468dfa1fe87522532346a5be7ab5bdda9b12784ae3dcb98b66b0c8d837e42caaa34708c551b546e620f985ebc5a93317b0cc",
            "file": "src/app/modules/configuration/plans/pages/plan-list-page/plan-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plan-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./plan-list-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configList",
                    "defaultValue": "{\r\n        title: 'Planes',\r\n        server: { url: 'plan' },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Nombre',\r\n                sort: { key: 'name' },\r\n                routerLinkValue: { url: (item) => `../detail/${item.id}` },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.name ? item.name : '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Precio',\r\n                sort: { key: 'price' },\r\n                gridColumn: 'auto',\r\n                displayValueFn: (item) => item.coin == CoinEnum.SOLES ? `S/. ${item.price}` : `$ ${item.price}`,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<Plan>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, signal } from '@angular/core';\r\nimport { ItemListTemplateComponent } from '@component/item-list-template/item-list-template.component';\r\nimport { CoinEnum } from '@interface/baseModel';\r\nimport { ItemListConfiguration, itemCreatedAtColumn, itemStatusColumn, itemUpdatedAtColumn, textColumn } from '@component/item-list-template/item-list-template.component';\r\nimport { Plan } from '@interface/plan';\r\n\r\n@Component({\r\n    selector: 'app-plan-list-page',\r\n    standalone: true,\r\n    imports: [ItemListTemplateComponent],\r\n    templateUrl: './plan-list-page.component.html',\r\n    styleUrl: './plan-list-page.component.scss'\r\n})\r\nexport class PlanListPageComponent {\r\n    public configList: ItemListConfiguration<Plan> = {\r\n        title: 'Planes',\r\n        server: { url: 'plan' },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Nombre',\r\n                sort: { key: 'name' },\r\n                routerLinkValue: { url: (item) => `../detail/${item.id}` },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.name ? item.name : '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Precio',\r\n                sort: { key: 'price' },\r\n                gridColumn: 'auto',\r\n                displayValueFn: (item) => item.coin == CoinEnum.SOLES ? `S/. ${item.price}` : `$ ${item.price}`,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }\r\n}\r\n",
            "styleUrl": "./plan-list-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-list-template [configuration]=\"configList\"/>\r\n\r\n"
        },
        {
            "name": "ProfileMenuComponent",
            "id": "component-ProfileMenuComponent-2f302511ed238682e73e5343ca6681f54de8f9584c54453e0dd71c1f613394e87ba81db5f602f73d610e14514a1392270395ca91d8bdf6671839cc955e10ebb5",
            "file": "src/app/sidenav/profile-menu/profile-menu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile-menu",
            "styleUrls": [
                "./profile-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 46,
                    "type": "User",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "signal<Configurations>({\r\n    color: 'theme-color-blue',\r\n    theme: 'light'\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<Configurations>",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "menuTrigger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatMenuTrigger",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatMenuTrigger"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                },
                {
                    "name": "themeColors",
                    "defaultValue": "THEME_COLORS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getConfigurations",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "setColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "\"light\" | \"dark\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "\"light\" | \"dark\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatSlideToggleModule",
                    "type": "module"
                },
                {
                    "name": "PathFilesServerPipe",
                    "type": "pipe"
                },
                {
                    "name": "FirstLetterNamePipe",
                    "type": "pipe"
                },
                {
                    "name": "NameLevelUserPipe",
                    "type": "pipe"
                },
                {
                    "name": "FirstLetterUppercasePipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild, ViewEncapsulation, WritableSignal, inject, signal } from '@angular/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { User } from '@interface/user';\r\nimport { MatMenuModule, MatMenuTrigger } from '@angular/material/menu';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { FirstLetterNamePipe } from '@pipe/first-letter-name.pipe';\r\nimport { AuthService } from '@service/auth.service';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { NameLevelUserPipe } from '@pipe/name-level-user.pipe';\r\nimport { FirstLetterUppercasePipe } from '@pipe/first-letter-uppercase.pipe';\r\n\r\ninterface Configurations {\r\n  theme: 'light' | 'dark';\r\n  color: string;\r\n}\r\n\r\nconst THEME_COLORS = [\r\n  // 'theme-color-yellow',\r\n  // 'theme-color-red',\r\n  'theme-color-orange',\r\n  'theme-color-blue',\r\n  'theme-color-green',\r\n  'theme-color-purple',\r\n  'theme-color-cyan',\r\n  'theme-color-pink',\r\n]\r\n\r\n@Component({\r\n  selector: 'app-profile-menu',\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    MatMenuModule,\r\n    MatSlideToggleModule,\r\n    PathFilesServerPipe,\r\n    FirstLetterNamePipe,\r\n    NameLevelUserPipe,\r\n    FirstLetterUppercasePipe,\r\n  ],\r\n  templateUrl: './profile-menu.component.html',\r\n  styleUrls: ['./profile-menu.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ProfileMenuComponent {\r\n  @ViewChild(MatMenuTrigger) private menuTrigger!: MatMenuTrigger;\r\n  @Input({ required: true }) public user!: User;\r\n  \r\n  private authService = inject(AuthService);\r\n  public configuration: WritableSignal<Configurations> = signal<Configurations>({\r\n    color: 'theme-color-blue',\r\n    theme: 'light'\r\n  });\r\n  public themeColors = THEME_COLORS;\r\n\r\n  constructor() {\r\n    this.getConfigurations();\r\n  }\r\n\r\n  public getConfigurations(): void {\r\n    const configuration = localStorage.getItem('configuration');\r\n    if (configuration) {\r\n      const parsedConfiguration = JSON.parse(configuration);\r\n      const theme = parsedConfiguration.theme == 'light' ? 'light' : 'dark';\r\n      const color = this.themeColors.includes(parsedConfiguration.color) ? parsedConfiguration.color : 'theme-color-blue';\r\n      this.setTheme(theme);\r\n      this.setColor(color);\r\n    } else {\r\n      const {theme, color} = this.configuration();\r\n      this.setTheme(theme);\r\n      this.setColor(color);\r\n    }\r\n  }\r\n\r\n  public setTheme(theme: 'light' | 'dark'): void {\r\n    this.configuration.update((config: Configurations) => ({...config, theme}));\r\n    document.documentElement.classList.remove('light', 'dark');\r\n    document.documentElement.classList.add(theme);\r\n    localStorage.setItem('configuration', JSON.stringify(this.configuration()))\r\n  }\r\n\r\n  public setColor(color: string): void {\r\n    this.configuration.update((config: Configurations) => ({...config, color}));\r\n    document.documentElement.classList.remove(...this.themeColors);\r\n    document.documentElement.classList.add(color);\r\n    localStorage.setItem('configuration', JSON.stringify(this.configuration()))\r\n  }\r\n\r\n  public closeMenu(): void {\r\n    this.menuTrigger.closeMenu();\r\n  }\r\n\r\n  public logout(): void {\r\n    this.authService.logout();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* ---------------------------------- */\r\n\r\n.profile-avatar>img,\r\n.profile-avatar>div {\r\n    position: absolute;\r\n    top: 2px;\r\n    left: 2px;\r\n    right: 2px;\r\n    bottom: 2px;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    object-fit: cover;\r\n    background: var(--color-surface);\r\n    color: var(--color-on-surface);\r\n}\r\n\r\n/* --------------------------------------------------------------------- */\r\n/* ----------------------    PROFILE MENU    --------------------------- */\r\n/* --------------------------------------------------------------------- */\r\n\r\n.profile-menu {\r\n    border-radius: var(--corner-mdc-dialog, 28px) !important;\r\n    max-width: 300px !important;\r\n    min-width: 300px !important;\r\n}\r\n\r\n.profile__menu__container {\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 16px 24px 12px 24px;\r\n    align-items: center;\r\n    position: relative;\r\n}\r\n\r\n/* -------------------------------------------------- */\r\n/* -------------------------------------------------- */\r\n.profile__menu__image {\r\n    width: 60px;\r\n    height: 60px;\r\n    padding: 2px;\r\n    border-radius: 50%;\r\n    background: var(--color-surface);\r\n    color: var(--color-on-surface);\r\n    margin-bottom: 12px;\r\n    position: relative;\r\n}\r\n\r\n/* -------------------------------------------------- */\r\n/* -------------------------------------------------- */\r\n.profile__menu__name>div {\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    width: 100%;\r\n    overflow: hidden;\r\n    text-align: center;\r\n}\r\n\r\n/* -------------------------------------------------- */\r\n/* -------------------------------------------------- */\r\n.profile__menu__options {\r\n    margin: 24px 0;\r\n    width: 100%;\r\n}\r\n\r\n.profile__menu__option__item {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    gap: 10px;\r\n    padding: 6px 0;\r\n    font-family: var(--body-medium-font-family-name);\r\n    font-style: var(--body-medium-font-family-style);\r\n    font-weight: var(--body-medium-font-weight);\r\n    font-size: var(--body-medium-font-size);\r\n    line-height: var(--body-medium-line-height);\r\n    letter-spacing: var(--body-medium-letter-spacing);\r\n    color: var(--color-on-surface-variant);\r\n    align-items: center;\r\n}\r\n\r\n.profile__menu__option__item__themes {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    flex-wrap: wrap;\r\n    gap: 3px;\r\n}\r\n\r\n.profile__menu__option__item__themes__item {\r\n    width: 24px;\r\n    height: 24px;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    background: rgb(var(--rgb-primary));\r\n    transition: border-width .12s ease;\r\n}\r\n\r\n.profile__menu__option__item__themes__item.active {\r\n    border: 2px solid rgb(var(--rgb-surface));\r\n}\r\n\r\n/* -------------------------------------------------- */\r\n/* -------------------------------------------------- */\r\n.profile__menu__actions {\r\n    display: grid;\r\n    width: 100%;\r\n    grid-template-columns: 1fr 1fr;\r\n    gap: 2px;\r\n    height: 56px;\r\n    border-radius: var(--corner-mdc-button, 100px) !important;\r\n    overflow: hidden;\r\n}\r\n\r\n.profile__menu__action__button {\r\n    height: 56px !important;\r\n    border-radius: 4px !important;\r\n    --bg-mdc-button: var(--color-surface);\r\n    --bg-mdc-button-focused: var(--color-surface);\r\n    --bg-mdc-button-hovered: var(--color-surface);\r\n    --bg-state-layer-mdc-button-hovered: rgba(var(--rgb-primary), 0.225);\r\n    --bg-state-layer-mdc-button-focused: rgba(var(--rgb-primary), 0.2 );\r\n}\r\n\r\n/* -------------------------------------------------- */\r\n/* -------------------------------------------------- */\r\n.profile__menu__copyright {\r\n    margin-top: 12px;\r\n    text-align: center;\r\n    color: var(--color-on-surface-variant);\r\n    font-family: var(--body-small-font-family-name);\r\n    font-style: var(--body-small-font-family-style);\r\n    font-weight: var(--body-small-font-weight);\r\n    font-size: var(--body-small-font-size);\r\n    line-height: var(--body-small-line-height);\r\n    letter-spacing: var(--body-small-letter-spacing);\r\n    opacity: .75;\r\n}",
                    "styleUrl": "./profile-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 53
            },
            "extends": [],
            "templateData": "<button class=\"icon-button\" [matMenuTriggerFor]=\"menuProfile\">\r\n    <div class=\"profile-avatar\">\r\n        @if (user.image) {\r\n        <img [src]=\"(user.image | pathFilesServer)\" alt=\"\" />\r\n        } @else {\r\n        <div class=\"title-medium\">\r\n            {{user.name | firstLetterName}}\r\n        </div>\r\n        }\r\n    </div>\r\n</button>\r\n\r\n\r\n<mat-menu class=\"profile-menu custom-scroll\" #menuProfile=\"matMenu\">\r\n    <div class=\"profile__menu__container\" (click)=\"$event.stopPropagation()\">\r\n\r\n        <div class=\"profile__menu__image\">\r\n            <div class=\"profile-avatar\">\r\n                @if (user.image) {\r\n                <img [src]=\"(user.image | pathFilesServer)\" alt=\"\" />\r\n                } @else {\r\n                <div class=\"headline-medium\">\r\n                    {{user.name | firstLetterName}}\r\n                </div>\r\n                }\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"profile__menu__name\">\r\n            <div class=\"title-medium\">{{user.name}}</div>\r\n            <div class=\"body-small\">\r\n                {{user.role | firstLetterUppercase}} - {{ user | nameLevelUser }}\r\n            </div>\r\n        </div>\r\n\r\n        @if (configuration(); as config) {\r\n        <div class=\"profile__menu__options\">\r\n            <div class=\"profile__menu__option__item\">\r\n                <div class=\"profile__menu__option__item__text\">\r\n                    Tema oscuro:\r\n                </div>\r\n                <div class=\"profile__menu__option__item__options\">\r\n                    <mat-slide-toggle (change)=\"setTheme($event.checked ? 'dark' : 'light')\"\r\n                        [checked]=\"config.theme == 'dark'\" />\r\n                </div>\r\n            </div>\r\n            <div class=\"profile__menu__option__item\">\r\n                <div class=\"profile__menu__option__item__text\">\r\n                    Color:\r\n                </div>\r\n                <div class=\"profile__menu__option__item__options\">\r\n                    <div class=\"profile__menu__option__item__themes\">\r\n                        @for (item of themeColors; track item) {\r\n                        <div [title]=\"item\" [ngClass]=\"{'active': config.color == item}\" (click)=\"setColor(item)\" class=\"profile__menu__option__item__themes__item {{item}}\">\r\n                        </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        }\r\n\r\n        <div class=\"profile__menu__actions\">\r\n            <button class=\"profile__menu__action__button text-button\" (click)=\"closeMenu()\">\r\n                <span class=\"material-icons\">account_circle</span>\r\n                <span>Perfil</span>\r\n            </button>\r\n            <button class=\"profile__menu__action__button text-button\" (click)=\"logout(); closeMenu()\">\r\n                <span class=\"material-icons\">logout</span>\r\n                <span>Salir</span>\r\n            </button>\r\n        </div>\r\n\r\n        <div class=\"profile__menu__copyright body-small\">\r\n            Allendostmen©2023\r\n        </div>\r\n    </div>\r\n</mat-menu>"
        },
        {
            "name": "SelectFileComponent",
            "id": "component-SelectFileComponent-2043cc53712a3c8be485cd79c942df274bb88529007350d3405e84f64a783d8e651dac2cda30cd81f2adfbfdf72f7ae3aab5e375f1048b0eb9a07d0520bc7d13",
            "file": "src/app/shared/components/select-file/select-file.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select-file",
            "styleUrls": [
                "./select-file.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-file.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 25,
                    "type": "InputFileConfiguration",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "fileCtrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 24,
                    "type": "FormControl",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleFileSelect",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nexport interface InputFileConfiguration {\r\n  /**\r\n   * property accept of input file\r\n   * @default '*'\r\n   * @example 'image/*' (For Images) | 'application/pdf' (For PDF) | 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' (For Word) | 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' (For Excel) | 'application/vnd.openxmlformats-officedocument.presentationml.presentation' (For Power Point) | 'text/plain' (For Text) | 'application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/vnd.ms-powerpoint, application/vnd.openxmlformats-officedocument.presentationml.presentation, text/plain, application/pdf, image/*'>\r\n   * @type {string}\r\n   */\r\n  acceptFiles?: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-select-file',\r\n  templateUrl: './select-file.component.html',\r\n  styleUrls: ['./select-file.component.scss'],\r\n  imports: [CommonModule],\r\n  standalone: true,\r\n})\r\nexport class SelectFileComponent {\r\n  @Input({ required: true }) fileCtrl!: FormControl;\r\n  @Input({ required: true }) configuration!: InputFileConfiguration;\r\n\r\n  public handleFileSelect($event: any) {\r\n    const fileList: FileList = ($event.target! as HTMLInputElement).files as FileList;\r\n    if (fileList.length) {\r\n      const file = fileList[0];\r\n      const extension_file = file.name.split('.').pop()!;\r\n      const name_file = file.name;\r\n      const size_file = file.size;\r\n      const type_file = file.type;\r\n      const reader: FileReader = new FileReader();\r\n      reader.onload = (eventReader) => {\r\n        const base_64 = btoa(eventReader.target!.result as string);\r\n        this.fileCtrl.setValue({\r\n          base_64,\r\n          extension_file,\r\n          name_file,\r\n          size_file,\r\n          type_file,\r\n        });\r\n      };\r\n      reader.readAsBinaryString(file);\r\n    } else {\r\n      this.fileCtrl.setValue(null);\r\n    }\r\n  }\r\n\r\n  get getImageFile(): string | null {\r\n    const fileValue = this.fileCtrl.value;\r\n    if(fileValue instanceof Object) {\r\n      const { extension_file, base_64, type_file } = fileValue!;\r\n      if (/(docx?)/.test(extension_file)) {\r\n        return '/assets/svg-icons/microsoft-word.svg';\r\n      } else if (/(xlsx?|csv)/.test(extension_file)) {\r\n        return '/assets/svg-icons/microsoft-excel.svg';\r\n      } else if (/(pptx?)/.test(extension_file)) {\r\n        return '/assets/svg-icons/microsoft-powerpoint.svg';\r\n      } else if (/(png|jpg|jpeg|webp|avif)/.test(extension_file)) {\r\n        return `data:${type_file};base64,${base_64}`;\r\n      } else if (/(pdf)/.test(extension_file)) {\r\n        return '/assets/svg-icons/pdf.png';\r\n      } else if (/(txt)/.test(extension_file)) {\r\n        return '/assets/svg-icons/document.svg';\r\n      }\r\n    } else if(fileValue) {\r\n      if(/(http(s?))/i.test(fileValue)) return fileValue;\r\n      else return environment.URL_FILES_SERVER + fileValue;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    display: grid;\r\n    width: 100%;\r\n    overflow: hidden;\r\n}",
                    "styleUrl": "./select-file.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "getImageFile": {
                    "name": "getImageFile",
                    "getSignature": {
                        "name": "getImageFile",
                        "type": "",
                        "returnType": "string | null",
                        "line": 52
                    }
                }
            },
            "templateData": "@if (fileCtrl.value) {\r\n    <div>\r\n        @if (getImageFile) { <img [src]=\"getImageFile\" class=\"select-file__preview\"> }\r\n    </div>\r\n}\r\n<label class=\"select-file__element\">\r\n    <input hidden [accept]=\"configuration.acceptFiles ?? '*'\" (input)=\"handleFileSelect($event)\" type=\"file\">\r\n    <span class=\"outlined-button\">\r\n        <span class=\"material-icons\">upload</span>\r\n        <span>{{fileCtrl.value ? 'Cambiar' : 'Seleccionar'}} archivo</span>\r\n    </span>\r\n</label>"
        },
        {
            "name": "SettingsMenuComponent",
            "id": "component-SettingsMenuComponent-e13696a5d59e0ddfe9819f6de24a1123237b9c8f46dd854042e41f9b1061854b5bbe61a6378726307b707d04def44ca694a3cefe3ab8cebca8a900e9c472ee04",
            "file": "src/app/sidenav/settings-menu/settings-menu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings-menu",
            "styleUrls": [
                "./settings-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./settings-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatSlideToggleModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation} from '@angular/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\n\r\n@Component({\r\n  selector: 'app-settings-menu',\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    MatMenuModule,\r\n    MatSlideToggleModule,\r\n  ],\r\n  templateUrl: './settings-menu.component.html',\r\n  styleUrls: ['./settings-menu.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class SettingsMenuComponent {\r\n\r\n  \r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* --------------------------------------------------------------------- */\r\n/* ----------------------     APPS  MENU     --------------------------- */\r\n/* --------------------------------------------------------------------- */\r\n.settings-menu {\r\n    border-radius: var(--corner-mdc-dialog, 28px) !important;\r\n}\r\n\r\n.settings__menu__container {\r\n    min-width: 280px;\r\n    max-width: 280px;\r\n    min-height: 200px;\r\n    overflow: hidden;\r\n    overflow-y: auto;\r\n    padding: 12px 0;\r\n}\r\n.settings__menu__container > .settings__menu__subtitle:first-of-type {\r\n    border-top: none;\r\n    padding-top: 0;\r\n    margin-top: 0;\r\n}\r\n\r\n.settings__menu__subtitle {\r\n    font-family: var(--label-medium-font-family-name);\r\n    font-style: var(--label-medium-font-family-style);\r\n    font-weight: var(--label-medium-font-weight);\r\n    font-size: var(--label-medium-font-size);\r\n    line-height: var(--label-medium-line-height);\r\n    letter-spacing: var(--label-medium-letter-spacing);\r\n    color: var(--color-on-surface-variant);\r\n    padding: 12px 16px 0px 16px;\r\n    margin: 12px 0;\r\n    border-top: 1px solid var(--color-outline-variant);\r\n}\r\n\r\n.settings__menu__item {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    gap: 10px;\r\n    padding: 8px 16px;\r\n    font-family: var(--body-medium-font-family-name);\r\n    font-style: var(--body-medium-font-family-style);\r\n    font-weight: var(--body-medium-font-weight);\r\n    font-size: var(--body-medium-font-size);\r\n    line-height: var(--body-medium-line-height);\r\n    letter-spacing: var(--body-medium-letter-spacing);\r\n    color: var(--color-on-surface-variant);\r\n}\r\n\r\n.settings__menu__item__items-center {\r\n    align-items: center;\r\n}\r\n\r\n.settings__menu__item__options__themes {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    flex-wrap: wrap;\r\n    gap: 4px;\r\n}\r\n\r\n.settings__menu__item__options__themes__item {\r\n    width: 32px;\r\n    height: 32px;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    background: rgb(var(--rgb-primary));\r\n}\r\n\r\n.settings__menu__item__options__themes__item.active {\r\n    border: 3px solid rgb(var(--rgb-surface));\r\n}",
                    "styleUrl": "./settings-menu.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<button class=\"icon-button\" [matMenuTriggerFor]=\"settingsMenu\">\r\n    <span class=\"material-icons\">settings</span>\r\n</button>\r\n\r\n\r\n<mat-menu class=\"settings-menu\" #settingsMenu=\"matMenu\">\r\n    <div class=\"settings__menu__container\" (click)=\"$event.stopPropagation()\">\r\n        <!-- -------------------------------------------------- -->\r\n        <div class=\"settings__menu__subtitle\">\r\n            Opciones generales\r\n        </div>\r\n        <div class=\"settings__menu__item settings__menu__item__items-center\">\r\n            <div class=\"settings__menu__item__text\">\r\n                Opción 1\r\n            </div>\r\n            <div class=\"settings__menu__item__options\">\r\n                <mat-slide-toggle checked />\r\n            </div>\r\n        </div>\r\n        <div class=\"settings__menu__item settings__menu__item__items-center\">\r\n            <div class=\"settings__menu__item__text\">\r\n                Opción 2\r\n            </div>\r\n            <div class=\"settings__menu__item__options\">\r\n                <mat-slide-toggle checked />\r\n            </div>\r\n        </div>\r\n        <!-- -------------------------------------------------- -->\r\n        <div class=\"settings__menu__subtitle\">\r\n            Opciones de color\r\n        </div>\r\n        <div class=\"settings__menu__item settings__menu__item__items-center\">\r\n            <div class=\"settings__menu__item__text\">\r\n                Tema oscuro\r\n            </div>\r\n            <div class=\"settings__menu__item__options\">\r\n                <mat-slide-toggle [checked]=\"true\" />\r\n            </div>\r\n        </div>\r\n        <!-- -------------------------------------------------- -->\r\n    </div>\r\n</mat-menu>"
        },
        {
            "name": "SettingsSidenavComponent",
            "id": "component-SettingsSidenavComponent-58278f0e5cbf5f1e9591f53c6c514ee55ea0b5049ff08aa46af35cb7cf2e220d1f42534f0fe16f1f1d30ab722a58e72eed76cb572f97e32ec52206c6b29f2913",
            "file": "src/app/modules/settings/components/settings-sidenav/settings-sidenav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings-sidenav",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./settings-sidenav.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n    groups: [\r\n      {\r\n        title: 'Principal',\r\n        links: [\r\n          {\r\n            title: 'Perfil',\r\n            routerLink: { url: './application' },\r\n          },\r\n          {\r\n            title: 'Aplicación',\r\n            routerLink: { url: './application' },\r\n          },\r\n          {\r\n            title: 'Tablas maestras',\r\n            routerLink: { url: './master-table' },\r\n            children: [\r\n              {\r\n                title: 'Guía',\r\n                routerLink: { url: './master-table/guide' },\r\n              },\r\n              {\r\n                title: 'Tipos de usuario',\r\n                routerLink: { url: './master-table/user-type' },\r\n              },\r\n              {\r\n                title: 'Tipos de cliente',\r\n                routerLink: { url: './master-table/document-type' },\r\n              },\r\n              {\r\n                title: 'Tipos de documento',\r\n                routerLink: { url: './master-table/document-type' },\r\n              },\r\n            ]\r\n          },\r\n        ]\r\n      },\r\n      {\r\n        title: 'Seguridad',\r\n        links: [\r\n          {\r\n            title: 'Contraseña',\r\n            routerLink: { url: './password' },\r\n          },\r\n          {\r\n            title: 'Almacenamiento de datos',\r\n            routerLink: { url: './storage' },\r\n            children: [\r\n              {\r\n                title: 'Guía',\r\n                routerLink: { url: './storage/guide' },\r\n              },\r\n              {\r\n                title: 'Datos locales',\r\n                routerLink: { url: './storage/customer' },\r\n              },\r\n              {\r\n                title: 'Datos en servidor',\r\n                routerLink: { url: './storage/provider' },\r\n              },\r\n            ]\r\n          },\r\n        ]\r\n      }\r\n    ]\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PanelSidenavConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PanelDrawerTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { PanelDrawerTemplateComponent, PanelSidenavConfiguration } from '@component/panel-drawer-template/panel-drawer-template.component';\r\n\r\n@Component({\r\n  selector: 'app-settings-sidenav',\r\n  standalone: true,\r\n  imports: [PanelDrawerTemplateComponent],\r\n  templateUrl: './settings-sidenav.component.html',\r\n  styleUrl: './settings-sidenav.component.scss'\r\n})\r\nexport class SettingsSidenavComponent {\r\n  public configuration: PanelSidenavConfiguration = {\r\n    groups: [\r\n      {\r\n        title: 'Principal',\r\n        links: [\r\n          {\r\n            title: 'Perfil',\r\n            routerLink: { url: './application' },\r\n          },\r\n          {\r\n            title: 'Aplicación',\r\n            routerLink: { url: './application' },\r\n          },\r\n          {\r\n            title: 'Tablas maestras',\r\n            routerLink: { url: './master-table' },\r\n            children: [\r\n              {\r\n                title: 'Guía',\r\n                routerLink: { url: './master-table/guide' },\r\n              },\r\n              {\r\n                title: 'Tipos de usuario',\r\n                routerLink: { url: './master-table/user-type' },\r\n              },\r\n              {\r\n                title: 'Tipos de cliente',\r\n                routerLink: { url: './master-table/document-type' },\r\n              },\r\n              {\r\n                title: 'Tipos de documento',\r\n                routerLink: { url: './master-table/document-type' },\r\n              },\r\n            ]\r\n          },\r\n        ]\r\n      },\r\n      {\r\n        title: 'Seguridad',\r\n        links: [\r\n          {\r\n            title: 'Contraseña',\r\n            routerLink: { url: './password' },\r\n          },\r\n          {\r\n            title: 'Almacenamiento de datos',\r\n            routerLink: { url: './storage' },\r\n            children: [\r\n              {\r\n                title: 'Guía',\r\n                routerLink: { url: './storage/guide' },\r\n              },\r\n              {\r\n                title: 'Datos locales',\r\n                routerLink: { url: './storage/customer' },\r\n              },\r\n              {\r\n                title: 'Datos en servidor',\r\n                routerLink: { url: './storage/provider' },\r\n              },\r\n            ]\r\n          },\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}\r\n",
            "styleUrl": "./settings-sidenav.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-panel-drawer-template [configuration]=\"configuration\" />"
        },
        {
            "name": "SidenavComponent",
            "id": "component-SidenavComponent-7b7d7406e4ca54a91a69a44a6709b5e6b8533eb224cf7b866f08f738251a1d944b0134c9537cf7b101ae50ae91846bd7cfc869237594e5c292b99a91e3d33b6b",
            "file": "src/app/sidenav/sidenav/sidenav.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidenav",
            "styleUrls": [
                "./sidenav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidenav.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "databaseStorageService",
                    "defaultValue": "inject(DatabaseStorageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "eventService",
                    "defaultValue": "inject(EventsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "groupDrawerLinks",
                    "defaultValue": "signal([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<GroupDrawerLink[]>",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "inputSearch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputSearch'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "lateralPanelType",
                    "defaultValue": "signal('minimum')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<LateralPanelType>",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "location",
                    "defaultValue": "inject(Location)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "optionsSearchCtrl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "renderer2",
                    "defaultValue": "inject(Renderer2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "searchCtrl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "showDrawer",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "showLateralPanel",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "sidenavDrawerMode",
                    "defaultValue": "signal('side')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<\"over\" | \"push\" | \"side\">",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "speakingMicrophone",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "this.authService.user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Signal<User | null>",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "enterSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "filteredLinks",
                    "args": [
                        {
                            "name": "links",
                            "type": "DrawerLink[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "role",
                            "type": "UserRoleEnum",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DrawerLink[]>",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "links",
                            "type": "DrawerLink[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "role",
                            "type": "UserRoleEnum",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAccessMicrophone",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getValidatedLinks",
                    "args": [
                        {
                            "name": "links",
                            "type": "GroupDrawerLink[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "role",
                            "type": "UserRoleEnum",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "links",
                            "type": "GroupDrawerLink[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "role",
                            "type": "UserRoleEnum",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "keyEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keydown.esc', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadConfigurations",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "requestAccessMicrophone",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ]
                },
                {
                    "name": "setShowLateralPanel",
                    "args": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "watchSearchCtrl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:keydown.esc",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterLinkActive"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "MatAutocompleteModule",
                    "type": "module"
                },
                {
                    "name": "PathFilesServerPipe",
                    "type": "pipe"
                },
                {
                    "name": "FirstLetterNamePipe",
                    "type": "pipe"
                },
                {
                    "name": "ProfileMenuComponent",
                    "type": "component"
                },
                {
                    "name": "AppsMenuComponent",
                    "type": "component"
                },
                {
                    "name": "SettingsMenuComponent",
                    "type": "component"
                },
                {
                    "name": "NotificationsMenuComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, HostListener, Renderer2, Signal, ViewChild, ViewEncapsulation, WritableSignal, inject, signal } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { AuthService } from '@service/auth.service';\r\nimport { User, UserRoleEnum } from '@interface/user';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\nimport { PathFilesServerPipe } from '@pipe/path-files-server.pipe';\r\nimport { FirstLetterNamePipe } from '@pipe/first-letter-name.pipe';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { ProfileMenuComponent } from '../profile-menu/profile-menu.component';\r\nimport { AppsMenuComponent } from '../apps-menu/apps-menu.component';\r\nimport { SettingsMenuComponent } from '../settings-menu/settings-menu.component';\r\nimport { NotificationsMenuComponent } from '../notifications-menu/notifications-menu.component';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { EventsService } from '@service/events.service';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { DatabaseStorageService, NameModuleDatabase } from '@service/database-storage.service';\r\n\r\ninterface GroupDrawerLink {\r\n    label?: string;\r\n    links: DrawerLink[];\r\n    roles?: UserRoleEnum[];\r\n}\r\n\r\ninterface DrawerLink {\r\n    label: string;\r\n    icon: string;\r\n    route: string;\r\n    exact?: boolean;\r\n    queryParams?: { [key: string]: string | number | boolean };\r\n    roles?: UserRoleEnum[];\r\n    group_open?: boolean;\r\n}\r\n\r\nexport interface EventGlobalSearch {\r\n    type: 'enter' | 'change';\r\n    value: string;\r\n}\r\n\r\nexport const NAME_EVENT_GLOBAL_SEARCH = 'global_search';\r\n\r\nexport declare type LateralPanelType = 'maximum' | 'minimum';\r\n\r\n@Component({\r\n    selector: 'app-sidenav',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n\r\n        RouterOutlet,\r\n        RouterLink,\r\n        RouterLinkActive,\r\n        ReactiveFormsModule,\r\n\r\n        MatMenuModule,\r\n        MatSelectModule,\r\n        MatTooltipModule,\r\n        MatAutocompleteModule,\r\n\r\n        PathFilesServerPipe,\r\n        FirstLetterNamePipe,\r\n\r\n        ProfileMenuComponent,\r\n        AppsMenuComponent,\r\n        SettingsMenuComponent,\r\n        NotificationsMenuComponent,\r\n    ],\r\n    templateUrl: './sidenav.component.html',\r\n    styleUrls: ['./sidenav.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class SidenavComponent {\r\n    private authService = inject(AuthService);\r\n    private renderer2 = inject(Renderer2);\r\n    private eventService = inject(EventsService);\r\n    public location = inject(Location);\r\n    public databaseStorageService = inject(DatabaseStorageService);\r\n\r\n    public user: Signal<User | null> = this.authService.user;\r\n    public sidenavDrawerMode: WritableSignal<'over' | 'push' | 'side'> = signal('side');\r\n    public showDrawer: WritableSignal<boolean> = signal(false);\r\n    public groupDrawerLinks: WritableSignal<GroupDrawerLink[]> = signal([]);\r\n\r\n    public lateralPanelType: WritableSignal<LateralPanelType> = signal('minimum');\r\n    public showLateralPanel: WritableSignal<boolean> = signal(false);\r\n\r\n    @ViewChild('inputSearch') inputSearch!: ElementRef<HTMLInputElement>;\r\n    public searchCtrl: FormControl = new FormControl('');\r\n    public optionsSearchCtrl: FormControl = new FormControl('');\r\n    public speakingMicrophone: WritableSignal<boolean> = signal(false);\r\n\r\n    @HostListener('window:keydown.esc', ['$event'])\r\n    keyEvent(event: KeyboardEvent) {\r\n        console.log();\r\n\r\n        if ((event.target as HTMLElement).nodeName.toUpperCase() !== 'INPUT' && this.showLateralPanel()) {\r\n            this.location.back();\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getValidatedLinks(DRAWER_LINKS, this.user()!.role);\r\n        this.watchSearchCtrl();\r\n        this.loadConfigurations();\r\n    }\r\n\r\n    private async getValidatedLinks(links: GroupDrawerLink[], role: UserRoleEnum): Promise<void> {\r\n        const linksFiltered: GroupDrawerLink[] = [];\r\n        for await (const link of links) {\r\n            if (link.roles && !link.roles.includes(role)) continue;\r\n            if (link.links.length) link.links = await this.filteredLinks(link.links, role);\r\n            linksFiltered.push(link);\r\n        }\r\n        this.groupDrawerLinks.set(linksFiltered);\r\n    }\r\n\r\n    public async filteredLinks(links: DrawerLink[], role: UserRoleEnum): Promise<DrawerLink[]> {\r\n        const parseLinks = [];\r\n        for await (const link of links) {\r\n            if (link.roles && !link.roles.includes(role)) continue;\r\n            parseLinks.push(link);\r\n        }\r\n        return parseLinks;\r\n    }\r\n\r\n    public setShowLateralPanel(status: boolean, data: any = null) {\r\n        this.showLateralPanel.set(status);\r\n        if (status) {\r\n            if ((data.lateralPanelType ?? null) == 'maximum') {\r\n                this.lateralPanelType.set('maximum');\r\n            } else {\r\n                this.lateralPanelType.set('minimum');\r\n            }\r\n        }\r\n    }\r\n\r\n    private getAccessMicrophone(): Promise<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            navigator.mediaDevices.getUserMedia({ audio: true })\r\n                .then(() => resolve(true))\r\n                .catch(() => resolve(false));\r\n        });\r\n    }\r\n\r\n    public async requestAccessMicrophone(): Promise<void> {\r\n        if (this.speakingMicrophone()) return;\r\n        const permission = await this.getAccessMicrophone();\r\n\r\n        if (permission) {\r\n\r\n            if (!('webkitSpeechRecognition' in window)) return;\r\n\r\n            const recognition = new ((window as any).SpeechRecognition || (window as any).webkitSpeechRecognition)();\r\n            recognition.lang = 'es-ES';\r\n\r\n            this.speakingMicrophone.set(true);\r\n\r\n            recognition.onresult = (event: any) => {\r\n                const transcript = event.results[0][0].transcript;\r\n                this.searchCtrl.setValue(transcript || this.searchCtrl.value);\r\n                this.speakingMicrophone.set(false);\r\n                this.renderer2.selectRootElement(this.inputSearch.nativeElement).focus();\r\n            };\r\n\r\n            recognition.onend = () => {\r\n                this.speakingMicrophone.set(false);\r\n                this.renderer2.selectRootElement(this.inputSearch.nativeElement).focus();\r\n            }\r\n\r\n            recognition.start();\r\n        } else {\r\n            this.speakingMicrophone.set(false);\r\n        }\r\n    }\r\n\r\n    private watchSearchCtrl(): void {\r\n        this.searchCtrl.valueChanges.subscribe((value) => {\r\n            this.eventService.emitEvent<EventGlobalSearch>(NAME_EVENT_GLOBAL_SEARCH, { type: 'change', value });\r\n        });\r\n    }\r\n\r\n    public enterSearch(): void {\r\n        this.eventService.emitEvent<EventGlobalSearch>(NAME_EVENT_GLOBAL_SEARCH, { type: 'enter', value: this.searchCtrl.value });\r\n    }\r\n\r\n\r\n    private async loadConfigurations() {\r\n        await Promise.allSettled([\r\n            this.databaseStorageService.getData(NameModuleDatabase.Users),\r\n            this.databaseStorageService.getData(NameModuleDatabase.Banks),\r\n            // this.databaseStorageService.getData(NameModuleDatabase.Taxes),\r\n            // this.databaseStorageService.getData(NameModuleDatabase.DocumentTypes),\r\n            this.databaseStorageService.getData(NameModuleDatabase.Plans),\r\n            this.databaseStorageService.getData(NameModuleDatabase.VehicleTypes),\r\n        ])\r\n    }\r\n\r\n}\r\n\r\n\r\nconst DRAWER_LINKS: GroupDrawerLink[] = [\r\n    {\r\n        label: 'Organización',\r\n        links: [\r\n            {\r\n                label: 'Clientes',\r\n                icon: 'supervised_user_circle',\r\n                route: '/organization/client',\r\n            },\r\n            {\r\n                label: 'Usuarios',\r\n                icon: 'person',\r\n                route: '/organization/user',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Administración',\r\n        links: [\r\n            {\r\n                label: 'Cuentas',\r\n                icon: 'account_balance_wallet',\r\n                route: '/administration/account',\r\n            },\r\n            {\r\n                label: 'Cajas',\r\n                icon: 'service_toolbox',\r\n                route: '/administration/box',\r\n            },\r\n            {\r\n                label: 'Movimientos de caja',\r\n                icon: 'timeline',\r\n                route: '/administration/box-movement',\r\n            },\r\n            {\r\n                label: 'Facturación',\r\n                icon: 'draft',\r\n                route: '/administration/document',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Tracking',\r\n        links: [\r\n            {\r\n                label: 'Contratos',\r\n                icon: 'account_balance_wallet',\r\n                route: '/tracking/contract',\r\n            },\r\n            {\r\n                label: 'Vehículos',\r\n                icon: 'electric_rickshaw',\r\n                route: '/tracking/vehicle',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Configuration',\r\n        links: [\r\n            {\r\n                label: 'Bancos',\r\n                icon: 'account_balance',\r\n                route: '/configuration/bank',\r\n            },\r\n            {\r\n                label: 'Planes',\r\n                icon: 'planner_banner_ad_pt',\r\n                route: '/configuration/plan',\r\n            },\r\n            {\r\n                label: 'Tipo de vehículos',\r\n                icon: 'airport_shuttle',\r\n                route: '/configuration/vehicle-type',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Opciones de la APP',\r\n        links: [\r\n            {\r\n                label: 'Settings',\r\n                route: '/settings',\r\n                icon: 'settings',\r\n            },\r\n        ]\r\n    },\r\n];\r\n\r\n\r\n// this.breakpointObserver\r\n//       .observe([\r\n//         '(min-width: 640px) and (max-width: 1024px)',\r\n//         '(max-width: 640px)',\r\n//       ])\r\n//       .subscribe(({ breakpoints }) => {\r\n//         if (breakpoints['(min-width: 640px) and (max-width: 1024px)']) {\r\n//           this.mode = 'push';\r\n//           this.backdrop = true;\r\n//         } else if (breakpoints['(max-width: 640px)']) {\r\n//           this.mode = 'over';\r\n//           this.backdrop = true;\r\n//         } else {\r\n//           this.mode = 'side';\r\n//           this.backdrop = false;\r\n//         }\r\n//       });\r\n\r\n\r\n\r\n// links: Link[] = [\r\n//   {\r\n//       name: 'Inicio',\r\n//       icon: 'home',\r\n//       url: '/',\r\n//       exact: true,\r\n//   },\r\n//   {\r\n//       name: 'Stakeholders',\r\n//       icon: 'handshake',\r\n//       url: '/organization',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Leads',\r\n//               icon: 'supervised_user_circle',\r\n//               url: '/leads',\r\n//           },\r\n//           {\r\n//               name: 'Clientes',\r\n//               icon: 'groups',\r\n//               url: '/client',\r\n//           },\r\n//           {\r\n//               name: 'Proveedores',\r\n//               icon: 'diversity_3',\r\n//               url: '/provider',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Colaboradores',\r\n//       icon: 'lan',\r\n//       url: '/organization',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Usuarios',\r\n//               icon: 'person_add',\r\n//               url: '/user',\r\n//           },\r\n//           {\r\n//               name: 'Recursos humanos',\r\n//               icon: 'admin_panel_settings',\r\n//               url: '/human-resource',\r\n//           },\r\n//           // {\r\n//           //     name: 'Vendedores',\r\n//           //     icon: 'communication',\r\n//           //     url: '/seller',\r\n//           // },\r\n//           // {\r\n//           //     name: 'Jefes de proyectos',\r\n//           //     icon: 'supervisor_account',\r\n//           //     url: '/project-manager',\r\n//           // },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Cotizaciones',\r\n//       icon: 'monetization_on',\r\n//       url: '/quotation',\r\n//       childs: [\r\n//           {\r\n//               name: 'Cotizaciones',\r\n//               icon: 'monetization_on',\r\n//               url: '/quotation/recents'\r\n//           },\r\n//           {\r\n//               name: 'Costos unitarios',\r\n//               icon: 'call_split',\r\n//               url: '/quotation/unit-cost',\r\n//           },\r\n//           // {\r\n//           //     name: 'Materiales',\r\n//           //     icon: 'construction',\r\n//           //     url: '/material',\r\n//           // },\r\n//           {\r\n//               name: 'Mano de obra',\r\n//               icon: 'handshake',\r\n//               url: '/quotation/workforce',\r\n//           },\r\n//           {\r\n//               name: 'Equipos y herramientas',\r\n//               icon: 'inbox_customize',\r\n//               url: '/quotation/equipment-tool',\r\n//           },\r\n//           {\r\n//               name: 'Subcontratos',\r\n//               icon: 'add_business',\r\n//               url: '/quotation/subcontract',\r\n//           },\r\n//           {\r\n//               name: 'Categorias de costos',\r\n//               icon: 'gesture',\r\n//               url: '/quotation/unit-cost-category',\r\n//           }\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Productos',\r\n//       icon: 'widgets',\r\n//       url: '/product',\r\n//       childs: [\r\n//           {\r\n//               name: 'Lista de productos',\r\n//               icon: 'widgets',\r\n//               url: '/product',\r\n//           },\r\n//           {\r\n//               name: 'Categorias',\r\n//               icon: 'category',\r\n//               url: '/product/category',\r\n//           },\r\n//           {\r\n//               name: 'Marcas',\r\n//               icon: 'label_important',\r\n//               url: '/product/brand',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Configuraciones',\r\n//       icon: 'settings',\r\n//       url: '/configuration',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Tipos de documento',\r\n//               url: '/configuration/document-type',\r\n//               icon: 'dock',\r\n//           },\r\n//           {\r\n//               name: 'Áreas de la empresa',\r\n//               url: '/configuration/company-area',\r\n//               icon: 'apartment',\r\n//           },\r\n//           {\r\n//               name: 'Sector de stakeholders',\r\n//               url: '/configuration/business-sector',\r\n//               icon: 'corporate_fare',\r\n//           },\r\n//           {\r\n//               name: 'Bancos',\r\n//               url: '/configuration/bank',\r\n//               icon: 'account_balance',\r\n//           },\r\n//           {\r\n//               name: 'Cargos',\r\n//               url: '/configuration/position',\r\n//               icon: 'whatshot',\r\n//           },\r\n//           {\r\n//               name: 'Unidad de medida',\r\n//               url: '/configuration/measurement-unit',\r\n//               icon: 'stacked_bar_chart',\r\n//           },\r\n//           {\r\n//               name: 'Impuestos',\r\n//               url: '/configuration/taxe',\r\n//               icon: 'monitoring',\r\n//           },\r\n//           {\r\n//               name: 'Cuentas bancarias',\r\n//               url: '/configuration/account',\r\n//               icon: 'payments',\r\n//           },\r\n//           {\r\n//               name: 'Direcciones',\r\n//               url: '/configuration/address',\r\n//               icon: 'dns',\r\n//           },\r\n//           {\r\n//               name: 'Tipo de trabajador',\r\n//               url: '/configuration/worker-type',\r\n//               icon: 'engineering',\r\n//           },\r\n//           {\r\n//               name: 'Régimen laboral',\r\n//               url: '/configuration/laboral-regimen',\r\n//               icon: 'azm',\r\n//           },\r\n//           {\r\n//               name: 'Tipo de contrato',\r\n//               url: '/configuration/contract-type',\r\n//               icon: 'badge',\r\n//           },\r\n//           {\r\n//               name: 'Régimen de salud',\r\n//               url: '/configuration/health-regimen',\r\n//               icon: 'security',\r\n//           },\r\n//           {\r\n//               name: 'Régimen pensionario',\r\n//               url: '/configuration/pension-scheme',\r\n//               icon: 'receipt',\r\n//           },\r\n//           {\r\n//               name: 'Niveles de educación',\r\n//               url: '/configuration/education-level',\r\n//               icon: 'moving_ministry',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Configuración de calendario',\r\n//       icon: 'edit_calendar',\r\n//       url: '/calendar-configuration',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Calendarios',\r\n//               url: '/calendar/list',\r\n//               icon: 'calendar_month',\r\n//           },\r\n//           {\r\n//               name: 'Días feriados',\r\n//               url: '/holiday',\r\n//               icon: 'today',\r\n//           },\r\n//           {\r\n//               name: 'Configuraciones',\r\n//               icon: 'calendar_apps_script',\r\n//               url: '/calendar-configuration/list',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Control de cajas',\r\n//       icon: 'point_of_sale',\r\n//       url: '/box',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Caja',\r\n//               url: '/box/list',\r\n//               icon: 'flowsheet',\r\n//           },\r\n//           {\r\n//               name: 'Movimientos de caja',\r\n//               url: '/box/box-movement',\r\n//               icon: 'right_click',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Capital de trabajo',\r\n//       icon: 'store',\r\n//       url: '/working-capital-box',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Caja',\r\n//               url: '/working-capital-box/list',\r\n//               icon: 'flowsheet',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Caja de rendición',\r\n//       icon: 'point_of_sale',\r\n//       url: '/surrender-box',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Caja de rendición',\r\n//               url: '/surrender-box/list',\r\n//               icon: 'flowsheet',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Inversiones',\r\n//       icon: 'connect_without_contact',\r\n//       url: '/investor',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Inversionistas',\r\n//               url: '/investor/list',\r\n//               icon: 'recent_patient',\r\n//           },\r\n//           {\r\n//               name: 'Inversiones',\r\n//               url: '/investor/investment',\r\n//               icon: 'insights',\r\n//           },\r\n//           {\r\n//               name: 'Retiro de inversiones',\r\n//               url: '/investor/investment-withdrawal',\r\n//               icon: 'real_estate_agent',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Socios',\r\n//       icon: 'supervisor_account',\r\n//       url: '/partner',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Lista de socios',\r\n//               url: '/partner/list',\r\n//               icon: 'supervised_user_circle',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Requerimientos',\r\n//       icon: 'view_timeline',\r\n//       url: '/requirement',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Requerimientos',\r\n//               url: '/requirement/list',\r\n//               icon: 'last_page',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Registro de actas',\r\n//       icon: 'meeting_room',\r\n//       url: '/record-meeting',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Registro de actas',\r\n//               url: '/record-meeting/list',\r\n//               icon: 'auto_videocam',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Costos',\r\n//       icon: 'price_check',\r\n//       url: '/cost-center',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Centro de costos',\r\n//               url: '/cost-center/panel',\r\n//               icon: 'stacked_bar_chart',\r\n//           },\r\n//           {\r\n//               name: 'Tipo de centro de costos',\r\n//               url: '/cost-center/cost-center-type',\r\n//               icon: 'arrow_and_edge',\r\n//           },\r\n//           {\r\n//               name: 'Lista de gastos',\r\n//               url: '/cost-center/expense-list-general',\r\n//               icon: 'receipt_long',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Proyectos',\r\n//       icon: 'memory',\r\n//       url: '/project',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Lista de proyectos',\r\n//               url: '/project/list',\r\n//               icon: 'electric_bolt',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Compras',\r\n//       icon: 'sell',\r\n//       url: '/purchase-order',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Orden de compra',\r\n//               url: '/purchase-order/list',\r\n//               icon: 'file_open',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Ajustes',\r\n//       icon: 'build',\r\n//       url: '/settings',\r\n//       open: false,\r\n//       childs: [\r\n//           {\r\n//               name: 'Perfil',\r\n//               url: '/settings/profile',\r\n//               icon: 'account_box',\r\n//           },\r\n//           {\r\n//               name: 'Aplicación',\r\n//               url: '/settings/application',\r\n//               icon: 'settings_applications',\r\n//           },\r\n//       ]\r\n//   },\r\n//   {\r\n//       name: 'Notificaciones',\r\n//       icon: 'notifications',\r\n//       url: '/settings/profile/notifications/list',\r\n//       open: true,\r\n//   },\r\n// ];\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sidenav {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n    font-family: var(--body-medium-font-family-name);\r\n    font-style: var(--body-medium-font-family-style);\r\n    font-weight: var(--body-medium-font-weight);\r\n    font-size: var(--body-medium-font-size);\r\n    letter-spacing: var(--body-medium-letter-spacing);\r\n    line-height: var(--body-medium-line-height);\r\n    text-transform: var(--body-medium-text-transform);\r\n    text-decoration: var(--body-medium-text-decoration);\r\n    --left-sidenav-drawer: 0px;\r\n    --top-sidenav-drawer: 0px;\r\n    --bottom-sidenav-drawer: 0px;\r\n    --opacity-text-sidenav-drawer: 0;\r\n    --width-sidenav-drawer: 74px;\r\n    --padding-x-sidenav-content: 24px;\r\n}\r\n\r\n.sidenav:has(.drawer-opened) {\r\n    --width-sidenav-drawer: 280px;\r\n    --opacity-text-sidenav-drawer: 1;\r\n}\r\n\r\n.sidenav__drawer {\r\n    position: absolute;\r\n    top: var(--top-sidenav-drawer);\r\n    left: var(--left-sidenav-drawer);\r\n    bottom: var(--bottom-sidenav-drawer);\r\n    width: var(--width-sidenav-drawer);\r\n    color: var(--color-on-surface);\r\n    background: linear-gradient(0deg, rgba(var(--rgb-primary), 0.05), rgba(var(--rgb-primary), 0.05)), linear-gradient(0deg, rgb(var(--rgb-surface)), rgb(var(--rgb-surface)));\r\n    background: var(--color-surface);\r\n    overflow: hidden;\r\n    display: grid;\r\n    grid-template-rows: auto 1fr;\r\n    transition-property: background, width;\r\n    transition-duration: 0.25s;\r\n    transition-timing-function: ease;\r\n}\r\n\r\n/* ------------------------------------------------------------------------------------ */\r\n/* ------------------------------------------------------------------------------------ */\r\n/* ------------------------------------------------------------------------------------ */\r\n.sidenav__drawer__menu {\r\n    display: flex;\r\n    padding: 8px 17px;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n    overflow: hidden;\r\n}\r\n\r\n.sidenav__drawer__menu__title {\r\n    opacity: var(--opacity-text-sidenav-drawer);\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    width: calc(100% - 40px);\r\n    overflow: hidden;\r\n    transition: opacity .25s ease;\r\n    padding-left: 6px;\r\n}\r\n\r\n/* ------------------------------------------------------------------------------------ */\r\n/* ------------------------------------------------------------------------------------ */\r\n/* ------------------------------------------------------------------------------------ */\r\n.sidenav__drawer__nav {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 8px 8px;\r\n    overflow: hidden;\r\n    overflow: hidden;\r\n    overflow-y: auto;\r\n    --width-track-scroll: 6px;\r\n}\r\n\r\n.sidenav__drawer__nav>.sidenav__drawer__nav__group:first-of-type .sidenav__drawer__nav__group__label {\r\n    margin-top: 0 !important;\r\n    border: none !important;\r\n    padding-top: 0 !important;\r\n}\r\n\r\n.sidenav__drawer__nav__group__label {\r\n    margin: 16px 16px 16px 16px;\r\n    border-top: 1px solid var(--color-outline-variant);\r\n    padding-top: 16px;\r\n    opacity: var(--opacity-text-sidenav-drawer);\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    width: calc(100% - 32px);\r\n    overflow: hidden;\r\n    transition: opacity .25s ease;\r\n}\r\n\r\n.sidenav__drawer__nav__group__link {\r\n    height: 56px;\r\n    position: relative;\r\n    transition-property: color;\r\n    transition-duration: .25s;\r\n    transition-timing-function: ease;\r\n}\r\n\r\n.sidenav__drawer__nav__group__link a {\r\n    --text-color-mdc-button: var(--color-on-surface-variant);\r\n    position: relative;\r\n    justify-content: flex-start;\r\n    gap: 20px;\r\n    padding: 0 21px;\r\n    width: 100%;\r\n    height: 100%;\r\n    transition-property: background, height, color;\r\n    transition-duration: .25s;\r\n    transition-timing-function: ease;\r\n    text-decoration: none;\r\n    overflow: hidden;\r\n    z-index: 1;\r\n    box-shadow: none !important;\r\n}\r\n.sidenav__drawer__nav__group__link a .material-icons {\r\n    --size-material-symbol-icon: 24px;\r\n}\r\n.sidenav__drawer__nav__group__link a:hover .material-icons {\r\n    --grad-material-symbol-icon: 200;\r\n}\r\n\r\n\r\n.sidenav__drawer__nav__group__link a.router-link-active {\r\n    --bg-mdc-button: var(--color-secondary-container) !important;\r\n    --text-color-mdc-button: var(--color-on-secondary-container);\r\n    --fill-material-symbol-icon: 1;\r\n}\r\n\r\n.sidenav__drawer__nav__group__link__auxiliar-text {\r\n    position: absolute;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 8px;\r\n    opacity: 0;\r\n    width: 100%;\r\n    text-align: center;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    visibility: hidden;\r\n    color: var(--color-on-surface-variant);\r\n    transition-property: opacity, color;\r\n    transition-duration: .25s;\r\n    transition-timing-function: ease;\r\n}\r\n\r\n.sidenav__drawer:not(.drawer-opened) .sidenav__drawer__nav {\r\n    --width-track-scroll: 0px;\r\n}\r\n\r\n.sidenav__drawer:not(.drawer-opened) .sidenav__drawer__nav__group__link a {\r\n    height: 30px;\r\n}\r\n\r\n.sidenav__drawer:not(.drawer-opened) .sidenav__drawer__nav__group__link__auxiliar-text {\r\n    opacity: 1;\r\n    visibility: visible;\r\n}\r\n\r\n\r\n\r\n.sidenav__content {\r\n    height: 100%;\r\n    overflow: hidden;\r\n    margin-left: calc(var(--left-sidenav-drawer, 0px) + var(--width-sidenav-drawer));\r\n    display: grid;\r\n    grid-template-rows: auto 1fr;\r\n    background: rgba(var(--rgb-primary), 0.05);\r\n    transition-property: background, margin-left;\r\n    transition-duration: .25s;\r\n    transition-timing-function: ease;\r\n}\r\n\r\n.sidenav__content__header {\r\n    padding: 6px var(--padding-x-sidenav-content);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n}\r\n\r\n.sidenav__content__header__logo {\r\n    height: 48px;\r\n    display: flex;\r\n    align-items: center;\r\n    overflow: hidden;\r\n    margin: 0 -2px;\r\n}\r\n\r\n.sidenav__content__header__logo img {\r\n    height: 48px;\r\n}\r\n\r\n.sidenav__content__header__search {\r\n    width: 460px;\r\n    height: 48px;\r\n    position: relative;\r\n}\r\n\r\n.sidenav__content__header__search__icon {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 20px;\r\n    transform: translateY(-50%);\r\n    color: var(--color-on-surface-variant);\r\n    pointer-events: none;\r\n    user-select: none;\r\n}\r\n\r\n.sidenav__content__header__search__input {\r\n    display: block;\r\n    width: 100%;\r\n    height: 100%;\r\n    border-radius: var(--corner-mdc-button, 40px);\r\n    background: var(--color-surface-variant);\r\n    position: relative;\r\n    padding: 0px 148px 0px 52px;\r\n    transition: background .25s ease;\r\n}\r\n\r\n.sidenav__content__header__search__input:focus {\r\n    background: var(--color-surface);\r\n    caret-color: var(--color-primary);\r\n}\r\n\r\n.sidenav__content__header__search__input:focus~.sidenav__content__header__search__icon {\r\n    color: var(--color-primary);\r\n    --fill-material-symbol-icon: 1;\r\n}\r\n\r\n.sidenav__content__header__search__microphone {\r\n    position: absolute !important;\r\n    right: 8px;\r\n    top: 4px;\r\n}\r\n\r\n.sidenav__content__header__search__microphone.speaking {\r\n    --fill-material-symbol-icon: 1;\r\n    color: var(--color-primary);\r\n}\r\n\r\n// .sidenav__content__header__search__select {\r\n//     position: absolute;\r\n//     right: 0;\r\n//     top: 0;\r\n//     width: 112px !important;\r\n//     border-left: 1px solid var(--color-outline);\r\n// }\r\n\r\n// .sidenav__content__header__search__select .mat-mdc-select-trigger {\r\n//     line-height: 48px;\r\n//     height: 48px;\r\n//     padding: 0 20px 0 16px;\r\n// }\r\n\r\n.sidenav__content__header__nav {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 4px;\r\n}\r\n\r\n.sidenav__content__main {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden;\r\n    overflow-y: auto;\r\n    padding: 8px var(--padding-x-sidenav-content);\r\n}\r\n\r\n\r\n.sidenav__lateral__panel {\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    z-index: 100;\r\n    overflow: hidden;\r\n    visibility: hidden;\r\n    pointer-events: none;\r\n    transition-property: visibility;\r\n    transition-duration: 0.25s;\r\n    transition-timing-function: var(--transition-timing-function-drawer);\r\n    width: calc((var(--margin-left-content-drawer, 0px) + 8px) + 100%);\r\n    margin-left: calc((var(--margin-left-content-drawer, 0px) + 8px) * -1);\r\n}\r\n\r\n.sidenav__lateral__panel__backdrop {\r\n    height: 100%;\r\n    visibility: hidden;\r\n    background: rgba(var(--rgb-on-surface), 0.12);\r\n}\r\n\r\n.sidenav__lateral__panel.expanded .sidenav__lateral__panel__content {\r\n    width: 66%;\r\n}\r\n\r\n.sidenav__lateral__panel__content {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    width: 30%;\r\n    min-width: 400px;\r\n    padding: 0;\r\n    background: rgba(var(--rgb-surface), 1);\r\n    backdrop-filter: blur(4px);\r\n    box-shadow: var(--box-shadow-level-2);\r\n    border-radius: 8px 0 0 8px;\r\n    transition-property: transform, width;\r\n    transition-duration: 0.25s;\r\n    transition-timing-function: var(--transition-timing-function-drawer);\r\n    transform: translateX(400px);\r\n    container-type: inline-size;\r\n}\r\n\r\n.sidenav__lateral__panel__content__options {\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    display: grid;\r\n    gap: 4px;\r\n    transform: translateX(-100%);\r\n    padding: 4px;\r\n}\r\n\r\n.sidenav__lateral__panel__content__options>button:not(.filled-icon-button) {\r\n    --bg-icon-button: rgba(var(--rgb-surface), 1);\r\n}\r\n\r\n.sidenav__lateral__panel__content__options>button {\r\n    box-shadow: var(--box-shadow-level-1) !important;\r\n}\r\n\r\n\r\n.sidenav__lateral__panel__content__projection {\r\n    height: 100%;\r\n    overflow: auto;\r\n    overflow: hidden;\r\n    position: relative;\r\n    background: rgb(var(--rgb-background));\r\n    border-radius: 8px 0 0 8px;\r\n}\r\n\r\n.sidenav__lateral__panel.show,\r\n.sidenav__lateral__panel.show .sidenav__lateral__panel__backdrop {\r\n    visibility: visible;\r\n    pointer-events: all;\r\n}\r\n\r\n.sidenav__lateral__panel.show .sidenav__lateral__panel__content {\r\n    transform: translateX(0px);\r\n}",
                    "styleUrl": "./sidenav.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "@if (user(); as user) {\r\n<div class=\"sidenav {{ sidenavDrawerMode() }}\">\r\n\r\n    <div class=\"sidenav__drawer\" [ngClass]=\"{ 'drawer-opened': showDrawer() }\">\r\n        <div class=\"sidenav__drawer__menu\">\r\n            <div class=\"sidenav__drawer__menu__title title-medium\">\r\n                Panel de control\r\n            </div>\r\n            <button class=\"sidenav__drawer__menu__button icon-button\" (click)=\"showDrawer.set(!showDrawer())\">\r\n                <span class=\"material-icons\">{{showDrawer() ? 'menu_open' : 'menu'}}</span>\r\n            </button>\r\n        </div>\r\n\r\n        <div class=\"sidenav__drawer__nav custom-scroll\">\r\n            @for (groupLink of groupDrawerLinks(); track groupLink) {\r\n            <ng-template [ngTemplateOutlet]=\"groupLinks\" [ngTemplateOutletContext]=\"{$implicit: groupLink}\" />\r\n            }\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"sidenav__backdrop\" (click)=\"showDrawer.set(false)\" [class.visible]=\"showDrawer()\"></div>\r\n\r\n    <div class=\"sidenav__content\">\r\n        <header class=\"sidenav__content__header\">\r\n\r\n            <a class=\"sidenav__content__header__logo\">\r\n                <img src=\"/assets/images/angular.png\" alt=\"\">\r\n            </a>\r\n\r\n            <div class=\"sidenav__content__header__search\">\r\n                <input #inputSearch class=\"sidenav__content__header__search__input body-medium\"\r\n                    (keyup.enter)=\"enterSearch()\" [formControl]=\"searchCtrl\" type=\"text\" placeholder=\"Buscar...\">\r\n                <span class=\"sidenav__content__header__search__icon material-icons icon-small\">search</span>\r\n                <button class=\"sidenav__content__header__search__microphone icon-button\" matTooltip=\"Activar microfono\"\r\n                    (click)=\"requestAccessMicrophone()\">\r\n                    <span class=\"material-icons\">\r\n                        {{ speakingMicrophone() ? 'mic' : 'mic_off' }}\r\n                    </span>\r\n                </button>\r\n                <!-- <mat-select [formControl]=\"optionsSearchCtrl\" class=\"sidenav__content__header__search__select\" value=\"\" placeholder=\"Modo de busqueda\">\r\n                    <mat-option value=\"\">Todos</mat-option>\r\n                    <mat-option value=\"menu\">Menu</mat-option>\r\n                    <mat-option value=\"list\">Lista</mat-option>\r\n                    \r\n                </mat-select> -->\r\n\r\n            </div>\r\n\r\n            <nav class=\"sidenav__content__header__nav\">\r\n                <app-notifications-menu />\r\n                <app-apps-menu />\r\n                <app-profile-menu [user]=\"user\" />\r\n            </nav>\r\n\r\n        </header>\r\n        <main class=\"sidenav__content__main\">\r\n            <router-outlet />\r\n        </main>\r\n    </div>\r\n\r\n    <div class=\"sidenav__lateral__panel\"\r\n        [ngClass]=\"{'show': showLateralPanel(), 'expanded': lateralPanelType() == 'maximum'}\">\r\n        <div class=\"sidenav__lateral__panel__backdrop\" (click)=\"location.back()\"></div>\r\n        <div class=\"sidenav__lateral__panel__content\">\r\n            <div class=\"sidenav__lateral__panel__content__options\">\r\n                <button class=\"tonal-icon-button\" [ngClass]=\"{'filled-icon-button': lateralPanelType() == 'maximum'}\"\r\n                    matTooltip=\"{{lateralPanelType() == 'maximum' ? 'Contraer panel' : 'Expandir panel'}}\"\r\n                    (click)=\"lateralPanelType() == 'minimum' ? lateralPanelType.set('maximum') : lateralPanelType.set('minimum')\">\r\n                    <span class=\"material-icons\">compare</span>\r\n                </button>\r\n            </div>\r\n            <div class=\"sidenav__lateral__panel__content__projection\">\r\n                <router-outlet name=\"route-lateral\" style=\"display: none;\"\r\n                    (activate)=\"setShowLateralPanel(true, $event)\" (deactivate)=\"setShowLateralPanel(false)\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</div>\r\n}\r\n\r\n<ng-template #groupLinks let-groupLink>\r\n    <div class=\"sidenav__drawer__nav__group\">\r\n        @if (groupLink.label; as label) {\r\n        <div class=\"sidenav__drawer__nav__group__label label-medium\">\r\n            <span [title]=\"label\">{{label}}</span>\r\n        </div>\r\n        }\r\n        @for (link of groupLink.links; track link) {\r\n        <ng-template [ngTemplateOutlet]=\"templateLink\" [ngTemplateOutletContext]=\"{$implicit: link}\" />\r\n        }\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #templateLink let-link>\r\n    <div class=\"sidenav__drawer__nav__group__link\">\r\n        <a class=\"text-button\" [title]=\"link.label\" [routerLink]=\"[link.route]\" routerLinkActive=\"router-link-active\"\r\n            [routerLinkActiveOptions]=\"{exact: link.exact ?? false}\">\r\n            <span class=\"material-icons\">{{link.icon}}</span>\r\n            <span class=\"label-large\">{{link.label}}</span>\r\n        </a>\r\n        <div class=\"sidenav__drawer__nav__group__link__auxiliar-text label-small\" [title]=\"link.label\">\r\n            {{link.label}}\r\n        </div>\r\n    </div>\r\n</ng-template>"
        },
        {
            "name": "SnackbarTemplateComponent",
            "id": "component-SnackbarTemplateComponent-ee4bf4b1dee7ab3cae791dde76c0b93fc70d320f9ca94ad7589515d833d74eddd5177423b8a24d64eadaea501c9011e3a5061fa43bca91d18e7e279e60c56ce1",
            "file": "src/app/shared/components/snackbar-template/snackbar-template.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-snackbar-template",
            "styleUrls": [
                "./snackbar-template.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snackbar-template.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogData",
                    "defaultValue": "inject(MAT_SNACK_BAR_DATA)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataSnackbar",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "icon",
                    "defaultValue": "signal(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<string | null>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "message",
                    "defaultValue": "signal('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<string>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "snackBarRef",
                    "defaultValue": "inject(MatSnackBarRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "executePromise",
                    "args": [
                        {
                            "name": "configuration",
                            "type": "ToastDataPromise",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "configuration",
                            "type": "ToastDataPromise",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatSnackBarModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, WritableSignal, inject, signal } from '@angular/core';\r\nimport { MatSnackBarModule, MatSnackBarRef, MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\r\nimport { ToastDataPromise, ToastDataSimple } from '@interface/toast';\r\n\r\ninterface DataSnackbar {\r\n  simple?: ToastDataSimple;\r\n  promise?: ToastDataPromise;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-snackbar-template',\r\n  templateUrl: './snackbar-template.component.html',\r\n  styleUrls: ['./snackbar-template.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, MatSnackBarModule]\r\n})\r\nexport class SnackbarTemplateComponent {\r\n  public snackBarRef = inject(MatSnackBarRef);\r\n  public dialogData: DataSnackbar = inject(MAT_SNACK_BAR_DATA);\r\n\r\n  public message: WritableSignal<string> = signal('');\r\n  public icon: WritableSignal<string|null> = signal(null);\r\n  public loading: WritableSignal<boolean> = signal(false);\r\n\r\n  ngOnInit(): void {\r\n    if(this.dialogData.simple) {\r\n      this.message.set(this.dialogData.simple.message);\r\n      this.icon.set(this.dialogData.simple.icon ?? null);\r\n    } else if(this.dialogData.promise) {\r\n      this.executePromise(this.dialogData.promise)\r\n    }\r\n  }\r\n\r\n  private async executePromise(configuration: ToastDataPromise) {\r\n    const {promise, success, loading} = configuration;\r\n    this.message.set(loading instanceof Object ? loading.message : loading);\r\n    this.icon.set(loading instanceof Object ? loading.icon : 'rotate_right');\r\n    try {\r\n      this.loading.set(true);\r\n      const data = await promise;\r\n\r\n      let message = 'Completado';\r\n      let icon = 'done';\r\n\r\n      if(success instanceof Function) {\r\n        message = await success(data, this.snackBarRef, this.message());\r\n      } else if (success instanceof Object) {\r\n        message = success.message;\r\n        icon = success.icon;\r\n      } else {\r\n        message = success;\r\n      }\r\n\r\n      this.message.set(message);\r\n      this.icon.set(icon);\r\n\r\n      this.loading.set(false);\r\n\r\n      setTimeout(() => this.snackBarRef.dismiss(), 10000);\r\n\r\n    } catch(exception) {\r\n\r\n      const { error } = configuration;\r\n      let message = 'Completado';\r\n      let icon = 'error';\r\n\r\n      if(error instanceof Function) {\r\n        message = await error(exception, this.snackBarRef, this.message());\r\n      } else if (error instanceof Object) {\r\n        message = error.message;\r\n        icon = error.icon;\r\n      } else {\r\n        message = error;\r\n      }\r\n\r\n      this.message.set(message);\r\n      this.icon.set(icon);\r\n\r\n      this.loading.set(false);\r\n\r\n      setTimeout(() => this.snackBarRef.dismiss(), 10000);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    display: flex;\r\n    gap: 8px;\r\n    justify-content: space-between;\r\n    [matSnackBarActions] {\r\n        display: flex;\r\n        // gap: 8px;\r\n        margin-right: -8px;\r\n        margin-top: -8px;\r\n        margin-bottom: -8px;\r\n    }\r\n}\r\n\r\n.snackbar__content {\r\n    display: flex;\r\n    gap: 8px;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n}\r\n\r\n.snackbar__icon {\r\n    width: 24px;\r\n    height: 24px;\r\n}\r\n\r\n.snackbar__icon.loading {\r\n    animation: spin 1s linear infinite;\r\n    transform-origin: center center;\r\n}\r\n\r\n.snackbar__text {\r\n    flex-grow: 1;\r\n    display: grid;\r\n    overflow: hidden;\r\n}\r\n\r\n@keyframes spin {\r\n    0% {\r\n        opacity: .75;\r\n        transform: rotate(0deg);\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n        transform: rotate(360deg);\r\n    }\r\n}",
                    "styleUrl": "./snackbar-template.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<span matSnackBarLabel>\r\n    <div class=\"snackbar__content\">\r\n        <div class=\"snackbar__icon\" [ngClass]=\"{loading: loading()}\" *ngIf=\"icon() as value\">\r\n            <span class=\"material-icons\">{{ value }}</span>\r\n        </div>\r\n        <div class=\"snackbar__text\">\r\n            <span class=\"snackbar__title label-large\">{{ message() }}</span>\r\n        </div>\r\n    </div>\r\n</span>\r\n<span matSnackBarActions>\r\n    <ng-container *ngIf=\"dialogData.simple?.action as action\">\r\n        <button class=\"inverted-text-button\" matSnackBarAction (click)=\"snackBarRef.dismissWithAction()\">\r\n            <span class=\"\">{{ action.text }}</span>\r\n        </button>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"dialogData.simple\">\r\n        <button class=\"inverted-icon-button\" matSnackBarAction (click)=\"snackBarRef.dismiss()\">\r\n            <span class=\"material-icons\">close</span>\r\n        </button>\r\n    </ng-container>\r\n</span>"
        },
        {
            "name": "SpinnerDefaultComponent",
            "id": "component-SpinnerDefaultComponent-a6f6dd4b6523911598b021f3173fb4e2761581613d23ee60b94a7869f96a1f8c02a23f0f812778585f8a9e7e93cbca60adca343d471a3fcc28965a783cba2900",
            "file": "src/app/shared/components/spinner-default/spinner-default.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-spinner-default",
            "styleUrls": [
                "./spinner-default.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./spinner-default.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatProgressSpinnerModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\r\n\r\n@Component({\r\n  selector: 'app-spinner-default',\r\n  templateUrl: './spinner-default.component.html',\r\n  styleUrls: ['./spinner-default.component.scss'],\r\n  imports: [MatProgressSpinnerModule],\r\n  standalone: true,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SpinnerDefaultComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    position: relative;\r\n    display: flex !important;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 4px;\r\n    overflow: hidden;\r\n}",
                    "styleUrl": "./spinner-default.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-progress-spinner mode=\"indeterminate\" [diameter]=\"44\" [strokeWidth]=\"4\" class=\"!overflow-visible\"></mat-progress-spinner>"
        },
        {
            "name": "TaxesListCardComponent",
            "id": "component-TaxesListCardComponent-25be004db75f4536e885409ef457d84bc1fe9bb25180092c0782f1986849b20fe86b760675a0a129e2e7a48a5af70aae015396c864907c10057c62d9748e007a",
            "file": "src/app/modules/configuration/taxes/components/taxes-list-card/taxes-list-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-taxes-list-card",
            "styleUrls": [
                "./taxes-list-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./taxes-list-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Taxe",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "submitForm",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter<Taxe>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup ({\r\n    value : new FormControl('', Validators.required),\r\n    description : new FormControl('')\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_submitForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "cancelEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "DatePipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DatePipe } from '@angular/common';\r\nimport { Component, EventEmitter, Input, OnInit, Output, SimpleChanges } from '@angular/core';\r\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { Taxe } from '@interface/taxe';\r\n\r\n@Component({\r\n  selector: 'app-taxes-list-card',\r\n  templateUrl: './taxes-list-card.component.html',\r\n  standalone: true,\r\n  imports: [MatFormFieldModule, ReactiveFormsModule, DatePipe],\r\n  styleUrls: ['./taxes-list-card.component.scss']\r\n})\r\nexport class TaxesListCardComponent implements OnInit {\r\n\r\n  @Input() item!: Taxe;\r\n  @Output() submitForm : EventEmitter<Taxe> = new EventEmitter();\r\n\r\n  public form : FormGroup = new FormGroup ({\r\n    value : new FormControl('', Validators.required),\r\n    description : new FormControl('')\r\n  })\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    this.form.patchValue(this.item)\r\n    this.form.disable();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges){\r\n    this.form.patchValue(this.item)\r\n    this.form.disable()\r\n\r\n  }\r\n\r\n  public cancelEdit(){\r\n    this.form.patchValue(this.item)\r\n    this.form.disable();\r\n  }\r\n\r\n  public _submitForm(){\r\n    if(this.form.valid){\r\n      this.submitForm.emit(this.form.value)\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container-impuestos{\r\n  grid-template-columns: 1fr 1fr 1fr !important;\r\n}\r\n",
                    "styleUrl": "./taxes-list-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<form [formGroup]=\"form\" (submit)=\"_submitForm()\" class=\"grid\">\r\n    <div class=\"border border-solid border-primary p-4 rounded grid gap-2\">\r\n        <h6 class=\"text-center\">{{item.name}}</h6>\r\n\r\n        <mat-form-field>\r\n            <mat-label>Valor</mat-label>\r\n            <input matInput type=\"number\" formControlName=\"value\" placeholder=\"Valor\">\r\n            <mat-error>Campo requerido</mat-error>\r\n        </mat-form-field>\r\n\r\n        <div class=\"text-xs text-on-surface-variant mb-2\">Última actualización: {{ item.updated_at ?? item.created_at | date: 'short' }}</div>\r\n        @if(form.disabled) {\r\n            <button type=\"button\" class=\"outlined-button\" color=\"primary\" (click)=\"form.enable()\">\r\n                Editar\r\n            </button>\r\n        }\r\n        @if(form.enabled) {\r\n            <div class=\"grid grid-cols-2 gap-2\">\r\n                <button type=\"button\" class=\"outlined-button\" color=\"primary\" (click)=\"cancelEdit()\">\r\n                    Cancelar\r\n                </button>\r\n                <button type=\"submit\" class=\"filled-button\" color=\"primary\">\r\n                    Guardar\r\n                </button>\r\n            </div>\r\n        }\r\n    </div>\r\n</form>\r\n"
        },
        {
            "name": "TaxesListComponent",
            "id": "component-TaxesListComponent-a2496d923c5c267f226ca096ed6af946e4abfcfb26044193fe970dca329c79db92e2d8019c8e8660c663721a2b148dab676e59bd16a726c1d7493bd83bb434e8",
            "file": "src/app/modules/configuration/taxes/components/taxes-list/taxes-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-taxes-list",
            "styleUrls": [
                "./taxes-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./taxes-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Taxe[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "fetch",
                    "defaultValue": "inject(FetchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "total_data",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateItem",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "Taxe",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "Taxe",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TaxesListCardComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, inject } from '@angular/core';\r\nimport { getTaxe } from '@helper/index';\r\nimport { Taxe } from '@interface/taxe';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { TaxesListCardComponent } from '../taxes-list-card/taxes-list-card.component';\r\n\r\n@Component({\r\n    selector: 'app-taxes-list',\r\n    templateUrl: './taxes-list.component.html',\r\n    standalone: true,\r\n    imports: [TaxesListCardComponent],\r\n    styleUrls: ['./taxes-list.component.scss'],\r\n})\r\nexport class TaxesListComponent implements OnInit {\r\n\r\n    public data: Taxe[] = [];\r\n    public total_data: number = 0;\r\n    public loading: boolean = false;\r\n    private fetch = inject(FetchService);\r\n\r\n    ngOnInit(): void {\r\n        this.getData();\r\n    }\r\n\r\n\r\n    private async getData() {\r\n        this.data = await this.fetch.get('taxe');\r\n\r\n    }\r\n\r\n    public async updateItem(index: number, data: Taxe) {\r\n        const response: any = await this.fetch.put('taxe/' + this.data[index].id, data);\r\n        if (!response) return;\r\n        this.data[index] = response;\r\n\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./taxes-list.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"bg-surface p-6 rounded\">\r\n  <!-- -------------------------------------- -->\r\n  <!-- -------------------------------------- -->\r\n  <div class=\"flex justify-between items-end mb-4\">\r\n    <h5 class=\"leading-none\">Impuestos</h5>\r\n    <div class=\"flex\">\r\n      <!-- <a routerLink=\"../create\" mat-stroked-button class=\"h-9\">\r\n        <span class=\"material-icons\">add</span>\r\n        <span>Crear nuevo</span>\r\n      </a> -->\r\n    </div>\r\n  </div>\r\n  <!-- -------------------------------------- -->\r\n  <!-- -------------------------------------- -->\r\n  <div class=\"relative grid grid-cols-3 gap-4\">\r\n    <app-taxes-list-card *ngFor=\"let item of data; let i=index\" [item]=\"item\" (submitForm)=\"updateItem(i, $event)\"></app-taxes-list-card>\r\n  </div>\r\n  <!-- -------------------------------------- -->\r\n  <!-- -------------------------------------- -->\r\n</div>\r\n"
        },
        {
            "name": "UserCreatePageComponent",
            "id": "component-UserCreatePageComponent-f5591ccd89ea648e8752d77c544cec665d79db61a05333d7de4f004e77185e029f61a9736cc065795d5bc55337cff1728c3de65b9d85fc83eb1b0d45278e7b20",
            "file": "src/app/modules/organization/users/pages/user-create-page/user-create-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-create-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-create-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n    titleModule: 'usuario',\r\n    type: 'create',\r\n    formGroup: userFormGroup(),\r\n    fields: [...DEFAULT_DISPLAY_FIELDS_FORM_USER],\r\n    server: { url: 'user' },\r\n    loading: false,\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemFormConfiguration, ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\nimport { DEFAULT_DISPLAY_FIELDS_FORM_USER, userFormGroup } from '../../helpers';\r\n\r\n@Component({\r\n  selector: 'app-user-create-page',\r\n  standalone: true,\r\n  imports: [ItemFormTemplateComponent],\r\n  templateUrl: './user-create-page.component.html',\r\n  styleUrl: './user-create-page.component.scss'\r\n})\r\nexport class UserCreatePageComponent {\r\n  public configuration: ItemFormConfiguration = {\r\n    titleModule: 'usuario',\r\n    type: 'create',\r\n    formGroup: userFormGroup(),\r\n    fields: [...DEFAULT_DISPLAY_FIELDS_FORM_USER],\r\n    server: { url: 'user' },\r\n    loading: false,\r\n  }\r\n}\r\n",
            "styleUrl": "./user-create-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "UserDetailPageComponent",
            "id": "component-UserDetailPageComponent-a370e12543c0b397670f4b227bf6dcceda8d4b39a59322895fabd8c32149f0bc06610720544a8fcd3ef47f97d58a288922b8979ce0d8e0b42df8e01d9cfaa835",
            "file": "src/app/modules/organization/users/pages/user-detail-page/user-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-detail-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-detail-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        title: 'Detalles',\r\n        subtitle: false,\r\n        server: { url: 'user' },\r\n        backButton: false,\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'T. Documento',\r\n                        displayValueFn: (item) => item.document_type.toUpperCase()\r\n                    },\r\n                    {\r\n                        title: 'N° Documento',\r\n                        displayValueFn: (item) => item.document_number\r\n                    },\r\n                    {\r\n                        title: 'Nombre',\r\n                        displayValueFn: (item) => item.name\r\n                    },\r\n                    {\r\n                        title: 'Rol',\r\n                        displayValueFn: (item) => item.role\r\n                    },\r\n                    {\r\n                        title: 'Fecha de nacimiento',\r\n                        displayValueFn: (item) => item.birth_date,\r\n                        type: 'date',\r\n                        dateFormat: 'dd/MM/yyyy'\r\n                    },\r\n                    {\r\n                        title: 'Dirección',\r\n                        displayValueFn: (item) => item.address\r\n                    },\r\n                    {\r\n                        title: 'Teléfono',\r\n                        displayValueFn: (item) => item.phone,\r\n                        type: 'phone'\r\n                    },\r\n                    {\r\n                        title: 'Email',\r\n                        displayValueFn: (item) => item.email,\r\n                        type: 'email',\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDetailConfiguration<User>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemDetailTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemDetailTemplateComponent, registerDataGroupDetail } from '@component/item-detail-template/item-detail-template.component';\r\nimport { ItemDetailConfiguration } from '@component/item-detail-template/item-detail-template.component';\r\nimport { User } from '@interface/user';\r\n\r\n@Component({\r\n  selector: 'app-user-detail-page',\r\n  standalone: true,\r\n  imports: [ItemDetailTemplateComponent],\r\n  templateUrl: './user-detail-page.component.html',\r\n  styleUrl: './user-detail-page.component.scss'\r\n})\r\nexport class UserDetailPageComponent {\r\n    public configuration: ItemDetailConfiguration<User> = {\r\n        title: 'Detalles',\r\n        subtitle: false,\r\n        server: { url: 'user' },\r\n        backButton: false,\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'T. Documento',\r\n                        displayValueFn: (item) => item.document_type.toUpperCase()\r\n                    },\r\n                    {\r\n                        title: 'N° Documento',\r\n                        displayValueFn: (item) => item.document_number\r\n                    },\r\n                    {\r\n                        title: 'Nombre',\r\n                        displayValueFn: (item) => item.name\r\n                    },\r\n                    {\r\n                        title: 'Rol',\r\n                        displayValueFn: (item) => item.role\r\n                    },\r\n                    {\r\n                        title: 'Fecha de nacimiento',\r\n                        displayValueFn: (item) => item.birth_date,\r\n                        type: 'date',\r\n                        dateFormat: 'dd/MM/yyyy'\r\n                    },\r\n                    {\r\n                        title: 'Dirección',\r\n                        displayValueFn: (item) => item.address\r\n                    },\r\n                    {\r\n                        title: 'Teléfono',\r\n                        displayValueFn: (item) => item.phone,\r\n                        type: 'phone'\r\n                    },\r\n                    {\r\n                        title: 'Email',\r\n                        displayValueFn: (item) => item.email,\r\n                        type: 'email',\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }\r\n}\r\n",
            "styleUrl": "./user-detail-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-detail-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "UserEditPageComponent",
            "id": "component-UserEditPageComponent-3382911a44ed03a684de87de952fa6f0fb89e644a31fd45478448589a7fe15f8dcce4c48d38113f74cff158a60a5f6769d3bfbd15e394ebb3ab3dce77896833c",
            "file": "src/app/modules/organization/users/pages/user-edit-page/user-edit-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-edit-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-edit-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n    titleModule: 'usuario',\r\n    type: 'create',\r\n    formGroup: userFormGroup(),\r\n    fields: [...DEFAULT_DISPLAY_FIELDS_FORM_USER],\r\n    server: { url: 'user' },\r\n    loading: false,\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "UserCreatePageComponent"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { UserCreatePageComponent } from '../user-create-page/user-create-page.component';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\n\r\n@Component({\r\n  selector: 'app-user-edit-page',\r\n  standalone: true,\r\n  imports: [ItemFormTemplateComponent],\r\n  templateUrl: './user-edit-page.component.html',\r\n  styleUrl: './user-edit-page.component.scss'\r\n})\r\nexport class UserEditPageComponent extends UserCreatePageComponent{\r\n    private activatedRoute = inject(ActivatedRoute);\r\n\r\n    constructor(\r\n    ) {\r\n        super();\r\n        this.configuration.type = 'update';\r\n        this.configuration.hiddeFields = true;\r\n    }\r\n}\r\n",
            "styleUrl": "./user-edit-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "extends": [
                "UserCreatePageComponent"
            ],
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "UserListPageComponent",
            "id": "component-UserListPageComponent-0a528d39ddf55d0a58d0ec700cc076036dfeb23cdfdff29530572612da4d3e693d5a81c111c730fe2cf88c12dae508108b24ee94d9113528b9c0c6a065c0414b",
            "file": "src/app/modules/organization/users/pages/user-list-page/user-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-list-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configList",
                    "defaultValue": "{\r\n        title: 'Usuarios',\r\n        server: {\r\n            url: 'user',\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Usuario / N° Documento',\r\n                sort: { key: 'name' },\r\n                routerLinkValue: { url: (item) => `../view/${item.id}` },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.name ? item.name : '--',\r\n                displayAdditionalValueFn: (item) => item?.document_number.length >= 11 ? 'RUC: ' + item?.document_number : item?.document_number.length == 8 ? 'DNI: ' + item?.document_number : 'OTRO: ' + item?.document_number,\r\n            }),\r\n            emailColumn({\r\n                title: 'Email',\r\n                sort: { key: 'email' },\r\n                gridColumn: 'auto',\r\n                displayValueFn: (item) => {\r\n                    console.log(item.email);\r\n                    return item.email;\r\n                },\r\n            }),\r\n            textColumn({\r\n                title: 'Rol',\r\n                sort: { key: 'role' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.role,\r\n            }),\r\n            phoneColumn({\r\n                title: 'Celular',\r\n                sort: { key: 'cellphone' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.cellphone,\r\n            }),\r\n            textColumn({\r\n                title: 'Dirección',\r\n                sort: { key: 'address' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.address,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n        // rows: {\r\n        //     selectable: {\r\n        //         actions: [\r\n        //             selectableActionButton({\r\n        //                 icon: 'delete',\r\n        //                 text: 'Eliminar',\r\n        //                 fn: (items) => console.log('Eliminar', items),\r\n        //             }),\r\n        //             selectableActionButton({\r\n        //                 icon: 'edit',\r\n        //                 text: 'Editar',\r\n        //                 fn: (items) => console.log('Editar', items),\r\n        //             }),\r\n        //         ]\r\n        //     }\r\n        // }\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<User>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, signal } from '@angular/core';\r\nimport { ItemListTemplateComponent, ItemListConfiguration, itemCreatedAtColumn, itemStatusColumn, itemUpdatedAtColumn, emailColumn, phoneColumn, textColumn, selectableActionButton } from '@component/item-list-template/item-list-template.component';\r\nimport { User } from '@interface/user';\r\n\r\n@Component({\r\n    selector: 'app-user-list-page',\r\n    standalone: true,\r\n    imports: [ItemListTemplateComponent],\r\n    templateUrl: './user-list-page.component.html',\r\n    styleUrl: './user-list-page.component.scss'\r\n})\r\nexport class UserListPageComponent {\r\n    public configList: ItemListConfiguration<User> = {\r\n        title: 'Usuarios',\r\n        server: {\r\n            url: 'user',\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Usuario / N° Documento',\r\n                sort: { key: 'name' },\r\n                routerLinkValue: { url: (item) => `../view/${item.id}` },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.name ? item.name : '--',\r\n                displayAdditionalValueFn: (item) => item?.document_number.length >= 11 ? 'RUC: ' + item?.document_number : item?.document_number.length == 8 ? 'DNI: ' + item?.document_number : 'OTRO: ' + item?.document_number,\r\n            }),\r\n            emailColumn({\r\n                title: 'Email',\r\n                sort: { key: 'email' },\r\n                gridColumn: 'auto',\r\n                displayValueFn: (item) => {\r\n                    console.log(item.email);\r\n                    return item.email;\r\n                },\r\n            }),\r\n            textColumn({\r\n                title: 'Rol',\r\n                sort: { key: 'role' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.role,\r\n            }),\r\n            phoneColumn({\r\n                title: 'Celular',\r\n                sort: { key: 'cellphone' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.cellphone,\r\n            }),\r\n            textColumn({\r\n                title: 'Dirección',\r\n                sort: { key: 'address' },\r\n                gridColumn: 'fit-content(120px)',\r\n                displayValueFn: (item) => item.address,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n        // rows: {\r\n        //     selectable: {\r\n        //         actions: [\r\n        //             selectableActionButton({\r\n        //                 icon: 'delete',\r\n        //                 text: 'Eliminar',\r\n        //                 fn: (items) => console.log('Eliminar', items),\r\n        //             }),\r\n        //             selectableActionButton({\r\n        //                 icon: 'edit',\r\n        //                 text: 'Editar',\r\n        //                 fn: (items) => console.log('Editar', items),\r\n        //             }),\r\n        //         ]\r\n        //     }\r\n        // }\r\n    }\r\n}\r\n",
            "styleUrl": "./user-list-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-list-template [configuration]=\"configList\"/>\r\n"
        },
        {
            "name": "UserViewPageComponent",
            "id": "component-UserViewPageComponent-7da64a5ade79204489cf61dcc5448588f898a0d2f60bf4323a1457f06d526f0b5dced08e2caba9fe3c8f7f1b21d6f87102ffd842e315bfac28ceabce6239f0fe",
            "file": "src/app/modules/organization/users/pages/user-view-page/user-view-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-view-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-view-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "defaultValue": "{\r\n        server: { url: 'user' },\r\n        titleModule: 'Usuario',\r\n        links: [\r\n            {\r\n                routerLink: './detail',\r\n                text: 'Detalle',\r\n            },\r\n        ]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemViewConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemViewTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemViewTemplateComponent, ItemViewConfiguration } from '@component/item-view-template/item-view-template.component';\r\n\r\n@Component({\r\n  selector: 'app-user-view-page',\r\n  standalone: true,\r\n  imports: [ItemViewTemplateComponent],\r\n  templateUrl: './user-view-page.component.html',\r\n  styleUrl: './user-view-page.component.scss'\r\n})\r\nexport class UserViewPageComponent {\r\n    public config: ItemViewConfiguration = {\r\n        server: { url: 'user' },\r\n        titleModule: 'Usuario',\r\n        links: [\r\n            {\r\n                routerLink: './detail',\r\n                text: 'Detalle',\r\n            },\r\n        ]\r\n    }\r\n}\r\n",
            "styleUrl": "./user-view-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-view-template [configuration]=\"config\"/>\r\n"
        },
        {
            "name": "VehicleCreatePageComponent",
            "id": "component-VehicleCreatePageComponent-e2be6f8c9f98837293a92d9a78d47216062b75c028e458907def8dce3ac7fe18e10416b8e9df036e03e627513be2b92951e2dd559067d0eaa2244967977b1095",
            "file": "src/app/modules/tracking/vehicles/pages/vehicle-create-page/vehicle-create-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vehicle-create-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./vehicle-create-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        type: 'create',\r\n        titleModule: 'vehículo',\r\n        formGroup: vehicleFormGroup(),\r\n        fields: DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE,\r\n        server: {url: 'vehicle'},\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemFormConfiguration, ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\nimport { DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE, vehicleFormGroup } from '../../helpers';\r\n\r\n@Component({\r\n  selector: 'app-vehicle-create-page',\r\n  standalone: true,\r\n  imports: [ItemFormTemplateComponent],\r\n  templateUrl: './vehicle-create-page.component.html',\r\n  styleUrl: './vehicle-create-page.component.scss'\r\n})\r\nexport class VehicleCreatePageComponent {\r\n    public configuration: ItemFormConfiguration = {\r\n        type: 'create',\r\n        titleModule: 'vehículo',\r\n        formGroup: vehicleFormGroup(),\r\n        fields: DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE,\r\n        server: {url: 'vehicle'},\r\n    };\r\n}\r\n",
            "styleUrl": "./vehicle-create-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "VehicleDetailPageComponent",
            "id": "component-VehicleDetailPageComponent-67e681041fbf02ca5a11ded69773370d57492d7edcae61be4d10674a0a6d73935ffdd1095fb1a767e989f9dff5bddf9fe966418e8793a1b28976e11659e29454",
            "file": "src/app/modules/tracking/vehicles/pages/vehicle-detail-page/vehicle-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vehicle-detail-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./vehicle-detail-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        title: 'Detalles',\r\n        server: { \r\n            url: 'vehicle',\r\n            queryParams: {\r\n                relations: 'client,vehicleType'\r\n            },\r\n        },\r\n        subtitle: false,\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'Cliente',\r\n                        displayValueFn: (item) => item.client?.name\r\n                    },\r\n                    {\r\n                        title: 'Tipo de vehículo',\r\n                        displayValueFn: (item) => item.vehicle_type?.name,\r\n                    },\r\n                    {\r\n                        title: 'Placa',\r\n                        displayValueFn: (item) => item.plate\r\n                    },\r\n                    {\r\n                        title: 'Color',\r\n                        displayValueFn: (item) => item.color\r\n                    },\r\n                    {\r\n                        title: 'Modelo',\r\n                        displayValueFn: (item) => item.model\r\n                    },\r\n                    {\r\n                        title: 'Año',\r\n                        displayValueFn: (item) => item.year\r\n                    },\r\n                    {\r\n                        title: 'Descripción',\r\n                        displayValueFn: (item) => item.description\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDetailConfiguration<Vehicle>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemDetailTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { ItemDetailTemplateComponent, registerDataGroupDetail } from '@component/item-detail-template/item-detail-template.component';\r\nimport { ItemDetailConfiguration } from '@component/item-detail-template/item-detail-template.component';\r\nimport { Vehicle } from '@interface/vehicle';\r\n\r\n@Component({\r\n  selector: 'app-vehicle-detail-page',\r\n  standalone: true,\r\n  imports: [ItemDetailTemplateComponent],\r\n  templateUrl: './vehicle-detail-page.component.html',\r\n  styleUrl: './vehicle-detail-page.component.scss'\r\n})\r\nexport class VehicleDetailPageComponent {\r\n    public configuration: ItemDetailConfiguration<Vehicle> = {\r\n        title: 'Detalles',\r\n        server: { \r\n            url: 'vehicle',\r\n            queryParams: {\r\n                relations: 'client,vehicleType'\r\n            },\r\n        },\r\n        subtitle: false,\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'Cliente',\r\n                        displayValueFn: (item) => item.client?.name\r\n                    },\r\n                    {\r\n                        title: 'Tipo de vehículo',\r\n                        displayValueFn: (item) => item.vehicle_type?.name,\r\n                    },\r\n                    {\r\n                        title: 'Placa',\r\n                        displayValueFn: (item) => item.plate\r\n                    },\r\n                    {\r\n                        title: 'Color',\r\n                        displayValueFn: (item) => item.color\r\n                    },\r\n                    {\r\n                        title: 'Modelo',\r\n                        displayValueFn: (item) => item.model\r\n                    },\r\n                    {\r\n                        title: 'Año',\r\n                        displayValueFn: (item) => item.year\r\n                    },\r\n                    {\r\n                        title: 'Descripción',\r\n                        displayValueFn: (item) => item.description\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }\r\n}\r\n",
            "styleUrl": "./vehicle-detail-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-detail-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "VehicleEditPageComponent",
            "id": "component-VehicleEditPageComponent-216404dd7e15b1da590da05f393a000f4245257a86e0584f073fa4dcbee4b18f35d6e78a753c939b06ab6d5bc7b5ec02421208368397ab6b61e91d56f743245b",
            "file": "src/app/modules/tracking/vehicles/pages/vehicle-edit-page/vehicle-edit-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vehicle-edit-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./vehicle-edit-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        type: 'create',\r\n        titleModule: 'vehículo',\r\n        formGroup: vehicleFormGroup(),\r\n        fields: DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE,\r\n        server: {url: 'vehicle'},\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "VehicleCreatePageComponent"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { VehicleCreatePageComponent } from '../vehicle-create-page/vehicle-create-page.component';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\n\r\n@Component({\r\n  selector: 'app-vehicle-edit-page',\r\n  standalone: true,\r\n  imports: [ItemFormTemplateComponent],\r\n  templateUrl: './vehicle-edit-page.component.html',\r\n  styleUrl: './vehicle-edit-page.component.scss'\r\n})\r\nexport class VehicleEditPageComponent extends VehicleCreatePageComponent {\r\n  private activatedRoute = inject(ActivatedRoute);\r\n\r\n  constructor(\r\n  ) {\r\n    super();\r\n    this.configuration.type = 'update';\r\n    this.configuration.server.itemUrl = 'vehicle';\r\n    this.configuration.server.itemQueryParams = { relations: 'client,vehicleType' };\r\n    this.configuration.itemId = this.activatedRoute.snapshot.paramMap.get('id')!;\r\n    this.configuration.hiddeFields = true;\r\n  }\r\n}\r\n",
            "styleUrl": "./vehicle-edit-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "extends": [
                "VehicleCreatePageComponent"
            ],
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "VehicleListPageComponent",
            "id": "component-VehicleListPageComponent-480bf11be7c6a41562f6325dab66eaba0235df554ea6e580741d63938fbff70097840203e959e07954668d466141be1c5096c305747406e02f684b2e4aba3a83",
            "file": "src/app/modules/tracking/vehicles/pages/vehicle-list-page/vehicle-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vehicle-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./vehicle-list-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configList",
                    "defaultValue": "{\r\n        title: 'Vehículos',\r\n        server: {\r\n            url: 'vehicle',\r\n            queryParams: { \r\n                relations: 'client,vehicleType,latestContractVehicle.contract'\r\n            },\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Placa / Tipo',\r\n                sort: { key: 'plate' },\r\n                routerLinkValue: { url: (item) => `../view/${item.id}` },\r\n                displayValueFn: (item) => `${item.plate} / ${item.vehicle_type?.name.toUpperCase()}`,\r\n                gridColumn: '1fr',\r\n            }),\r\n            textColumn({\r\n                title: 'Cliente',\r\n                gridColumn: 'fit-content(250px)',\r\n                displayValueFn: (item) => item?.client?.name ? item.client?.name : '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Contrato',\r\n                displayValueFn: (item) => item?.latest_contract_vehicle?.contract?.code,\r\n            }),\r\n            textColumn({\r\n                title: 'Color',\r\n                sort: { key: 'color' },\r\n                hidden: true,\r\n                displayValueFn: (item) => item.color ?? '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Marca',\r\n                sort: { key: 'brand' },\r\n                hidden: true,\r\n                displayValueFn: (item) => item.brand ?? '--',\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<Vehicle>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, signal } from '@angular/core';\r\nimport { ItemListTemplateComponent, ItemListConfiguration, itemCreatedAtColumn, itemStatusColumn, itemUpdatedAtColumn, textColumn } from '@component/item-list-template/item-list-template.component';\r\nimport { Vehicle } from '@interface/vehicle';\r\n\r\n@Component({\r\n  selector: 'app-vehicle-list-page',\r\n  standalone: true,\r\n  imports: [ItemListTemplateComponent],\r\n  templateUrl: './vehicle-list-page.component.html',\r\n  styleUrl: './vehicle-list-page.component.scss'\r\n})\r\nexport class VehicleListPageComponent {\r\n    public configList: ItemListConfiguration<Vehicle> = {\r\n        title: 'Vehículos',\r\n        server: {\r\n            url: 'vehicle',\r\n            queryParams: { \r\n                relations: 'client,vehicleType,latestContractVehicle.contract'\r\n            },\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Placa / Tipo',\r\n                sort: { key: 'plate' },\r\n                routerLinkValue: { url: (item) => `../view/${item.id}` },\r\n                displayValueFn: (item) => `${item.plate} / ${item.vehicle_type?.name.toUpperCase()}`,\r\n                gridColumn: '1fr',\r\n            }),\r\n            textColumn({\r\n                title: 'Cliente',\r\n                gridColumn: 'fit-content(250px)',\r\n                displayValueFn: (item) => item?.client?.name ? item.client?.name : '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Contrato',\r\n                displayValueFn: (item) => item?.latest_contract_vehicle?.contract?.code,\r\n            }),\r\n            textColumn({\r\n                title: 'Color',\r\n                sort: { key: 'color' },\r\n                hidden: true,\r\n                displayValueFn: (item) => item.color ?? '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Marca',\r\n                sort: { key: 'brand' },\r\n                hidden: true,\r\n                displayValueFn: (item) => item.brand ?? '--',\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }\r\n}\r\n",
            "styleUrl": "./vehicle-list-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-list-template [configuration]=\"configList\"/>\r\n"
        },
        {
            "name": "VehicleTypeCreatePageComponent",
            "id": "component-VehicleTypeCreatePageComponent-58f92c60b0800686c43173b51973bcc06a31f9fb57133b5e767f06d60790321260cec78bb7f3410d9aec8023627fe43df970466e26f2b27d1043438b22924765",
            "file": "src/app/modules/configuration/vehicle-types/pages/vehicle-type-create-page/vehicle-type-create-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vehicle-type-create-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./vehicle-type-create-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n    type: 'create',\r\n    titleModule: 'tipo de vehículo',\r\n    formGroup: vehicleTypeFormGroup(),\r\n    afterSaveFormFn: (item) => {\r\n      this.databaseStorage.updateDataLocal(NameModuleDatabase.VehicleTypes)\r\n    },\r\n    fields: DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE_TYPE,\r\n    server: { url: 'vehicle-type' },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration<VehicleType>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "databaseStorage",
                    "defaultValue": "inject(DatabaseStorageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { DatabaseStorageService, NameModuleDatabase } from '@service/database-storage.service';\r\nimport { DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE_TYPE, vehicleTypeFormGroup } from '../../helpers';\r\nimport { ItemFormConfiguration, ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\nimport { VehicleType } from '@interface/vehicleType';\r\n\r\n@Component({\r\n  selector: 'app-vehicle-type-create-page',\r\n  standalone: true,\r\n  imports: [ItemFormTemplateComponent],\r\n  templateUrl: './vehicle-type-create-page.component.html',\r\n  styleUrl: './vehicle-type-create-page.component.scss'\r\n})\r\nexport class VehicleTypeCreatePageComponent {\r\n  private databaseStorage = inject(DatabaseStorageService)\r\n  public configuration: ItemFormConfiguration<VehicleType> = {\r\n    type: 'create',\r\n    titleModule: 'tipo de vehículo',\r\n    formGroup: vehicleTypeFormGroup(),\r\n    afterSaveFormFn: (item) => {\r\n      this.databaseStorage.updateDataLocal(NameModuleDatabase.VehicleTypes)\r\n    },\r\n    fields: DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE_TYPE,\r\n    server: { url: 'vehicle-type' },\r\n  };\r\n}\r\n",
            "styleUrl": "./vehicle-type-create-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "VehicleTypeDetailPageComponent",
            "id": "component-VehicleTypeDetailPageComponent-dc8390224ec0864e6e45bb1d4798b547f2d32b8372bce032f9fb1b8c0b7d38d43614e42136bbea991f13281821676e30151908bc4704ec71ea7e462613c39b22",
            "file": "src/app/modules/configuration/vehicle-types/pages/vehicle-type-detail-page/vehicle-type-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vehicle-type-detail-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./vehicle-type-detail-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        title: 'Detalles',\r\n        server: { url: 'vehicle-type' },\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'Nombre',\r\n                        displayValueFn: (item) => item.name\r\n                    },\r\n                    {\r\n                        title: 'Descripción',\r\n                        displayValueFn: (item) => item.description\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDetailConfiguration<VehicleType>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemDetailTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemDetailTemplateComponent, registerDataGroupDetail } from '@component/item-detail-template/item-detail-template.component';\r\nimport { ItemDetailConfiguration } from '@component/item-detail-template/item-detail-template.component';\r\nimport { VehicleType } from '@interface/vehicleType';\r\n\r\n@Component({\r\n    selector: 'app-vehicle-type-detail-page',\r\n    standalone: true,\r\n    imports: [ItemDetailTemplateComponent],\r\n    templateUrl: './vehicle-type-detail-page.component.html',\r\n    styleUrl: './vehicle-type-detail-page.component.scss'\r\n})\r\nexport class VehicleTypeDetailPageComponent {\r\n    public configuration: ItemDetailConfiguration<VehicleType> = {\r\n        title: 'Detalles',\r\n        server: { url: 'vehicle-type' },\r\n        groups: [\r\n            {\r\n                title: 'Datos generales',\r\n                icon: 'account_circle',\r\n                details: [\r\n                    {\r\n                        title: 'Nombre',\r\n                        displayValueFn: (item) => item.name\r\n                    },\r\n                    {\r\n                        title: 'Descripción',\r\n                        displayValueFn: (item) => item.description\r\n                    },\r\n                ]\r\n            },\r\n            registerDataGroupDetail(),\r\n        ]\r\n    }\r\n}\r\n",
            "styleUrl": "./vehicle-type-detail-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-detail-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "VehicleTypeEditPageComponent",
            "id": "component-VehicleTypeEditPageComponent-e7eadf1d866e05973020b5dd6f00e92a6fdc5bd3759853649f4f2f1c46744bbef1cb100d9ffd2dfebd861f2551fa55a51efad0260b6b0221c1da5431a0dc526f",
            "file": "src/app/modules/configuration/vehicle-types/pages/vehicle-type-edit-page/vehicle-type-edit-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vehicle-type-edit-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./vehicle-type-edit-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n    type: 'create',\r\n    titleModule: 'tipo de vehículo',\r\n    formGroup: vehicleTypeFormGroup(),\r\n    afterSaveFormFn: (item) => {\r\n      this.databaseStorage.updateDataLocal(NameModuleDatabase.VehicleTypes)\r\n    },\r\n    fields: DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE_TYPE,\r\n    server: { url: 'vehicle-type' },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration<VehicleType>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "VehicleTypeCreatePageComponent"
                    }
                },
                {
                    "name": "databaseStorage",
                    "defaultValue": "inject(DatabaseStorageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "VehicleTypeCreatePageComponent"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { VehicleTypeCreatePageComponent } from '../vehicle-type-create-page/vehicle-type-create-page.component';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\n\r\n@Component({\r\n  selector: 'app-vehicle-type-edit-page',\r\n  standalone: true,\r\n  imports: [ItemFormTemplateComponent],\r\n  templateUrl: './vehicle-type-edit-page.component.html',\r\n  styleUrl: './vehicle-type-edit-page.component.scss'\r\n})\r\nexport class VehicleTypeEditPageComponent extends VehicleTypeCreatePageComponent {\r\n    private activatedRoute = inject(ActivatedRoute);\r\n\r\n    constructor(\r\n    ) {\r\n        super();\r\n        this.configuration.type = 'update';\r\n        this.configuration.hiddeFields = true;\r\n    }\r\n\r\n}\r\n",
            "styleUrl": "./vehicle-type-edit-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "extends": [
                "VehicleTypeCreatePageComponent"
            ],
            "templateData": "<app-item-form-template [configuration]=\"configuration\"/>\r\n"
        },
        {
            "name": "VehicleTypeListPageComponent",
            "id": "component-VehicleTypeListPageComponent-de59fbed36e743c3e67c657cf78ac5f3b0ef73923beb24c1d6ab90a10576aeda6b4b1715ffe59fe17bfb85b595bafb037bffefea817ab53665f100918dc12f5a",
            "file": "src/app/modules/configuration/vehicle-types/pages/vehicle-type-list-page/vehicle-type-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vehicle-type-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./vehicle-type-list-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configList",
                    "defaultValue": "{\r\n        title: 'Tipos de vehículo',\r\n        server: {\r\n            url: 'vehicle-type',\r\n        },\r\n        columns: signal([\r\n            imageColumn({\r\n                title: 'Imagen',\r\n                displayValueFn: (item) => item.image,\r\n            }),\r\n            textColumn({\r\n                title: 'Nombre',\r\n                sort: { key: 'name' },\r\n                routerLinkValue: { url: (item) => `../view/${item.id}` },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.name ? item.name : '--',\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<VehicleType>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, signal } from '@angular/core';\r\nimport { ItemListTemplateComponent, imageColumn } from '@component/item-list-template/item-list-template.component';\r\nimport { ItemListConfiguration, itemCreatedAtColumn, itemStatusColumn, itemUpdatedAtColumn, textColumn } from '@component/item-list-template/item-list-template.component';\r\nimport { VehicleType } from '@interface/vehicleType';\r\n\r\n@Component({\r\n    selector: 'app-vehicle-type-list-page',\r\n    standalone: true,\r\n    imports: [ItemListTemplateComponent],\r\n    templateUrl: './vehicle-type-list-page.component.html',\r\n    styleUrl: './vehicle-type-list-page.component.scss'\r\n})\r\nexport class VehicleTypeListPageComponent {\r\n    public configList: ItemListConfiguration<VehicleType> = {\r\n        title: 'Tipos de vehículo',\r\n        server: {\r\n            url: 'vehicle-type',\r\n        },\r\n        columns: signal([\r\n            imageColumn({\r\n                title: 'Imagen',\r\n                displayValueFn: (item) => item.image,\r\n            }),\r\n            textColumn({\r\n                title: 'Nombre',\r\n                sort: { key: 'name' },\r\n                routerLinkValue: { url: (item) => `../view/${item.id}` },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.name ? item.name : '--',\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }\r\n}\r\n",
            "styleUrl": "./vehicle-type-list-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-list-template [configuration]=\"configList\"/>\r\n"
        },
        {
            "name": "VehicleTypeViewPageComponent",
            "id": "component-VehicleTypeViewPageComponent-2da54e8d17bd5fe095eee190575020c126132c61cc662d9622c04d22ff73aa75d82c407dc846d272b3a77e44c64da0ecfe3b7661ff03eee7b25a60dc27db9bd9",
            "file": "src/app/modules/configuration/vehicle-types/pages/vehicle-type-view-page/vehicle-type-view-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vehicle-type-view-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./vehicle-type-view-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "defaultValue": "{\r\n        server: { url: 'vehicle-type' },\r\n        titleModule: 'Tipo de vehículo',\r\n        links: [\r\n            {\r\n                routerLink: './detail',\r\n                text: 'Detalle',\r\n            },\r\n        ]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemViewConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemViewTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemViewTemplateComponent, ItemViewConfiguration } from '@component/item-view-template/item-view-template.component';\r\n\r\n@Component({\r\n    selector: 'app-vehicle-type-view-page',\r\n    standalone: true,\r\n    imports: [ItemViewTemplateComponent],\r\n    templateUrl: './vehicle-type-view-page.component.html',\r\n    styleUrl: './vehicle-type-view-page.component.scss'\r\n})\r\nexport class VehicleTypeViewPageComponent {\r\n    public config: ItemViewConfiguration = {\r\n        server: { url: 'vehicle-type' },\r\n        titleModule: 'Tipo de vehículo',\r\n        links: [\r\n            {\r\n                routerLink: './detail',\r\n                text: 'Detalle',\r\n            },\r\n        ]\r\n    }\r\n}\r\n",
            "styleUrl": "./vehicle-type-view-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-view-template [configuration]=\"config\"/>\r\n"
        },
        {
            "name": "VehicleUnsubscribeCreatePageComponent",
            "id": "component-VehicleUnsubscribeCreatePageComponent-b8d9158e80415939969481d02743892ce3cb6f1cfab8843d2d773f663e08921aee280afb5519b3bb8692f228aa2edea557b53364129e845d65df8d1060623f18",
            "file": "src/app/modules/tracking/vehicles/vehicle-unsubscribes/pages/vehicle-unsubscribe-create-page/vehicle-unsubscribe-create-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DatePipe",
                    "type": "pipe"
                }
            ],
            "selector": "app-vehicle-unsubscribe-create-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./vehicle-unsubscribe-create-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "alertConfiguration",
                    "defaultValue": "signal(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<AlertConfiguration | null>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        titleModule: 'baja',\r\n        server: { url: 'vehicle-unsubscribe' },\r\n        formGroup: vehicleUnsubscribeFormGroup({\r\n            vehicle_id: Number(this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id')!),\r\n            start_date: new Date().toISOString(),\r\n        }),\r\n        type: 'create',\r\n        fields: DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE,\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration<VehicleUnsubscribe>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "contract",
                    "defaultValue": "signal(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<Contract | null>",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "datePipe",
                    "defaultValue": "inject(DatePipe)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fetch",
                    "defaultValue": "inject(FetchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getContractInformation",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemFormTemplateComponent",
                    "type": "component"
                },
                {
                    "name": "AlertTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, WritableSignal, inject, signal } from '@angular/core';\r\nimport { DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE, vehicleUnsubscribeFormGroup } from '../../helpers';\r\nimport { VehicleUnsubscribe, VehicleUnsubscribeProgrammingType } from '@interface/vehicleUnsubscribe';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FetchService } from '@service/fetch.service';\r\nimport { Contract } from '@interface/contract';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ItemFormConfiguration, ItemFormTemplateComponent } from '@component/item-form-template/item-form-template.component';\r\nimport { DatePipe } from '@angular/common';\r\nimport { AlertConfiguration, AlertTemplateComponent } from '@component/alert-template/alert-template.component';\r\n\r\n@Component({\r\n    selector: 'app-vehicle-unsubscribe-create-page',\r\n    standalone: true,\r\n    imports: [ItemFormTemplateComponent, AlertTemplateComponent],\r\n    templateUrl: './vehicle-unsubscribe-create-page.component.html',\r\n    styleUrl: './vehicle-unsubscribe-create-page.component.scss',\r\n    providers: [DatePipe],\r\n})\r\nexport class VehicleUnsubscribeCreatePageComponent {\r\n    public activatedRoute = inject(ActivatedRoute);\r\n    private fetch = inject(FetchService);\r\n    private datePipe = inject(DatePipe);\r\n    public alertConfiguration: WritableSignal<AlertConfiguration | null> = signal(null);\r\n    public configuration: ItemFormConfiguration<VehicleUnsubscribe> = {\r\n        titleModule: 'baja',\r\n        server: { url: 'vehicle-unsubscribe' },\r\n        formGroup: vehicleUnsubscribeFormGroup({\r\n            vehicle_id: Number(this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id')!),\r\n            start_date: new Date().toISOString(),\r\n        }),\r\n        type: 'create',\r\n        fields: DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE,\r\n    };\r\n\r\n    public contract: WritableSignal<Contract | null> = signal(null);\r\n\r\n    get programmingTypeCtrl(): FormControl {\r\n        return this.configuration.formGroup.get(\r\n            'programming_type'\r\n        )! as FormControl;\r\n    }\r\n\r\n    get startDateCtrl(): FormControl {\r\n        return this.configuration.formGroup.get('start_date')! as FormControl;\r\n    }\r\n\r\n    get endDateCtrl(): FormControl {\r\n        return this.configuration.formGroup.get('end_date')! as FormControl;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getContractInformation();\r\n        this.programmingTypeCtrl.valueChanges.subscribe((value) => {\r\n            if (value == VehicleUnsubscribeProgrammingType.FinDeContrato) {\r\n                this.endDateCtrl.setValue(this.contract()?.end_date);\r\n                this.endDateCtrl.disable();\r\n            } else if (value == VehicleUnsubscribeProgrammingType.fechaFija) {\r\n                this.endDateCtrl.enable();\r\n            } else if (value == VehicleUnsubscribeProgrammingType.indefinida) {\r\n                this.endDateCtrl.setValue('indefinido');\r\n                this.endDateCtrl.disable();\r\n            }\r\n        });\r\n    }\r\n\r\n    private async getContractInformation() {\r\n        const vehicleId = this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id')!;\r\n        const contract = await this.fetch.get<Contract>(`contract-from-vehicle/${vehicleId}`);\r\n        this.alertConfiguration.set({\r\n            icon: 'warning',\r\n            title: 'Advertencia',\r\n            description: `Este vehículo esta en el contrato <strong>${contract.code}</strong> con fecha de validez desde el <strong>${this.datePipe.transform(contract.start_date, 'longDate')}</strong> hasta el <strong>${this.datePipe.transform(contract.end_date, 'longDate')}`\r\n        });\r\n        this.contract.set(contract);\r\n    }\r\n}\r\n",
            "styleUrl": "./vehicle-unsubscribe-create-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "programmingTypeCtrl": {
                    "name": "programmingTypeCtrl",
                    "getSignature": {
                        "name": "programmingTypeCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 38
                    }
                },
                "startDateCtrl": {
                    "name": "startDateCtrl",
                    "getSignature": {
                        "name": "startDateCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 44
                    }
                },
                "endDateCtrl": {
                    "name": "endDateCtrl",
                    "getSignature": {
                        "name": "endDateCtrl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 48
                    }
                }
            },
            "templateData": "<app-item-form-template [configuration]=\"configuration\">\r\n    <ng-container ngProjectAs=\"beforeContent\">\r\n        @if(alertConfiguration(); as alert){\r\n        <app-alert-template [configuration]=\"alert\" />\r\n        <br />\r\n        }\r\n    </ng-container>\r\n\r\n</app-item-form-template>"
        },
        {
            "name": "VehicleUnsubscribeEditPageComponent",
            "id": "component-VehicleUnsubscribeEditPageComponent-1132d62466dd32ab4bb481264daa8c5bc8f6e93747ca1e92f0dd502daaf15acf081c249c6a603a107f8df685e5480509bb8a3e2b74b626b3e5d2ad701777de95",
            "file": "src/app/modules/tracking/vehicles/vehicle-unsubscribes/pages/vehicle-unsubscribe-edit-page/vehicle-unsubscribe-edit-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vehicle-unsubscribe-edit-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./vehicle-unsubscribe-edit-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "VehicleUnsubscribeCreatePageComponent"
                    }
                },
                {
                    "name": "alertConfiguration",
                    "defaultValue": "signal(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<AlertConfiguration | null>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "VehicleUnsubscribeCreatePageComponent"
                    }
                },
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        titleModule: 'baja',\r\n        server: { url: 'vehicle-unsubscribe' },\r\n        formGroup: vehicleUnsubscribeFormGroup({\r\n            vehicle_id: Number(this.activatedRoute.parent?.parent?.snapshot.paramMap.get('id')!),\r\n            start_date: new Date().toISOString(),\r\n        }),\r\n        type: 'create',\r\n        fields: DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE,\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemFormConfiguration<VehicleUnsubscribe>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "VehicleUnsubscribeCreatePageComponent"
                    }
                },
                {
                    "name": "contract",
                    "defaultValue": "signal(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<Contract | null>",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "VehicleUnsubscribeCreatePageComponent"
                    }
                },
                {
                    "name": "datePipe",
                    "defaultValue": "inject(DatePipe)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "VehicleUnsubscribeCreatePageComponent"
                    }
                },
                {
                    "name": "fetch",
                    "defaultValue": "inject(FetchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "VehicleUnsubscribeCreatePageComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getContractInformation",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "inheritance": {
                        "file": "VehicleUnsubscribeCreatePageComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "VehicleUnsubscribeCreatePageComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { VehicleUnsubscribeCreatePageComponent } from '../vehicle-unsubscribe-create-page/vehicle-unsubscribe-create-page.component';\r\n\r\n@Component({\r\n  selector: 'app-vehicle-unsubscribe-edit-page',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './vehicle-unsubscribe-edit-page.component.html',\r\n  styleUrl: './vehicle-unsubscribe-edit-page.component.scss'\r\n})\r\nexport class VehicleUnsubscribeEditPageComponent extends VehicleUnsubscribeCreatePageComponent {\r\n\r\n    constructor() {\r\n        super();\r\n        this.configuration.type = 'update';\r\n        this.configuration.itemId = this.activatedRoute.snapshot.parent?.parent?.paramMap.get('id')!;\r\n        this.configuration.hiddeFields = true;\r\n    }\r\n}\r\n",
            "styleUrl": "./vehicle-unsubscribe-edit-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "extends": [
                "VehicleUnsubscribeCreatePageComponent"
            ],
            "templateData": "<p>vehicle-unsubscribe-edit-page works!</p>\r\n"
        },
        {
            "name": "VehicleUnsubscribeListPageComponent",
            "id": "component-VehicleUnsubscribeListPageComponent-964850d8dd73c57ffa918d1226aa294fec8c56d8d54f9632a4d5be009f15b732b40dbf05be716d3807cc3635955addffca3c80a6e371798f43ec428b8738e927",
            "file": "src/app/modules/tracking/vehicles/vehicle-unsubscribes/pages/vehicle-unsubscribe-list-page/vehicle-unsubscribe-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vehicle-unsubscribe-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./vehicle-unsubscribe-list-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configList",
                    "defaultValue": "{\r\n        title: 'Historial de bajas',\r\n        server: {\r\n            url: 'vehicle-unsubscribe',\r\n            queryParams: 'relations=user',\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Usuario',\r\n                routerLinkValue: { url: (item) => `../detail/${item.id}` },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.user?.name ? item.user?.name : '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Tipo de programación',\r\n                gridColumn: 'auto',\r\n                displayValueFn: (item) => item.programming_type.toUpperCase(),\r\n            }),\r\n            textColumn({\r\n                title: 'Motivo',\r\n                gridColumn: 'auto',\r\n                displayValueFn: (item) => item.reason,\r\n            }),\r\n            dateColumn({\r\n                title: 'Fecha de inicio',\r\n                gridColumn: 'auto',\r\n                displayValueFn: (item) => item.start_date,\r\n            }),\r\n            dateColumn({\r\n                title: 'Fecha de fin',\r\n                gridColumn: 'auto',\r\n                displayValueFn: (item) => item.end_date,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemListConfiguration<VehicleUnsubscribe>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemListTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, signal } from '@angular/core';\r\nimport { ItemListConfiguration, ItemListTemplateComponent, dateColumn, itemCreatedAtColumn, itemStatusColumn, itemUpdatedAtColumn, textColumn } from '@component/item-list-template/item-list-template.component';\r\nimport { VehicleUnsubscribe } from '@interface/vehicleUnsubscribe';\r\n\r\n@Component({\r\n  selector: 'app-vehicle-unsubscribe-list-page',\r\n  standalone: true,\r\n  imports: [ItemListTemplateComponent],\r\n  templateUrl: './vehicle-unsubscribe-list-page.component.html',\r\n  styleUrl: './vehicle-unsubscribe-list-page.component.scss'\r\n})\r\nexport class VehicleUnsubscribeListPageComponent {\r\n    public configList: ItemListConfiguration<VehicleUnsubscribe> = {\r\n        title: 'Historial de bajas',\r\n        server: {\r\n            url: 'vehicle-unsubscribe',\r\n            queryParams: 'relations=user',\r\n        },\r\n        columns: signal([\r\n            textColumn({\r\n                title: 'Usuario',\r\n                routerLinkValue: { url: (item) => `../detail/${item.id}` },\r\n                gridColumn: '1fr',\r\n                displayValueFn: (item) => item?.user?.name ? item.user?.name : '--',\r\n            }),\r\n            textColumn({\r\n                title: 'Tipo de programación',\r\n                gridColumn: 'auto',\r\n                displayValueFn: (item) => item.programming_type.toUpperCase(),\r\n            }),\r\n            textColumn({\r\n                title: 'Motivo',\r\n                gridColumn: 'auto',\r\n                displayValueFn: (item) => item.reason,\r\n            }),\r\n            dateColumn({\r\n                title: 'Fecha de inicio',\r\n                gridColumn: 'auto',\r\n                displayValueFn: (item) => item.start_date,\r\n            }),\r\n            dateColumn({\r\n                title: 'Fecha de fin',\r\n                gridColumn: 'auto',\r\n                displayValueFn: (item) => item.end_date,\r\n            }),\r\n            itemCreatedAtColumn(),\r\n            itemUpdatedAtColumn(),\r\n            itemStatusColumn(),\r\n        ]),\r\n    }\r\n}\r\n",
            "styleUrl": "./vehicle-unsubscribe-list-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-list-template [configuration]=\"configList\"/>\r\n"
        },
        {
            "name": "VehicleViewPageComponent",
            "id": "component-VehicleViewPageComponent-f3f28ec3c216781e22be413fe784579354e7930d7da5375bd67e4084c40924e00db744afce536b2c37b881d1a62036d5c406a227789011d8f64545a354f5b534",
            "file": "src/app/modules/tracking/vehicles/pages/vehicle-view-page/vehicle-view-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vehicle-view-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./vehicle-view-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "{\r\n        titleModule: 'Vehículo',\r\n        server: { \r\n            url: 'vehicle',\r\n            queryParams: { relations: 'client' },\r\n        },\r\n        nameItemFn: (item) => `${item.plate} - ${item.client?.name}`,\r\n        links: [\r\n            {\r\n                text: 'Detalles',\r\n                routerLink: './detail',\r\n            },\r\n            {\r\n                text: 'Historial de bajas',\r\n                routerLink: './vehicle-unsubscribe',\r\n            },\r\n        ]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemViewConfiguration<Vehicle>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItemViewTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ItemViewTemplateComponent, ItemViewConfiguration } from '@component/item-view-template/item-view-template.component';\r\nimport { Vehicle } from '@interface/vehicle';\r\n\r\n@Component({\r\n    selector: 'app-vehicle-view-page',\r\n    standalone: true,\r\n    imports: [ItemViewTemplateComponent],\r\n    templateUrl: './vehicle-view-page.component.html',\r\n    styleUrl: './vehicle-view-page.component.scss'\r\n})\r\nexport class VehicleViewPageComponent {\r\n    public configuration: ItemViewConfiguration<Vehicle> = {\r\n        titleModule: 'Vehículo',\r\n        server: { \r\n            url: 'vehicle',\r\n            queryParams: { relations: 'client' },\r\n        },\r\n        nameItemFn: (item) => `${item.plate} - ${item.client?.name}`,\r\n        links: [\r\n            {\r\n                text: 'Detalles',\r\n                routerLink: './detail',\r\n            },\r\n            {\r\n                text: 'Historial de bajas',\r\n                routerLink: './vehicle-unsubscribe',\r\n            },\r\n        ]\r\n    }\r\n}\r\n",
            "styleUrl": "./vehicle-view-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-item-view-template [configuration]=\"configuration\" />\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "accountFormGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/administration/accounts/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => new FormGroup({\r\n    bank_id: new FormControl(null, [Validators.required]),\r\n    name: new FormControl('', [Validators.required]),\r\n    number: new FormControl('', [Validators.required]),\r\n    coin: new FormControl('soles', [Validators.required]),\r\n    description: new FormControl(''),\r\n})"
            },
            {
                "name": "appareance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "\"fill\" | \"outline\"",
                "defaultValue": "() => {\r\n  return localStorage.getItem('apareanceInputs') == 'fill' ? 'fill' : 'outline';\r\n}"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideRouter(routes, withViewTransitions(), withComponentInputBinding()),\r\n    provideAnimations(),\r\n    importProvidersFrom(SocketIoModule.forRoot(config)),\r\n    importProvidersFrom(MatDialogModule),\r\n    importProvidersFrom(MatSnackBarModule),\r\n    importProvidersFrom(MatNativeDateModule),\r\n    importProvidersFrom(DatabaseStorageService),\r\n    importProvidersFrom(DateFnsAdapter),\r\n\r\n    { provide: LOCALE_ID, useValue: 'es-PE' },\r\n    { provide: MAT_DATE_LOCALE, useValue: 'es-PE' },\r\n    { provide: DEFAULT_CURRENCY_CODE, useValue: 'S/' },\r\n    { provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: { appearance: appareance(), subscriptSizing: 'dynamic' } },\r\n    { provide: MAT_PAGINATOR_DEFAULT_OPTIONS, useValue: { formFieldAppearance: 'fill', showFirstLastButtons: true, pageSizeOptions: [20, 50, 100], pageSize: 20 } },\r\n    { provide: MAT_SORT_DEFAULT_OPTIONS, useValue: { arrowPosition: 'after', disableClear: false } },\r\n    { provide: MatPaginatorIntl, useClass: CustomPaginator },\r\n    DateFnsAdapter,\r\n    { provide: DateAdapter, useClass: MyDateAdapter, deps: [DateFnsAdapter] },\r\n    { provide: MAT_DATE_FORMATS, useValue: MY_DATE_FORMATS },\r\n    provideServiceWorker('ngsw-worker.js', {\r\n      enabled: !isDevMode(),\r\n      registrationStrategy: 'registerWhenStable:30000'\r\n    })\r\n  ]\r\n}"
            },
            {
                "name": "autocompleteFormInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(configuration: AutocompleteConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocomplete: configuration\r\n})"
            },
            {
                "name": "autocompleteLocalFormInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(configuration: AutocompleteLocalConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocompleteLocal: configuration\r\n})"
            },
            {
                "name": "autocompleteServerFormInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(configuration: AutocompleteServerConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-server',\r\n  autocompleteServer: configuration\r\n})"
            },
            {
                "name": "bankFormGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/configuration/banks/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => new FormGroup({\r\n    name: new FormControl('', [Validators.required]),\r\n    code: new FormControl(''),\r\n    description: new FormControl(''),\r\n})"
            },
            {
                "name": "base64ABuffer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/database-storage.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(buffer: any) => Uint8Array.from(atob(buffer), c => c.charCodeAt(0))"
            },
            {
                "name": "bufferABase64",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/database-storage.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(buffer: any) => btoa(String.fromCharCode(...new Uint8Array(buffer)))"
            },
            {
                "name": "checkboxFormInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(configuration: CheckboxFormInput): FormInput => ({\r\n  type: 'checkbox',\r\n  checkbox: configuration\r\n})"
            },
            {
                "name": "clickEventActionButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config: ClickEventActionButton<T>): ActionButton<T> => ({ type: 'clickEvent', ...config })"
            },
            {
                "name": "clientBillingOptionFormGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/organization/clients/client-billing-options/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(item?: Partial<ClientBillingOption>) => new FormGroup({\r\n    client_id: new FormControl(item?.id, [Validators.required]),\r\n    comprobant_type: new FormControl(item?.comprobant_type, [Validators.required]),\r\n    group_notes_single_voucher: new FormControl(item?.group_notes_single_voucher ?? false, [Validators.required]),\r\n    detraction: new FormControl(item?.detraction ?? true),\r\n    detraction_percent: new FormControl(item?.detraction_percent, [Validators.required]),\r\n    retention: new FormControl(item?.retention ?? true),\r\n    retention_percent: new FormControl(item?.retention_percent, [Validators.required]),\r\n})"
            },
            {
                "name": "clientBusinessUnitFormGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/organization/clients/client-business-units/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(item?: Partial<ClientContact>) => new FormGroup({\r\n    client_id: new FormControl(item?.client_id, [Validators.required]),\r\n    name: new FormControl(item?.name, [Validators.required]),\r\n    description: new FormControl(item?.email),\r\n})"
            },
            {
                "name": "clientContactFormGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/organization/clients/client-contacts/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(item?: Partial<ClientContact>) => new FormGroup({\r\n    client_id: new FormControl(item?.client_id, [Validators.required]),\r\n    document_type: new FormControl(item?.document_type, [Validators.required]),\r\n    document_number: new FormControl(item?.document_number, [Validators.required]),\r\n    name: new FormControl(item?.name, [Validators.required]),\r\n    paternal_name: new FormControl(item?.paternal_name, [Validators.required]),\r\n    maternal_name: new FormControl(item?.maternal_name, [Validators.required]),\r\n    email: new FormControl(item?.email),\r\n    address: new FormControl(item?.address),\r\n    phone: new FormControl(item?.phone),\r\n    cellphone: new FormControl(item?.cellphone),\r\n    principal: new FormControl(item?.principal ?? false),\r\n})"
            },
            {
                "name": "clientFormGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/organization/clients/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => new FormGroup({\r\n    document_type: new FormControl(null, [Validators.required]),\r\n    document_number: new FormControl('', [Validators.required]),\r\n    name: new FormControl('', [Validators.required]),\r\n    email: new FormControl('', [Validators.required]),\r\n    address: new FormControl(''),\r\n    phone: new FormControl(''),\r\n    cellphone: new FormControl(''),\r\n})"
            },
            {
                "name": "clientPaymentFormGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/organization/clients/client-payments/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(data?: Partial<ClientPayment>) => new FormGroup({\r\n    client_id: new FormControl<number|null|undefined>(data?.client_id, [Validators.required]),\r\n    client_account_id: new FormControl<number|undefined>(data?.client_account_id, [Validators.required]),\r\n    box_movement: new FormGroup({\r\n        box_opening_id: new FormControl<number|null|undefined>(data?.box_movement?.box_opening_id, [Validators.required]),\r\n        payment_date: new FormControl<string|Date|null|undefined>(data?.box_movement?.payment_date ?? new Date(), [Validators.required]),\r\n        payment_type: new FormControl<PaymentTypeEnum|null|undefined>(data?.box_movement?.payment_type, [Validators.required]),\r\n        bank_id: new FormControl<number|null|undefined>(data?.box_movement?.bank_id),\r\n        amount: new FormControl<number|null|undefined>(data?.box_movement?.amount),\r\n        operation_code: new FormControl<number|null|undefined>(data?.box_movement?.bank_id),\r\n        observation: new FormControl<string|null|undefined>(data?.box_movement?.observation),\r\n        voucher_type: new FormControl<ComprobantTypeEnum|null|undefined>(data?.box_movement?.voucher_type),\r\n        invoice_number: new FormControl<string|null|undefined>(data?.box_movement?.invoice_number),\r\n        voucher_file: new FormControl<string|null|undefined>(data?.box_movement?.voucher_file),\r\n    }),\r\n})"
            },
            {
                "name": "COIN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/interfaces/baseModel.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Object.values(CoinEnum)"
            },
            {
                "name": "COMPROBANT_TYPES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/interfaces/clientBillingOption.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Object.values(ComprobantTypeEnum)"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SocketIoConfig",
                "defaultValue": "{ url: 'http://localhost:3001', options: {} }"
            },
            {
                "name": "CONTRACT_RESOLUTION_ENTITY_VALUES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/interfaces/contractResolution.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Object.values(ContractResolutionEntityEnum)"
            },
            {
                "name": "CONTRACT_RESOLUTION_TYPE_VALUES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/interfaces/contractResolution.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Object.values(ContractResolutionTypeEnum)"
            },
            {
                "name": "contractColumnsList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/tracking/contracts/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => [\r\n    textColumn<Contract>({\r\n        title: 'Código',\r\n        sort: { key: 'code' },\r\n        displayValueFn: (item) => item.code,\r\n        routerLinkValue: { url: (item) => `/tracking/contract/view/${item.id}` },\r\n    }),\r\n    uppercaseColumn<Contract>({\r\n        title: 'Cliente/Unidad de negocio',\r\n        displayValueFn: (item) => item.client?.name,\r\n        displayAdditionalValueFn: (item) => item.client_business_unit?.name,\r\n        gridColumn: '1fr',\r\n        routerLinkValue: { url: (item) => `/organization/client/view/${item.client?.id}` },\r\n    }),\r\n    uppercaseColumn<Contract>({\r\n        title: 'Plan',\r\n        displayValueFn: (item) => item.plan?.name,\r\n    }),\r\n    uppercaseColumn<Contract>({\r\n        title: 'T. Periodo',\r\n        displayValueFn: (item) => item.recurrent_type,\r\n    }),\r\n    textColumn<Contract>({\r\n        title: 'Periodo',\r\n        displayValueFn: (item) => item.period,\r\n    }),\r\n    numberColumn<Contract>({\r\n        title: 'Unidades',\r\n        displayValueFn: (item) => item.quantity,\r\n        numberFormat: '2.0-0',\r\n    }),\r\n    numberColumn<Contract>({\r\n        title: 'Precio Und.',\r\n        displayValueFn: (item) => item.sale_price,\r\n    }),\r\n    dateColumn<Contract>({\r\n        title: 'Fecha inicio',\r\n        displayValueFn: (item) => item.start_date,\r\n    }),\r\n    dateColumn<Contract>({\r\n        title: 'Fecha fin',\r\n        displayValueFn: (item) => item.end_date,\r\n    }),\r\n    itemCreatedAtColumn(),\r\n    itemUpdatedAtColumn(),\r\n    itemStatusColumn(),\r\n]"
            },
            {
                "name": "CustomColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    render: (args: AlertTemplateComponent) => {\r\n        return {\r\n            template: `\r\n                <!-- \r\n                    work with variable CSS (--rgb-color-alert)\r\n                    Receives as value the three values ​​of an RGB color\r\n                    Example: --rgb-color-alert: 0, 0, 0\r\n                -->\r\n                <app-alert-template\r\n                style=\"--rgb-color-alert: 0, 0, 0\"\r\n                [configuration]=\"{title: 'Information Alert',description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit, delectus. Quis magnam molestiae ab rerum non! Nihil mollitia, ut architecto corporis velit impedit! Repellendus placeat, laboriosam quis voluptate sapiente nobis?',icon: 'home'}\" />\r\n            `\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "DATA_TYPE_LIST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<'array' | 'paginator'>('KEY_GET_ITEMS_PAGINATOR_LIST')"
            },
            {
                "name": "dateColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config: DateListColumn<T>): ListColumn<T> => ({ type: 'date', ...config })"
            },
            {
                "name": "dateFormInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(configuration: DateFormInput): FormInput => ({\r\n  type: 'date',\r\n  date: configuration\r\n})"
            },
            {
                "name": "dateRangeFormInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(configuration: DateRangeFormInput): FormInput => ({\r\n  type: 'date-range',\r\n  dateRange: configuration\r\n})"
            },
            {
                "name": "decrypt",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/database-storage.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "async (password: string, encriptadoEnBase64: any) => {\r\n    const decoder = new TextDecoder();\r\n    const encryptData = base64ABuffer(encriptadoEnBase64);\r\n    const sal = encryptData.slice(0, SAL_LONG);\r\n    const initializationVector = encryptData.slice(0 + SAL_LONG, SAL_LONG + INITIALIZATION_VECTOR_LONG);\r\n    const clave = await passwordBasedKeyDerivation(password, sal, 100000, 256, 'SHA-256');\r\n    const decryptDataBuffer = await window.crypto.subtle.decrypt({ name: \"AES-CBC\", iv: initializationVector }, clave, encryptData.slice(SAL_LONG + INITIALIZATION_VECTOR_LONG));\r\n    return decoder.decode(decryptDataBuffer);\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        configuration: {\r\n            title: 'Information Alert',\r\n            description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit, delectus. Quis magnam molestiae ab rerum non! Nihil mollitia, ut architecto corporis velit impedit! Repellendus placeat, laboriosam quis voluptate sapiente nobis?',\r\n            icon: 'home',\r\n        },\r\n    },\r\n}"
            },
            {
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_ACCOUNT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/administration/accounts/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FormInput[]",
                "defaultValue": "[\r\n    autocompleteServerFormInput({\r\n        formControlName: 'bank_id',\r\n        textLabel: 'Banco',\r\n        server: {\r\n            url: 'bank',\r\n        },\r\n        cssClass: 'col-span-6 @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'name',\r\n        textLabel: 'Nombre',\r\n        cssClass: 'col-span-full @2xl:col-span-6',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'number',\r\n        textLabel: 'N° de cuenta',\r\n        cssClass: 'col-span-6 @2xl:col-span-2',\r\n    }),\r\n    selectFormInput({\r\n        formControlName: 'coin',\r\n        textLabel: 'Moneda',\r\n        data: COIN.map((item) => ({ name: item.toUpperCase(), id: item })),\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'description',\r\n        textLabel: 'Descripción',\r\n        cssClass: 'col-span-full'\r\n    })\r\n]"
            },
            {
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_BANK",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/configuration/banks/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FormInput[]",
                "defaultValue": "[\r\n    textFormInput({\r\n        formControlName: 'code',\r\n        textLabel: 'Código',\r\n        cssClass: 'col-span-6 @2xl:col-span-3',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'name',\r\n        textLabel: 'Nombre',\r\n        cssClass: 'col-span-full @2xl:col-span-9',\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'description',\r\n        textLabel: 'Descripción',\r\n        cssClass: 'col-span-full'\r\n    })\r\n]"
            },
            {
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_CLIENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/organization/clients/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FormInput[]",
                "defaultValue": "[\r\n    selectFormInput({\r\n        formControlName: 'document_type',\r\n        textLabel: 'Tipo de documento',\r\n        data: DOCUMENT_TYPES.map((item) => ({ name: item.toUpperCase(), id: item })),\r\n        cssClass: 'col-span-6 @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'document_number',\r\n        textLabel: 'Número de documento',\r\n        cssClass: 'col-span-6 @2xl:col-span-3',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'name',\r\n        textLabel: 'Nombre',\r\n        cssClass: 'col-span-full @2xl:col-span-7',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'phone',\r\n        textLabel: 'Teléfono',\r\n        cssClass: 'col-span-full @2xl:col-span-3',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'cellphone',\r\n        textLabel: 'Celular',\r\n        cssClass: 'col-span-full @2xl:col-span-3',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'email',\r\n        textLabel: 'Correo electrónico',\r\n        cssClass: 'col-span-full @2xl:col-span-6',\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'address',\r\n        textLabel: 'Dirección',\r\n        cssClass: 'col-span-full'\r\n    })\r\n]"
            },
            {
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_BILLING_OPTION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/organization/clients/client-billing-options/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FormInput[]",
                "defaultValue": "[\r\n    selectFormInput({\r\n        formControlName: 'comprobant_type',\r\n        textLabel: 'Tipo de comprobante',\r\n        data: COMPROBANT_TYPES.map((item) => ({ name: item.toUpperCase(), id: item })),\r\n    }),\r\n    switchFormInput({\r\n        formControlName: 'group_notes_single_voucher',\r\n        textLabel: '¿Agrupar todas la notas de pedido en un solo comprobante?',\r\n        defaultValue: false,\r\n    }),\r\n    switchFormInput({\r\n        formControlName: 'retention',\r\n        textLabel: '¿Tiene retención?',\r\n        defaultValue: false,\r\n    }),\r\n    selectFormInput({\r\n        formControlName: 'retention_percent',\r\n        textLabel: 'Porcentaje de retención',\r\n        data: [\r\n            { name: '3%', id: '3.00' },\r\n            { name: '6%', id: '6.00' },\r\n        ],\r\n    }),\r\n]"
            },
            {
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_BUSINESS_UNIT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/organization/clients/client-business-units/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FormInput[]",
                "defaultValue": "[\r\n    textFormInput({\r\n        formControlName: 'name',\r\n        textLabel: 'Nombre',\r\n        cssClass: 'col-span-full',\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'description',\r\n        textLabel: 'Descripción',\r\n        cssClass: 'col-span-full',\r\n    })\r\n]"
            },
            {
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_CONTACT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/organization/clients/client-contacts/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FormInput[]",
                "defaultValue": "[\r\n    selectFormInput({\r\n        formControlName: 'document_type',\r\n        textLabel: 'Tipo de documento',\r\n        data: DOCUMENT_TYPES.map((item) => ({ name: item.toUpperCase(), id: item })),\r\n        cssClass: 'col-span-6 @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'document_number',\r\n        textLabel: 'Número de documento',\r\n        placeholder: 'Ingrese el número de documento',\r\n        cssClass: 'col-span-6 @2xl:col-span-2',\r\n        maxLength: 12,\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'name',\r\n        textLabel: 'Nombre',\r\n        placeholder: 'Ingrese el nombre',\r\n        cssClass: 'col-span-full @2xl:col-span-4',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'paternal_name',\r\n        textLabel: 'Apellido paterno',\r\n        placeholder: 'Ingrese el apellido',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'maternal_name',\r\n        textLabel: 'Apellido materno',\r\n        placeholder: 'Ingrese el apellido',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'phone',\r\n        textLabel: 'Teléfono',\r\n        placeholder: 'Ingrese el teléfono',\r\n        cssClass: 'col-span-full @2xl:col-span-4',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'cellphone',\r\n        textLabel: 'Celular',\r\n        placeholder: 'Ingrese el celular',\r\n        cssClass: 'col-span-full @2xl:col-span-4',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'email',\r\n        textLabel: 'Correo electrónico',\r\n        placeholder: 'Ingrese el correo electrónico',\r\n        cssClass: 'col-span-full @2xl:col-span-4',\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'address',\r\n        textLabel: 'Dirección',\r\n        placeholder: 'Ingrese la dirección',\r\n        cssClass: 'col-span-full',\r\n    }),\r\n    switchFormInput({\r\n        formControlName: 'principal',\r\n        textLabel: '¿Es contacto principal?',\r\n        defaultValue: false,\r\n        cssClass: 'col-span-full',\r\n    }),\r\n]"
            },
            {
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_PLAN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/configuration/plans/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FormInput[]",
                "defaultValue": "[\r\n    textFormInput({\r\n        formControlName: 'name',\r\n        textLabel: 'Nombre',\r\n        cssClass: 'col-span-full @2xl:col-span-6',\r\n    }),\r\n    selectFormInput({\r\n        formControlName: 'coin',\r\n        textLabel: 'Moneda',\r\n        data: COIN.map((item) => ({ name: item.toUpperCase(), id: item })),\r\n        cssClass: 'col-span-6 @2xl:col-span-3',\r\n    }),\r\n    numberFormInput({\r\n        formControlName: 'price',\r\n        textLabel: 'Precio',\r\n        cssClass: 'col-span-6 @2xl:col-span-3',\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'description',\r\n        textLabel: 'Descripción',\r\n        cssClass: 'col-span-full'\r\n    })\r\n]"
            },
            {
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_USER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/organization/users/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FormInput[]",
                "defaultValue": "[\r\n    selectFormInput({\r\n        formControlName: 'role',\r\n        textLabel: 'Tipo de documento',\r\n        data: USER_ROLES.map((item) => ({ name: item.toUpperCase(), id: item })),\r\n        cssClass: 'col-span-6 @2xl:col-span-2',\r\n    }),\r\n    selectFormInput({\r\n        formControlName: 'document_type',\r\n        textLabel: 'Tipo de documento',\r\n        data: DOCUMENT_TYPES.map((item) => ({ name: item.toUpperCase(), id: item })),\r\n        cssClass: 'col-span-6 @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'document_number',\r\n        textLabel: 'Número de documento',\r\n        cssClass: 'col-span-6 @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'name',\r\n        textLabel: 'Nombre',\r\n        cssClass: 'col-span-full @2xl:col-span-6',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'phone',\r\n        textLabel: 'Teléfono',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'cellphone',\r\n        textLabel: 'Celular',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    dateFormInput({\r\n        formControlName: 'birth_date',\r\n        textLabel: 'Fecha de nacimiento',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'email',\r\n        textLabel: 'Correo electrónico',\r\n        cssClass: 'col-span-full @2xl:col-span-6',\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'address',\r\n        textLabel: 'Dirección',\r\n        cssClass: 'col-span-full'\r\n    })\r\n]"
            },
            {
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/tracking/vehicles/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FormInput[]",
                "defaultValue": "[\r\n    autocompleteLocalFormInput({\r\n        formControlName: 'vehicle_type_id',\r\n        textLabel: 'Tipo de vehículo',\r\n        local: { nameModuleDatabase: NameModuleDatabase.VehicleTypes },\r\n        cssClass: 'col-span-full @2xl:col-span-6',\r\n    }),\r\n    autocompleteServerFormInput({\r\n        formControlName: 'client_id',\r\n        textLabel: 'Cliente',\r\n        server: { url: 'client' },\r\n        cssClass: 'col-span-full @2xl:col-span-6',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'plate',\r\n        textLabel: 'Placa',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'color',\r\n        textLabel: 'Color',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'brand',\r\n        textLabel: 'Marca',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'model',\r\n        textLabel: 'Modelo',\r\n        cssClass: 'col-span-full @2xl:col-span-4',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'year',\r\n        textLabel: 'Año',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'description',\r\n        textLabel: 'Descripción',\r\n        cssClass: 'col-span-full'\r\n    }),\r\n\r\n    // FALTA INPUT PARA SUBIR FOTO\r\n]"
            },
            {
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/tracking/vehicles/vehicle-unsubscribes/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FormInput[]",
                "defaultValue": "[\r\n    selectFormInput({\r\n        formControlName: 'programming_type',\r\n        textLabel: 'Tipo de programación',\r\n        data: VEHICLE_UNSUBSCRIBE_PROGRAMMING_TYPE.map((item) => ({ name: item.toUpperCase(), id: item })),\r\n        cssClass: 'col-span-6 @2xl:col-span-2',\r\n    }),\r\n    dateFormInput({\r\n        formControlName: 'start_date',\r\n        textLabel: 'Fecha de inicio',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    dateFormInput({\r\n        formControlName: 'end_date',\r\n        textLabel: 'Fecha de fin',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    autocompleteLocalFormInput({\r\n        formControlName: 'user_id',\r\n        textLabel: 'Usuario responsable',\r\n        local: { nameModuleDatabase: NameModuleDatabase.Users },\r\n        cssClass: 'col-span-full @2xl:col-span-6',\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'reason',\r\n        textLabel: 'Motivo',\r\n        cssClass: 'col-span-full'\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'observations',\r\n        textLabel: 'Observaciones',\r\n        cssClass: 'col-span-full'\r\n    }),\r\n\r\n]"
            },
            {
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE_TYPE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/configuration/vehicle-types/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FormInput[]",
                "defaultValue": "[\r\n    textFormInput({\r\n        formControlName: 'name',\r\n        textLabel: 'Nombre',\r\n        cssClass: 'col-span-full',\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'description',\r\n        textLabel: 'Descripción',\r\n        cssClass: 'col-span-full'\r\n    }),\r\n    fileFormInput({\r\n        formControlName: 'image',\r\n        textLabel: 'Imagen',\r\n        cssClass: 'col-span-full',\r\n        acceptFiles: 'image/*',\r\n    }),\r\n]"
            },
            {
                "name": "defaultListFilterInputs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): FormInput[] => [\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de creación',\r\n    formControlNameFrom: 'created_at_from',\r\n    formControlNameTo: 'created_at_to',\r\n  }),\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de actualización',\r\n    formControlNameFrom: 'updated_at_from',\r\n    formControlNameTo: 'updated_at_to',\r\n  }),\r\n  switchFormInput({\r\n    textLabel: 'Registros inactivos',\r\n    formControlName: 'inactive',\r\n  }),\r\n]"
            },
            {
                "name": "defaultMessageDialogCreateItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/interfaces/fetch.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n    title: '¿Está seguro de guardar el registro?',\r\n    description: 'Asegúrese de haber llenado todos los datos del formulario correctamente',\r\n    icon: 'save',\r\n})"
            },
            {
                "name": "defaultMessageDialogDeleteItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/interfaces/fetch.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n    title: '¿Está seguro de eliminar el registro?',\r\n    description: 'El ítem se eliminará por completo, está acción es única y no se puede revertir',\r\n    icon: 'delete_forever',\r\n})"
            },
            {
                "name": "defaultMessageDialogUpdateItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/interfaces/fetch.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n    title: '¿Está seguro de actualizar el registro?',\r\n    description: 'Asegúrese de haber modificado los datos del formulario correctamente',\r\n    icon: 'autorenew',\r\n})"
            },
            {
                "name": "deleteItemActionButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => clickEventActionButton({\r\n  icon: 'delete',\r\n  text: 'Eliminar',\r\n  fn: async ({ id }, _, { deleteItemFn }) => deleteItemFn(id),\r\n  hidden: (item) => item.deleted_at,\r\n})"
            },
            {
                "name": "diffDateColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'diff-date', ...config })"
            },
            {
                "name": "DOCUMENT_TYPES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/interfaces/baseModel.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Object.values(DocumentTypeEnum)"
            },
            {
                "name": "DRAWER_LINKS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sidenav/sidenav/sidenav.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "GroupDrawerLink[]",
                "defaultValue": "[\r\n    {\r\n        label: 'Organización',\r\n        links: [\r\n            {\r\n                label: 'Clientes',\r\n                icon: 'supervised_user_circle',\r\n                route: '/organization/client',\r\n            },\r\n            {\r\n                label: 'Usuarios',\r\n                icon: 'person',\r\n                route: '/organization/user',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Administración',\r\n        links: [\r\n            {\r\n                label: 'Cuentas',\r\n                icon: 'account_balance_wallet',\r\n                route: '/administration/account',\r\n            },\r\n            {\r\n                label: 'Cajas',\r\n                icon: 'service_toolbox',\r\n                route: '/administration/box',\r\n            },\r\n            {\r\n                label: 'Movimientos de caja',\r\n                icon: 'timeline',\r\n                route: '/administration/box-movement',\r\n            },\r\n            {\r\n                label: 'Facturación',\r\n                icon: 'draft',\r\n                route: '/administration/document',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Tracking',\r\n        links: [\r\n            {\r\n                label: 'Contratos',\r\n                icon: 'account_balance_wallet',\r\n                route: '/tracking/contract',\r\n            },\r\n            {\r\n                label: 'Vehículos',\r\n                icon: 'electric_rickshaw',\r\n                route: '/tracking/vehicle',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Configuration',\r\n        links: [\r\n            {\r\n                label: 'Bancos',\r\n                icon: 'account_balance',\r\n                route: '/configuration/bank',\r\n            },\r\n            {\r\n                label: 'Planes',\r\n                icon: 'planner_banner_ad_pt',\r\n                route: '/configuration/plan',\r\n            },\r\n            {\r\n                label: 'Tipo de vehículos',\r\n                icon: 'airport_shuttle',\r\n                route: '/configuration/vehicle-type',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Opciones de la APP',\r\n        links: [\r\n            {\r\n                label: 'Settings',\r\n                route: '/settings',\r\n                icon: 'settings',\r\n            },\r\n        ]\r\n    },\r\n]"
            },
            {
                "name": "editItemActionButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => routerLinkActionButton({\r\n  icon: 'edit',\r\n  text: 'Editar',\r\n  routerLink: { url: (item) => `../edit/${item.id}` },\r\n})"
            },
            {
                "name": "emailColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'email', ...config })"
            },
            {
                "name": "encrypt",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/database-storage.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "async (password: string, textoPlano: any) => {\r\n    const encoder = new TextEncoder();\r\n    const sal = window.crypto.getRandomValues(new Uint8Array(SAL_LONG));\r\n    const initializationVector = window.crypto.getRandomValues(new Uint8Array(INITIALIZATION_VECTOR_LONG));\r\n    const textPlainBuffer = encoder.encode(textoPlano);\r\n    const clave = await passwordBasedKeyDerivation(password, sal, 100000, 256, 'SHA-256');\r\n    const encrypted = await window.crypto.subtle.encrypt({ name: \"AES-CBC\", iv: initializationVector }, clave, textPlainBuffer);\r\n    return bufferABase64([...sal, ...initializationVector, ...new Uint8Array(encrypted)]);\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  API_URL: 'http://localhost:3000/api/v1',\r\n  PUBLIC_PATH_SERVER: 'http://localhost:3000/',\r\n  URL_FILES_SERVER: 'https://erp-allendostmen-application.s3.amazonaws.com/',\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  API_URL: 'http://localhost:3000/api/v1',\r\n  PUBLIC_PATH_SERVER: 'http://localhost:3000/',\r\n  URL_FILES_SERVER: 'https://erp-allendostmen-application.s3.amazonaws.com/',\r\n}"
            },
            {
                "name": "fileFormInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(configuration: FileFormInput): FormInput => ({\r\n  type: 'file',\r\n  file: configuration\r\n})"
            },
            {
                "name": "firstLetterUppercaseColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'first-letter-uppercase', ...config })"
            },
            {
                "name": "getApareanceApp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ThemeColorName",
                "defaultValue": "() => {\r\n  const apareanceApp = localStorage.getItem('apareanceApp');\r\n  if (THEME_COLOR_NAMES.includes(apareanceApp as ThemeColorName))\r\n    return apareanceApp as ThemeColorName;\r\n  else return ThemeColorName.YELLOW;\r\n}"
            },
            {
                "name": "getApareanceDrawer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TypeDrawerApp",
                "defaultValue": "() => {\r\n  if (\r\n    localStorage.getItem('apareanceDrawer') == 'drawer-standard' ||\r\n    localStorage.getItem('apareanceDrawer') == 'drawer-dark-full'\r\n  )\r\n    return localStorage.getItem('apareanceDrawer') as TypeDrawerApp;\r\n  else return 'drawer-dark-full';\r\n}"
            },
            {
                "name": "getApareanceInputs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MatFormFieldAppearance",
                "defaultValue": "() => {\r\n  if (\r\n    localStorage.getItem('apareanceInputs') == 'fill' ||\r\n    localStorage.getItem('apareanceInputs') == 'outline'\r\n  )\r\n    return localStorage.getItem(\r\n      'apareanceInputs'\r\n    ) as MatFormFieldAppearance;\r\n  else return 'fill';\r\n}"
            },
            {
                "name": "getContractFormGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/tracking/contracts/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): FormGroup => {\r\n    return new FormGroup({\r\n        client_business_unit_id: new FormControl(null, [Validators.required]),\r\n\r\n        client_id: new FormControl(null, [Validators.required]),\r\n        client: new FormControl(null),\r\n\r\n        plan_id: new FormControl(null, [Validators.required]),\r\n        plan: new FormControl(null),\r\n\r\n        installation_date: new FormControl(new Date(), [Validators.required]),\r\n        start_date: new FormControl({ value: null, disabled: true }),\r\n        end_date: new FormControl({ value: null, disabled: true }),\r\n        period: new FormControl(null, [Validators.required]),\r\n        buy_price: new FormControl('0.00', [Validators.required]),\r\n        sale_price: new FormControl('0.00', [Validators.required]),\r\n        installation_price: new FormControl('0.00', [Validators.required]),\r\n        total_installation_price: new FormControl(null),\r\n        quantity: new FormControl(null, { validators: [Validators.required], updateOn: 'blur' }),\r\n        proration_days: new FormControl({ value: null, disabled: true }),\r\n        recurrent_type: new FormControl(RecurrentTypeEnum.MENSUAL, [Validators.required]),\r\n\r\n        client_responsible_document_number: new FormControl(null),\r\n        client_responsible_document_type: new FormControl(null),\r\n        client_responsible_name: new FormControl(null),\r\n        client_responsible_paternal_name: new FormControl(null),\r\n        client_responsible_maternal_name: new FormControl(null),\r\n        client_responsible_phone: new FormControl(null),\r\n        client_responsible_email: new FormControl(null),\r\n\r\n        sale_user_id: new FormControl(null, [Validators.required]),\r\n\r\n        contract_vehicles: new FormArray([]),\r\n    })\r\n}"
            },
            {
                "name": "getDataPersonFormDocumentNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "async (fetch: FetchService, documentNumber: string, abortController: AbortController = new AbortController()): Promise<DataPerson | undefined> => {\r\n    let type = '';\r\n    if (documentNumber.length == 8) type = 'dni';\r\n    else if (documentNumber.length == 11) type = 'ruc';\r\n    else return undefined;\r\n\r\n    const data = await fetch.get<any>(`${type}/${documentNumber}`, {\r\n        signal: abortController.signal,\r\n        toast: {\r\n            loading: `Buscando ${type.toUpperCase()}...`,\r\n            success: `${type.toUpperCase()} encontrado`,\r\n            error: `No se encontró el ${type.toUpperCase()}`,\r\n        }\r\n    });\r\n    if ((data as DataDNI).nombres) return {\r\n        document_type: 'DNI',\r\n        document_number: documentNumber,\r\n        full_name: `${data.nombres} ${data.apellidoPaterno} ${data.apellidoMaterno}`,\r\n        name: data.nombres,\r\n        mother_last_name: data.apellidoMaterno,\r\n        father_last_name: data.apellidoPaterno,\r\n        verifier_code: data.codVerifica,\r\n    }\r\n    else if ((data as DataRUC).nombre_o_razon_social) return {\r\n        document_type: 'RUC',\r\n        document_number: documentNumber,\r\n        full_name: data.nombre_o_razon_social,\r\n        business_name: data.nombre_o_razon_social,\r\n        address: data.direccion,\r\n        full_address: data.direccion_completa,\r\n        retaining_agent: data.es_agente_de_retencion,\r\n        sunat_condition: data.estado,\r\n        legal_representatives: data.representantes_legales ?? [],\r\n    }\r\n    else return undefined;\r\n}"
            },
            {
                "name": "getDocumentType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(documentTypes: DocumentType[], documentTypeName: DocumentTypeName) => {\r\n    const documentType = documentTypes.find(item => item.name.toUpperCase() == documentTypeName.toUpperCase());\r\n    return documentType;\r\n}"
            },
            {
                "name": "getTaxe",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(taxes: Taxe[], taxeName: TaxeName) => {\r\n    const taxe = taxes.find(item => item.name.toUpperCase() == taxeName.toUpperCase());\r\n    return taxe;\r\n}"
            },
            {
                "name": "getThemeApp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TypeTheme",
                "defaultValue": "() => {\r\n  if (\r\n    localStorage.getItem('themeApp') == 'dark' ||\r\n    localStorage.getItem('themeApp') == 'light'\r\n  )\r\n    return localStorage.getItem('themeApp') as 'dark' | 'light';\r\n  else if (window.matchMedia('(prefers-color-scheme: dark)').matches)\r\n    return 'system-dark';\r\n  else return 'system-light';\r\n}"
            },
            {
                "name": "htmlColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config: HtmlListColumn<T>): ListColumn<T> => ({ type: 'html', ...config })"
            },
            {
                "name": "HTTP_ERROR_CODES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/interfaces/fetch.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    {\r\n        status: 400,\r\n        title: 'Solicitud Incorrecta',\r\n        description: 'La solicitud que el servidor recibió no se puede entender o procesar.',\r\n    },\r\n    {\r\n        status: 401,\r\n        title: 'No Autorizado',\r\n        description: 'El recurso solicitado requiere autenticación y no se ha proporcionado credenciales válidas.',\r\n        icon: 'security',\r\n    },\r\n    {\r\n        status: 403,\r\n        title: 'Prohibido',\r\n        description: 'No tiene permiso para acceder al recurso solicitado.',\r\n        icon: 'security',\r\n    },\r\n    {\r\n        status: 404,\r\n        title: 'No Encontrado',\r\n        description: 'El servidor no puede encontrar el recurso solicitado.',\r\n        icon: 'dangerous',\r\n    },\r\n    {\r\n        status: 405,\r\n        title: 'Método No Permitido',\r\n        description: 'El método utilizado en la solicitud no está permitido para el recurso solicitado.'\r\n    },\r\n    {\r\n        status: 408,\r\n        title: 'Tiempo de Espera Agotado',\r\n        description: 'El servidor ha esperado demasiado tiempo para recibir la solicitud del cliente.',\r\n\r\n    },\r\n    {\r\n        status: 422,\r\n        title: 'Entidad No Procesable',\r\n        description: 'La solicitud fue bien formada, pero no se pudo seguir debido a errores semánticos.'\r\n    },\r\n    {\r\n        status: 500,\r\n        title: 'Error Interno del Servidor',\r\n        description: 'El servidor ha encontrado una situación inesperada que le impide completar la solicitud.'\r\n    },\r\n    {\r\n        status: 501,\r\n        title: 'No Implementado',\r\n        description: 'El servidor no admite la funcionalidad necesaria para completar la solicitud.'\r\n    },\r\n    {\r\n        status: 502,\r\n        title: 'Puerta de Enlace Incorrecta',\r\n        description: 'El servidor de la puerta de enlace ha recibido una respuesta no válida del servidor de origen.'\r\n    },\r\n    {\r\n        status: 503,\r\n        title: 'Servicio No Disponible',\r\n        description: 'El servidor no puede responder a la solicitud en este momento debido a una sobrecarga o mantenimiento.'\r\n    },\r\n]"
            },
            {
                "name": "imageColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config: ImageListColumn<T>): ListColumn<T> => ({ type: 'image', ...config })"
            },
            {
                "name": "INITIALIZATION_VECTOR_LONG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/database-storage.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "SAL_LONG"
            },
            {
                "name": "isLoggedGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/guards/auth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "async () => {\r\n    const fetchService = inject(FetchService);\r\n    const authService = inject(AuthService);\r\n    const router = inject(Router);\r\n    const token = authService.getToken();\r\n    if (!token) {\r\n        authService.removeToken();\r\n        router.navigate(['/login']);\r\n        return false;\r\n    }\r\n    try {\r\n        const response = await fetchService.get<User>('auth/user');\r\n        authService.setUser(response);\r\n        return true;\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n}"
            },
            {
                "name": "isNotLoggedGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/guards/auth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\r\n    const authService = inject(AuthService);\r\n    const router = inject(Router);\r\n    const isLogged = authService.isLogged();\r\n    if (isLogged) router.navigate(['/']);\r\n    return !isLogged;\r\n}"
            },
            {
                "name": "itemCreatedAtColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Creado',\r\n  sort: { key: 'created_at' },\r\n  displayValueFn: (item: any) => item.created_at,\r\n  ...config,\r\n})"
            },
            {
                "name": "itemNameAndDescriptionColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  title: 'Nombre',\r\n  gridColumn: '1fr',\r\n  sort: { key: 'name' },\r\n  routerLinkValue: { url: (item: any) => `../detail/${item.id}` },\r\n  displayValueFn: (item: any) => item.name,\r\n  displayAdditionalValueFn: (item: any) => item.description,\r\n  ...config,\r\n})"
            },
            {
                "name": "itemStatusColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'cssClassDisplayValue' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'first-letter-uppercase',\r\n  title: 'Estado',\r\n  sort: { key: 'status' },\r\n  align: 'center',\r\n  displayValueFn: (item: any) => item.status,\r\n  cssClassDisplayValue: (item: any) => `status-chip ${item.status}`,\r\n  ...config,\r\n})"
            },
            {
                "name": "itemUpdatedAtColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Actualizado',\r\n  sort: { key: 'updated_at' },\r\n  hidden: true,\r\n  displayValueFn: (item: any) => item.updated_at,\r\n  ...config,\r\n})"
            },
            {
                "name": "KEY_GET_ITEMS_PAGINATOR_LIST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken('KEY_GET_ITEMS_PAGINATOR_LIST')"
            },
            {
                "name": "KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken('KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST')"
            },
            {
                "name": "listFormatColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config: ListFormatListColumn<T>): ListColumn<T> => ({ type: 'list-format', ...config })"
            },
            {
                "name": "lowercaseColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'lowercase', ...config })"
            },
            {
                "name": "masterRoleGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/guards/auth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\r\n    const authService = inject(AuthService);\r\n    const user = authService.user();\r\n    return user?.role === UserRoleEnum.MASTER;\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AlertTemplateComponent>",
                "defaultValue": "{\r\n    title: 'Alert',\r\n    component: AlertTemplateComponent,\r\n    tags: ['autodocs'],\r\n    render: (args: AlertTemplateComponent) => ({\r\n        props: {\r\n            ...{\r\n                configuration: {\r\n                    icon: 'info',\r\n                    title: 'Information Alert',\r\n                    description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit, delectus. Quis magnam molestiae ab rerum non! Nihil mollitia, ut architecto corporis velit impedit! Repellendus placeat, laboriosam quis voluptate sapiente nobis?',\r\n                }\r\n            },\r\n            ...args,\r\n        },\r\n    }),\r\n    argTypes: {\r\n        configuration: {\r\n            control: 'object',\r\n        }\r\n    },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/itemListTemplate.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ItemListTemplateComponent>",
                "defaultValue": "{\r\n    title: 'ItemList',\r\n    component: ItemListTemplateComponent,\r\n    tags: ['autodocs'],\r\n    decorators: [\r\n        moduleMetadata({\r\n            imports: [BrowserAnimationsModule, MatNativeDateModule],\r\n            providers: [\r\n                { provide: ActivatedRoute, useClass: MockActivatedRoute },\r\n                { provide: MAT_PAGINATOR_DEFAULT_OPTIONS, useValue: { formFieldAppearance: 'outline', showFirstLastButtons: true, pageSizeOptions: [4, 8, 12], pageSize: 4, pageIndex: 0, } },\r\n            ],\r\n        }),\r\n    ],\r\n    argTypes: {\r\n        configuration: {\r\n            control: 'object',\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "MY_DATE_FORMATS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/myDateFormat.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    parse: {\r\n        dateInput: 'dd/MM/yyyy'\r\n    },\r\n    display: {\r\n        dateInput: <Intl.DateTimeFormatOptions> {\r\n            day: '2-digit',\r\n            month: '2-digit',\r\n            year: 'numeric',\r\n        },\r\n        monthYearLabel: <Intl.DateTimeFormatOptions> {\r\n            month: 'short',\r\n            year: 'numeric'\r\n        },\r\n        dateA11yLabel: { \r\n            day: 'numeric'\r\n        },\r\n        monthYearA11yLabel: <Intl.DateTimeFormatOptions> {\r\n            month: 'long',\r\n            year: 'numeric'\r\n        },\r\n    }\r\n }"
            },
            {
                "name": "NAME_EVENT_GLOBAL_SEARCH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sidenav/sidenav/sidenav.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'global_search'"
            },
            {
                "name": "NAME_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/interfaces/fetch.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'access_token'"
            },
            {
                "name": "NAME_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/auth.utilities.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'access_token'"
            },
            {
                "name": "numberColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'number', ...config })"
            },
            {
                "name": "numberFormInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(configuration: NumberFormInput): FormInput => ({\r\n  type: 'number',\r\n  number: configuration\r\n})"
            },
            {
                "name": "objectToURLSearchParams",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/queryParams.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(queryParams: { [key: string]: any }, ignoreKeys: string[] = []): URLSearchParams => {\r\n    const query_params = JSON.parse(JSON.stringify(queryParams));\r\n    var searchParams = new URLSearchParams();\r\n    for (const key in query_params) {\r\n        if (query_params[key] === '' || query_params[key] === null || query_params[key] === undefined  || query_params[key] === false || ignoreKeys.includes(query_params[key]))\r\n            continue;\r\n        searchParams.append(key, query_params[key]);\r\n    }\r\n    return searchParams;\r\n}"
            },
            {
                "name": "passwordBasedKeyDerivation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/database-storage.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "async (password: string, sal: any, iterations: number, long: number, hash: any, algoritmo = 'AES-CBC') => {\r\n    const encoder = new TextEncoder();\r\n    let key = await window.crypto.subtle.importKey('raw', encoder.encode(password), { name: 'PBKDF2' }, false, ['deriveKey']);\r\n    return await window.crypto.subtle.deriveKey(\r\n        {\r\n            name: 'PBKDF2',\r\n            salt: encoder.encode(sal),\r\n            iterations,\r\n            hash\r\n        },\r\n        key,\r\n        { name: algoritmo, length: long },\r\n        false,\r\n        ['encrypt', 'decrypt'],\r\n    );\r\n}"
            },
            {
                "name": "phoneColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'phone', ...config })"
            },
            {
                "name": "planFormGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/configuration/plans/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => new FormGroup({\r\n    name: new FormControl('', [Validators.required]),\r\n      price: new FormControl('', [Validators.required]),\r\n      coin: new FormControl(CoinEnum.SOLES, [Validators.required]),\r\n      description: new FormControl(''),\r\n})"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        configuration: {\r\n            title: 'Information Alert',\r\n            description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit, delectus. Quis magnam molestiae ab rerum non! Nihil mollitia, ut architecto corporis velit impedit! Repellendus placeat, laboriosam quis voluptate sapiente nobis?',\r\n            icon: 'home',\r\n            style: 'primary',\r\n        },\r\n    },\r\n}"
            },
            {
                "name": "RECURRENT_TYPE_VALUES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/interfaces/contract.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Object.values(RecurrentTypeEnum)"
            },
            {
                "name": "registerDataGroupDetail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-detail-template/item-detail-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): ItemDetailGroup<any> => {\r\n    return {\r\n        title: 'Datos del registro',\r\n        icon: 'app_registration',\r\n        details: [\r\n            {\r\n                title: 'Estado',\r\n                key: 'status',\r\n                type: 'titlecase',\r\n                cssClass: (item) => item.status ?? '',\r\n                displayValueFn: (item) => item.status,\r\n            },\r\n            {\r\n                title: 'Creado',\r\n                key: 'created_at',\r\n                type: 'diff-date',\r\n                displayValueFn: (item) => item.created_at,\r\n            },\r\n            {\r\n                title: 'Creado por',\r\n                key: 'create_user_id',\r\n                type: 'user',\r\n                displayValueFn: (item) => item.create_user_id,\r\n            },\r\n            {\r\n                title: 'Actualizado',\r\n                key: 'updated_at',\r\n                type: 'diff-date',\r\n                displayValueFn: (item) => item.updated_at,\r\n            },\r\n            {\r\n                title: 'Actualizado por',\r\n                key: 'update_user_id',\r\n                type: 'user',\r\n                displayValueFn: (item) => item.update_user_id,\r\n            },\r\n            {\r\n                title: 'Eliminado',\r\n                key: 'deleted_at',\r\n                type: 'diff-date',\r\n                displayValueFn: (item) => item.deleted_at,\r\n            },\r\n            {\r\n                title: 'Eliminado por',\r\n                key: 'delete_user_id',\r\n                type: 'user',\r\n                displayValueFn: (item) => item.delete_user_id,\r\n            },\r\n            {\r\n                title: 'Restaurado por',\r\n                key: 'restore_user_id',\r\n                type: 'user',\r\n                displayValueFn: (item) => item.restore_user_id,\r\n            },\r\n        ],\r\n    };\r\n}"
            },
            {
                "name": "restoreItemActionButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => clickEventActionButton({\r\n  icon: 'restore',\r\n  text: 'Restaurar',\r\n  fn: async ({ id }, _, { restoreItemFn }) => restoreItemFn(id),\r\n  hidden: (item) => !item.deleted_at,\r\n})"
            },
            {
                "name": "routerLinkActionButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config: RouterLinkActionButton<T>): ActionButton<T> => ({ type: 'routerLink', ...config })"
            },
            {
                "name": "SAL_LONG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/database-storage.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "16"
            },
            {
                "name": "Selectable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/itemListTemplate.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        configuration: {\r\n            title: 'Usuarios',\r\n            server: {\r\n                url: 'public/user',\r\n            },\r\n            rows: {\r\n                selectable: {\r\n                    actions: [\r\n                        selectableActionButton({\r\n                            icon: 'delete',\r\n                            fn: (selectedItems) => alert(`items seleccionados: ${selectedItems.length}`),\r\n                        })\r\n                    ]\r\n                }\r\n            },\r\n            columns: signal([\r\n                textColumn({\r\n                    title: 'Usuario / N° Documento',\r\n                    sort: { key: 'name' },\r\n                    routerLinkValue: { url: (item) => `../view/${item.id}` },\r\n                    gridColumn: '1fr',\r\n                    displayValueFn: (item) => item?.name ? item.name : '--',\r\n                    displayAdditionalValueFn: (item) => item?.document_number.length >= 11 ? 'RUC: ' + item?.document_number : item?.document_number.length == 8 ? 'DNI: ' + item?.document_number : 'OTRO: ' + item?.document_number,\r\n                }),\r\n                emailColumn({\r\n                    title: 'Email',\r\n                    sort: { key: 'email' },\r\n                    gridColumn: 'auto',\r\n                    displayValueFn: (item) => item.email,\r\n                }),\r\n                textColumn({\r\n                    title: 'Rol',\r\n                    sort: { key: 'role' },\r\n                    gridColumn: 'fit-content(120px)',\r\n                    displayValueFn: (item) => item.role,\r\n                }),\r\n                phoneColumn({\r\n                    title: 'Celular',\r\n                    sort: { key: 'cellphone' },\r\n                    gridColumn: 'fit-content(120px)',\r\n                    displayValueFn: (item) => item.cellphone,\r\n                }),\r\n                textColumn({\r\n                    title: 'Dirección',\r\n                    sort: { key: 'address' },\r\n                    gridColumn: 'fit-content(120px)',\r\n                    displayValueFn: (item) => item.address,\r\n                }),\r\n            ]),\r\n        } as ItemListConfiguration\r\n    },\r\n}"
            },
            {
                "name": "selectableActionButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config: SelectableActionButton<T>): SelectableActionButton<T> => ({ ...config })"
            },
            {
                "name": "selectFormInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(configuration: SelectConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n})"
            },
            {
                "name": "selectLocalFormInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(configuration: SelectLocalConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n})"
            },
            {
                "name": "selectServerFormInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(configuration: SelectServerConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n})"
            },
            {
                "name": "setApareanceApp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(nameApareance: ThemeColorName) => {\r\n  localStorage.setItem('apareanceApp', nameApareance);\r\n  const theme = getApareanceApp();\r\n  for (const e of THEME_COLOR_NAMES) {\r\n    document.body.classList.remove('theme-color-' + e);\r\n  }\r\n  document.body.classList.add('theme-color-' +theme);\r\n}"
            },
            {
                "name": "setApareanceDrawer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(nameApareance: TypeDrawerApp) => {\r\n  localStorage.setItem('apareanceDrawer', nameApareance);\r\n  const theme = getApareanceDrawer();\r\n  document.body.classList.remove('drawer-standard');\r\n  document.body.classList.remove('drawer-dark-full');\r\n  document.body.classList.add(theme);\r\n}"
            },
            {
                "name": "setApareanceInputs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(nameApareance: MatFormFieldAppearance) => {\r\n  localStorage.setItem('apareanceInputs', nameApareance);\r\n}"
            },
            {
                "name": "setConfigApp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\r\n  const theme = getThemeApp();\r\n  setThemeApp(theme);\r\n  const appearance = getApareanceApp();\r\n  setApareanceApp(appearance);\r\n}"
            },
            {
                "name": "setThemeApp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(nameTheme: TypeTheme) => {\r\n  localStorage.setItem('themeApp', nameTheme);\r\n  const theme = getThemeApp();\r\n  if (theme == 'dark' || theme == 'system-dark') {\r\n    document.body.classList.add('dark');\r\n    document.body.classList.remove('light');\r\n  } else {\r\n    document.body.classList.remove('dark');\r\n    document.body.classList.add('light');\r\n  }\r\n}"
            },
            {
                "name": "Simple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/itemListTemplate.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        configuration: {\r\n            title: 'Usuarios',\r\n            server: {\r\n                url: 'public/user',\r\n            },\r\n            columns: signal([\r\n                textColumn({\r\n                    title: 'Usuario / N° Documento',\r\n                    sort: { key: 'name' },\r\n                    routerLinkValue: { url: (item) => `../view/${item.id}` },\r\n                    gridColumn: '1fr',\r\n                    displayValueFn: (item) => item?.name ? item.name : '--',\r\n                    displayAdditionalValueFn: (item) => item?.document_number.length >= 11 ? 'RUC: ' + item?.document_number : item?.document_number.length == 8 ? 'DNI: ' + item?.document_number : 'OTRO: ' + item?.document_number,\r\n                }),\r\n                emailColumn({\r\n                    title: 'Email',\r\n                    sort: { key: 'email' },\r\n                    gridColumn: 'auto',\r\n                    displayValueFn: (item) => item.email,\r\n                }),\r\n                textColumn({\r\n                    title: 'Rol',\r\n                    sort: { key: 'role' },\r\n                    gridColumn: 'fit-content(120px)',\r\n                    displayValueFn: (item) => item.role,\r\n                }),\r\n                phoneColumn({\r\n                    title: 'Celular',\r\n                    sort: { key: 'cellphone' },\r\n                    gridColumn: 'fit-content(120px)',\r\n                    displayValueFn: (item) => item.cellphone,\r\n                }),\r\n                textColumn({\r\n                    title: 'Dirección',\r\n                    sort: { key: 'address' },\r\n                    gridColumn: 'fit-content(120px)',\r\n                    displayValueFn: (item) => item.address,\r\n                }),\r\n            ]),\r\n        } as ItemListConfiguration,\r\n    },\r\n}"
            },
            {
                "name": "simpleListColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): ListColumn<any>[] => ([\r\n  itemNameAndDescriptionColumn(),\r\n  itemUpdatedAtColumn(),\r\n  itemCreatedAtColumn(),\r\n  itemStatusColumn(),\r\n])"
            },
            {
                "name": "switchFormInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(configuration: SwitchFormInput): FormInput => ({\r\n  type: 'switch',\r\n  switch: configuration\r\n})"
            },
            {
                "name": "Tertiary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        configuration: {\r\n            title: 'Information Alert',\r\n            description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit, delectus. Quis magnam molestiae ab rerum non! Nihil mollitia, ut architecto corporis velit impedit! Repellendus placeat, laboriosam quis voluptate sapiente nobis?',\r\n            icon: 'home',\r\n            style: 'tertiary',\r\n        },\r\n    },\r\n}"
            },
            {
                "name": "textareaFormInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(configuration: TextareaFormInput): FormInput => ({\r\n  type: 'textarea',\r\n  textarea: configuration\r\n})"
            },
            {
                "name": "textColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'text', ...config })"
            },
            {
                "name": "textDetail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-detail-template/item-detail-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {}"
            },
            {
                "name": "textFormInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(configuration: TextFormInput): FormInput => ({\r\n  type: 'text',\r\n  text: configuration\r\n})"
            },
            {
                "name": "THEME_COLOR_NAMES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Object.values(ThemeColorName)"
            },
            {
                "name": "THEME_COLORS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sidenav/profile-menu/profile-menu.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  // 'theme-color-yellow',\r\n  // 'theme-color-red',\r\n  'theme-color-orange',\r\n  'theme-color-blue',\r\n  'theme-color-green',\r\n  'theme-color-purple',\r\n  'theme-color-cyan',\r\n  'theme-color-pink',\r\n]"
            },
            {
                "name": "titlecaseColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'titlecase', ...config })"
            },
            {
                "name": "uppercaseColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'uppercase', ...config })"
            },
            {
                "name": "USER_ROLES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/interfaces/baseModel.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Object.values(UserRoleEnum)"
            },
            {
                "name": "userColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'user', ...config })"
            },
            {
                "name": "userFormGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/organization/users/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => new FormGroup({\r\n    document_type: new FormControl(null, [Validators.required]),\r\n    document_number: new FormControl('', [Validators.required]),\r\n    name: new FormControl('', [Validators.required]),\r\n    email: new FormControl('', [Validators.required]),\r\n    address: new FormControl(null),\r\n    phone: new FormControl(null),\r\n    cellphone: new FormControl(null),\r\n    birth_date: new FormControl(null),\r\n    role: new FormControl('', [Validators.required]),\r\n})"
            },
            {
                "name": "VEHICLE_UNSUBSCRIBE_PROGRAMMING_TYPE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/interfaces/vehicleUnsubscribe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Object.values(VehicleUnsubscribeProgrammingType)"
            },
            {
                "name": "vehicleFormGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/tracking/vehicles/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => new FormGroup({\r\n    vehicle_type_id: new FormControl('', [Validators.required]),\r\n    client_id: new FormControl('', [Validators.required]),\r\n    client: new FormControl<any>(''),\r\n    plate: new FormControl('', [Validators.required]),\r\n    color: new FormControl(''),\r\n    brand: new FormControl(''),\r\n    model: new FormControl(''),\r\n    year: new FormControl(''),\r\n    file: new FormControl(''),\r\n    description: new FormControl(''),\r\n})"
            },
            {
                "name": "vehicleTypeFormGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/configuration/vehicle-types/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => new FormGroup({\r\n    name: new FormControl('', [Validators.required]),\r\n    description: new FormControl('', [Validators.required]),\r\n    image: new FormControl(null),\r\n})"
            },
            {
                "name": "vehicleUnsubscribeFormGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/tracking/vehicles/vehicle-unsubscribes/helpers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(item?: Partial<VehicleUnsubscribe>) => new FormGroup({\r\n    vehicle_id: new FormControl(item?.vehicle_id ?? null, [Validators.required]),\r\n            user_id: new FormControl(item?.user_id ?? null, [Validators.required]),\r\n            programming_type: new FormControl(item?.programming_type ?? null, [Validators.required]),\r\n            reason: new FormControl(item?.reason ?? null, [Validators.required]),\r\n            observations: new FormControl(item?.observations ?? null, [Validators.required]),\r\n            start_date: new FormControl(item?.start_date ?? null, [Validators.required]),\r\n            end_date: new FormControl(item?.end_date ?? null),\r\n})"
            },
            {
                "name": "viewItemActionButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => routerLinkActionButton({\r\n  icon: 'visibility',\r\n  text: 'Ver',\r\n  routerLink: { url: (item) => `../view/${item.id}` },\r\n})"
            },
            {
                "name": "WithAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        configuration: {\r\n            title: 'Information Alert',\r\n            description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit, delectus. Quis magnam molestiae ab rerum non! Nihil mollitia, ut architecto corporis velit impedit! Repellendus placeat, laboriosam quis voluptate sapiente nobis?',\r\n            icon: 'home',\r\n            actionButton: {\r\n                icon: 'info',\r\n                text: 'More Info',\r\n                fn: () => {\r\n                    alert('More Info');\r\n                }\r\n            }\r\n        },\r\n    },\r\n}"
            },
            {
                "name": "WithCloseButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    render: (args: AlertTemplateComponent) => {\r\n        return {\r\n            template: `\r\n                <app-alert-template\r\n                [configuration]=\"{\r\n                    title: 'Information Alert',\r\n                    description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit, delectus. Quis magnam molestiae ab rerum non! Nihil mollitia, ut architecto corporis velit impedit! Repellendus placeat, laboriosam quis voluptate sapiente nobis?',\r\n                    icon: 'home',\r\n                    showCloseButton: true\r\n                }\"/>\r\n            `\r\n        }\r\n    }\r\n\r\n}"
            },
            {
                "name": "WithOutTitle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        configuration: {\r\n            description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit, delectus. Quis magnam molestiae ab rerum non! Nihil mollitia, ut architecto corporis velit impedit! Repellendus placeat, laboriosam quis voluptate sapiente nobis?',\r\n            icon: 'home',\r\n        } as AlertConfiguration,\r\n    },\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ActionButtonActionsType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"clickEvent\" | \"routerLink\"",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ActionButtonType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"clickEvent\" | \"update\" | \"delete\" | \"restore\"",
                "file": "src/app/shared/interfaces/itemDetail.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "InputType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"select\" | \"select-local\" | \"select-server\" | \"date\" | \"date-range\" | \"text\" | \"number\" | \"textarea\" | \"checkbox\" | \"switch\" | \"autocomplete\" | \"autocomplete-local\" | \"autocomplete-server\"",
                "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "InterceptErrors",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/shared/utilities/fetchBase.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "InterceptHeaders",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/shared/utilities/fetchBase.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "LateralPanelType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"maximum\" | \"minimum\"",
                "file": "src/app/sidenav/sidenav/sidenav.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ProcessAfterCallRequest",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/shared/utilities/fetchBase.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "ProcessBeforeCallRequest",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/shared/utilities/fetchBase.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AlertTemplateComponent>",
                "file": "src/stories/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ItemListTemplateComponent>",
                "file": "src/stories/itemListTemplate.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "StyleButton",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"filled-button\" | \"tonal-button\" | \"text-button\" | \"outlined-button\" | \"elevated-button\" | \"icon-button\" | \"tonal-icon-button\" | \"filled-icon-button\" | \"outlined-icon-button\"",
                "file": "src/app/shared/interfaces/itemDetail.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "StyleButton",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"filled-button\" | \"tonal-button\" | \"text-button\" | \"outlined-button\" | \"elevated-button\" | \"icon-button\" | \"tonal-icon-button\" | \"filled-icon-button\" | \"outlined-icon-button\"",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TypeApareance",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"theme-color-yellow\" | \"theme-color-rose\" | \"theme-color-red\" | \"theme-color-blue\" | \"theme-color-green\"",
                "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TypeDrawerApp",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"drawer-standard\" | \"drawer-dark-full\"",
                "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TypeInputsApp",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"outlined\" | \"filled\" | \"default\"",
                "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TypeTheme",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"dark\" | \"light\" | \"system-dark\" | \"system-light\"",
                "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TypeValueKeyItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"text\" | \"diff-date\" | \"date\" | \"number\" | \"email\" | \"phone\" | \"user\" | \"uppercase\" | \"lowercase\" | \"titlecase\" | \"first-letter-uppercase\" | \"list-format\" | \"currency\"",
                "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "BoxMovementTypeEnum",
                "childs": [
                    {
                        "name": "INGRESO",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ingreso"
                    },
                    {
                        "name": "EGRESO",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "egreso"
                    },
                    {
                        "name": "MOVIMIENTO_ENTRE_CAJAS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "movimiento entre cajas"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/interfaces/boxMovement.ts"
            },
            {
                "name": "BoxTypeEnum",
                "childs": [
                    {
                        "name": "FISICA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "fisica"
                    },
                    {
                        "name": "VIRTUAL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "virtual"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/interfaces/box.ts"
            },
            {
                "name": "ClientAccountTypeEnum",
                "childs": [
                    {
                        "name": "Recaudacion",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "recaudación"
                    },
                    {
                        "name": "Detraccion",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "detracción"
                    },
                    {
                        "name": "Retención",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "retención"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/interfaces/clientAccount.ts"
            },
            {
                "name": "CoinEnum",
                "childs": [
                    {
                        "name": "SOLES",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "soles"
                    },
                    {
                        "name": "DOLARES",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dólares"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/interfaces/baseModel.ts"
            },
            {
                "name": "ComprobantTypeEnum",
                "childs": [
                    {
                        "name": "Factura",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "factura"
                    },
                    {
                        "name": "Boleta",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "boleta"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/interfaces/clientBillingOption.ts"
            },
            {
                "name": "ContractResolutionEntityEnum",
                "childs": [
                    {
                        "name": "Empresa",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "empresa"
                    },
                    {
                        "name": "Cliente",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "cliente"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/interfaces/contractResolution.ts"
            },
            {
                "name": "ContractResolutionTypeEnum",
                "childs": [
                    {
                        "name": "Unilateral",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "unilateral"
                    },
                    {
                        "name": "MutuoAcuerdo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "mutuo acuerdo"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/interfaces/contractResolution.ts"
            },
            {
                "name": "DocumentTypeEnum",
                "childs": [
                    {
                        "name": "DNI",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dni"
                    },
                    {
                        "name": "RUC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ruc"
                    },
                    {
                        "name": "CARNET_EXTRANJERIA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "carnet de extranjeria"
                    },
                    {
                        "name": "PASAPORTE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pasaporte"
                    },
                    {
                        "name": "OTRO",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "otro"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/interfaces/baseModel.ts"
            },
            {
                "name": "DocumentTypeName",
                "childs": [
                    {
                        "name": "Ruc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RUC"
                    },
                    {
                        "name": "Dni",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DNI"
                    },
                    {
                        "name": "CE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CARNE DE EXTRANJERÍA"
                    },
                    {
                        "name": "Otro",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "OTRO"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/interfaces/documentType.ts"
            },
            {
                "name": "FetchErrorType",
                "childs": [
                    {
                        "name": "HTTP",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "HttpErrorResponse"
                    },
                    {
                        "name": "ABORT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "AbortError"
                    },
                    {
                        "name": "FAILED_FETCH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FailedFetch"
                    },
                    {
                        "name": "UNKNOWN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "UnknownError"
                    },
                    {
                        "name": "CONFIRMATION_DIALOG",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ConfirmationDialogAborted"
                    },
                    {
                        "name": "TYPE_ERROR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "TypeError"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/interfaces/fetch.ts"
            },
            {
                "name": "NameModuleDatabase",
                "childs": [
                    {
                        "name": "BoxOpenings",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "boxOpenings"
                    },
                    {
                        "name": "Banks",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "banks"
                    },
                    {
                        "name": "Users",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "users"
                    },
                    {
                        "name": "Taxes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "taxes"
                    },
                    {
                        "name": "DocumentTypes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "documentTypes"
                    },
                    {
                        "name": "Plans",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "plans"
                    },
                    {
                        "name": "VehicleTypes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "vehicleTypes"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/services/database-storage.service.ts"
            },
            {
                "name": "PaymentTypeEnum",
                "childs": [
                    {
                        "name": "TRANSFERENCIA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "transferencia"
                    },
                    {
                        "name": "DEPOSITO",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "depósito"
                    },
                    {
                        "name": "EFECTIVO",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "efectivo"
                    },
                    {
                        "name": "CHEQUE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "cheque"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/interfaces/boxMovement.ts"
            },
            {
                "name": "Recurrent",
                "childs": [
                    {
                        "name": "Hourly",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "hourly"
                    },
                    {
                        "name": "Daily",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "daily"
                    },
                    {
                        "name": "Weekly",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "weekly"
                    },
                    {
                        "name": "Monthly",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "monthly"
                    },
                    {
                        "name": "Yearly",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "yearly"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/services/database-storage.service.ts"
            },
            {
                "name": "RecurrentTypeEnum",
                "childs": [
                    {
                        "name": "MENSUAL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "mensual"
                    },
                    {
                        "name": "TRIMESTRAL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "trimestral"
                    },
                    {
                        "name": "SEMESTRAL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "semestral"
                    },
                    {
                        "name": "ANUAL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "anual"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/interfaces/contract.ts"
            },
            {
                "name": "StatusModel",
                "childs": [
                    {
                        "name": "Activo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "activo"
                    },
                    {
                        "name": "Inactivo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "inactivo"
                    },
                    {
                        "name": "Pediente",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pendiente"
                    },
                    {
                        "name": "Aprobado",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "aprobado"
                    },
                    {
                        "name": "Enviado",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "enviado"
                    },
                    {
                        "name": "Entregado",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "entregado"
                    },
                    {
                        "name": "Recibido",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "recibido"
                    },
                    {
                        "name": "Pagado",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pagado"
                    },
                    {
                        "name": "Facturado",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "facturado"
                    },
                    {
                        "name": "Vigente",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "vigente"
                    },
                    {
                        "name": "Habilitado",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "habilitado"
                    },
                    {
                        "name": "Anulado",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "anulado"
                    },
                    {
                        "name": "Rechazado",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "rechazado"
                    },
                    {
                        "name": "Expirado",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "expirado"
                    },
                    {
                        "name": "Finalizado",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "finalizado"
                    },
                    {
                        "name": "Abierto",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "abierto"
                    },
                    {
                        "name": "Cerrado",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "cerrado"
                    },
                    {
                        "name": "Revisado",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "revisado"
                    },
                    {
                        "name": "Eliminado",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "eliminado"
                    },
                    {
                        "name": "PendientePago",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pendiente de pago"
                    },
                    {
                        "name": "PendienteFacturación",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pendiente de facturación"
                    },
                    {
                        "name": "PendienteEntrega",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pendiente de entrega"
                    },
                    {
                        "name": "PendienteRevision",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pendiente de revisión"
                    },
                    {
                        "name": "PendienteAprobacion",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pendiente de aprobación"
                    },
                    {
                        "name": "PendienteEnvio",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pendiente de envío"
                    },
                    {
                        "name": "PendienteRecibo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pendiente de recibo"
                    },
                    {
                        "name": "PendienteCierre",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pendiente de cierre"
                    },
                    {
                        "name": "PendienteFinalizacion",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pendiente de finalización"
                    },
                    {
                        "name": "PendienteAnulación",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pendiente de anulación"
                    },
                    {
                        "name": "PendienteRechazo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pendiente de rechazo"
                    },
                    {
                        "name": "Generada",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "generada"
                    },
                    {
                        "name": "PendienteAceptar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pendiente aceptar"
                    },
                    {
                        "name": "Aceptada",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "aceptada"
                    },
                    {
                        "name": "Observada",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "observada"
                    },
                    {
                        "name": "Rechazada",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "rechazada"
                    },
                    {
                        "name": "Pagada",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pagada"
                    },
                    {
                        "name": "Anulada",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "anulada"
                    },
                    {
                        "name": "PorAnular",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "por anular"
                    },
                    {
                        "name": "Aplicada",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "aplicada"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/interfaces/baseModel.ts"
            },
            {
                "name": "TaxeName",
                "childs": [
                    {
                        "name": "Igv",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "IGV"
                    },
                    {
                        "name": "TipoDeCambio",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "TIPO DE CAMBIO"
                    },
                    {
                        "name": "Renta",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RENTA"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/interfaces/taxe.ts"
            },
            {
                "name": "ThemeColorName",
                "childs": [
                    {
                        "name": "YELLOW",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "yellow"
                    },
                    {
                        "name": "BLUE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "blue"
                    },
                    {
                        "name": "GREEN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "green"
                    },
                    {
                        "name": "ROSE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "rose"
                    },
                    {
                        "name": "RED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "red"
                    },
                    {
                        "name": "CYAN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "cyan"
                    },
                    {
                        "name": "PURPLE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "purple"
                    },
                    {
                        "name": "EMERALD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "emerald"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/utilities/verifiyThemeApp.ts"
            },
            {
                "name": "UserlevelEnum",
                "childs": [
                    {
                        "name": "Master",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "Full",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "Standar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    },
                    {
                        "name": "Basic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 4
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/interfaces/user.ts"
            },
            {
                "name": "UserRoleEnum",
                "childs": [
                    {
                        "name": "PM",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pm"
                    },
                    {
                        "name": "KAM",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "kam"
                    },
                    {
                        "name": "MASTER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "master"
                    },
                    {
                        "name": "COMPRAS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "compras"
                    },
                    {
                        "name": "ALMACEN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "almacén"
                    },
                    {
                        "name": "TESORERÍA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "tesorería"
                    },
                    {
                        "name": "CONTABILIDAD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "contabilidad"
                    },
                    {
                        "name": "ADMINISTRACIÓN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "administración"
                    },
                    {
                        "name": "GESTIÓN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "gestión"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/interfaces/user.ts"
            },
            {
                "name": "VehicleUnsubscribeProgrammingType",
                "childs": [
                    {
                        "name": "FinDeContrato",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "fin de contrato"
                    },
                    {
                        "name": "fechaFija",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "fecha fija"
                    },
                    {
                        "name": "indefinida",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "indefinida"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/interfaces/vehicleUnsubscribe.ts"
            }
        ],
        "groupedVariables": {
            "src/app/modules/administration/accounts/helpers/index.ts": [
                {
                    "name": "accountFormGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/administration/accounts/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => new FormGroup({\r\n    bank_id: new FormControl(null, [Validators.required]),\r\n    name: new FormControl('', [Validators.required]),\r\n    number: new FormControl('', [Validators.required]),\r\n    coin: new FormControl('soles', [Validators.required]),\r\n    description: new FormControl(''),\r\n})"
                },
                {
                    "name": "DEFAULT_DISPLAY_FIELDS_FORM_ACCOUNT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/administration/accounts/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormInput[]",
                    "defaultValue": "[\r\n    autocompleteServerFormInput({\r\n        formControlName: 'bank_id',\r\n        textLabel: 'Banco',\r\n        server: {\r\n            url: 'bank',\r\n        },\r\n        cssClass: 'col-span-6 @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'name',\r\n        textLabel: 'Nombre',\r\n        cssClass: 'col-span-full @2xl:col-span-6',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'number',\r\n        textLabel: 'N° de cuenta',\r\n        cssClass: 'col-span-6 @2xl:col-span-2',\r\n    }),\r\n    selectFormInput({\r\n        formControlName: 'coin',\r\n        textLabel: 'Moneda',\r\n        data: COIN.map((item) => ({ name: item.toUpperCase(), id: item })),\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'description',\r\n        textLabel: 'Descripción',\r\n        cssClass: 'col-span-full'\r\n    })\r\n]"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appareance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"fill\" | \"outline\"",
                    "defaultValue": "() => {\r\n  return localStorage.getItem('apareanceInputs') == 'fill' ? 'fill' : 'outline';\r\n}"
                },
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideRouter(routes, withViewTransitions(), withComponentInputBinding()),\r\n    provideAnimations(),\r\n    importProvidersFrom(SocketIoModule.forRoot(config)),\r\n    importProvidersFrom(MatDialogModule),\r\n    importProvidersFrom(MatSnackBarModule),\r\n    importProvidersFrom(MatNativeDateModule),\r\n    importProvidersFrom(DatabaseStorageService),\r\n    importProvidersFrom(DateFnsAdapter),\r\n\r\n    { provide: LOCALE_ID, useValue: 'es-PE' },\r\n    { provide: MAT_DATE_LOCALE, useValue: 'es-PE' },\r\n    { provide: DEFAULT_CURRENCY_CODE, useValue: 'S/' },\r\n    { provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: { appearance: appareance(), subscriptSizing: 'dynamic' } },\r\n    { provide: MAT_PAGINATOR_DEFAULT_OPTIONS, useValue: { formFieldAppearance: 'fill', showFirstLastButtons: true, pageSizeOptions: [20, 50, 100], pageSize: 20 } },\r\n    { provide: MAT_SORT_DEFAULT_OPTIONS, useValue: { arrowPosition: 'after', disableClear: false } },\r\n    { provide: MatPaginatorIntl, useClass: CustomPaginator },\r\n    DateFnsAdapter,\r\n    { provide: DateAdapter, useClass: MyDateAdapter, deps: [DateFnsAdapter] },\r\n    { provide: MAT_DATE_FORMATS, useValue: MY_DATE_FORMATS },\r\n    provideServiceWorker('ngsw-worker.js', {\r\n      enabled: !isDevMode(),\r\n      registrationStrategy: 'registerWhenStable:30000'\r\n    })\r\n  ]\r\n}"
                },
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SocketIoConfig",
                    "defaultValue": "{ url: 'http://localhost:3001', options: {} }"
                }
            ],
            "src/app/shared/components/item-form-template/item-form-template.component.ts": [
                {
                    "name": "autocompleteFormInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(configuration: AutocompleteConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocomplete: configuration\r\n})"
                },
                {
                    "name": "autocompleteLocalFormInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(configuration: AutocompleteLocalConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-local',\r\n  autocompleteLocal: configuration\r\n})"
                },
                {
                    "name": "autocompleteServerFormInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(configuration: AutocompleteServerConfigurationExt): FormInput => ({\r\n  type: 'autocomplete-server',\r\n  autocompleteServer: configuration\r\n})"
                },
                {
                    "name": "checkboxFormInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(configuration: CheckboxFormInput): FormInput => ({\r\n  type: 'checkbox',\r\n  checkbox: configuration\r\n})"
                },
                {
                    "name": "dateFormInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(configuration: DateFormInput): FormInput => ({\r\n  type: 'date',\r\n  date: configuration\r\n})"
                },
                {
                    "name": "dateRangeFormInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(configuration: DateRangeFormInput): FormInput => ({\r\n  type: 'date-range',\r\n  dateRange: configuration\r\n})"
                },
                {
                    "name": "fileFormInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(configuration: FileFormInput): FormInput => ({\r\n  type: 'file',\r\n  file: configuration\r\n})"
                },
                {
                    "name": "numberFormInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(configuration: NumberFormInput): FormInput => ({\r\n  type: 'number',\r\n  number: configuration\r\n})"
                },
                {
                    "name": "selectFormInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(configuration: SelectConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n})"
                },
                {
                    "name": "selectLocalFormInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(configuration: SelectLocalConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n})"
                },
                {
                    "name": "selectServerFormInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(configuration: SelectServerConfigurationExt): FormInput => ({\r\n  type: 'select',\r\n  select: configuration\r\n})"
                },
                {
                    "name": "switchFormInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(configuration: SwitchFormInput): FormInput => ({\r\n  type: 'switch',\r\n  switch: configuration\r\n})"
                },
                {
                    "name": "textareaFormInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(configuration: TextareaFormInput): FormInput => ({\r\n  type: 'textarea',\r\n  textarea: configuration\r\n})"
                },
                {
                    "name": "textFormInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(configuration: TextFormInput): FormInput => ({\r\n  type: 'text',\r\n  text: configuration\r\n})"
                }
            ],
            "src/app/modules/configuration/banks/helpers/index.ts": [
                {
                    "name": "bankFormGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/configuration/banks/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => new FormGroup({\r\n    name: new FormControl('', [Validators.required]),\r\n    code: new FormControl(''),\r\n    description: new FormControl(''),\r\n})"
                },
                {
                    "name": "DEFAULT_DISPLAY_FIELDS_FORM_BANK",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/configuration/banks/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormInput[]",
                    "defaultValue": "[\r\n    textFormInput({\r\n        formControlName: 'code',\r\n        textLabel: 'Código',\r\n        cssClass: 'col-span-6 @2xl:col-span-3',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'name',\r\n        textLabel: 'Nombre',\r\n        cssClass: 'col-span-full @2xl:col-span-9',\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'description',\r\n        textLabel: 'Descripción',\r\n        cssClass: 'col-span-full'\r\n    })\r\n]"
                }
            ],
            "src/app/core/services/database-storage.service.ts": [
                {
                    "name": "base64ABuffer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/database-storage.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(buffer: any) => Uint8Array.from(atob(buffer), c => c.charCodeAt(0))"
                },
                {
                    "name": "bufferABase64",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/database-storage.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(buffer: any) => btoa(String.fromCharCode(...new Uint8Array(buffer)))"
                },
                {
                    "name": "decrypt",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/database-storage.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "async (password: string, encriptadoEnBase64: any) => {\r\n    const decoder = new TextDecoder();\r\n    const encryptData = base64ABuffer(encriptadoEnBase64);\r\n    const sal = encryptData.slice(0, SAL_LONG);\r\n    const initializationVector = encryptData.slice(0 + SAL_LONG, SAL_LONG + INITIALIZATION_VECTOR_LONG);\r\n    const clave = await passwordBasedKeyDerivation(password, sal, 100000, 256, 'SHA-256');\r\n    const decryptDataBuffer = await window.crypto.subtle.decrypt({ name: \"AES-CBC\", iv: initializationVector }, clave, encryptData.slice(SAL_LONG + INITIALIZATION_VECTOR_LONG));\r\n    return decoder.decode(decryptDataBuffer);\r\n}"
                },
                {
                    "name": "encrypt",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/database-storage.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "async (password: string, textoPlano: any) => {\r\n    const encoder = new TextEncoder();\r\n    const sal = window.crypto.getRandomValues(new Uint8Array(SAL_LONG));\r\n    const initializationVector = window.crypto.getRandomValues(new Uint8Array(INITIALIZATION_VECTOR_LONG));\r\n    const textPlainBuffer = encoder.encode(textoPlano);\r\n    const clave = await passwordBasedKeyDerivation(password, sal, 100000, 256, 'SHA-256');\r\n    const encrypted = await window.crypto.subtle.encrypt({ name: \"AES-CBC\", iv: initializationVector }, clave, textPlainBuffer);\r\n    return bufferABase64([...sal, ...initializationVector, ...new Uint8Array(encrypted)]);\r\n}"
                },
                {
                    "name": "INITIALIZATION_VECTOR_LONG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/database-storage.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "SAL_LONG"
                },
                {
                    "name": "passwordBasedKeyDerivation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/database-storage.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "async (password: string, sal: any, iterations: number, long: number, hash: any, algoritmo = 'AES-CBC') => {\r\n    const encoder = new TextEncoder();\r\n    let key = await window.crypto.subtle.importKey('raw', encoder.encode(password), { name: 'PBKDF2' }, false, ['deriveKey']);\r\n    return await window.crypto.subtle.deriveKey(\r\n        {\r\n            name: 'PBKDF2',\r\n            salt: encoder.encode(sal),\r\n            iterations,\r\n            hash\r\n        },\r\n        key,\r\n        { name: algoritmo, length: long },\r\n        false,\r\n        ['encrypt', 'decrypt'],\r\n    );\r\n}"
                },
                {
                    "name": "SAL_LONG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/database-storage.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "16"
                }
            ],
            "src/app/shared/components/item-list-template/item-list-template.component.ts": [
                {
                    "name": "clickEventActionButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config: ClickEventActionButton<T>): ActionButton<T> => ({ type: 'clickEvent', ...config })"
                },
                {
                    "name": "DATA_TYPE_LIST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<'array' | 'paginator'>('KEY_GET_ITEMS_PAGINATOR_LIST')"
                },
                {
                    "name": "dateColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config: DateListColumn<T>): ListColumn<T> => ({ type: 'date', ...config })"
                },
                {
                    "name": "defaultListFilterInputs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): FormInput[] => [\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de creación',\r\n    formControlNameFrom: 'created_at_from',\r\n    formControlNameTo: 'created_at_to',\r\n  }),\r\n  dateRangeFormInput({\r\n    textLabel: 'Fecha de actualización',\r\n    formControlNameFrom: 'updated_at_from',\r\n    formControlNameTo: 'updated_at_to',\r\n  }),\r\n  switchFormInput({\r\n    textLabel: 'Registros inactivos',\r\n    formControlName: 'inactive',\r\n  }),\r\n]"
                },
                {
                    "name": "deleteItemActionButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => clickEventActionButton({\r\n  icon: 'delete',\r\n  text: 'Eliminar',\r\n  fn: async ({ id }, _, { deleteItemFn }) => deleteItemFn(id),\r\n  hidden: (item) => item.deleted_at,\r\n})"
                },
                {
                    "name": "diffDateColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'diff-date', ...config })"
                },
                {
                    "name": "editItemActionButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => routerLinkActionButton({\r\n  icon: 'edit',\r\n  text: 'Editar',\r\n  routerLink: { url: (item) => `../edit/${item.id}` },\r\n})"
                },
                {
                    "name": "emailColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'email', ...config })"
                },
                {
                    "name": "firstLetterUppercaseColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'first-letter-uppercase', ...config })"
                },
                {
                    "name": "htmlColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config: HtmlListColumn<T>): ListColumn<T> => ({ type: 'html', ...config })"
                },
                {
                    "name": "imageColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config: ImageListColumn<T>): ListColumn<T> => ({ type: 'image', ...config })"
                },
                {
                    "name": "itemCreatedAtColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Creado',\r\n  sort: { key: 'created_at' },\r\n  displayValueFn: (item: any) => item.created_at,\r\n  ...config,\r\n})"
                },
                {
                    "name": "itemNameAndDescriptionColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  title: 'Nombre',\r\n  gridColumn: '1fr',\r\n  sort: { key: 'name' },\r\n  routerLinkValue: { url: (item: any) => `../detail/${item.id}` },\r\n  displayValueFn: (item: any) => item.name,\r\n  displayAdditionalValueFn: (item: any) => item.description,\r\n  ...config,\r\n})"
                },
                {
                    "name": "itemStatusColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'cssClassDisplayValue' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'first-letter-uppercase',\r\n  title: 'Estado',\r\n  sort: { key: 'status' },\r\n  align: 'center',\r\n  displayValueFn: (item: any) => item.status,\r\n  cssClassDisplayValue: (item: any) => `status-chip ${item.status}`,\r\n  ...config,\r\n})"
                },
                {
                    "name": "itemUpdatedAtColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config?: Partial<Omit<StringListColumn<T>, 'type' | 'title' | 'displayValueFn' | 'displayAdditionalValueFn'>>): ListColumn<T> => ({\r\n  type: 'date',\r\n  title: 'Actualizado',\r\n  sort: { key: 'updated_at' },\r\n  hidden: true,\r\n  displayValueFn: (item: any) => item.updated_at,\r\n  ...config,\r\n})"
                },
                {
                    "name": "KEY_GET_ITEMS_PAGINATOR_LIST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken('KEY_GET_ITEMS_PAGINATOR_LIST')"
                },
                {
                    "name": "KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken('KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST')"
                },
                {
                    "name": "listFormatColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config: ListFormatListColumn<T>): ListColumn<T> => ({ type: 'list-format', ...config })"
                },
                {
                    "name": "lowercaseColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'lowercase', ...config })"
                },
                {
                    "name": "numberColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'number', ...config })"
                },
                {
                    "name": "phoneColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'phone', ...config })"
                },
                {
                    "name": "restoreItemActionButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => clickEventActionButton({\r\n  icon: 'restore',\r\n  text: 'Restaurar',\r\n  fn: async ({ id }, _, { restoreItemFn }) => restoreItemFn(id),\r\n  hidden: (item) => !item.deleted_at,\r\n})"
                },
                {
                    "name": "routerLinkActionButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config: RouterLinkActionButton<T>): ActionButton<T> => ({ type: 'routerLink', ...config })"
                },
                {
                    "name": "selectableActionButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config: SelectableActionButton<T>): SelectableActionButton<T> => ({ ...config })"
                },
                {
                    "name": "simpleListColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): ListColumn<any>[] => ([\r\n  itemNameAndDescriptionColumn(),\r\n  itemUpdatedAtColumn(),\r\n  itemCreatedAtColumn(),\r\n  itemStatusColumn(),\r\n])"
                },
                {
                    "name": "textColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'text', ...config })"
                },
                {
                    "name": "titlecaseColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'titlecase', ...config })"
                },
                {
                    "name": "uppercaseColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config: StringListColumn<T>): ListColumn<T> => ({ type: 'uppercase', ...config })"
                },
                {
                    "name": "userColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T = any>(config: NumberListColumn<T>): ListColumn<T> => ({ type: 'user', ...config })"
                },
                {
                    "name": "viewItemActionButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => routerLinkActionButton({\r\n  icon: 'visibility',\r\n  text: 'Ver',\r\n  routerLink: { url: (item) => `../view/${item.id}` },\r\n})"
                }
            ],
            "src/app/modules/organization/clients/client-billing-options/helpers/index.ts": [
                {
                    "name": "clientBillingOptionFormGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/organization/clients/client-billing-options/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(item?: Partial<ClientBillingOption>) => new FormGroup({\r\n    client_id: new FormControl(item?.id, [Validators.required]),\r\n    comprobant_type: new FormControl(item?.comprobant_type, [Validators.required]),\r\n    group_notes_single_voucher: new FormControl(item?.group_notes_single_voucher ?? false, [Validators.required]),\r\n    detraction: new FormControl(item?.detraction ?? true),\r\n    detraction_percent: new FormControl(item?.detraction_percent, [Validators.required]),\r\n    retention: new FormControl(item?.retention ?? true),\r\n    retention_percent: new FormControl(item?.retention_percent, [Validators.required]),\r\n})"
                },
                {
                    "name": "DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_BILLING_OPTION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/organization/clients/client-billing-options/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormInput[]",
                    "defaultValue": "[\r\n    selectFormInput({\r\n        formControlName: 'comprobant_type',\r\n        textLabel: 'Tipo de comprobante',\r\n        data: COMPROBANT_TYPES.map((item) => ({ name: item.toUpperCase(), id: item })),\r\n    }),\r\n    switchFormInput({\r\n        formControlName: 'group_notes_single_voucher',\r\n        textLabel: '¿Agrupar todas la notas de pedido en un solo comprobante?',\r\n        defaultValue: false,\r\n    }),\r\n    switchFormInput({\r\n        formControlName: 'retention',\r\n        textLabel: '¿Tiene retención?',\r\n        defaultValue: false,\r\n    }),\r\n    selectFormInput({\r\n        formControlName: 'retention_percent',\r\n        textLabel: 'Porcentaje de retención',\r\n        data: [\r\n            { name: '3%', id: '3.00' },\r\n            { name: '6%', id: '6.00' },\r\n        ],\r\n    }),\r\n]"
                }
            ],
            "src/app/modules/organization/clients/client-business-units/helpers/index.ts": [
                {
                    "name": "clientBusinessUnitFormGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/organization/clients/client-business-units/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(item?: Partial<ClientContact>) => new FormGroup({\r\n    client_id: new FormControl(item?.client_id, [Validators.required]),\r\n    name: new FormControl(item?.name, [Validators.required]),\r\n    description: new FormControl(item?.email),\r\n})"
                },
                {
                    "name": "DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_BUSINESS_UNIT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/organization/clients/client-business-units/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormInput[]",
                    "defaultValue": "[\r\n    textFormInput({\r\n        formControlName: 'name',\r\n        textLabel: 'Nombre',\r\n        cssClass: 'col-span-full',\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'description',\r\n        textLabel: 'Descripción',\r\n        cssClass: 'col-span-full',\r\n    })\r\n]"
                }
            ],
            "src/app/modules/organization/clients/client-contacts/helpers/index.ts": [
                {
                    "name": "clientContactFormGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/organization/clients/client-contacts/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(item?: Partial<ClientContact>) => new FormGroup({\r\n    client_id: new FormControl(item?.client_id, [Validators.required]),\r\n    document_type: new FormControl(item?.document_type, [Validators.required]),\r\n    document_number: new FormControl(item?.document_number, [Validators.required]),\r\n    name: new FormControl(item?.name, [Validators.required]),\r\n    paternal_name: new FormControl(item?.paternal_name, [Validators.required]),\r\n    maternal_name: new FormControl(item?.maternal_name, [Validators.required]),\r\n    email: new FormControl(item?.email),\r\n    address: new FormControl(item?.address),\r\n    phone: new FormControl(item?.phone),\r\n    cellphone: new FormControl(item?.cellphone),\r\n    principal: new FormControl(item?.principal ?? false),\r\n})"
                },
                {
                    "name": "DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_CONTACT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/organization/clients/client-contacts/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormInput[]",
                    "defaultValue": "[\r\n    selectFormInput({\r\n        formControlName: 'document_type',\r\n        textLabel: 'Tipo de documento',\r\n        data: DOCUMENT_TYPES.map((item) => ({ name: item.toUpperCase(), id: item })),\r\n        cssClass: 'col-span-6 @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'document_number',\r\n        textLabel: 'Número de documento',\r\n        placeholder: 'Ingrese el número de documento',\r\n        cssClass: 'col-span-6 @2xl:col-span-2',\r\n        maxLength: 12,\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'name',\r\n        textLabel: 'Nombre',\r\n        placeholder: 'Ingrese el nombre',\r\n        cssClass: 'col-span-full @2xl:col-span-4',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'paternal_name',\r\n        textLabel: 'Apellido paterno',\r\n        placeholder: 'Ingrese el apellido',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'maternal_name',\r\n        textLabel: 'Apellido materno',\r\n        placeholder: 'Ingrese el apellido',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'phone',\r\n        textLabel: 'Teléfono',\r\n        placeholder: 'Ingrese el teléfono',\r\n        cssClass: 'col-span-full @2xl:col-span-4',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'cellphone',\r\n        textLabel: 'Celular',\r\n        placeholder: 'Ingrese el celular',\r\n        cssClass: 'col-span-full @2xl:col-span-4',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'email',\r\n        textLabel: 'Correo electrónico',\r\n        placeholder: 'Ingrese el correo electrónico',\r\n        cssClass: 'col-span-full @2xl:col-span-4',\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'address',\r\n        textLabel: 'Dirección',\r\n        placeholder: 'Ingrese la dirección',\r\n        cssClass: 'col-span-full',\r\n    }),\r\n    switchFormInput({\r\n        formControlName: 'principal',\r\n        textLabel: '¿Es contacto principal?',\r\n        defaultValue: false,\r\n        cssClass: 'col-span-full',\r\n    }),\r\n]"
                }
            ],
            "src/app/modules/organization/clients/helpers/index.ts": [
                {
                    "name": "clientFormGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/organization/clients/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => new FormGroup({\r\n    document_type: new FormControl(null, [Validators.required]),\r\n    document_number: new FormControl('', [Validators.required]),\r\n    name: new FormControl('', [Validators.required]),\r\n    email: new FormControl('', [Validators.required]),\r\n    address: new FormControl(''),\r\n    phone: new FormControl(''),\r\n    cellphone: new FormControl(''),\r\n})"
                },
                {
                    "name": "DEFAULT_DISPLAY_FIELDS_FORM_CLIENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/organization/clients/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormInput[]",
                    "defaultValue": "[\r\n    selectFormInput({\r\n        formControlName: 'document_type',\r\n        textLabel: 'Tipo de documento',\r\n        data: DOCUMENT_TYPES.map((item) => ({ name: item.toUpperCase(), id: item })),\r\n        cssClass: 'col-span-6 @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'document_number',\r\n        textLabel: 'Número de documento',\r\n        cssClass: 'col-span-6 @2xl:col-span-3',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'name',\r\n        textLabel: 'Nombre',\r\n        cssClass: 'col-span-full @2xl:col-span-7',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'phone',\r\n        textLabel: 'Teléfono',\r\n        cssClass: 'col-span-full @2xl:col-span-3',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'cellphone',\r\n        textLabel: 'Celular',\r\n        cssClass: 'col-span-full @2xl:col-span-3',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'email',\r\n        textLabel: 'Correo electrónico',\r\n        cssClass: 'col-span-full @2xl:col-span-6',\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'address',\r\n        textLabel: 'Dirección',\r\n        cssClass: 'col-span-full'\r\n    })\r\n]"
                }
            ],
            "src/app/modules/organization/clients/client-payments/helpers/index.ts": [
                {
                    "name": "clientPaymentFormGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/organization/clients/client-payments/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(data?: Partial<ClientPayment>) => new FormGroup({\r\n    client_id: new FormControl<number|null|undefined>(data?.client_id, [Validators.required]),\r\n    client_account_id: new FormControl<number|undefined>(data?.client_account_id, [Validators.required]),\r\n    box_movement: new FormGroup({\r\n        box_opening_id: new FormControl<number|null|undefined>(data?.box_movement?.box_opening_id, [Validators.required]),\r\n        payment_date: new FormControl<string|Date|null|undefined>(data?.box_movement?.payment_date ?? new Date(), [Validators.required]),\r\n        payment_type: new FormControl<PaymentTypeEnum|null|undefined>(data?.box_movement?.payment_type, [Validators.required]),\r\n        bank_id: new FormControl<number|null|undefined>(data?.box_movement?.bank_id),\r\n        amount: new FormControl<number|null|undefined>(data?.box_movement?.amount),\r\n        operation_code: new FormControl<number|null|undefined>(data?.box_movement?.bank_id),\r\n        observation: new FormControl<string|null|undefined>(data?.box_movement?.observation),\r\n        voucher_type: new FormControl<ComprobantTypeEnum|null|undefined>(data?.box_movement?.voucher_type),\r\n        invoice_number: new FormControl<string|null|undefined>(data?.box_movement?.invoice_number),\r\n        voucher_file: new FormControl<string|null|undefined>(data?.box_movement?.voucher_file),\r\n    }),\r\n})"
                }
            ],
            "src/app/shared/interfaces/baseModel.ts": [
                {
                    "name": "COIN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/interfaces/baseModel.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Object.values(CoinEnum)"
                },
                {
                    "name": "DOCUMENT_TYPES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/interfaces/baseModel.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Object.values(DocumentTypeEnum)"
                },
                {
                    "name": "USER_ROLES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/interfaces/baseModel.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Object.values(UserRoleEnum)"
                }
            ],
            "src/app/shared/interfaces/clientBillingOption.ts": [
                {
                    "name": "COMPROBANT_TYPES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/interfaces/clientBillingOption.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Object.values(ComprobantTypeEnum)"
                }
            ],
            "src/app/shared/interfaces/contractResolution.ts": [
                {
                    "name": "CONTRACT_RESOLUTION_ENTITY_VALUES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/interfaces/contractResolution.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Object.values(ContractResolutionEntityEnum)"
                },
                {
                    "name": "CONTRACT_RESOLUTION_TYPE_VALUES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/interfaces/contractResolution.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Object.values(ContractResolutionTypeEnum)"
                }
            ],
            "src/app/modules/tracking/contracts/helpers/index.ts": [
                {
                    "name": "contractColumnsList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/tracking/contracts/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => [\r\n    textColumn<Contract>({\r\n        title: 'Código',\r\n        sort: { key: 'code' },\r\n        displayValueFn: (item) => item.code,\r\n        routerLinkValue: { url: (item) => `/tracking/contract/view/${item.id}` },\r\n    }),\r\n    uppercaseColumn<Contract>({\r\n        title: 'Cliente/Unidad de negocio',\r\n        displayValueFn: (item) => item.client?.name,\r\n        displayAdditionalValueFn: (item) => item.client_business_unit?.name,\r\n        gridColumn: '1fr',\r\n        routerLinkValue: { url: (item) => `/organization/client/view/${item.client?.id}` },\r\n    }),\r\n    uppercaseColumn<Contract>({\r\n        title: 'Plan',\r\n        displayValueFn: (item) => item.plan?.name,\r\n    }),\r\n    uppercaseColumn<Contract>({\r\n        title: 'T. Periodo',\r\n        displayValueFn: (item) => item.recurrent_type,\r\n    }),\r\n    textColumn<Contract>({\r\n        title: 'Periodo',\r\n        displayValueFn: (item) => item.period,\r\n    }),\r\n    numberColumn<Contract>({\r\n        title: 'Unidades',\r\n        displayValueFn: (item) => item.quantity,\r\n        numberFormat: '2.0-0',\r\n    }),\r\n    numberColumn<Contract>({\r\n        title: 'Precio Und.',\r\n        displayValueFn: (item) => item.sale_price,\r\n    }),\r\n    dateColumn<Contract>({\r\n        title: 'Fecha inicio',\r\n        displayValueFn: (item) => item.start_date,\r\n    }),\r\n    dateColumn<Contract>({\r\n        title: 'Fecha fin',\r\n        displayValueFn: (item) => item.end_date,\r\n    }),\r\n    itemCreatedAtColumn(),\r\n    itemUpdatedAtColumn(),\r\n    itemStatusColumn(),\r\n]"
                },
                {
                    "name": "getContractFormGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/tracking/contracts/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): FormGroup => {\r\n    return new FormGroup({\r\n        client_business_unit_id: new FormControl(null, [Validators.required]),\r\n\r\n        client_id: new FormControl(null, [Validators.required]),\r\n        client: new FormControl(null),\r\n\r\n        plan_id: new FormControl(null, [Validators.required]),\r\n        plan: new FormControl(null),\r\n\r\n        installation_date: new FormControl(new Date(), [Validators.required]),\r\n        start_date: new FormControl({ value: null, disabled: true }),\r\n        end_date: new FormControl({ value: null, disabled: true }),\r\n        period: new FormControl(null, [Validators.required]),\r\n        buy_price: new FormControl('0.00', [Validators.required]),\r\n        sale_price: new FormControl('0.00', [Validators.required]),\r\n        installation_price: new FormControl('0.00', [Validators.required]),\r\n        total_installation_price: new FormControl(null),\r\n        quantity: new FormControl(null, { validators: [Validators.required], updateOn: 'blur' }),\r\n        proration_days: new FormControl({ value: null, disabled: true }),\r\n        recurrent_type: new FormControl(RecurrentTypeEnum.MENSUAL, [Validators.required]),\r\n\r\n        client_responsible_document_number: new FormControl(null),\r\n        client_responsible_document_type: new FormControl(null),\r\n        client_responsible_name: new FormControl(null),\r\n        client_responsible_paternal_name: new FormControl(null),\r\n        client_responsible_maternal_name: new FormControl(null),\r\n        client_responsible_phone: new FormControl(null),\r\n        client_responsible_email: new FormControl(null),\r\n\r\n        sale_user_id: new FormControl(null, [Validators.required]),\r\n\r\n        contract_vehicles: new FormArray([]),\r\n    })\r\n}"
                }
            ],
            "src/stories/alert.stories.ts": [
                {
                    "name": "CustomColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    render: (args: AlertTemplateComponent) => {\r\n        return {\r\n            template: `\r\n                <!-- \r\n                    work with variable CSS (--rgb-color-alert)\r\n                    Receives as value the three values ​​of an RGB color\r\n                    Example: --rgb-color-alert: 0, 0, 0\r\n                -->\r\n                <app-alert-template\r\n                style=\"--rgb-color-alert: 0, 0, 0\"\r\n                [configuration]=\"{title: 'Information Alert',description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit, delectus. Quis magnam molestiae ab rerum non! Nihil mollitia, ut architecto corporis velit impedit! Repellendus placeat, laboriosam quis voluptate sapiente nobis?',icon: 'home'}\" />\r\n            `\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        configuration: {\r\n            title: 'Information Alert',\r\n            description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit, delectus. Quis magnam molestiae ab rerum non! Nihil mollitia, ut architecto corporis velit impedit! Repellendus placeat, laboriosam quis voluptate sapiente nobis?',\r\n            icon: 'home',\r\n        },\r\n    },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AlertTemplateComponent>",
                    "defaultValue": "{\r\n    title: 'Alert',\r\n    component: AlertTemplateComponent,\r\n    tags: ['autodocs'],\r\n    render: (args: AlertTemplateComponent) => ({\r\n        props: {\r\n            ...{\r\n                configuration: {\r\n                    icon: 'info',\r\n                    title: 'Information Alert',\r\n                    description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit, delectus. Quis magnam molestiae ab rerum non! Nihil mollitia, ut architecto corporis velit impedit! Repellendus placeat, laboriosam quis voluptate sapiente nobis?',\r\n                }\r\n            },\r\n            ...args,\r\n        },\r\n    }),\r\n    argTypes: {\r\n        configuration: {\r\n            control: 'object',\r\n        }\r\n    },\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        configuration: {\r\n            title: 'Information Alert',\r\n            description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit, delectus. Quis magnam molestiae ab rerum non! Nihil mollitia, ut architecto corporis velit impedit! Repellendus placeat, laboriosam quis voluptate sapiente nobis?',\r\n            icon: 'home',\r\n            style: 'primary',\r\n        },\r\n    },\r\n}"
                },
                {
                    "name": "Tertiary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        configuration: {\r\n            title: 'Information Alert',\r\n            description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit, delectus. Quis magnam molestiae ab rerum non! Nihil mollitia, ut architecto corporis velit impedit! Repellendus placeat, laboriosam quis voluptate sapiente nobis?',\r\n            icon: 'home',\r\n            style: 'tertiary',\r\n        },\r\n    },\r\n}"
                },
                {
                    "name": "WithAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        configuration: {\r\n            title: 'Information Alert',\r\n            description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit, delectus. Quis magnam molestiae ab rerum non! Nihil mollitia, ut architecto corporis velit impedit! Repellendus placeat, laboriosam quis voluptate sapiente nobis?',\r\n            icon: 'home',\r\n            actionButton: {\r\n                icon: 'info',\r\n                text: 'More Info',\r\n                fn: () => {\r\n                    alert('More Info');\r\n                }\r\n            }\r\n        },\r\n    },\r\n}"
                },
                {
                    "name": "WithCloseButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    render: (args: AlertTemplateComponent) => {\r\n        return {\r\n            template: `\r\n                <app-alert-template\r\n                [configuration]=\"{\r\n                    title: 'Information Alert',\r\n                    description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit, delectus. Quis magnam molestiae ab rerum non! Nihil mollitia, ut architecto corporis velit impedit! Repellendus placeat, laboriosam quis voluptate sapiente nobis?',\r\n                    icon: 'home',\r\n                    showCloseButton: true\r\n                }\"/>\r\n            `\r\n        }\r\n    }\r\n\r\n}"
                },
                {
                    "name": "WithOutTitle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        configuration: {\r\n            description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit, delectus. Quis magnam molestiae ab rerum non! Nihil mollitia, ut architecto corporis velit impedit! Repellendus placeat, laboriosam quis voluptate sapiente nobis?',\r\n            icon: 'home',\r\n        } as AlertConfiguration,\r\n    },\r\n}"
                }
            ],
            "src/app/modules/configuration/plans/helpers/index.ts": [
                {
                    "name": "DEFAULT_DISPLAY_FIELDS_FORM_PLAN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/configuration/plans/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormInput[]",
                    "defaultValue": "[\r\n    textFormInput({\r\n        formControlName: 'name',\r\n        textLabel: 'Nombre',\r\n        cssClass: 'col-span-full @2xl:col-span-6',\r\n    }),\r\n    selectFormInput({\r\n        formControlName: 'coin',\r\n        textLabel: 'Moneda',\r\n        data: COIN.map((item) => ({ name: item.toUpperCase(), id: item })),\r\n        cssClass: 'col-span-6 @2xl:col-span-3',\r\n    }),\r\n    numberFormInput({\r\n        formControlName: 'price',\r\n        textLabel: 'Precio',\r\n        cssClass: 'col-span-6 @2xl:col-span-3',\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'description',\r\n        textLabel: 'Descripción',\r\n        cssClass: 'col-span-full'\r\n    })\r\n]"
                },
                {
                    "name": "planFormGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/configuration/plans/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => new FormGroup({\r\n    name: new FormControl('', [Validators.required]),\r\n      price: new FormControl('', [Validators.required]),\r\n      coin: new FormControl(CoinEnum.SOLES, [Validators.required]),\r\n      description: new FormControl(''),\r\n})"
                }
            ],
            "src/app/modules/organization/users/helpers/index.ts": [
                {
                    "name": "DEFAULT_DISPLAY_FIELDS_FORM_USER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/organization/users/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormInput[]",
                    "defaultValue": "[\r\n    selectFormInput({\r\n        formControlName: 'role',\r\n        textLabel: 'Tipo de documento',\r\n        data: USER_ROLES.map((item) => ({ name: item.toUpperCase(), id: item })),\r\n        cssClass: 'col-span-6 @2xl:col-span-2',\r\n    }),\r\n    selectFormInput({\r\n        formControlName: 'document_type',\r\n        textLabel: 'Tipo de documento',\r\n        data: DOCUMENT_TYPES.map((item) => ({ name: item.toUpperCase(), id: item })),\r\n        cssClass: 'col-span-6 @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'document_number',\r\n        textLabel: 'Número de documento',\r\n        cssClass: 'col-span-6 @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'name',\r\n        textLabel: 'Nombre',\r\n        cssClass: 'col-span-full @2xl:col-span-6',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'phone',\r\n        textLabel: 'Teléfono',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'cellphone',\r\n        textLabel: 'Celular',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    dateFormInput({\r\n        formControlName: 'birth_date',\r\n        textLabel: 'Fecha de nacimiento',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'email',\r\n        textLabel: 'Correo electrónico',\r\n        cssClass: 'col-span-full @2xl:col-span-6',\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'address',\r\n        textLabel: 'Dirección',\r\n        cssClass: 'col-span-full'\r\n    })\r\n]"
                },
                {
                    "name": "userFormGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/organization/users/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => new FormGroup({\r\n    document_type: new FormControl(null, [Validators.required]),\r\n    document_number: new FormControl('', [Validators.required]),\r\n    name: new FormControl('', [Validators.required]),\r\n    email: new FormControl('', [Validators.required]),\r\n    address: new FormControl(null),\r\n    phone: new FormControl(null),\r\n    cellphone: new FormControl(null),\r\n    birth_date: new FormControl(null),\r\n    role: new FormControl('', [Validators.required]),\r\n})"
                }
            ],
            "src/app/modules/tracking/vehicles/helpers/index.ts": [
                {
                    "name": "DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/tracking/vehicles/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormInput[]",
                    "defaultValue": "[\r\n    autocompleteLocalFormInput({\r\n        formControlName: 'vehicle_type_id',\r\n        textLabel: 'Tipo de vehículo',\r\n        local: { nameModuleDatabase: NameModuleDatabase.VehicleTypes },\r\n        cssClass: 'col-span-full @2xl:col-span-6',\r\n    }),\r\n    autocompleteServerFormInput({\r\n        formControlName: 'client_id',\r\n        textLabel: 'Cliente',\r\n        server: { url: 'client' },\r\n        cssClass: 'col-span-full @2xl:col-span-6',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'plate',\r\n        textLabel: 'Placa',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'color',\r\n        textLabel: 'Color',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'brand',\r\n        textLabel: 'Marca',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'model',\r\n        textLabel: 'Modelo',\r\n        cssClass: 'col-span-full @2xl:col-span-4',\r\n    }),\r\n    textFormInput({\r\n        formControlName: 'year',\r\n        textLabel: 'Año',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'description',\r\n        textLabel: 'Descripción',\r\n        cssClass: 'col-span-full'\r\n    }),\r\n\r\n    // FALTA INPUT PARA SUBIR FOTO\r\n]"
                },
                {
                    "name": "vehicleFormGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/tracking/vehicles/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => new FormGroup({\r\n    vehicle_type_id: new FormControl('', [Validators.required]),\r\n    client_id: new FormControl('', [Validators.required]),\r\n    client: new FormControl<any>(''),\r\n    plate: new FormControl('', [Validators.required]),\r\n    color: new FormControl(''),\r\n    brand: new FormControl(''),\r\n    model: new FormControl(''),\r\n    year: new FormControl(''),\r\n    file: new FormControl(''),\r\n    description: new FormControl(''),\r\n})"
                }
            ],
            "src/app/modules/tracking/vehicles/vehicle-unsubscribes/helpers/index.ts": [
                {
                    "name": "DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/tracking/vehicles/vehicle-unsubscribes/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormInput[]",
                    "defaultValue": "[\r\n    selectFormInput({\r\n        formControlName: 'programming_type',\r\n        textLabel: 'Tipo de programación',\r\n        data: VEHICLE_UNSUBSCRIBE_PROGRAMMING_TYPE.map((item) => ({ name: item.toUpperCase(), id: item })),\r\n        cssClass: 'col-span-6 @2xl:col-span-2',\r\n    }),\r\n    dateFormInput({\r\n        formControlName: 'start_date',\r\n        textLabel: 'Fecha de inicio',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    dateFormInput({\r\n        formControlName: 'end_date',\r\n        textLabel: 'Fecha de fin',\r\n        cssClass: 'col-span-full @2xl:col-span-2',\r\n    }),\r\n    autocompleteLocalFormInput({\r\n        formControlName: 'user_id',\r\n        textLabel: 'Usuario responsable',\r\n        local: { nameModuleDatabase: NameModuleDatabase.Users },\r\n        cssClass: 'col-span-full @2xl:col-span-6',\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'reason',\r\n        textLabel: 'Motivo',\r\n        cssClass: 'col-span-full'\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'observations',\r\n        textLabel: 'Observaciones',\r\n        cssClass: 'col-span-full'\r\n    }),\r\n\r\n]"
                },
                {
                    "name": "vehicleUnsubscribeFormGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/tracking/vehicles/vehicle-unsubscribes/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(item?: Partial<VehicleUnsubscribe>) => new FormGroup({\r\n    vehicle_id: new FormControl(item?.vehicle_id ?? null, [Validators.required]),\r\n            user_id: new FormControl(item?.user_id ?? null, [Validators.required]),\r\n            programming_type: new FormControl(item?.programming_type ?? null, [Validators.required]),\r\n            reason: new FormControl(item?.reason ?? null, [Validators.required]),\r\n            observations: new FormControl(item?.observations ?? null, [Validators.required]),\r\n            start_date: new FormControl(item?.start_date ?? null, [Validators.required]),\r\n            end_date: new FormControl(item?.end_date ?? null),\r\n})"
                }
            ],
            "src/app/modules/configuration/vehicle-types/helpers/index.ts": [
                {
                    "name": "DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE_TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/configuration/vehicle-types/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormInput[]",
                    "defaultValue": "[\r\n    textFormInput({\r\n        formControlName: 'name',\r\n        textLabel: 'Nombre',\r\n        cssClass: 'col-span-full',\r\n    }),\r\n    textareaFormInput({\r\n        formControlName: 'description',\r\n        textLabel: 'Descripción',\r\n        cssClass: 'col-span-full'\r\n    }),\r\n    fileFormInput({\r\n        formControlName: 'image',\r\n        textLabel: 'Imagen',\r\n        cssClass: 'col-span-full',\r\n        acceptFiles: 'image/*',\r\n    }),\r\n]"
                },
                {
                    "name": "vehicleTypeFormGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/configuration/vehicle-types/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => new FormGroup({\r\n    name: new FormControl('', [Validators.required]),\r\n    description: new FormControl('', [Validators.required]),\r\n    image: new FormControl(null),\r\n})"
                }
            ],
            "src/app/shared/interfaces/fetch.ts": [
                {
                    "name": "defaultMessageDialogCreateItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/interfaces/fetch.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n    title: '¿Está seguro de guardar el registro?',\r\n    description: 'Asegúrese de haber llenado todos los datos del formulario correctamente',\r\n    icon: 'save',\r\n})"
                },
                {
                    "name": "defaultMessageDialogDeleteItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/interfaces/fetch.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n    title: '¿Está seguro de eliminar el registro?',\r\n    description: 'El ítem se eliminará por completo, está acción es única y no se puede revertir',\r\n    icon: 'delete_forever',\r\n})"
                },
                {
                    "name": "defaultMessageDialogUpdateItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/interfaces/fetch.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n    title: '¿Está seguro de actualizar el registro?',\r\n    description: 'Asegúrese de haber modificado los datos del formulario correctamente',\r\n    icon: 'autorenew',\r\n})"
                },
                {
                    "name": "HTTP_ERROR_CODES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/interfaces/fetch.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    {\r\n        status: 400,\r\n        title: 'Solicitud Incorrecta',\r\n        description: 'La solicitud que el servidor recibió no se puede entender o procesar.',\r\n    },\r\n    {\r\n        status: 401,\r\n        title: 'No Autorizado',\r\n        description: 'El recurso solicitado requiere autenticación y no se ha proporcionado credenciales válidas.',\r\n        icon: 'security',\r\n    },\r\n    {\r\n        status: 403,\r\n        title: 'Prohibido',\r\n        description: 'No tiene permiso para acceder al recurso solicitado.',\r\n        icon: 'security',\r\n    },\r\n    {\r\n        status: 404,\r\n        title: 'No Encontrado',\r\n        description: 'El servidor no puede encontrar el recurso solicitado.',\r\n        icon: 'dangerous',\r\n    },\r\n    {\r\n        status: 405,\r\n        title: 'Método No Permitido',\r\n        description: 'El método utilizado en la solicitud no está permitido para el recurso solicitado.'\r\n    },\r\n    {\r\n        status: 408,\r\n        title: 'Tiempo de Espera Agotado',\r\n        description: 'El servidor ha esperado demasiado tiempo para recibir la solicitud del cliente.',\r\n\r\n    },\r\n    {\r\n        status: 422,\r\n        title: 'Entidad No Procesable',\r\n        description: 'La solicitud fue bien formada, pero no se pudo seguir debido a errores semánticos.'\r\n    },\r\n    {\r\n        status: 500,\r\n        title: 'Error Interno del Servidor',\r\n        description: 'El servidor ha encontrado una situación inesperada que le impide completar la solicitud.'\r\n    },\r\n    {\r\n        status: 501,\r\n        title: 'No Implementado',\r\n        description: 'El servidor no admite la funcionalidad necesaria para completar la solicitud.'\r\n    },\r\n    {\r\n        status: 502,\r\n        title: 'Puerta de Enlace Incorrecta',\r\n        description: 'El servidor de la puerta de enlace ha recibido una respuesta no válida del servidor de origen.'\r\n    },\r\n    {\r\n        status: 503,\r\n        title: 'Servicio No Disponible',\r\n        description: 'El servidor no puede responder a la solicitud en este momento debido a una sobrecarga o mantenimiento.'\r\n    },\r\n]"
                },
                {
                    "name": "NAME_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/interfaces/fetch.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'access_token'"
                }
            ],
            "src/app/sidenav/sidenav/sidenav.component.ts": [
                {
                    "name": "DRAWER_LINKS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sidenav/sidenav/sidenav.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupDrawerLink[]",
                    "defaultValue": "[\r\n    {\r\n        label: 'Organización',\r\n        links: [\r\n            {\r\n                label: 'Clientes',\r\n                icon: 'supervised_user_circle',\r\n                route: '/organization/client',\r\n            },\r\n            {\r\n                label: 'Usuarios',\r\n                icon: 'person',\r\n                route: '/organization/user',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Administración',\r\n        links: [\r\n            {\r\n                label: 'Cuentas',\r\n                icon: 'account_balance_wallet',\r\n                route: '/administration/account',\r\n            },\r\n            {\r\n                label: 'Cajas',\r\n                icon: 'service_toolbox',\r\n                route: '/administration/box',\r\n            },\r\n            {\r\n                label: 'Movimientos de caja',\r\n                icon: 'timeline',\r\n                route: '/administration/box-movement',\r\n            },\r\n            {\r\n                label: 'Facturación',\r\n                icon: 'draft',\r\n                route: '/administration/document',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Tracking',\r\n        links: [\r\n            {\r\n                label: 'Contratos',\r\n                icon: 'account_balance_wallet',\r\n                route: '/tracking/contract',\r\n            },\r\n            {\r\n                label: 'Vehículos',\r\n                icon: 'electric_rickshaw',\r\n                route: '/tracking/vehicle',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Configuration',\r\n        links: [\r\n            {\r\n                label: 'Bancos',\r\n                icon: 'account_balance',\r\n                route: '/configuration/bank',\r\n            },\r\n            {\r\n                label: 'Planes',\r\n                icon: 'planner_banner_ad_pt',\r\n                route: '/configuration/plan',\r\n            },\r\n            {\r\n                label: 'Tipo de vehículos',\r\n                icon: 'airport_shuttle',\r\n                route: '/configuration/vehicle-type',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        label: 'Opciones de la APP',\r\n        links: [\r\n            {\r\n                label: 'Settings',\r\n                route: '/settings',\r\n                icon: 'settings',\r\n            },\r\n        ]\r\n    },\r\n]"
                },
                {
                    "name": "NAME_EVENT_GLOBAL_SEARCH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sidenav/sidenav/sidenav.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'global_search'"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  API_URL: 'http://localhost:3000/api/v1',\r\n  PUBLIC_PATH_SERVER: 'http://localhost:3000/',\r\n  URL_FILES_SERVER: 'https://erp-allendostmen-application.s3.amazonaws.com/',\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  API_URL: 'http://localhost:3000/api/v1',\r\n  PUBLIC_PATH_SERVER: 'http://localhost:3000/',\r\n  URL_FILES_SERVER: 'https://erp-allendostmen-application.s3.amazonaws.com/',\r\n}"
                }
            ],
            "src/app/shared/utilities/verifiyThemeApp.ts": [
                {
                    "name": "getApareanceApp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ThemeColorName",
                    "defaultValue": "() => {\r\n  const apareanceApp = localStorage.getItem('apareanceApp');\r\n  if (THEME_COLOR_NAMES.includes(apareanceApp as ThemeColorName))\r\n    return apareanceApp as ThemeColorName;\r\n  else return ThemeColorName.YELLOW;\r\n}"
                },
                {
                    "name": "getApareanceDrawer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeDrawerApp",
                    "defaultValue": "() => {\r\n  if (\r\n    localStorage.getItem('apareanceDrawer') == 'drawer-standard' ||\r\n    localStorage.getItem('apareanceDrawer') == 'drawer-dark-full'\r\n  )\r\n    return localStorage.getItem('apareanceDrawer') as TypeDrawerApp;\r\n  else return 'drawer-dark-full';\r\n}"
                },
                {
                    "name": "getApareanceInputs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatFormFieldAppearance",
                    "defaultValue": "() => {\r\n  if (\r\n    localStorage.getItem('apareanceInputs') == 'fill' ||\r\n    localStorage.getItem('apareanceInputs') == 'outline'\r\n  )\r\n    return localStorage.getItem(\r\n      'apareanceInputs'\r\n    ) as MatFormFieldAppearance;\r\n  else return 'fill';\r\n}"
                },
                {
                    "name": "getThemeApp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeTheme",
                    "defaultValue": "() => {\r\n  if (\r\n    localStorage.getItem('themeApp') == 'dark' ||\r\n    localStorage.getItem('themeApp') == 'light'\r\n  )\r\n    return localStorage.getItem('themeApp') as 'dark' | 'light';\r\n  else if (window.matchMedia('(prefers-color-scheme: dark)').matches)\r\n    return 'system-dark';\r\n  else return 'system-light';\r\n}"
                },
                {
                    "name": "setApareanceApp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(nameApareance: ThemeColorName) => {\r\n  localStorage.setItem('apareanceApp', nameApareance);\r\n  const theme = getApareanceApp();\r\n  for (const e of THEME_COLOR_NAMES) {\r\n    document.body.classList.remove('theme-color-' + e);\r\n  }\r\n  document.body.classList.add('theme-color-' +theme);\r\n}"
                },
                {
                    "name": "setApareanceDrawer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(nameApareance: TypeDrawerApp) => {\r\n  localStorage.setItem('apareanceDrawer', nameApareance);\r\n  const theme = getApareanceDrawer();\r\n  document.body.classList.remove('drawer-standard');\r\n  document.body.classList.remove('drawer-dark-full');\r\n  document.body.classList.add(theme);\r\n}"
                },
                {
                    "name": "setApareanceInputs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(nameApareance: MatFormFieldAppearance) => {\r\n  localStorage.setItem('apareanceInputs', nameApareance);\r\n}"
                },
                {
                    "name": "setConfigApp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\r\n  const theme = getThemeApp();\r\n  setThemeApp(theme);\r\n  const appearance = getApareanceApp();\r\n  setApareanceApp(appearance);\r\n}"
                },
                {
                    "name": "setThemeApp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(nameTheme: TypeTheme) => {\r\n  localStorage.setItem('themeApp', nameTheme);\r\n  const theme = getThemeApp();\r\n  if (theme == 'dark' || theme == 'system-dark') {\r\n    document.body.classList.add('dark');\r\n    document.body.classList.remove('light');\r\n  } else {\r\n    document.body.classList.remove('dark');\r\n    document.body.classList.add('light');\r\n  }\r\n}"
                },
                {
                    "name": "THEME_COLOR_NAMES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Object.values(ThemeColorName)"
                }
            ],
            "src/app/shared/helpers/index.ts": [
                {
                    "name": "getDataPersonFormDocumentNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "async (fetch: FetchService, documentNumber: string, abortController: AbortController = new AbortController()): Promise<DataPerson | undefined> => {\r\n    let type = '';\r\n    if (documentNumber.length == 8) type = 'dni';\r\n    else if (documentNumber.length == 11) type = 'ruc';\r\n    else return undefined;\r\n\r\n    const data = await fetch.get<any>(`${type}/${documentNumber}`, {\r\n        signal: abortController.signal,\r\n        toast: {\r\n            loading: `Buscando ${type.toUpperCase()}...`,\r\n            success: `${type.toUpperCase()} encontrado`,\r\n            error: `No se encontró el ${type.toUpperCase()}`,\r\n        }\r\n    });\r\n    if ((data as DataDNI).nombres) return {\r\n        document_type: 'DNI',\r\n        document_number: documentNumber,\r\n        full_name: `${data.nombres} ${data.apellidoPaterno} ${data.apellidoMaterno}`,\r\n        name: data.nombres,\r\n        mother_last_name: data.apellidoMaterno,\r\n        father_last_name: data.apellidoPaterno,\r\n        verifier_code: data.codVerifica,\r\n    }\r\n    else if ((data as DataRUC).nombre_o_razon_social) return {\r\n        document_type: 'RUC',\r\n        document_number: documentNumber,\r\n        full_name: data.nombre_o_razon_social,\r\n        business_name: data.nombre_o_razon_social,\r\n        address: data.direccion,\r\n        full_address: data.direccion_completa,\r\n        retaining_agent: data.es_agente_de_retencion,\r\n        sunat_condition: data.estado,\r\n        legal_representatives: data.representantes_legales ?? [],\r\n    }\r\n    else return undefined;\r\n}"
                },
                {
                    "name": "getDocumentType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(documentTypes: DocumentType[], documentTypeName: DocumentTypeName) => {\r\n    const documentType = documentTypes.find(item => item.name.toUpperCase() == documentTypeName.toUpperCase());\r\n    return documentType;\r\n}"
                },
                {
                    "name": "getTaxe",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/helpers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(taxes: Taxe[], taxeName: TaxeName) => {\r\n    const taxe = taxes.find(item => item.name.toUpperCase() == taxeName.toUpperCase());\r\n    return taxe;\r\n}"
                }
            ],
            "src/app/core/guards/auth.guard.ts": [
                {
                    "name": "isLoggedGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/guards/auth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "async () => {\r\n    const fetchService = inject(FetchService);\r\n    const authService = inject(AuthService);\r\n    const router = inject(Router);\r\n    const token = authService.getToken();\r\n    if (!token) {\r\n        authService.removeToken();\r\n        router.navigate(['/login']);\r\n        return false;\r\n    }\r\n    try {\r\n        const response = await fetchService.get<User>('auth/user');\r\n        authService.setUser(response);\r\n        return true;\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n}"
                },
                {
                    "name": "isNotLoggedGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/guards/auth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\r\n    const authService = inject(AuthService);\r\n    const router = inject(Router);\r\n    const isLogged = authService.isLogged();\r\n    if (isLogged) router.navigate(['/']);\r\n    return !isLogged;\r\n}"
                },
                {
                    "name": "masterRoleGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/guards/auth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\r\n    const authService = inject(AuthService);\r\n    const user = authService.user();\r\n    return user?.role === UserRoleEnum.MASTER;\r\n}"
                }
            ],
            "src/stories/itemListTemplate.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/itemListTemplate.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ItemListTemplateComponent>",
                    "defaultValue": "{\r\n    title: 'ItemList',\r\n    component: ItemListTemplateComponent,\r\n    tags: ['autodocs'],\r\n    decorators: [\r\n        moduleMetadata({\r\n            imports: [BrowserAnimationsModule, MatNativeDateModule],\r\n            providers: [\r\n                { provide: ActivatedRoute, useClass: MockActivatedRoute },\r\n                { provide: MAT_PAGINATOR_DEFAULT_OPTIONS, useValue: { formFieldAppearance: 'outline', showFirstLastButtons: true, pageSizeOptions: [4, 8, 12], pageSize: 4, pageIndex: 0, } },\r\n            ],\r\n        }),\r\n    ],\r\n    argTypes: {\r\n        configuration: {\r\n            control: 'object',\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "Selectable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/itemListTemplate.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        configuration: {\r\n            title: 'Usuarios',\r\n            server: {\r\n                url: 'public/user',\r\n            },\r\n            rows: {\r\n                selectable: {\r\n                    actions: [\r\n                        selectableActionButton({\r\n                            icon: 'delete',\r\n                            fn: (selectedItems) => alert(`items seleccionados: ${selectedItems.length}`),\r\n                        })\r\n                    ]\r\n                }\r\n            },\r\n            columns: signal([\r\n                textColumn({\r\n                    title: 'Usuario / N° Documento',\r\n                    sort: { key: 'name' },\r\n                    routerLinkValue: { url: (item) => `../view/${item.id}` },\r\n                    gridColumn: '1fr',\r\n                    displayValueFn: (item) => item?.name ? item.name : '--',\r\n                    displayAdditionalValueFn: (item) => item?.document_number.length >= 11 ? 'RUC: ' + item?.document_number : item?.document_number.length == 8 ? 'DNI: ' + item?.document_number : 'OTRO: ' + item?.document_number,\r\n                }),\r\n                emailColumn({\r\n                    title: 'Email',\r\n                    sort: { key: 'email' },\r\n                    gridColumn: 'auto',\r\n                    displayValueFn: (item) => item.email,\r\n                }),\r\n                textColumn({\r\n                    title: 'Rol',\r\n                    sort: { key: 'role' },\r\n                    gridColumn: 'fit-content(120px)',\r\n                    displayValueFn: (item) => item.role,\r\n                }),\r\n                phoneColumn({\r\n                    title: 'Celular',\r\n                    sort: { key: 'cellphone' },\r\n                    gridColumn: 'fit-content(120px)',\r\n                    displayValueFn: (item) => item.cellphone,\r\n                }),\r\n                textColumn({\r\n                    title: 'Dirección',\r\n                    sort: { key: 'address' },\r\n                    gridColumn: 'fit-content(120px)',\r\n                    displayValueFn: (item) => item.address,\r\n                }),\r\n            ]),\r\n        } as ItemListConfiguration\r\n    },\r\n}"
                },
                {
                    "name": "Simple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/itemListTemplate.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        configuration: {\r\n            title: 'Usuarios',\r\n            server: {\r\n                url: 'public/user',\r\n            },\r\n            columns: signal([\r\n                textColumn({\r\n                    title: 'Usuario / N° Documento',\r\n                    sort: { key: 'name' },\r\n                    routerLinkValue: { url: (item) => `../view/${item.id}` },\r\n                    gridColumn: '1fr',\r\n                    displayValueFn: (item) => item?.name ? item.name : '--',\r\n                    displayAdditionalValueFn: (item) => item?.document_number.length >= 11 ? 'RUC: ' + item?.document_number : item?.document_number.length == 8 ? 'DNI: ' + item?.document_number : 'OTRO: ' + item?.document_number,\r\n                }),\r\n                emailColumn({\r\n                    title: 'Email',\r\n                    sort: { key: 'email' },\r\n                    gridColumn: 'auto',\r\n                    displayValueFn: (item) => item.email,\r\n                }),\r\n                textColumn({\r\n                    title: 'Rol',\r\n                    sort: { key: 'role' },\r\n                    gridColumn: 'fit-content(120px)',\r\n                    displayValueFn: (item) => item.role,\r\n                }),\r\n                phoneColumn({\r\n                    title: 'Celular',\r\n                    sort: { key: 'cellphone' },\r\n                    gridColumn: 'fit-content(120px)',\r\n                    displayValueFn: (item) => item.cellphone,\r\n                }),\r\n                textColumn({\r\n                    title: 'Dirección',\r\n                    sort: { key: 'address' },\r\n                    gridColumn: 'fit-content(120px)',\r\n                    displayValueFn: (item) => item.address,\r\n                }),\r\n            ]),\r\n        } as ItemListConfiguration,\r\n    },\r\n}"
                }
            ],
            "src/app/shared/utilities/myDateFormat.ts": [
                {
                    "name": "MY_DATE_FORMATS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/myDateFormat.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    parse: {\r\n        dateInput: 'dd/MM/yyyy'\r\n    },\r\n    display: {\r\n        dateInput: <Intl.DateTimeFormatOptions> {\r\n            day: '2-digit',\r\n            month: '2-digit',\r\n            year: 'numeric',\r\n        },\r\n        monthYearLabel: <Intl.DateTimeFormatOptions> {\r\n            month: 'short',\r\n            year: 'numeric'\r\n        },\r\n        dateA11yLabel: { \r\n            day: 'numeric'\r\n        },\r\n        monthYearA11yLabel: <Intl.DateTimeFormatOptions> {\r\n            month: 'long',\r\n            year: 'numeric'\r\n        },\r\n    }\r\n }"
                }
            ],
            "src/app/shared/utilities/auth.utilities.ts": [
                {
                    "name": "NAME_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/auth.utilities.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'access_token'"
                }
            ],
            "src/app/shared/utilities/queryParams.ts": [
                {
                    "name": "objectToURLSearchParams",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/queryParams.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(queryParams: { [key: string]: any }, ignoreKeys: string[] = []): URLSearchParams => {\r\n    const query_params = JSON.parse(JSON.stringify(queryParams));\r\n    var searchParams = new URLSearchParams();\r\n    for (const key in query_params) {\r\n        if (query_params[key] === '' || query_params[key] === null || query_params[key] === undefined  || query_params[key] === false || ignoreKeys.includes(query_params[key]))\r\n            continue;\r\n        searchParams.append(key, query_params[key]);\r\n    }\r\n    return searchParams;\r\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
                }
            ],
            "src/app/shared/interfaces/contract.ts": [
                {
                    "name": "RECURRENT_TYPE_VALUES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/interfaces/contract.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Object.values(RecurrentTypeEnum)"
                }
            ],
            "src/app/shared/components/item-detail-template/item-detail-template.component.ts": [
                {
                    "name": "registerDataGroupDetail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-detail-template/item-detail-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): ItemDetailGroup<any> => {\r\n    return {\r\n        title: 'Datos del registro',\r\n        icon: 'app_registration',\r\n        details: [\r\n            {\r\n                title: 'Estado',\r\n                key: 'status',\r\n                type: 'titlecase',\r\n                cssClass: (item) => item.status ?? '',\r\n                displayValueFn: (item) => item.status,\r\n            },\r\n            {\r\n                title: 'Creado',\r\n                key: 'created_at',\r\n                type: 'diff-date',\r\n                displayValueFn: (item) => item.created_at,\r\n            },\r\n            {\r\n                title: 'Creado por',\r\n                key: 'create_user_id',\r\n                type: 'user',\r\n                displayValueFn: (item) => item.create_user_id,\r\n            },\r\n            {\r\n                title: 'Actualizado',\r\n                key: 'updated_at',\r\n                type: 'diff-date',\r\n                displayValueFn: (item) => item.updated_at,\r\n            },\r\n            {\r\n                title: 'Actualizado por',\r\n                key: 'update_user_id',\r\n                type: 'user',\r\n                displayValueFn: (item) => item.update_user_id,\r\n            },\r\n            {\r\n                title: 'Eliminado',\r\n                key: 'deleted_at',\r\n                type: 'diff-date',\r\n                displayValueFn: (item) => item.deleted_at,\r\n            },\r\n            {\r\n                title: 'Eliminado por',\r\n                key: 'delete_user_id',\r\n                type: 'user',\r\n                displayValueFn: (item) => item.delete_user_id,\r\n            },\r\n            {\r\n                title: 'Restaurado por',\r\n                key: 'restore_user_id',\r\n                type: 'user',\r\n                displayValueFn: (item) => item.restore_user_id,\r\n            },\r\n        ],\r\n    };\r\n}"
                },
                {
                    "name": "textDetail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/item-detail-template/item-detail-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {}"
                }
            ],
            "src/app/sidenav/profile-menu/profile-menu.component.ts": [
                {
                    "name": "THEME_COLORS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sidenav/profile-menu/profile-menu.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  // 'theme-color-yellow',\r\n  // 'theme-color-red',\r\n  'theme-color-orange',\r\n  'theme-color-blue',\r\n  'theme-color-green',\r\n  'theme-color-purple',\r\n  'theme-color-cyan',\r\n  'theme-color-pink',\r\n]"
                }
            ],
            "src/app/shared/interfaces/vehicleUnsubscribe.ts": [
                {
                    "name": "VEHICLE_UNSUBSCRIBE_PROGRAMMING_TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/interfaces/vehicleUnsubscribe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Object.values(VehicleUnsubscribeProgrammingType)"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/shared/interfaces/boxMovement.ts": [
                {
                    "name": "BoxMovementTypeEnum",
                    "childs": [
                        {
                            "name": "INGRESO",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ingreso"
                        },
                        {
                            "name": "EGRESO",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "egreso"
                        },
                        {
                            "name": "MOVIMIENTO_ENTRE_CAJAS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "movimiento entre cajas"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/interfaces/boxMovement.ts"
                },
                {
                    "name": "PaymentTypeEnum",
                    "childs": [
                        {
                            "name": "TRANSFERENCIA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "transferencia"
                        },
                        {
                            "name": "DEPOSITO",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "depósito"
                        },
                        {
                            "name": "EFECTIVO",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "efectivo"
                        },
                        {
                            "name": "CHEQUE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "cheque"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/interfaces/boxMovement.ts"
                }
            ],
            "src/app/shared/interfaces/box.ts": [
                {
                    "name": "BoxTypeEnum",
                    "childs": [
                        {
                            "name": "FISICA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "fisica"
                        },
                        {
                            "name": "VIRTUAL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "virtual"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/interfaces/box.ts"
                }
            ],
            "src/app/shared/interfaces/clientAccount.ts": [
                {
                    "name": "ClientAccountTypeEnum",
                    "childs": [
                        {
                            "name": "Recaudacion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "recaudación"
                        },
                        {
                            "name": "Detraccion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "detracción"
                        },
                        {
                            "name": "Retención",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "retención"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/interfaces/clientAccount.ts"
                }
            ],
            "src/app/shared/interfaces/baseModel.ts": [
                {
                    "name": "CoinEnum",
                    "childs": [
                        {
                            "name": "SOLES",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "soles"
                        },
                        {
                            "name": "DOLARES",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dólares"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/interfaces/baseModel.ts"
                },
                {
                    "name": "DocumentTypeEnum",
                    "childs": [
                        {
                            "name": "DNI",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dni"
                        },
                        {
                            "name": "RUC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ruc"
                        },
                        {
                            "name": "CARNET_EXTRANJERIA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "carnet de extranjeria"
                        },
                        {
                            "name": "PASAPORTE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pasaporte"
                        },
                        {
                            "name": "OTRO",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "otro"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/interfaces/baseModel.ts"
                },
                {
                    "name": "StatusModel",
                    "childs": [
                        {
                            "name": "Activo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "activo"
                        },
                        {
                            "name": "Inactivo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "inactivo"
                        },
                        {
                            "name": "Pediente",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pendiente"
                        },
                        {
                            "name": "Aprobado",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "aprobado"
                        },
                        {
                            "name": "Enviado",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "enviado"
                        },
                        {
                            "name": "Entregado",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "entregado"
                        },
                        {
                            "name": "Recibido",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "recibido"
                        },
                        {
                            "name": "Pagado",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pagado"
                        },
                        {
                            "name": "Facturado",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "facturado"
                        },
                        {
                            "name": "Vigente",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "vigente"
                        },
                        {
                            "name": "Habilitado",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "habilitado"
                        },
                        {
                            "name": "Anulado",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "anulado"
                        },
                        {
                            "name": "Rechazado",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "rechazado"
                        },
                        {
                            "name": "Expirado",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "expirado"
                        },
                        {
                            "name": "Finalizado",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "finalizado"
                        },
                        {
                            "name": "Abierto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "abierto"
                        },
                        {
                            "name": "Cerrado",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "cerrado"
                        },
                        {
                            "name": "Revisado",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "revisado"
                        },
                        {
                            "name": "Eliminado",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "eliminado"
                        },
                        {
                            "name": "PendientePago",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pendiente de pago"
                        },
                        {
                            "name": "PendienteFacturación",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pendiente de facturación"
                        },
                        {
                            "name": "PendienteEntrega",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pendiente de entrega"
                        },
                        {
                            "name": "PendienteRevision",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pendiente de revisión"
                        },
                        {
                            "name": "PendienteAprobacion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pendiente de aprobación"
                        },
                        {
                            "name": "PendienteEnvio",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pendiente de envío"
                        },
                        {
                            "name": "PendienteRecibo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pendiente de recibo"
                        },
                        {
                            "name": "PendienteCierre",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pendiente de cierre"
                        },
                        {
                            "name": "PendienteFinalizacion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pendiente de finalización"
                        },
                        {
                            "name": "PendienteAnulación",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pendiente de anulación"
                        },
                        {
                            "name": "PendienteRechazo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pendiente de rechazo"
                        },
                        {
                            "name": "Generada",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "generada"
                        },
                        {
                            "name": "PendienteAceptar",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pendiente aceptar"
                        },
                        {
                            "name": "Aceptada",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "aceptada"
                        },
                        {
                            "name": "Observada",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "observada"
                        },
                        {
                            "name": "Rechazada",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "rechazada"
                        },
                        {
                            "name": "Pagada",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pagada"
                        },
                        {
                            "name": "Anulada",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "anulada"
                        },
                        {
                            "name": "PorAnular",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "por anular"
                        },
                        {
                            "name": "Aplicada",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "aplicada"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/interfaces/baseModel.ts"
                }
            ],
            "src/app/shared/interfaces/clientBillingOption.ts": [
                {
                    "name": "ComprobantTypeEnum",
                    "childs": [
                        {
                            "name": "Factura",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "factura"
                        },
                        {
                            "name": "Boleta",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "boleta"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/interfaces/clientBillingOption.ts"
                }
            ],
            "src/app/shared/interfaces/contractResolution.ts": [
                {
                    "name": "ContractResolutionEntityEnum",
                    "childs": [
                        {
                            "name": "Empresa",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "empresa"
                        },
                        {
                            "name": "Cliente",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "cliente"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/interfaces/contractResolution.ts"
                },
                {
                    "name": "ContractResolutionTypeEnum",
                    "childs": [
                        {
                            "name": "Unilateral",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "unilateral"
                        },
                        {
                            "name": "MutuoAcuerdo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "mutuo acuerdo"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/interfaces/contractResolution.ts"
                }
            ],
            "src/app/shared/interfaces/documentType.ts": [
                {
                    "name": "DocumentTypeName",
                    "childs": [
                        {
                            "name": "Ruc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RUC"
                        },
                        {
                            "name": "Dni",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DNI"
                        },
                        {
                            "name": "CE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CARNE DE EXTRANJERÍA"
                        },
                        {
                            "name": "Otro",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "OTRO"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/interfaces/documentType.ts"
                }
            ],
            "src/app/shared/interfaces/fetch.ts": [
                {
                    "name": "FetchErrorType",
                    "childs": [
                        {
                            "name": "HTTP",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "HttpErrorResponse"
                        },
                        {
                            "name": "ABORT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "AbortError"
                        },
                        {
                            "name": "FAILED_FETCH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FailedFetch"
                        },
                        {
                            "name": "UNKNOWN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "UnknownError"
                        },
                        {
                            "name": "CONFIRMATION_DIALOG",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ConfirmationDialogAborted"
                        },
                        {
                            "name": "TYPE_ERROR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "TypeError"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/interfaces/fetch.ts"
                }
            ],
            "src/app/core/services/database-storage.service.ts": [
                {
                    "name": "NameModuleDatabase",
                    "childs": [
                        {
                            "name": "BoxOpenings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "boxOpenings"
                        },
                        {
                            "name": "Banks",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "banks"
                        },
                        {
                            "name": "Users",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "users"
                        },
                        {
                            "name": "Taxes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "taxes"
                        },
                        {
                            "name": "DocumentTypes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "documentTypes"
                        },
                        {
                            "name": "Plans",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "plans"
                        },
                        {
                            "name": "VehicleTypes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "vehicleTypes"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/services/database-storage.service.ts"
                },
                {
                    "name": "Recurrent",
                    "childs": [
                        {
                            "name": "Hourly",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "hourly"
                        },
                        {
                            "name": "Daily",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "daily"
                        },
                        {
                            "name": "Weekly",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "weekly"
                        },
                        {
                            "name": "Monthly",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "monthly"
                        },
                        {
                            "name": "Yearly",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "yearly"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/services/database-storage.service.ts"
                }
            ],
            "src/app/shared/interfaces/contract.ts": [
                {
                    "name": "RecurrentTypeEnum",
                    "childs": [
                        {
                            "name": "MENSUAL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "mensual"
                        },
                        {
                            "name": "TRIMESTRAL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "trimestral"
                        },
                        {
                            "name": "SEMESTRAL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "semestral"
                        },
                        {
                            "name": "ANUAL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "anual"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/interfaces/contract.ts"
                }
            ],
            "src/app/shared/interfaces/taxe.ts": [
                {
                    "name": "TaxeName",
                    "childs": [
                        {
                            "name": "Igv",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "IGV"
                        },
                        {
                            "name": "TipoDeCambio",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "TIPO DE CAMBIO"
                        },
                        {
                            "name": "Renta",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RENTA"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/interfaces/taxe.ts"
                }
            ],
            "src/app/shared/utilities/verifiyThemeApp.ts": [
                {
                    "name": "ThemeColorName",
                    "childs": [
                        {
                            "name": "YELLOW",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "yellow"
                        },
                        {
                            "name": "BLUE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "blue"
                        },
                        {
                            "name": "GREEN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "green"
                        },
                        {
                            "name": "ROSE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "rose"
                        },
                        {
                            "name": "RED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "red"
                        },
                        {
                            "name": "CYAN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "cyan"
                        },
                        {
                            "name": "PURPLE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "purple"
                        },
                        {
                            "name": "EMERALD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "emerald"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/utilities/verifiyThemeApp.ts"
                }
            ],
            "src/app/shared/interfaces/user.ts": [
                {
                    "name": "UserlevelEnum",
                    "childs": [
                        {
                            "name": "Master",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "Full",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "Standar",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        },
                        {
                            "name": "Basic",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 4
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/interfaces/user.ts"
                },
                {
                    "name": "UserRoleEnum",
                    "childs": [
                        {
                            "name": "PM",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pm"
                        },
                        {
                            "name": "KAM",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "kam"
                        },
                        {
                            "name": "MASTER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "master"
                        },
                        {
                            "name": "COMPRAS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "compras"
                        },
                        {
                            "name": "ALMACEN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "almacén"
                        },
                        {
                            "name": "TESORERÍA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "tesorería"
                        },
                        {
                            "name": "CONTABILIDAD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "contabilidad"
                        },
                        {
                            "name": "ADMINISTRACIÓN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "administración"
                        },
                        {
                            "name": "GESTIÓN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "gestión"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/interfaces/user.ts"
                }
            ],
            "src/app/shared/interfaces/vehicleUnsubscribe.ts": [
                {
                    "name": "VehicleUnsubscribeProgrammingType",
                    "childs": [
                        {
                            "name": "FinDeContrato",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "fin de contrato"
                        },
                        {
                            "name": "fechaFija",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "fecha fija"
                        },
                        {
                            "name": "indefinida",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "indefinida"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/interfaces/vehicleUnsubscribe.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/shared/components/item-list-template/item-list-template.component.ts": [
                {
                    "name": "ActionButtonActionsType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"clickEvent\" | \"routerLink\"",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "StyleButton",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"filled-button\" | \"tonal-button\" | \"text-button\" | \"outlined-button\" | \"elevated-button\" | \"icon-button\" | \"tonal-icon-button\" | \"filled-icon-button\" | \"outlined-icon-button\"",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TypeValueKeyItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"text\" | \"diff-date\" | \"date\" | \"number\" | \"email\" | \"phone\" | \"user\" | \"uppercase\" | \"lowercase\" | \"titlecase\" | \"first-letter-uppercase\" | \"list-format\" | \"currency\"",
                    "file": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/interfaces/itemDetail.ts": [
                {
                    "name": "ActionButtonType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"clickEvent\" | \"update\" | \"delete\" | \"restore\"",
                    "file": "src/app/shared/interfaces/itemDetail.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "StyleButton",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"filled-button\" | \"tonal-button\" | \"text-button\" | \"outlined-button\" | \"elevated-button\" | \"icon-button\" | \"tonal-icon-button\" | \"filled-icon-button\" | \"outlined-icon-button\"",
                    "file": "src/app/shared/interfaces/itemDetail.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/components/item-form-template/item-form-template.component.ts": [
                {
                    "name": "InputType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"select\" | \"select-local\" | \"select-server\" | \"date\" | \"date-range\" | \"text\" | \"number\" | \"textarea\" | \"checkbox\" | \"switch\" | \"autocomplete\" | \"autocomplete-local\" | \"autocomplete-server\"",
                    "file": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/utilities/fetchBase.ts": [
                {
                    "name": "InterceptErrors",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/shared/utilities/fetchBase.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "InterceptHeaders",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/shared/utilities/fetchBase.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "ProcessAfterCallRequest",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/shared/utilities/fetchBase.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "ProcessBeforeCallRequest",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/shared/utilities/fetchBase.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/sidenav/sidenav/sidenav.component.ts": [
                {
                    "name": "LateralPanelType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"maximum\" | \"minimum\"",
                    "file": "src/app/sidenav/sidenav/sidenav.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/stories/alert.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AlertTemplateComponent>",
                    "file": "src/stories/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/itemListTemplate.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ItemListTemplateComponent>",
                    "file": "src/stories/itemListTemplate.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/shared/utilities/verifiyThemeApp.ts": [
                {
                    "name": "TypeApareance",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"theme-color-yellow\" | \"theme-color-rose\" | \"theme-color-red\" | \"theme-color-blue\" | \"theme-color-green\"",
                    "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TypeDrawerApp",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"drawer-standard\" | \"drawer-dark-full\"",
                    "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TypeInputsApp",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"outlined\" | \"filled\" | \"default\"",
                    "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TypeTheme",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"dark\" | \"light\" | \"system-dark\" | \"system-light\"",
                    "file": "src/app/shared/utilities/verifiyThemeApp.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appareance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isLoggedGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isNotLoggedGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "masterRoleGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/database-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DatabaseStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/database-storage.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ModuleConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/database-storage.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StorageConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/database-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "base64ABuffer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/database-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bufferABase64",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/database-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "decrypt",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/database-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "encrypt",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/database-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INITIALIZATION_VECTOR_LONG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/database-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "passwordBasedKeyDerivation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/database-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SAL_LONG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/events.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EventsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/events.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/fetch.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FetchService",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/fetch.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RequestInitFetch",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/fetch.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ToastForFetch",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/toast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToastService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/login/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/login/components/login/login.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResponseLogin",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/accounts/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accountFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/accounts/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_ACCOUNT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/accounts/pages/account-create-page/account-create-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountCreatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/accounts/pages/account-detail-page/account-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/accounts/pages/account-edit-page/account-edit-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountEditPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/accounts/pages/account-list-page/account-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/box-movements/pages/box-movement-detail-page/box-movement-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoxMovementDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/box-movements/pages/box-movement-list-page/box-movement-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoxMovementListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/boxes/box-openings/pages/box-opening-create-page/box-opening-create-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoxOpeningCreatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/boxes/box-openings/pages/box-opening-list-page/box-opening-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoxOpeningListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/boxes/pages/box-create-page/box-create-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoxCreatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/boxes/pages/box-detail-page/box-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoxDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/boxes/pages/box-edit-page/box-edit-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoxEditPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/boxes/pages/box-form-page/box-form-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoxFormPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/boxes/pages/box-list-page/box-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoxListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/boxes/pages/box-view-page/box-view-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoxViewPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/documents/pages/document-create-page/document-create-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DocumentCreatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/documents/pages/document-detail-page/document-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DocumentDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/documents/pages/document-edit-page/document-edit-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DocumentEditPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/documents/pages/document-list-page/document-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DocumentListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/documents/pages/document-list-page/document-list-page.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExtDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/administration/documents/pages/document-view-page/document-view-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DocumentViewPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/banks/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bankFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/banks/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_BANK",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/banks/pages/bank-create-page/bank-create-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BankCreatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/banks/pages/bank-detail-page/bank-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BankDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/banks/pages/bank-edit-page/bank-edit-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BankEditPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/banks/pages/bank-list-page/bank-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BankListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/plans/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_PLAN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/plans/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "planFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/plans/pages/plan-create-page/plan-create-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlanCreatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/plans/pages/plan-detail-page/plan-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlanDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/plans/pages/plan-edit-page/plan-edit-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlanEditPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/plans/pages/plan-list-page/plan-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlanListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/taxes/components/taxes-list-card/taxes-list-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaxesListCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/taxes/components/taxes-list/taxes-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaxesListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/vehicle-types/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE_TYPE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/vehicle-types/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "vehicleTypeFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/vehicle-types/pages/vehicle-type-create-page/vehicle-type-create-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VehicleTypeCreatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/vehicle-types/pages/vehicle-type-detail-page/vehicle-type-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VehicleTypeDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/vehicle-types/pages/vehicle-type-edit-page/vehicle-type-edit-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VehicleTypeEditPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/vehicle-types/pages/vehicle-type-list-page/vehicle-type-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VehicleTypeListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/configuration/vehicle-types/pages/vehicle-type-view-page/vehicle-type-view-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VehicleTypeViewPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-accounts/pages/client-account-create-page/client-account-create-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientAccountCreatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-accounts/pages/client-account-detail-page/client-account-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientAccountDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-accounts/pages/client-account-edit-page/client-account-edit-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientAccountEditPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-accounts/pages/client-account-list-page/client-account-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientAccountListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-billing-options/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clientBillingOptionFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-billing-options/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_BILLING_OPTION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-billing-options/pages/client-billing-option-create-page/client-billing-option-create-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientBillingOptionCreatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-billing-options/pages/client-billing-option-detail-page/client-billing-option-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientBillingOptionDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-billing-options/pages/client-billing-option-edit-page/client-billing-option-edit-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientBillingOptionEditPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-business-units/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clientBusinessUnitFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-business-units/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_BUSINESS_UNIT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-business-units/pages/client-business-unit-create-page/client-business-unit-create-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientBusinessUnitCreatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-business-units/pages/client-business-unit-detail-page/client-business-unit-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientBusinessUnitDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-business-units/pages/client-business-unit-edit-page/client-business-unit-edit-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientBusinessUnitEditPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-business-units/pages/client-business-unit-list-page/client-business-unit-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientBusinessUnitListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-contacts/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clientContactFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-contacts/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_CLIENT_CONTACT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-contacts/pages/client-contact-create-page/client-contact-create-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientContactCreatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-contacts/pages/client-contact-detail-page/client-contact-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientContactDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-contacts/pages/client-contact-edit-page/client-contact-edit-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientContactEditPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-contacts/pages/client-contact-list-page/client-contact-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientContactListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-contracts/pages/client-contract-detail-page/client-contract-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientContractDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-contracts/pages/client-contract-list-page/client-contract-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientContractListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-documents/components/client-contract-document-item-form/client-contract-document-item-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientContractDocumentItemFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-documents/components/client-document-payment-form/client-document-payment-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientDocumentPaymentFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-documents/pages/client-document-contract-add/client-document-contract-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientDocumentContractAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-documents/pages/client-document-create/client-document-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientDocumentCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-documents/pages/client-document-create/client-document-create.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ItemFormDocumentContractItem",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-documents/pages/client-document-payment-create/client-document-payment-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientDocumentPaymentCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-documents/pages/client-document-payment-create/client-document-payment-create.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AmountsByClient",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-payments/components/client-payment-form-page/client-payment-form-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientPaymentFormPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-payments/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clientPaymentFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-payments/pages/client-payment-create-page/client-payment-create-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientPaymentCreatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-payments/pages/client-payment-list-page/client-payment-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientPaymentListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/client-vehicles/pages/client-vehicle-list-page/client-vehicle-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientVehicleListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clientFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_CLIENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/pages/client-create-page/client-create-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientCreatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/pages/client-detail-page/client-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/pages/client-edit-page/client-edit-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientEditPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/pages/client-list-page/client-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/clients/pages/client-view-page/client-view-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientViewPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/users/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_USER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/users/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/users/pages/user-create-page/user-create-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserCreatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/users/pages/user-detail-page/user-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/users/pages/user-edit-page/user-edit-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserEditPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/users/pages/user-list-page/user-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/organization/users/pages/user-view-page/user-view-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserViewPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/settings/components/settings-sidenav/settings-sidenav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsSidenavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/contract-vehicles/pages/contract-vehicle-list-page/contract-vehicle-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContractVehicleListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/contracts/components/contract-form/contract-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContractFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/contracts/contract-resolutions/components/contract-resolution-form/contract-resolution-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContractResolutionFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/contracts/contract-resolutions/pages/contract-resolution-create/contract-resolution-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContractResolutionCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/contracts/contract-resolutions/pages/contract-resolution-detail/contract-resolution-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContractResolutionDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/contracts/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "contractColumnsList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/contracts/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getContractFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/contracts/pages/contract-create-page/contract-create-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContractCreatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/contracts/pages/contract-detail-page/contract-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContractDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/contracts/pages/contract-edit-page/contract-edit-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContractEditPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/contracts/pages/contract-list-page/contract-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContractListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/contracts/pages/contract-view-page/contract-view-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContractViewPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/vehicles/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/vehicles/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "vehicleFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/vehicles/pages/vehicle-create-page/vehicle-create-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VehicleCreatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/vehicles/pages/vehicle-detail-page/vehicle-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VehicleDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/vehicles/pages/vehicle-edit-page/vehicle-edit-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VehicleEditPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/vehicles/pages/vehicle-list-page/vehicle-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VehicleListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/vehicles/pages/vehicle-view-page/vehicle-view-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VehicleViewPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/vehicles/vehicle-unsubscribes/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_DISPLAY_FIELDS_FORM_VEHICLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/vehicles/vehicle-unsubscribes/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "vehicleUnsubscribeFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/vehicles/vehicle-unsubscribes/pages/vehicle-unsubscribe-create-page/vehicle-unsubscribe-create-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VehicleUnsubscribeCreatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/vehicles/vehicle-unsubscribes/pages/vehicle-unsubscribe-edit-page/vehicle-unsubscribe-edit-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VehicleUnsubscribeEditPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tracking/vehicles/vehicle-unsubscribes/pages/vehicle-unsubscribe-list-page/vehicle-unsubscribe-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VehicleUnsubscribeListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/paginator.intl.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CustomPaginator",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/alert-template/alert-template.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertTemplateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/alert-template/alert-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AlertConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/confirm-dialog-template/confirm-dialog-template.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmDialogTemplateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/confirm-dialog-template/confirm-dialog-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfirmDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/datepicker-template/datepicker-template.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatepickerTemplateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/datepicker-template/datepicker-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfigurationDatepickerTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/error-template/error-template.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorTemplateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-autocomplete-template/input-autocomplete-template.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputAutocompleteTemplateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-autocomplete-template/input-autocomplete-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ButtonAddInputAutocomplete",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-autocomplete-template/input-autocomplete-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InputAutocompleteConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-autocomplete-template/input-autocomplete-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InputAutocompleteLocalConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-autocomplete-template/input-autocomplete-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InputAutocompleteServerConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-autocomplete-template/input-autocomplete-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RouterLinkInputAutocomplete",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-select-template/input-select-template.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputSelectTemplateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-select-template/input-select-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ButtonAddInputSelect",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-select-template/input-select-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InputSelectConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-select-template/input-select-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InputSelectLocalConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-select-template/input-select-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InputSelectServerConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-detail-template/item-detail-template.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemDetailTemplateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-detail-template/item-detail-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TextDetail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-detail-template/item-detail-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerDataGroupDetail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-detail-template/item-detail-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "textDetail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemFormTemplateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AutocompleteConfigurationExt",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AutocompleteLocalConfigurationExt",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AutocompleteServerConfigurationExt",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CheckboxFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DateFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DateRangeFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FileFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormInput",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ItemFormConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NumberFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectConfigurationExt",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectLocalConfigurationExt",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectServerConfigurationExt",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SwitchFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TextareaFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TextFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "autocompleteFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "autocompleteLocalFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "autocompleteServerFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkboxFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dateFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dateRangeFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fileFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "numberFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLocalFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectServerFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "switchFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "textareaFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-form-template/item-form-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "textFormInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/execute-function-list.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ExecuteFunctionListPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemListTemplateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/52",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActionButton",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClickEventActionButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DateListColumn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HtmlListColumn",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ImageListColumn",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ItemListConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ListColumn",
                "coveragePercent": 90,
                "coverageCount": "20/22",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ListFormatListColumn",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ListItemExtended",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NumberListColumn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RouterLinkActionButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RouterLinkCreateButton",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RouterLinkItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectableActionButton",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SimpleListColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SimpleListColumn2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StringListColumn",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clickEventActionButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DATA_TYPE_LIST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dateColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultListFilterInputs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteItemActionButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "diffDateColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editItemActionButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "emailColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "firstLetterUppercaseColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "htmlColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "imageColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "itemCreatedAtColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "itemNameAndDescriptionColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "itemStatusColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "itemUpdatedAtColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "KEY_GET_ITEMS_PAGINATOR_LIST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "KEY_GET_TOTAL_ITEMS_PAGINATOR_LIST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "listFormatColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lowercaseColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "numberColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "phoneColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "restoreItemActionButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routerLinkActionButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectableActionButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "simpleListColumns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "textColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "titlecaseColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uppercaseColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/item-list-template.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "viewItemActionButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-list-template/rename-title-column-list.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "RenameTitleColumnListPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-view-template/item-view-template.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemViewTemplateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-view-template/item-view-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ItemViewConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-view-template/item-view-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LinkNavProfile",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/panel-drawer-template/panel-drawer-template.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PanelDrawerTemplateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/panel-drawer-template/panel-drawer-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PanelSidenavConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/panel-drawer-template/panel-drawer-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PanelSidenavGroup",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/panel-drawer-template/panel-drawer-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PanelSidenavLink",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/panel-drawer-template/panel-drawer-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PanelSidenavLinkRouter",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select-file/select-file.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectFileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select-file/select-file.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InputFileConfiguration",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/shared/components/snackbar-template/snackbar-template.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnackbarTemplateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/snackbar-template/snackbar-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataSnackbar",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/spinner-default/spinner-default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerDefaultComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/autofocus-directive.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AutofocusDirectiveDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/handle-file-input.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HandleFileInputDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/handle-file-input.directive.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HandleFileEvent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/load-image-private.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LoadImagePrivateDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/navigate-lateral-panel-outlet.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NavigateLateralPanelOutletDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/navigate-right-outlet.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NavigateRightOutletDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataPerson",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getDataPersonFormDocumentNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getDocumentType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getTaxe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/account.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Account",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/bank.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Bank",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/baseModel.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BaseModel",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/baseModel.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COIN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/baseModel.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DOCUMENT_TYPES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/baseModel.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USER_ROLES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/box.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Box",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/boxMovement.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BoxMovement",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/boxOpening.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BoxOpening",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/client.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Client",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/clientAccount.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClientAccount",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/clientBillingOption.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClientBillingOption",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/clientBillingOption.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPROBANT_TYPES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/clientBusinessUnit.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClientBusinessUnit",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/clientContact.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClientContact",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/clientPayment.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClientPayment",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/contract.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Contract",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/contract.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RECURRENT_TYPE_VALUES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/contractDocumentItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ContractDocumentItem",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/contractResolution.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ContractResolution",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/contractResolution.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONTRACT_RESOLUTION_ENTITY_VALUES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/contractResolution.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONTRACT_RESOLUTION_TYPE_VALUES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/contractVehicle.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ContractVehicle",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/document.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Document",
                "coveragePercent": 0,
                "coverageCount": "0/73",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/documentItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DocumentItem",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/documentType.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DocumentType",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/fetch.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FetchErrorResponse",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/fetch.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RequestInitFetch",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/fetch.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultMessageDialogCreateItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/fetch.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultMessageDialogDeleteItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/fetch.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultMessageDialogUpdateItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/fetch.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HTTP_ERROR_CODES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/fetch.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NAME_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/itemDetail.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActionButton",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/itemDetail.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ItemDetail",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/itemDetail.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ItemDetailConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/itemDetail.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ItemDetailGroup",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/itemDetail.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RouterLinkItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/notification.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Notification",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/paginator.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PaginatorData",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/plan.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Plan",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/taxe.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Taxe",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/toast.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ToastDataPromise",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/toast.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ToastDataSimple",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/toast.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ToastStatusPromise",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataDNI",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataRUC",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RepresentanteLegal",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserToken",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/vehicle.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Vehicle",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/vehicleType.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "VehicleType",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/vehicleUnsubscribe.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "VehicleUnsubscribe",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/vehicleUnsubscribe.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VEHICLE_UNSUBSCRIBE_PROGRAMMING_TYPE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/color-status-active.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ColorStatusActivePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/diff-date.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DiffDatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/enable-quotation.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "EnableQuotationPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/execute-function.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ExecuteFunctionPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/first-letter-name.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FirstLetterNamePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/first-letter-uppercase.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FirstLetterUppercasePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/generate-path-url.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GeneratePathUrlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/get-document-type.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GetDocumentTypePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/get-item-from-local-data.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GetItemFromLocalDataPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/get-key-item.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GetKeyItemPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/get-mixed-value.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GetMixedValuePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/get-name-month.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GetNameMonthPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/get-user-by-id.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GetUserByIdPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/hidden-option-button-row.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "HiddenOptionButtonRowPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/image-mime-type-file.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ImageMimeTypeFilePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/index-list.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "IndexListPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/list-format.pipe.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ListFormatOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/list-format.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ListFormatPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/name-level-user.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "NameLevelUserPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/name-mime-type-file.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "NameMimeTypeFilePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/parse-string-date.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ParseDatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/path-files-server.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PathFilesServerPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/public-path-server.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PublicPathServerPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/auth.utilities.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NAME_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/fetchBase.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FetchBase",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/myDateAdapter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MyDateAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/myDateFormat.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MY_DATE_FORMATS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/queryParams.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "objectToURLSearchParams",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/verifiyThemeApp.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getApareanceApp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/verifiyThemeApp.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getApareanceDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/verifiyThemeApp.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getApareanceInputs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/verifiyThemeApp.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getThemeApp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/verifiyThemeApp.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setApareanceApp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/verifiyThemeApp.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setApareanceDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/verifiyThemeApp.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setApareanceInputs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/verifiyThemeApp.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setConfigApp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/verifiyThemeApp.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setThemeApp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/verifiyThemeApp.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THEME_COLOR_NAMES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sidenav/apps-menu/apps-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppsMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sidenav/notifications-menu/notifications-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationsMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/sidenav/profile-menu/profile-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/sidenav/profile-menu/profile-menu.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Configurations",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/sidenav/profile-menu/profile-menu.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THEME_COLORS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sidenav/settings-menu/settings-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sidenav/sidenav/sidenav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidenavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/sidenav/sidenav/sidenav.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DrawerLink",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/sidenav/sidenav/sidenav.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EventGlobalSearch",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/sidenav/sidenav/sidenav.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GroupDrawerLink",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/sidenav/sidenav/sidenav.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DRAWER_LINKS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sidenav/sidenav/sidenav.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NAME_EVENT_GLOBAL_SEARCH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tertiary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithCloseButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithOutTitle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/itemListTemplate.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockActivatedRoute",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/itemListTemplate.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/itemListTemplate.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Selectable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/itemListTemplate.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Simple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}